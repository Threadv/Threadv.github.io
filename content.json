{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[{"title":"书单","date":"2021-09-23T07:40:32.847Z","updated":"2021-09-22T11:32:16.380Z","comments":false,"path":"books/index.html","permalink":"http://example.com/books/index.html","excerpt":"","text":""},{"title":"404 Not Found：该页无法显示","date":"2021-09-23T07:40:32.875Z","updated":"2021-09-22T11:32:16.379Z","comments":false,"path":"/404.html","permalink":"http://example.com/404.html","excerpt":"","text":""},{"title":"友情链接","date":"2021-09-23T07:40:32.835Z","updated":"2021-09-22T11:32:16.381Z","comments":true,"path":"links/index.html","permalink":"http://example.com/links/index.html","excerpt":"","text":""},{"title":"关于","date":"2021-09-23T07:40:32.856Z","updated":"2021-09-22T11:32:16.380Z","comments":false,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"分类","date":"2021-09-23T07:40:32.841Z","updated":"2021-09-22T11:32:16.380Z","comments":false,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2021-09-23T07:40:32.829Z","updated":"2021-09-22T11:32:16.381Z","comments":false,"path":"repository/index.html","permalink":"http://example.com/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-09-23T07:40:32.821Z","updated":"2021-09-22T11:32:16.382Z","comments":false,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"linux—shell","slug":"linux/linux_shell","date":"2020-05-17T05:02:19.000Z","updated":"2021-09-22T11:19:04.633Z","comments":true,"path":"2020/05/17/linux/linux_shell/","link":"","permalink":"http://example.com/2020/05/17/linux/linux_shell/","excerpt":"","text":"linux—shell 文件 12345678910111213141516❖ 磁盘与⽬录：df、ls、cd、pwd、$PWD ❖ ⽂件编辑：交互编辑vim、流式编辑器 sed ❖ ⽂件权限：chmod、chown ❖ ⽂件搜索：ﬁnd ❖ ⽂件内容：cat、more、less、grep ❖ 特殊⽂件：软链、socket：进程通讯、管道：进程通讯# 文件权限❖ ls -l 查看权限 ❖ ⽂件、⽬录 ❖ ⽤户、组 ❖ 读、写、执⾏、SUID、SGID ❖ chmod：修改文件文件夹权限 ❖ chgrp：修改归属组❖ chown：修改用户权限 进程 12❖ top cpu使用情况 ❖ ps 查看进程 网络 1❖ netstat -tlnp 123456789(No info could be read for &quot;-p&quot;: geteuid()=2313 but you should be root.)Active Internet connections (only servers)Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program nametcp 0 0 0.0.0.0:9992 0.0.0.0:* LISTEN -tcp 0 0 127.0.0.1:9000 0.0.0.0:* LISTEN -tcp 0 0 127.0.0.1:9101 0.0.0.0:* LISTEN -tcp 0 0 0.0.0.0:9102 0.0.0.0:* LISTEN -tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN -tcp 0 0 0.0.0.0:9009 0.0.0.0:* LISTEN - 1❖ netstat -tnp 12345678(No info could be read for &quot;-p&quot;: geteuid()=2313 but you should be root.)Active Internet connections (w/o servers)Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program nametcp 0 0 127.0.0.1:25 127.0.0.1:59170 TIME_WAIT -tcp 0 0 172.19.147.8:22 183.39.174.181:48950 ESTABLISHED -tcp 0 1 172.19.147.8:35712 101.132.159.87:25 SYN_SENT -tcp 0 0 127.0.0.1:9101 127.0.0.1:59622 TIME_WAIT -tcp 0 0 172.19.147.8:22 114.95.222.59:55940 ESTABLISHED - Shell 输⼊输出 123456❖ Read ⽤来读取输⼊，并赋值给变量 ❖ echo ，printf可以简单输出变量。 ❖ &gt; ﬁle 将输出重定向到另⼀个⽂件 ❖ &gt;&gt; 表⽰追加 等价于tee -a ❖ &lt; ﬁle 输⼊重定向 ❖ | 表⽰管道，也就是前⼀个命令的输出传⼊下⼀个命令的输⼊","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://example.com/tags/linux/"}]},{"title":"linux-awk\\sed 示例","slug":"linux/linux_awk_sed","date":"2020-05-16T07:02:19.000Z","updated":"2021-09-22T11:19:04.633Z","comments":true,"path":"2020/05/16/linux/linux_awk_sed/","link":"","permalink":"http://example.com/2020/05/16/linux/linux_awk_sed/","excerpt":"","text":"linux-awk\\sed 示例 统计ip出现的次数 123456789awk &#x27;&#123;print $1&#125;&#x27; nginx.log | sort | uniq -c | sort -nr | head -n 10awk &#x27;&#123;print $1&#125;&#x27; nginx.log | sort | uniq -c | sort -nr | head -10说明：sort 排序 uniq -c 合并相邻相同的并统计sort 排序 -n 按照数值排序 -r反序head 取值多少 12# 匹配 错误日志：awk &#x27;$9~/500|404/&#123;print $0&#125;&#x27; nginx.log 访问量最高的url 1234567891011awk &#x27;&#123;print $7&#125;&#x27; nginx.log|sed -e &#x27;s/\\?.*//g&#x27; \\ -e &#x27;s/\\/avatar\\/[0-9]*/\\/avatar\\/int/g&#x27; \\ -e &#x27;s/\\topcs\\/[0-9]*/\\/topics\\/int/g&#x27; \\ -e &#x27;s/\\/replies\\/[0-9]*/\\/replies\\/int/g&#x27; \\ -e &#x27;s/\\/[0-9a-z\\-]*\\.png/\\id.png/g&#x27; \\ -e &#x27;s/\\/[0-9a-z\\-]*\\.jpg/\\/id.jpg/g&#x27; \\ -e &#x27;s/\\/[0-9a-z\\-]*\\.jepg/\\/id.jepg/g&#x27; \\ -e &#x27;s/\\/[0-9a-z\\-]*\\.gif/\\/id.gif/g&#x27; |sort | uniq -c | sort -nr nginx.log 12345678910111213141516171819202122232425262728293031323334353637383940223.104.7.59 - - [05/Dec/2018:00:00:01 +0000] &quot;GET /topics/17112 HTTP/2.0&quot; 200 9874 &quot;https://www.googleapis.com/auth/chrome-content-suggestions&quot; &quot;Mozilla/5.0 (iPhone; CPU iPhone OS 12_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) CriOS/70.0.3538.75 Mobile/15E148 Safari/605.1&quot; 0.040 0.040 .123.125.71.60 - - [05/Dec/2018:00:00:02 +0000] &quot;GET /yuanyibo/topics?locale=en HTTP/1.1&quot; 200 12164 &quot;-&quot; &quot;Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)&quot; 0.032 0.032 .141.8.142.131 - - [05/Dec/2018:00:00:02 +0000] &quot;GET /topics?page=63 HTTP/1.1&quot; 200 16739 &quot;-&quot; &quot;Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)&quot; 0.120 0.120 .139.180.131.123 - - [05/Dec/2018:00:00:01 +0000] &quot;GET /cable HTTP/1.1&quot; 101 15073 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36&quot; 592.015 592.015 .40.77.167.60 - - [05/Dec/2018:00:00:03 +0000] &quot;GET /hehe123 HTTP/1.1&quot; 200 3494 &quot;-&quot; &quot;Mozilla/5.0 (iPhone; CPU iPhone OS 7_0 like Mac OS X) AppleWebKit/537.51.1 (KHTML, like Gecko) Version/7.0 Mobile/11A465 Safari/9537.53 (compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm)&quot; 0.033 0.033 .204.141.42.226 - - [05/Dec/2018:00:00:04 +0000] &quot;GET / HTTP/1.1&quot; 301 5 &quot;-&quot; &quot;Site24x7&quot; 0.002 0.002 .40.77.167.60 - - [05/Dec/2018:00:00:04 +0000] &quot;GET /uploads/user/avatar/11094.jpg!xs HTTP/1.1&quot; 200 1499 &quot;-&quot; &quot;Mozilla/5.0 (compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm)&quot; 0.011 0.011 .127.0.0.1 - - [05/Dec/2018:00:00:04 +0000] &quot;GET /_img/uploads/user/avatar/11094.jpg!xs HTTP/1.0&quot; 200 1499 &quot;-&quot; &quot;Mozilla/5.0 (compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm)&quot; 0.011 - .139.180.131.123 - - [05/Dec/2018:00:00:01 +0000] &quot;GET /cable HTTP/1.1&quot; 101 7549 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36&quot; 587.602 587.602 .117.136.39.87 - - [05/Dec/2018:00:00:01 +0000] &quot;GET /uploads/user/avatar/12759.jpg!large HTTP/1.1&quot; 200 1866441 &quot;-&quot; &quot;okhttp/3.2.0&quot; 3.910 1.336 .121.15.166.147 - - [05/Dec/2018:00:00:07 +0000] &quot;GET /cable HTTP/1.1&quot; 101 335037 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36&quot; 26471.138 26471.138 .219.142.131.122 - - [05/Dec/2018:00:00:07 +0000] &quot;GET /cable HTTP/1.1&quot; 101 361523 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.103 Safari/537.36 Vivaldi/2.1.1337.47&quot; 28563.286 28563.286 .61.132.54.2 - - [05/Dec/2018:00:00:07 +0000] &quot;GET /cable HTTP/1.1&quot; 101 380979 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.89 Safari/537.36&quot; 30102.676 30102.676 .103.75.152.102 - - [05/Dec/2018:00:00:07 +0000] &quot;GET /cable HTTP/1.1&quot; 101 424907 &quot;-&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36&quot; 33572.810 33572.810 .222.66.96.129 - - [05/Dec/2018:00:00:07 +0000] &quot;GET /cable HTTP/1.1&quot; 101 424907 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36&quot; 33573.471 33573.471 .180.168.166.28 - - [05/Dec/2018:00:00:07 +0000] &quot;GET /cable HTTP/1.1&quot; 101 424907 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36&quot; 33573.628 33573.628 .114.94.126.62 - - [05/Dec/2018:00:00:07 +0000] &quot;GET /cable HTTP/1.1&quot; 101 510141 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.62 Safari/537.36&quot; 40313.333 40313.333 .61.135.169.90 - - [05/Dec/2018:00:00:07 +0000] &quot;GET /cable HTTP/1.1&quot; 101 531953 &quot;-&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36&quot; 42038.134 42038.134 .120.36.255.107 - - [05/Dec/2018:00:00:07 +0000] &quot;GET /cable HTTP/1.1&quot; 101 580604 &quot;-&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36&quot; 45876.266 45876.266 .14.21.33.152 - - [05/Dec/2018:00:00:07 +0000] &quot;GET /cable HTTP/1.1&quot; 101 580631 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36&quot; 45884.878 45884.878 .103.218.216.115 - - [05/Dec/2018:00:00:07 +0000] &quot;GET /cable HTTP/1.1&quot; 101 593019 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36&quot; 46865.329 46865.329 .124.200.99.162 - - [05/Dec/2018:00:00:07 +0000] &quot;GET /cable HTTP/1.1&quot; 101 593019 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36&quot; 46865.485 46865.485 .101.95.128.162 - - [05/Dec/2018:00:00:07 +0000] &quot;GET /cable HTTP/1.1&quot; 101 593106 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36&quot; 46865.503 46865.503 .45.120.31.9 - - [05/Dec/2018:00:00:07 +0000] &quot;GET /cable HTTP/1.1&quot; 101 636757 &quot;-&quot; &quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:63.0) Gecko/20100101 Firefox/63.0&quot; 50322.346 50322.346 .125.46.24.19 - - [05/Dec/2018:00:00:07 +0000] &quot;GET /cable HTTP/1.1&quot; 101 941 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.1; WOW64; rv:63.0) Gecko/20100101 Firefox/63.0&quot; 65.038 65.038 .220.178.67.222 - - [05/Dec/2018:00:00:07 +0000] &quot;GET /cable HTTP/1.1&quot; 101 14089 &quot;-&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36 QQBrowser/4.4.116.400&quot; 1104.968 1104.968 .122.225.218.44 - - [05/Dec/2018:00:00:07 +0000] &quot;GET /cable HTTP/1.1&quot; 101 18725 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.81 Safari/537.36&quot; 1471.999 1471.999 .206.16.17.150 - - [05/Dec/2018:00:00:07 +0000] &quot;GET /cable HTTP/1.1&quot; 101 64135 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36&quot; 5061.106 5061.106 .202.189.3.9 - - [05/Dec/2018:00:00:07 +0000] &quot;GET /cable HTTP/1.1&quot; 101 80703 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.1; WOW64; rv:63.0) Gecko/20100101 Firefox/63.0&quot; 6370.541 6370.541 .14.17.22.35 - - [05/Dec/2018:00:00:07 +0000] &quot;GET /cable HTTP/1.1&quot; 101 91115 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84 Safari/537.36&quot; 7190.962 7190.962 .114.80.11.236 - - [05/Dec/2018:00:00:07 +0000] &quot;GET /cable HTTP/1.1&quot; 101 169319 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36&quot; 13372.959 13372.959 .221.226.97.96 - - [05/Dec/2018:00:00:07 +0000] &quot;GET /cable HTTP/1.1&quot; 101 182087 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36&quot; 14383.058 14383.058 .115.236.48.202 - - [05/Dec/2018:00:00:07 +0000] &quot;GET /cable HTTP/1.1&quot; 101 215196 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.26 Safari/537.36 Core/1.63.6776.400 QQBrowser/10.3.2601.400&quot; 16992.246 16992.246 .153.37.218.54 - - [05/Dec/2018:00:00:07 +0000] &quot;GET /cable HTTP/1.1&quot; 101 261583 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36&quot; 20663.731 20663.731 .171.43.191.215 - - [05/Dec/2018:00:00:07 +0000] &quot;GET /cable HTTP/1.1&quot; 101 273021 &quot;-&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36&quot; 21568.749 21568.749 .136.243.151.90 - - [05/Dec/2018:00:00:07 +0000] &quot;GET /topics/16689/replies/124751/edit HTTP/1.1&quot; 302 100 &quot;-&quot; &quot;Mozilla/5.0 (compatible; BLEXBot/1.0; +http://webmeup-crawler.com/)&quot; 0.009 0.009 .136.243.151.90 - - [05/Dec/2018:00:00:07 +0000] &quot;GET / HTTP/1.1&quot; 200 10085 &quot;-&quot; &quot;Mozilla/5.0 (compatible; BLEXBot/1.0; +http://webmeup-crawler.com/)&quot; 0.071 0.071 .117.136.39.87 - - [05/Dec/2018:00:00:07 +0000] &quot;GET /oauth/authorize?response_type=code&amp;client_id=6dbe4244&amp;state=E3ZYKC1T6H2yP4z&amp;redirect_uri=urn:ietf:wg:oauth:2.0:oob HTTP/1.1&quot; 302 115 &quot;-&quot; &quot;Mozilla/5.0 (Linux; Android 8.1.0; COL-AL10 Build/HUAWEICOL-AL10; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/68.0.3440.91 Mobile Safari/537.36&quot; 0.004 0.004 .115.236.50.18 - - [05/Dec/2018:00:00:07 +0000] &quot;GET /cable HTTP/1.1&quot; 404 45 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36&quot; 0.004 0.004 .123.121.16.2 - - [05/Dec/2018:00:00:07 +0000] &quot;GET /cable HTTP/1.1&quot; 101 5349 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:56.0) Gecko/20100101 Firefox/56.0&quot; 415.053 415.053 .","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://example.com/tags/linux/"}]},{"title":"linux—bash","slug":"linux/linux_bash","date":"2020-04-11T07:02:19.000Z","updated":"2021-09-22T11:19:04.633Z","comments":true,"path":"2020/04/11/linux/linux_bash/","link":"","permalink":"http://example.com/2020/04/11/linux/linux_bash/","excerpt":"","text":"bash： 变量 1234a=1b=&quot;hello world&quot;c=&quot;hello world&quot; ❖ = 左右不要有空格 ❖ 如果内容有空格，需要使⽤单引号或者双引号 ❖ 双引号⽀持转义 $开头的变量会被⾃动替换 变量使用 123echo $a echo $&#123;b&#125;echo &quot;$c&quot; ❖ 使⽤$var 或 var来访问变量。后者更为严谨。{var}来访问变量。后者更为严谨。var来访问变量。后者更为严谨。var_x ${var}_x 是不同的。 ❖ 变量不需要定义也可以使⽤。引⽤未定义的变量，默认为空值。 预定义变量 123456echo $PWD echo $USER echo $HOME echo ~ echo $PATH echo $RANDOM 1234❖ 双引号⽤于括起⼀段字符串值，⽀持$var形式的变量替换 ❖ 单引号也表⽰其内容是字符串值，不⽀持转义 ❖ &#123;1..10&#125; 等价于 seq 1 10，表⽰1到10 ❖ seq 1 3 10 表⽰⽣成⼀个1到10，步进为3 变量类型 12345字符串 a=&quot;xx&quot; 数字 i=1314 布尔 true false 数组 array=(a b c) 函数 foo() &#123; echo hello world &#125;","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://example.com/tags/linux/"}]},{"title":"go基础知识","slug":"go基础","date":"2020-03-16T11:20:35.000Z","updated":"2021-09-22T11:19:04.615Z","comments":true,"path":"2020/03/16/go基础/","link":"","permalink":"http://example.com/2020/03/16/go%E5%9F%BA%E7%A1%80/","excerpt":"","text":"go基础知识 12345678package mainimport &quot;fmt&quot;func main() &#123; fmt.Println(&quot;Hello, World!&quot;)&#125; 每个Go应用程序都包含一个名为 main 的包 “{” 不能在单独的一行 import的包如果下面没有使用到的话会报错;变量同是如此 变量声明 在 Go 语言中，采用的是后置类型的声明方式 1&lt;命名&gt; &lt;类型&gt; 1x int // 定义 x 为整数类型 在 Go 语言中通常我们使用关键字 var 来声明变量 123var x int // 表示声明一个名为 x 的整数变量var b int = 1 // 表示声明一个名为 b 的整数变量，并且附上初始值为 1var b = 1 可同时声明 1234var ( a, b int // 同时声明 a, b 的整数 c float64) 简短声明方式 12a := 1 // 声明 a 为 1 的整数b := int64(1) // 声明 b 为 1 的 64 位整数 常量定义 常量指定的值类型主要有三类： 布尔，数字，字符串， 其中数字类型包含（rune, integer, floating-point, complex), 它们都属于基本数据类型。 不能使用 := 123456const a = 64 // 定义常量值为 64 的值const ( b = 4 c = 0.1) Go 语言中的基本数据类型 12345678910111213141516171819202122232425bool the set of boolean (true, false)uint8 the set of all unsigned 8-bit integers (0 to 255)uint16 the set of all unsigned 16-bit integers (0 to 65535)uint32 the set of all unsigned 32-bit integers (0 to 4294967295)uint64 the set of all unsigned 64-bit integers (0 to 18446744073709551615)int8 the set of all signed 8-bit integers (-128 to 127)int16 the set of all signed 16-bit integers (-32768 to 32767)int32 the set of all signed 32-bit integers (-2147483648 to 2147483647)int64 the set of all signed 64-bit integers (-9223372036854775808 to 9223372036854775807)float32 the set of all IEEE-754 32-bit floating-point numbersfloat64 the set of all IEEE-754 64-bit floating-point numberscomplex64 the set of all complex numbers with float32 real and imaginary partscomplex128 the set of all complex numbers with float64 real and imaginary partsbyte alias for uint8rune alias for int32uint either 32 or 64 bitsint same size as uintuintptr an unsigned integer large enough to store the uninterpreted bits of a pointer valuestring the set of string value (eg: &quot;hi&quot;) 布尔类型 12345var a boolvar a = truea := trueconst a = true 数字类型 12345678var ( a uint8 = 1 b int8 = 1)var ( c int = 64) 字符串 1234567891011121314151617var a = &quot;hello&quot; //单行字符串var c = &quot;\\&quot;&quot; // 转义符var b = `hello` //原样输出var d = `line3 //多行输出line1line2`var str = &quot;hello, 世界&quot;b := str[0] //b is a uint8 type, like bytefmt.Println(b) // 104fmt.Println(string(b)) // hfmt.Println(len(str)) //12, 查看字符串有多少个字节fmt.Println(len([]rune(str))) // 8 查看有多少个字符 特殊类型 byte，uint8 别名，用于表示二进制数据的 bytes rune，int32 别名, 用于表示一个符号 12345var str = &quot;hello, 世界&quot;for _, char := range str &#123; fmt.Printf(&quot;%T&quot;, char)&#125; 运算符 位运算 按位与&amp;： T（true）替换为 1， F（false）替换为 0 12341 &amp; 1 -&gt; 11 &amp; 0 -&gt; 00 &amp; 1 -&gt; 00 &amp; 0 -&gt; 0 按位或 |： T（true）替换为 1， F（false）替换为 0 12341 | 1 -&gt; 11 | 0 -&gt; 10 | 1 -&gt; 10 | 0 -&gt; 0 按位异或 ^： 相同为0，不同为1 12341 ^ 1 -&gt; 01 ^ 0 -&gt; 10 ^ 1 -&gt; 10 ^ 0 -&gt; 0 逻辑运算符 非运算符：! 12!T -&gt; false!F -&gt; true 和运算符：&amp;&amp; 1234T &amp;&amp; T -&gt; trueT &amp;&amp; F -&gt; falseF &amp;&amp; T -&gt; falseF &amp;&amp; F -&gt; false 或运算符：|| 1234T || T -&gt; trueT || F -&gt; trueF || T -&gt; trueF || F -&gt; fals 算术运算符 常见可用于整数和浮点数的二元运算符有 +、-、* 和 /。 / 对与整数运算而言，结果依旧为整数，例如：9 / 4 -&gt; 2。 取余运算符只能作用于整数：9 % 4 -&gt; 1。 可以将语句 b = b + a 简写为 b+=a，同样的写法也可用于 -=、*=、/=、%= 对于整数和浮点数，你可以使用一元运算符 ++（递增）和 --（递减），但只能用于后缀： 12i++ -&gt; i += 1 -&gt; i = i + 1i-- -&gt; i -= 1 -&gt; i = i - 1 带有 ++ 和 – 的只能作为语句，而非表达式，因此 n = i++ 这种写法是无效的，其它像 f(i++) 或者 a[i]=b[i++] 这些可以用于 C、C++ 和 Java 中的写法在 Go 中也是不允许的。 运算符与优先级 ↑ 12345678优先级 运算符 7 ^ ! 6 * / % &lt;&lt; &gt;&gt; &amp; &amp;^ 5 + - | ^ 4 == != &lt; &lt;= &gt;= &gt; 3 &lt;- 2 &amp;&amp; 1 || 时间和日期 123456789101112131415161718192021222324252627package mainimport ( &quot;fmt&quot; &quot;time&quot;)var week time.Durationfunc main() &#123; t := time.Now() fmt.Println(t) // e.g. Wed Dec 21 09:52:14 +0100 RST 2011 fmt.Printf(&quot;%02d.%02d.%4d\\n&quot;, t.Day(), t.Month(), t.Year()) // 21.12.2011 t = time.Now().UTC() fmt.Println(t) // Wed Dec 21 08:52:14 +0000 UTC 2011 fmt.Println(time.Now()) // Wed Dec 21 09:52:14 +0100 RST 2011 // calculating times: week = 60 * 60 * 24 * 7 * 1e9 // must be in nanosec week_from_now := t.Add(week) fmt.Println(week_from_now) // Wed Dec 28 08:52:14 +0000 UTC 2011 // formatting times: fmt.Println(t.Format(time.RFC822)) // 21 Dec 11 0852 UTC fmt.Println(t.Format(time.ANSIC)) // Wed Dec 21 08:56:34 2011 fmt.Println(t.Format(&quot;02 Jan 2006 15:04&quot;)) // 21 Dec 2011 08:52 s := t.Format(&quot;20060102&quot;) fmt.Println(t, &quot;=&gt;&quot;, s) // Wed Dec 21 08:52:14 +0000 UTC 2011 =&gt; 20111221&#125;","categories":[],"tags":[{"name":"go","slug":"go","permalink":"http://example.com/tags/go/"}]},{"title":"go安装和配置","slug":"go安装和配置","date":"2020-03-16T11:20:35.000Z","updated":"2021-09-22T11:19:04.616Z","comments":true,"path":"2020/03/16/go安装和配置/","link":"","permalink":"http://example.com/2020/03/16/go%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/","excerpt":"","text":"go安装和配置 下载地址1：https://golang.org/dl/ 下载地址2：https://golang.google.cn/dl/ 配置go环境变量 检查go安装 1go version","categories":[],"tags":[{"name":"go","slug":"go","permalink":"http://example.com/tags/go/"}]},{"title":"go控制结构","slug":"go控制结构","date":"2020-03-16T11:20:35.000Z","updated":"2021-09-22T11:19:04.616Z","comments":true,"path":"2020/03/16/go控制结构/","link":"","permalink":"http://example.com/2020/03/16/go%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/","excerpt":"","text":"go控制结构 if-else go if去除了条件的（） 1234567891011121314151617181920212223242526package mainimport &quot;fmt&quot;func main() &#123; var first int = 10 var cond int if first &lt;= 0 &#123; fmt.Printf(&quot;first is less than or equal to 0\\n&quot;) &#125; else if first &gt; 0 &amp;&amp; first &lt; 5 &#123; fmt.Printf(&quot;first is between 0 and 5\\n&quot;) &#125; else &#123; fmt.Printf(&quot;first is 5 or greater\\n&quot;) &#125; if cond = 5; cond &gt; 10 &#123; fmt.Printf(&quot;cond is greater than 10\\n&quot;) &#125; else &#123; fmt.Printf(&quot;cond is not greater than 10\\n&quot;) &#125;&#125; switch 结构 1234567891011121314151617package mainimport &quot;fmt&quot;func main() &#123; var num1 int = 100 switch num1 &#123; case 98, 99: fmt.Println(&quot;It&#x27;s equal to 98&quot;) case 100: fmt.Println(&quot;It&#x27;s equal to 100&quot;) default: fmt.Println(&quot;It&#x27;s not equal to 98 or 100&quot;) &#125;&#125; 1out: It&#x27;s equal to 100 for 123456789package mainimport &quot;fmt&quot;func main() &#123; for i := 0; i &lt; 5; i++ &#123; fmt.Printf(&quot;This is the %d iteration\\n&quot;, i) &#125;&#125; for 结构的第二种形式是没有头部的条件判断迭代（类似其它语言中的 while 循环），基本形式为：for 条件语句 {}。 123456789101112package mainimport &quot;fmt&quot;func main() &#123; var i int = 5 for i &gt;= 0 &#123; i = i - 1 fmt.Printf(&quot;The variable i is now: %d\\n&quot;, i) &#125;&#125; 123456The variable i is now: 4The variable i is now: 3The variable i is now: 2The variable i is now: 1The variable i is now: 0The variable i is now: -1 break continue 12345678910111213package mainfunc main() &#123; for i:=0; i&lt;3; i++ &#123; for j:=0; j&lt;10; j++ &#123; if j&gt;5 &#123; break &#125; print(j) &#125; print(&quot; &quot;) &#125;&#125; 1012345 012345 012345 1234567891011package mainfunc main() &#123; for i := 0; i &lt; 10; i++ &#123; if i == 5 &#123; continue &#125; print(i) print(&quot; &quot;) &#125;&#125; 10 1 2 3 4 6 7 8 9","categories":[],"tags":[{"name":"go","slug":"go","permalink":"http://example.com/tags/go/"}]},{"title":"linux—三剑客","slug":"linux/linux_awk","date":"2020-01-01T07:09:12.000Z","updated":"2021-09-22T11:19:04.631Z","comments":true,"path":"2020/01/01/linux/linux_awk/","link":"","permalink":"http://example.com/2020/01/01/linux/linux_awk/","excerpt":"","text":"linux—三剑客 grep 123awk [选项参数] &#x27;script&#x27; var=value file(s)或awk [选项参数] -f scriptfile var=value file(s) awk内置变量 变量名 属性 $0 当前记录，一整行 $1,$2,3…a 当前记录的第n个区域，区域间由FS分隔。 FS 输入区域分隔符，默认是空格。field separator NF 当前记录中的区域个数，就是有多少列。number of field NR 已经读出的记录数，就是行号，从1开始。number of record RS 输入的记录分隔符默认为换行符。record separator OFS 输出区域分隔符，默认也是空格。output record separator FNR 当前文件的读入记录号，每个文件重新计算。 FILENAME 当前正在处理的文件的文件名 选项参数说明： -F fs or --field-separator fs 指定输入文件折分隔符，fs是一个字符串或者是一个正则表达式，如-F:。 -v var=value or --asign var=value 赋值一个用户定义变量。 -f scripfile or --file scriptfile 从脚本文件中读取awk命令。 -mf nnn and -mr nnn 对nnn值设置内在限制，-mf选项限制分配给nnn的最大块数目；-mr选项限制记录的最大数目。这两个功能是Bell实验室版awk的扩展功能，在标准awk中不适用。 -W compact or --compat, -W traditional or --traditional 在兼容模式下运行awk。所以gawk的行为和标准的awk完全一样，所有的awk扩展都被忽略。 -W copyleft or --copyleft, -W copyright or --copyright 打印简短的版权信息。 -W help or --help, -W usage or --usage 打印全部awk选项和每个选项的简短说明。 -W lint or --lint 打印不能向传统unix平台移植的结构的警告。 -W lint-old or --lint-old 打印关于不能向传统unix平台移植的结构的警告。 -W posix 打开兼容模式。但有以下限制，不识别：/x、函数关键字、func、换码序列以及当fs是一个空格时，将新行作为一个域分隔符；操作符和=不能代替和=；fflush无效。 -W re-interval or --re-inerval 允许间隔正则表达式的使用，参考(grep中的Posix字符类)，如括号表达式[[:alpha:]]。 -W source program-text or --source program-text 使用program-text作为源代码，可与-f命令混用。 -W version or --version 打印bug报告信息的版本。 record 记录，行 filed 域，区域，字段，列 NF（number of field）表示一行中的区域（列）数量，$NF取最后一个区域。 $符号表示取某个列（区域），$1,2,NF NR (number of record) 行号,awk对每一行的记录号都有一个内置变量NR来保存，每处理完一条记录NR的值就会自动+1 FS（-F）field separator 列分隔符，以什么把行分隔成多列 用法一 1awk &#x27;&#123;[pattern] action&#125;&#x27; &#123;filenames&#125; # 行匹配语句 awk &#x27;&#x27; 只能用单引号 awk ‘BEGIN{}END{}’ # 开始和结束 awk ‘/Running/’ # 正则匹配 awk ‘/aa/,/bb/’ # 区间匹配 awk ‘$2~/XXX/’ # 字段匹配 awk ‘$2!~/XXX/’ # 字段匹配 awk ‘NR==2’ # 取第二行 awk ‘NR&gt;1’ # 去掉第一行 -F 参数指定字段分隔符 BEGIN{FS=&quot;&quot;} 也可以表示分隔符 $0 代表原来的行 $1 代表第一个字段 $N 代表第N个字段 $NF 代表最后一个字段 1234567891011121314统计行数awk &#x27;END&#123;print NR&#125;&#x27; test.logwc -l test.log分割awk -F &quot;#&quot; &#x27;&#123;print $NF&#125;&#x27; awk.txt awk -F &#x27;[#$]&#x27; &#x27;&#123;print $NF&#125;&#x27; awk.txt 分割 （条件动作）awk -F &quot;#&quot; &#x27;NR==2&#123;print $1&#125;&#x27; awk.txt多个模式和动作awk -F &quot;#&quot; &#x27;NR==1&#123;print $NF&#125;NR==3&#123;print $NF&#125;&#x27; awk.txtFNR与NR类似，不过多文件记录不递增，每个文件都从1开始awk &#x27;&#123;print FNR&#125;&#x27; awk.txt awk_space.txt 正则 元字符 功能 示例 解释 ^ 字符串开头 /^cre 匹配所有以cre开头的字符串 $ 字符串结尾 /cre$/ 匹配所有以cr结尾的字符串 . 匹配任意单个字符串 /c…l/ 匹配字母c，任意两个字符再以l结尾的行，如 caal * 重复0个或多个前一个字符 /a*cal/ 匹配0个或多个a之后紧跟cal的行,如cal、aaacal + 重复一个字符一次或者一次以上 /a+b/ 匹配一个或多个a加b的行 ? 匹配一个或一个前导字符 /a?b/ 匹配a或ab的行 [] 匹配字符组内的任一个字符 /[1]/ 匹配以字母a或b或c开头的行 [^] 匹配不再指定字符组内的任一字符 /[abc]/ 匹配不以字母a或b或c开头的行 () 子表达式组合 /(coo)+/ 表示一个或coo组合，当有一些字符需要组合时，使用括号 | 或 /(cl) B/ 123456789101112以#为分隔符，显示第一列以B开头或最后一列以1结尾的行awk -F &quot;#&quot; &#x27;$1~/^B/&#123;print $0&#125;$NF~/1$/&#123;print $0&#125;&#x27; awk.txt以#为分隔符，显示第一列以B或C开头的行awk -F &quot;#&quot; &#x27;$1~/^B|^C/&#123;print $0&#125;&#x27; awk.txtawk -F &quot;#&quot; &#x27;$1~/^[BC]/&#123;print $0&#125;&#x27; awk.txtawk -F &quot;#&quot; &#x27;$1~/^(B|C)/&#123;print $0&#125;&#x27; awk.txt awk -F &quot;#&quot; &#x27;$1!~/^A/&#123;print $0&#125;&#x27; awk.txt 比较显示awk &#x27;NR==2&#123;print $0&#125;NR==3&#123;print $0&#125;&#x27; awk.txt awk &#x27;NR&gt;=1&#123;print $0&#125;&#x27; awk.txt awk &#x27;/BAC/,/CBA/&#123;print $0&#125;&#x27; awk.txt 计算 1234567891011121314awk &#x27;BEGIN&#123;a=8;b=90;print a+b,a-c,a/b,a%b&#125;&#x27;# 98 8 0.0888889 8#统计空行grep &quot;^$&quot; test.log |wc -lsed -n &#x27;/^$/p&#x27; test.log |wc -lawk &#x27;/^$/&#x27; test.log |wc -lawk &#x27;/^$/&#123;i=i+1&#125;END&#123;print i&#125;&#x27; test.log# 累加100seq 100|awk &#x27;&#123;i=i+$0&#125;END&#123;print i&#125;&#x27;判断awk &#x27;&#123;if($2&gt;=90 )print $0&#125;&#x27; score.txt abc ↩︎","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://example.com/tags/linux/"}]},{"title":"linux—三剑客","slug":"linux/linux_三剑客","date":"2020-01-01T07:09:12.000Z","updated":"2021-09-22T11:19:04.633Z","comments":true,"path":"2020/01/01/linux/linux_三剑客/","link":"","permalink":"http://example.com/2020/01/01/linux/linux_%E4%B8%89%E5%89%91%E5%AE%A2/","excerpt":"","text":"linux—三剑客 grep 12345678❖ grep pattern ﬁle ❖ grep -i pattern ﬁle 忽略⼤⼩写 ❖ grep -v pattern ﬁle 不显⽰匹配的⾏ ❖ grep -o pattern ﬁle 把每个匹配的内容⽤独⽴的⾏显⽰ ❖ grep -E pattern ﬁle 使⽤扩展正则表达式 ❖ grep -A -B -C pattern ﬁle 打印命中数据的上下⽂ ❖ grep pattern -r dir/ 递归搜索 基本表达式 1234567891011❖ 基本表达式（BRE） ❖ ^ 开头 $结尾 ❖ [a-z] [0-9] 区间，如果开头带有^表⽰不能匹配区间内的元素 ❖ * 0个或多个 ❖ . 表⽰任意字符 ❖ 基本正则（BRE）与扩展正则的区别（ERE） ❖ ? ⾮贪婪匹配 ❖ + ⼀个或者多个 ❖ () 分组 ❖ &#123;&#125; 范围约束 ❖ | 匹配多个表达式的任何⼀ 123awk [选项参数] &#x27;script&#x27; var=value file(s)或awk [选项参数] -f scriptfile var=value file(s) awk内置变量 变量名 属性 $0 当前记录，一整行 $1,$2,3…a 当前记录的第n个区域，区域间由FS分隔。 FS 输入区域分隔符，默认是空格。field separator NF 当前记录中的区域个数，就是有多少列。number of field NR 已经读出的记录数，就是行号，从1开始。number of record RS 输入的记录分隔符默认为换行符。record separator OFS 输出区域分隔符，默认也是空格。output record separator FNR 当前文件的读入记录号，每个文件重新计算。 FILENAME 当前正在处理的文件的文件名 选项参数说明： -F fs or --field-separator fs 指定输入文件折分隔符，fs是一个字符串或者是一个正则表达式，如-F:。 -v var=value or --asign var=value 赋值一个用户定义变量。 -f scripfile or --file scriptfile 从脚本文件中读取awk命令。 -mf nnn and -mr nnn 对nnn值设置内在限制，-mf选项限制分配给nnn的最大块数目；-mr选项限制记录的最大数目。这两个功能是Bell实验室版awk的扩展功能，在标准awk中不适用。 -W compact or --compat, -W traditional or --traditional 在兼容模式下运行awk。所以gawk的行为和标准的awk完全一样，所有的awk扩展都被忽略。 -W copyleft or --copyleft, -W copyright or --copyright 打印简短的版权信息。 -W help or --help, -W usage or --usage 打印全部awk选项和每个选项的简短说明。 -W lint or --lint 打印不能向传统unix平台移植的结构的警告。 -W lint-old or --lint-old 打印关于不能向传统unix平台移植的结构的警告。 -W posix 打开兼容模式。但有以下限制，不识别：/x、函数关键字、func、换码序列以及当fs是一个空格时，将新行作为一个域分隔符；操作符和=不能代替和=；fflush无效。 -W re-interval or --re-inerval 允许间隔正则表达式的使用，参考(grep中的Posix字符类)，如括号表达式[[:alpha:]]。 -W source program-text or --source program-text 使用program-text作为源代码，可与-f命令混用。 -W version or --version 打印bug报告信息的版本。 record 记录，行 filed 域，区域，字段，列 NF（number of field）表示一行中的区域（列）数量，$NF取最后一个区域。 $符号表示取某个列（区域），$1,2,NF NR (number of record) 行号,awk对每一行的记录号都有一个内置变量NR来保存，每处理完一条记录NR的值就会自动+1 FS（-F）field separator 列分隔符，以什么把行分隔成多列 用法一 1awk &#x27;&#123;[pattern] action&#125;&#x27; &#123;filenames&#125; # 行匹配语句 awk &#x27;&#x27; 只能用单引号 awk ‘BEGIN{}END{}’ # 开始和结束 awk ‘/Running/’ # 正则匹配 awk ‘/aa/,/bb/’ # 区间匹配 awk ‘$2~/XXX/’ # 字段匹配 awk ‘$2!~/XXX/’ # 字段匹配 awk ‘NR==2’ # 取第二行 awk ‘NR&gt;1’ # 去掉第一行 -F 参数指定字段分隔符 BEGIN{FS=&quot;&quot;} 也可以表示分隔符 $0 代表原来的行 $1 代表第一个字段 $N 代表第N个字段 $NF 代表最后一个字段 1234567891011121314统计行数awk &#x27;END&#123;print NR&#125;&#x27; test.logwc -l test.log分割awk -F &quot;#&quot; &#x27;&#123;print $NF&#125;&#x27; awk.txt awk -F &#x27;[#$]&#x27; &#x27;&#123;print $NF&#125;&#x27; awk.txt 分割 （条件动作）awk -F &quot;#&quot; &#x27;NR==2&#123;print $1&#125;&#x27; awk.txt多个模式和动作awk -F &quot;#&quot; &#x27;NR==1&#123;print $NF&#125;NR==3&#123;print $NF&#125;&#x27; awk.txtFNR与NR类似，不过多文件记录不递增，每个文件都从1开始awk &#x27;&#123;print FNR&#125;&#x27; awk.txt awk_space.txt 正则 元字符 功能 示例 解释 ^ 字符串开头 /^cre 匹配所有以cre开头的字符串 $ 字符串结尾 /cre$/ 匹配所有以cr结尾的字符串 . 匹配任意单个字符串 /c…l/ 匹配字母c，任意两个字符再以l结尾的行，如 caal * 重复0个或多个前一个字符 /a*cal/ 匹配0个或多个a之后紧跟cal的行,如cal、aaacal + 重复一个字符一次或者一次以上 /a+b/ 匹配一个或多个a加b的行 ? 匹配一个或一个前导字符 /a?b/ 匹配a或ab的行 [] 匹配字符组内的任一个字符 /[1]/ 匹配以字母a或b或c开头的行 [^] 匹配不再指定字符组内的任一字符 /[abc]/ 匹配不以字母a或b或c开头的行 () 子表达式组合 /(coo)+/ 表示一个或coo组合，当有一些字符需要组合时，使用括号 | 或 /(cl) B/ 123456789101112以#为分隔符，显示第一列以B开头或最后一列以1结尾的行awk -F &quot;#&quot; &#x27;$1~/^B/&#123;print $0&#125;$NF~/1$/&#123;print $0&#125;&#x27; awk.txt以#为分隔符，显示第一列以B或C开头的行awk -F &quot;#&quot; &#x27;$1~/^B|^C/&#123;print $0&#125;&#x27; awk.txtawk -F &quot;#&quot; &#x27;$1~/^[BC]/&#123;print $0&#125;&#x27; awk.txtawk -F &quot;#&quot; &#x27;$1~/^(B|C)/&#123;print $0&#125;&#x27; awk.txt awk -F &quot;#&quot; &#x27;$1!~/^A/&#123;print $0&#125;&#x27; awk.txt 比较显示awk &#x27;NR==2&#123;print $0&#125;NR==3&#123;print $0&#125;&#x27; awk.txt awk &#x27;NR&gt;=1&#123;print $0&#125;&#x27; awk.txt awk &#x27;/BAC/,/CBA/&#123;print $0&#125;&#x27; awk.txt 计算 1234567891011121314awk &#x27;BEGIN&#123;a=8;b=90;print a+b,a-c,a/b,a%b&#125;&#x27;# 98 8 0.0888889 8#统计空行grep &quot;^$&quot; test.log |wc -lsed -n &#x27;/^$/p&#x27; test.log |wc -lawk &#x27;/^$/&#x27; test.log |wc -lawk &#x27;/^$/&#123;i=i+1&#125;END&#123;print i&#125;&#x27; test.log# 累加100seq 100|awk &#x27;&#123;i=i+$0&#125;END&#123;print i&#125;&#x27;判断awk &#x27;&#123;if($2&gt;=90 )print $0&#125;&#x27; score.txt abc ↩︎","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://example.com/tags/linux/"}]},{"title":"python_dict","slug":"python/python_字典","date":"2019-10-27T03:21:36.000Z","updated":"2021-09-22T11:19:04.642Z","comments":true,"path":"2019/10/27/python/python_字典/","link":"","permalink":"http://example.com/2019/10/27/python/python_%E5%AD%97%E5%85%B8/","excerpt":"","text":"python-字典 － 什么是可散列数据类型 在 Python 词汇表（https://docs.python.org/3/glossary.html#term-hashable）中，关于可散 列类型的定义有这样一段话： 如果一个对象是可散列的，那么在这个对象的生命周期中，它的散列值是不变 的，而且这个对象需要实现 __hash__() 方法。另外可散列对象还要有__qe__() 方法， 这样才能跟其他键做比较。如果两个可散列对象是相等的，那么它们的 散列值一定是一样的…… 原子不可变数据类型（str、bytes 和数值类型）都是可散列类型，frozenset 也是可散 列的，因为根据其定义，frozenset 里只能容纳可散列类型。元组的话，只有当一个元 组包含的所有元素都是可散列类型的情况下，它才是可散列的。 一般来讲用户自定义的类型的对象都是可散列的，散列值就是它们的 id() 函数的返 回值，所以所有这些对象在比较的时候都是不相等的。如果一个对象实现了__eq__ 方 法，并且在方法中用到了这个对象的内部状态的话，那么只有当所有这些内部状态都 是不可变的情况下，这个对象才是可散列的。 删除元素 popitem: 返回并删除字典中的最后一对键和值 pop(key[,default]): 删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值 clear: 删除字典内所有元素 获取元素 dict.get(key, default=None) 返回指定键的值，如果值不在字典中返回default值 dict.items() 以列表返回可遍历的(键, 值) 元组数组 dict.keys() 以列表返回一个字典所有的键 dict.setdefault(key, default=None) 和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://example.com/tags/python/"}]},{"title":"python-时间","slug":"python/python_时间","date":"2019-10-27T03:21:36.000Z","updated":"2021-09-22T11:19:04.643Z","comments":true,"path":"2019/10/27/python/python_时间/","link":"","permalink":"http://example.com/2019/10/27/python/python_%E6%97%B6%E9%97%B4/","excerpt":"","text":"python-时间 获取当前时间 12345678910import datetime,timenow = time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;)print (now)now = datetime.datetime.now()print (now)# 2019-10-31 15:01:10# 2019-10-31 15:01:10.376455 获取当前时间前一小时、前一天、前一周、前一个月 1234567891011121314151617181920212223242526272829303132import datetime,timenow = datetime.datetime.now()# 前一小时d1 = now - datetime.timedelta(hours=1)print (d1.strftime(&quot;%Y-%m-%d %H:%S:%M&quot;))# 前一天d2 = now - datetime.timedelta(days=1)print (d2.strftime(&quot;%Y-%m-%d %H:%S:%M&quot;))# 上周日d3 = now - datetime.timedelta(days=now.isoweekday())print (d3.strftime(&quot;%Y-%m-%d %H:%S:%M&quot;), &quot; &quot;, d3.isoweekday())# 上周一d31 = d3 - datetime.timedelta(days=6)print (d31.strftime(&quot;%Y-%m-%d %H:%S:%M&quot;), &quot; &quot;, d31.isoweekday())# 上个月最后一天d4 = now - datetime.timedelta(days=now.day)print (d3.strftime(&quot;%Y-%m-%d %H:%S:%M&quot;))# 上个月第一天# print (datetime.datetime(d4.year, d4.month, 1))# 2019-10-31 14:08:04# 2019-10-30 15:08:04# 2019-10-27 15:08:04 # 2019-10-21 15:08:04 # 2019-10-27 15:08:04# 2019-09-01 00:00:00 时间字符串转时间戳，时间戳转时间字符串，datetime对象转时间戳 1234567891011121314151617181920# 字符串时间转时间戳datestr1 = &#x27;2015-06-06 10:10:10&#x27;print &#x27;datestr to time :&#x27;, time.mktime(time.strptime(datestr1, &quot;%Y-%m-%d %H:%M:%S&quot;))# 时间戳转格式化时间字符串time1 = time.time()print &#x27;time to datestr :&#x27;, time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime(time1))# datetime对象转时间戳datetime1 = datetime.datetime.now()print &#x27;datetime to time :&#x27;, time.mktime(datetime1.timetuple())# 时间戳转datetime对象t1 = time.time()t2 = t1 + 20d1 = datetime.datetime.fromtimestamp(t1)d2 = datetime.datetime.fromtimestamp(t2)print &#x27;time1 to datetime1 :&#x27;, datetime.datetime.fromtimestamp(t1)print &#x27;time2 to datetime2 :&#x27;, datetime.datetime.fromtimestamp(t2)print &#x27;seconds diff :&#x27;, (d2 - d1).seconds 时间和日期格式化符号说明 1234567891011121314151617181920212223%y # 两位数的年份表示（00-99）%Y # 四位数的年份表示（000-9999）%m # 月份（01-12）%d # 月内中的一天（0-31）%H # 24小时制小时数（0-23）%I # 12小时制小时数（01-12） %M # 分钟数（00=59）%S # 秒（00-59） %a # 本地简化星期名称%A # 本地完整星期名称%b # 本地简化的月份名称%B # 本地完整的月份名称%c # 本地相应的日期表示和时间表示%j # 年内的一天（001-366）%p # 本地A.M.或P.M.的等价符%U # 一年中的星期数（00-53）星期天为星期的开始%w # 星期（0-6），星期天为星期的开始%W # 一年中的星期数（00-53）星期一为星期的开始%x # 本地相应的日期表示%X # 本地相应的时间表示%Z # 当前时区的名称%% # %号本身","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://example.com/tags/python/"}]},{"title":"git-取消修改","slug":"git取消修改","date":"2019-10-26T10:56:26.000Z","updated":"2021-09-22T11:19:04.615Z","comments":true,"path":"2019/10/26/git取消修改/","link":"","permalink":"http://example.com/2019/10/26/git%E5%8F%96%E6%B6%88%E4%BF%AE%E6%94%B9/","excerpt":"","text":"第一种情况 未运行git add，回滚一个文件 1234$ git status -s M test.c$ git checkout -- test.c // git revert$ git status -s 第二种情况 运行了git add，回滚一个文件 git add test.c main.c123456$ git status -s M test.c M main.c$ git reset test.c // unstage the change$ git checkout test.c // discard the unstaged change$ git status -s 第三种情况 运行了git add，回滚整个工程 123456$ echo test &gt;&gt; test.c$ git add test.c // here is the different$ git status -s M test.c$ git reset --hard HEAD // git revert, clean all tree$ git status -s 第四种情况 运行了git push branch，返回到与master一致 123456789$ git checkout origin/master test/if_test.go$ git checkout test$ git statusOn branch testChanges to be committed: (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage) modified: test/if_test.go","categories":[],"tags":[{"name":"Git","slug":"Git","permalink":"http://example.com/tags/Git/"}]},{"title":"python-list","slug":"python/python_list操作","date":"2019-10-26T08:48:35.000Z","updated":"2021-09-22T11:19:04.642Z","comments":true,"path":"2019/10/26/python/python_list操作/","link":"","permalink":"http://example.com/2019/10/26/python/python_list%E6%93%8D%E4%BD%9C/","excerpt":"","text":"python-list list.sort方法和内置函数sorted list.sort : 排序本列表，返回none 内置函数 sorted ：会新建一个列表作为返回值 list.sort 、 sorted都有可选的关键字参数： reverse 如果被设定为 True，被排序的序列里的元素会以降序输出（也就是说把最大值当作最 小值来排序）。这个参数的默认值是 False。 key 一个只有一个参数的函数，这个函数会被用在序列里的每一个元素上，所产生的结果 将是排序算法依赖的对比关键字。比如说，在对一些字符串排序时，可以用 key=str. lower 来实现忽略大小写的排序，或者是用 key=len 进行基于字符串长度的排序。这个参数的默认值是恒等函数（identity function），也就是默认用元素自己的值来排序。 12345678910111213141516fruits = [&#x27;grape&#x27;, &#x27;raspberry&#x27;, &#x27;apple&#x27;, &#x27;banana&#x27;]print(sorted(fruits)) #[&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;grape&#x27;, &#x27;raspberry&#x27;] print (fruits) # [&#x27;grape&#x27;, &#x27;raspberry&#x27;, &#x27;apple&#x27;, &#x27;banana&#x27;] sorted(fruits, reverse=True) #[&#x27;raspberry&#x27;, &#x27;grape&#x27;, &#x27;banana&#x27;, &#x27;apple&#x27;] sorted(fruits, key=len) # [&#x27;grape&#x27;, &#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;raspberry&#x27;]sorted(fruits, key=len, reverse=True) # [&#x27;raspberry&#x27;, &#x27;banana&#x27;, &#x27;grape&#x27;, &#x27;apple&#x27;] print(fruits) # [&#x27;grape&#x27;, &#x27;raspberry&#x27;, &#x27;apple&#x27;, &#x27;banana&#x27;] fruits.sort() print(fruits)# [&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;grape&#x27;, &#x27;raspberry&#x27;]","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://example.com/tags/python/"}]},{"title":"python-元祖","slug":"python/python_元组","date":"2019-10-26T08:48:35.000Z","updated":"2021-09-22T11:19:04.642Z","comments":true,"path":"2019/10/26/python/python_元组/","link":"","permalink":"http://example.com/2019/10/26/python/python_%E5%85%83%E7%BB%84/","excerpt":"","text":"python-元祖 元组和记录 元组记录、拆包 1234567891011121314151617181920212223242526272829# 记录lax_coordinates = (33.9425, -118.408056)city, year, pop, chg, area = (&#x27;Tokyo&#x27;, 2003, 32450, 0.66, 8014)traveler_ids = [(&#x27;USA&#x27;, &#x27;31195855&#x27;), (&#x27;BRA&#x27;, &#x27;CE342567&#x27;),(&#x27;ESP&#x27;, &#x27;XDA205856&#x27;)]for passport in sorted(traveler_ids): print(&#x27;%s/%s&#x27; % passport)&quot;&quot;&quot;BRA/CE342567ESP/XDA205856USA/31195855&quot;&quot;&quot;for country, _ in traveler_ids: print(country) &quot;&quot;&quot;USABRAESP&quot;&quot;&quot;# 拆包lax_coordinates = (33.9425, -118.408056) latitude, longitude = lax_coordinates print(latitude,longitude)&quot;&quot;&quot;33.9425 -118.408056&quot;&quot;&quot; 具名元组 namedtuple 123456789101112131415161718192021222324252627282930313233from collections import namedtupleCity = namedtuple(&#x27;City&#x27;, &#x27;name country population coordinates&#x27;)tokyo = City(&#x27;Tokyo&#x27;, &#x27;JP&#x27;, 36.933, (35.689722, 139.691667))City(name=&#x27;Tokyo&#x27;, country=&#x27;JP&#x27;, population=36.933, coordinates=(35.689722, 139.691667))# print(tokyo.country)# print(City._fields )&quot;&quot;&quot;➊ 创建一个具名元组需要两个参数，一个是类名，另一个是类的各个字段的名字。后者可 以是由数个字符串组成的可迭代对象，或者是由空格分隔开的字段名组成的字符串。➋ 存放在对应字段里的数据要以一串参数的形式传入到构造函数中（注意，元组的构造函 数却只接受单一的可迭代对象）➌ 你可以通过字段名或者位置来获取一个字段的信息。&quot;&quot;&quot;LatLong = namedtuple(&#x27;LatLong&#x27;, &#x27;lat long&#x27;)delhi_data = (&#x27;Delhi NCR&#x27;, &#x27;IN&#x27;, 21.935, LatLong(28.613889, 77.208889))delhi = City._make(delhi_data)print(delhi._asdict()) # OrderedDict([(&#x27;name&#x27;, &#x27;Delhi NCR&#x27;), (&#x27;country&#x27;, &#x27;IN&#x27;), (&#x27;population&#x27;, 21.935), (&#x27;coordinates&#x27;, LatLong(lat=28.613889, long=77.208889))]) &quot;&quot;&quot;➊ _fields 属性是一个包含这个类所有字段名称的元组。 ➋ 用 _make() 通过接受一个可迭代对象来生成这个类的一个实例，它的作用跟 City(*delhi_data) 是一样的。 ➌ _asdict() 把具名元组以 collections.OrderedDict 的形式返回，我们可以利用它来把元 组里的信息友好地呈现出来&quot;&quot;&quot;`````- 序列使用+和* ```pythonl = [1, 2, 3] print(l * 5) # [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3] +和* 都遵循这个规律，不修改原有的操作对象，而是构建一个全新的序列 1234567891011board = [[&#x27;_&#x27;] * 3 for i in range(3)] board[1][2] = &#x27;X&#x27; print(board )# [[&#x27;_&#x27;, &#x27;_&#x27;, &#x27;_&#x27;], [&#x27;_&#x27;, &#x27;_&#x27;, &#x27;X&#x27;], [&#x27;_&#x27;, &#x27;_&#x27;, &#x27;_&#x27;]]&quot;&quot;&quot;**含有 3 个指向同一对象的引用的列表是毫无用处的** &quot;&quot;&quot;weird_board = [[&#x27;_&#x27;] * 3] * 3 weird_board[1][2] = &#x27;O&#x27; print(weird_board)# [[&#x27;_&#x27;, &#x27;_&#x27;, &#x27;O&#x27;], [&#x27;_&#x27;, &#x27;_&#x27;, &#x27;O&#x27;], [&#x27;_&#x27;, &#x27;_&#x27;, &#x27;O&#x27;]]","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://example.com/tags/python/"}]},{"title":"python-序列","slug":"python/python_序列","date":"2019-10-26T08:48:35.000Z","updated":"2021-09-22T11:19:04.642Z","comments":true,"path":"2019/10/26/python/python_序列/","link":"","permalink":"http://example.com/2019/10/26/python/python_%E5%BA%8F%E5%88%97/","excerpt":"","text":"python-序列 内置序列类型 容器序列 list、tuple 和 collections.deque 这些序列能存放不同类型的数据。 扁平序列 str、bytes、bytearray、memoryview 和 array.array，这类序列只能容纳一种类型。 可变序列 list、bytearray、array.array、collections.deque 和 memoryview。 不可变序列 tuple、str 和 bytes。 列表推导式 123symbols = &#x27;$¢£¥€¤&#x27; beyond_ascii = [ord(s) for s in symbols if ord(s) &gt; 127] beyond_ascii [162, 163, 165, 8364, 164] 生成器表达式 生成器表达式的语法跟列表推导差不多，把方括号换成圆括号。 1234symbols = &#x27;$¢£¥€¤&#x27; tuple(ord(symbol) for symbol in symbols) (36, 162, 163, 165, 8364, 164) 12345colors = [&#x27;black&#x27;, &#x27;white&#x27;] sizes = [&#x27;S&#x27;, &#x27;M&#x27;, &#x27;L&#x27;]for tshirt in (&#x27;%s %s&#x27; % (c, s) for c in colors for s in sizes): print(tshirt)","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://example.com/tags/python/"}]},{"title":"pytest—基础知识","slug":"python/pytes_基础","date":"2019-08-03T05:07:26.000Z","updated":"2021-09-22T11:19:04.641Z","comments":true,"path":"2019/08/03/python/pytes_基础/","link":"","permalink":"http://example.com/2019/08/03/python/pytes_%E5%9F%BA%E7%A1%80/","excerpt":"","text":"pytest—基础知识 测试文件命名规则 测试文件应当命名为test_.py 或者 _test.py 测试函数、测试类方法应该命名为test_ 测试类应该命名为Test 测试函数返回的结果类型 PASSED(.) 测试通过 FAILED(F) 测试失败（也有可能是XPASS状态与strict选项冲突造成的失败） SKIPPED(s) 测试未被执行，指定跳过执行可以将测试标记为@pytest.mark.skip(),或者使用@pytest.mark.skipif()指定跳过测试的条件 xfail(x) 预期测试失败，并且确实失败，使用@pytest.mark.xfail()指定你认为会失败的测试用例 XPASS(X) 预期测试失败，但实际上通过，不符合预期 ERROR(E) 测试用例之外的代码触发了异常，可能由fixture引起，也可能由hook函数引起 运行测试用例命令 pytest -v git_test_project/test_case/test_a.py（执行文件中所有case） 12345678910111213141516171819202122232425262728293031G:\\vchen\\github\\project\\project&gt;pytest -v git_test_project/test_case/test_a.py=============================== test session starts ===============================platform win32 -- Python 3.7.4, pytest-5.0.1, py-1.8.0, pluggy-0.12.0 -- d:\\python3\\python.execachedir: .pytest_cacherootdir: G:\\vchen\\github\\project\\projectplugins: allure-pytest-2.8.0collected 4 items git_test_project/test_case/test_a.py::test_01 SKIPPED [ 25%]git_test_project/test_case/test_a.py::test_02 SKIPPED [ 50%]git_test_project/test_case/test_a.py::test_03 FAILED [ 75%]git_test_project/test_case/test_a.py::test_04 PASSED [100%]================================= FAILURES ========================================___________________________ test_03 ___________________________ @pytest.mark.unfinished def test_03():&gt; assert (1,2,3) == (3,2,1)E assert (1, 2, 3) == (3, 2, 1)E At index 0 diff: 1 != 3E Full diff:E - (1, 2, 3)E ? ^ ^E + (3, 2, 1)E ? ^ ^git_test_project\\test_case\\test_a.py:14: AssertionError================= 1 failed, 1 passed, 2 skipped, 1 warnings in 0.07 seconds ================= pytest -v git_test_project/test_case/test_a.py::test_01 （执行文件单个case test_01） 1234567platform win32 -- Python 3.7.4, pytest-5.0.1, py-1.8.0, pluggy-0.12.0 -- d:\\python3\\python.execachedir: .pytest_cacherootdir: G:\\vchen\\github\\project\\projectplugins: allure-pytest-2.8.0collected 1 item git_test_project/test_case/test_a.py::test_01 PASSED [100%] 命令行的选项 可使用pytest --help 查看全部选项 –tb=no : 关闭错误信息回溯 1234567891011121314G:\\vchen\\github\\project\\project&gt;pytest -v --tb=no=========================== test session starts ===========================platform win32 -- Python 3.7.4, pytest-5.0.1, py-1.8.0, pluggy-0.12.0 -- d:\\python3\\python.execachedir: .pytest_cacherootdir: G:\\vchen\\github\\project\\projectplugins: allure-pytest-2.8.0collected 4 items git_test_project/test_case/test_a.py::test_01 SKIPPED [ 25%]git_test_project/test_case/test_a.py::test_02 SKIPPED [ 50%]git_test_project/test_case/test_a.py::test_03 FAILED [ 75%]git_test_project/test_case/test_a.py::test_04 PASSED [100%]=========== 1 failed, 1 passed, 2 skipped, 1 warnings in 0.15 seconds ==================== –collect-only : 使用–collect-only 选项可以展示在给定的配置下哪些测试用例会被运行 1234567891011121314G:\\vchen\\github\\project\\project&gt;pytest --collect-only======================== test session starts ==============================platform win32 -- Python 3.7.4, pytest-5.0.1, py-1.8.0, pluggy-0.12.0rootdir: G:\\vchen\\github\\project\\projectplugins: allure-pytest-2.8.0collected 2 items &lt;Package G:\\vchen\\github\\project\\project\\git_test_project\\test_case&gt; &lt;Module test_a.py&gt; &lt;Function test_01&gt; &lt;Function test_02&gt; ====================== no tests ran in 0.40 seconds ======================== -k : 允许使用表达式指定希望运行的测试用例 1234567891011121314G:\\vchen\\github\\project\\project&gt;pytest -k &quot;test_01 or test_02&quot; --collect-only================================test session starts ==================================platform win32 -- Python 3.7.4, pytest-5.0.1, py-1.8.0, pluggy-0.12.0rootdir: G:\\vchen\\github\\project\\projectplugins: allure-pytest-2.8.0collected 2 items &lt;Package G:\\vchen\\github\\project\\project\\git_test_project\\test_case&gt; &lt;Module test_a.py&gt; &lt;Function test_01&gt; &lt;Function test_02&gt;============================ no tests ran in 0.13 seconds ============================ 12345678910pytest -k &quot;test_01 or test_02&quot;=================================== test session starts ===============================platform win32 -- Python 3.7.4, pytest-5.0.1, py-1.8.0, pluggy-0.12.0rootdir: G:\\vchen\\github\\project\\projectplugins: allure-pytest-2.8.0collected 2 items git_test_project\\test_case\\test_a.py .. [100%]================================ 2 passed in 0.10 seconds ============================= -m : 标记（marker）用于标记测试并分组，以便快速选中并运行 12345678910import pytest@pytest.mark.finisheddef test_01():...@pytest.mark.unfinisheddef test_03():... 12345678910G:\\vchen\\github\\project\\project&gt;pytest --verbose git_test_project/test_case/test_a.py -m &quot;finished and unfinished&quot;====================== test session starts =====================platform win32 -- Python 3.7.4, pytest-5.0.1, py-1.8.0, pluggy-0.12.0 -- d:\\python3\\python.execachedir: .pytest_cacherootdir: G:\\vchen\\github\\project\\projectplugins: allure-pytest-2.8.0collected 4 items / 4 deselected ===============4 deselected, 2 warnings in 0.02 seconds ==================== -x : 正常情况，pytest 会运行每一个搜索到的测试用例。如果某个测试函数被断言失败，或者触发了外部异常，则该测试用例的运行就会到此为止 1234@pytest.mark.unfinisheddef test_03(): assert (1,2,3) == (3,2,1) ... 123456789101112131415161718192021222324252627282930G:\\vchen\\github\\project\\project&gt;pytest -x -v========================== test session starts ==========================platform win32 -- Python 3.7.4, pytest-5.0.1, py-1.8.0, pluggy-0.12.0 -- d:\\python3\\python.execachedir: .pytest_cacherootdir: G:\\vchen\\github\\project\\projectplugins: allure-pytest-2.8.0collected 4 items git_test_project/test_case/test_a.py::test_01 SKIPPED [ 25%]git_test_project/test_case/test_a.py::test_02 SKIPPED [ 50%]git_test_project/test_case/test_a.py::test_03 FAILED [ 75%]================================= FAILURES =================================_______________________________ test_03 _______________________________ @pytest.mark.unfinished def test_03():&gt; assert (1,2,3) == (3,2,1)E assert (1, 2, 3) == (3, 2, 1)E At index 0 diff: 1 != 3E Full diff:E - (1, 2, 3)E ? ^ ^E + (3, 2, 1)E ? ^ ^git_test_project\\test_case\\test_a.py:14: AssertionError==============1 failed, 2 skipped, 1 warnings in 0.13 seconds ================== –maxfail=num : -x特点是一旦遇到失败就会全局停止。使用–maxfail可以明指定失败几次 1234567891011121314G:\\vchen\\github\\project\\project&gt;pytest -v git_test_project/test_case/test_a.py --maxfail=2 --tb=no============================== test session starts ==============================platform win32 -- Python 3.7.4, pytest-5.0.1, py-1.8.0, pluggy-0.12.0 -- d:\\python3\\python.execachedir: .pytest_cacherootdir: G:\\vchen\\github\\project\\projectplugins: allure-pytest-2.8.0collected 4 items git_test_project/test_case/test_a.py::test_01 SKIPPED [ 25%]git_test_project/test_case/test_a.py::test_02 SKIPPED [ 50%]git_test_project/test_case/test_a.py::test_03 FAILED [ 75%]git_test_project/test_case/test_a.py::test_04 PASSED [100%]================= 1 failed, 1 passed, 2 skipped, 1 warnings in 0.05 seconds ================= -s与–capture=method : -s 允许终端在测试运行时输出某些结果，包括任何符合标准的输出流信息。-s等价于–capture=no。 1234567891011121314151617import pytestdef test_01(): print(&quot;222222222&quot;)def test_02(): print(&quot;222222222&quot;)@pytest.mark.unfinisheddef test_03(): assert (1,2,3) == (3,2,1) print(&quot;222222222&quot;)@pytest.mark.unfinisheddef test_04(): print(&quot;222222222&quot;) 123456789101112131415161718G:\\vchen\\github\\project\\project&gt;pytest git_test_project/test_case -sv --tb=no================================ test session starts ================================platform win32 -- Python 3.7.4, pytest-5.0.1, py-1.8.0, pluggy-0.12.0 -- d:\\python3\\python.execachedir: .pytest_cacherootdir: G:\\vchen\\github\\project\\projectplugins: allure-pytest-2.8.0collected 4 items git_test_project/test_case/test_a.py::test_01 222222222PASSEDgit_test_project/test_case/test_a.py::test_02 222222222PASSEDgit_test_project/test_case/test_a.py::test_03 FAILEDgit_test_project/test_case/test_a.py::test_04 222222222PASSED======================= 1 failed, 3 passed, 1 warnings in 0.06 seconds ========================= -lf(–last-failed) : 当一个或多个测试失败时，定位到最后一个失败的测试用例并重新运行 123456789101112G:\\vchen\\github\\project\\project&gt;pytest --lf -v --tb=no================================= test session starts ===========================================platform win32 -- Python 3.7.4, pytest-5.0.1, py-1.8.0, pluggy-0.12.0 -- d:\\python3\\python.execachedir: .pytest_cacherootdir: G:\\vchen\\github\\project\\projectplugins: allure-pytest-2.8.0collected 4 items / 3 deselected / 1 selected run-last-failure: rerun previous 1 failure (skipped 66 files)git_test_project/test_case/test_a.py::test_03 FAILED [100%]======================= 1 failed, 3 deselected, 1 warnings in 0.11 seconds ======================= –ff(–failed-first) : 与lf作用基本相同，不同在于–ff会运行完剩余的测试用例 1234567891011121314151617G:\\vchen\\github\\project\\project&gt;pytest --ff -v --tb=no===================================== test session starts ======================================platform win32 -- Python 3.7.4, pytest-5.0.1, py-1.8.0, pluggy-0.12.0 -- d:\\python3\\python.execachedir: .pytest_cacherootdir: G:\\vchen\\github\\project\\projectplugins: allure-pytest-2.8.0collected 4 items run-last-failure: rerun previous 1 failure firstgit_test_project/test_case/test_a.py::test_03 FAILED [ 25%]git_test_project/test_case/test_a.py::test_01 PASSED [ 50%]git_test_project/test_case/test_a.py::test_02 PASSED [ 75%]git_test_project/test_case/test_a.py::test_04 PASSED [100%]======================== 1 failed, 3 passed, 1 warnings in 0.13 seconds ======================== -v(–verbose) : 输出信息更详细。 1234567891011121314G:\\vchen\\github\\project\\project&gt;pytest -v --tb=no=================================== test session starts ===================================platform win32 -- Python 3.7.4, pytest-5.0.1, py-1.8.0, pluggy-0.12.0 -- d:\\python3\\python.execachedir: .pytest_cacherootdir: G:\\vchen\\github\\project\\projectplugins: allure-pytest-2.8.0collected 4 items git_test_project/test_case/test_a.py::test_01 PASSED [ 25%]git_test_project/test_case/test_a.py::test_02 PASSED [ 50%]git_test_project/test_case/test_a.py::test_03 FAILED [ 75%]git_test_project/test_case/test_a.py::test_04 PASSED [100%]====================== 1 failed, 3 passed, 1 warnings in 0.13 seconds ======================= -q(–quiet) : 与-v/–verbose作用相反，简化输出信息 123456789101112131415161718192021G:\\vchen\\github\\project\\project&gt;pytest -q..F. [100%]================================= FAILURES =================================__________________________________ test_03 __________________________________ @pytest.mark.unfinished def test_03():&gt; assert (1,2,3) == (3,2,1)E assert (1, 2, 3) == (3, 2, 1)E At index 0 diff: 1 != 3E Full diff:E - (1, 2, 3)E ? ^ ^E + (3, 2, 1)E ? ^ ^git_test_project\\test_case\\test_a.py:12: AssertionError1 failed, 3 passed, 1 warnings in 0.12 seconds -l(–showlocals) : 1234567891011121314151617181920212223G:\\vchen\\github\\project\\project&gt;pytest -l========================== test session starts ==========================platform win32 -- Python 3.7.4, pytest-5.0.1, py-1.8.0, pluggy-0.12.0rootdir: G:\\vchen\\github\\project\\projectplugins: allure-pytest-2.8.0collected 4 items git_test_project\\test_case\\test_a.py ..F. [100%]=================================== FAILURES ===================================__________________________________________ test_03 ______________________________ @pytest.mark.unfinished def test_03():&gt; assert (1,2,3) == (3,2,1)E assert (1, 2, 3) == (3, 2, 1)E At index 0 diff: 1 != 3E Use -v to get the full diffgit_test_project\\test_case\\test_a.py:12: AssertionError============== 1 failed, 3 passed, 1 warnings in 0.14 seconds ================= –tb=style : 决定捕捉到失败时输出信息的显示方式。常用类型short,line,no 123456short: 仅输出assert的一行以及系统判定内容（不显示上下文）line: 只使用一行输出显示所有的错误信息no： 直接屏蔽全部回溯信息long: 输出详尽回溯信息auto: 默认值，如果多个测试用例失败，仅打印第一个和最后一个用例的回溯信息（格式与long模式一致）native： 只输出python标准库的回溯信息，不显示额外信息 –duration=N : 加快测试节奏。不关心测试如何运行，只统计测试过程中哪几个阶段是最慢的（包括每个测试用例的call,setup,teardown过程）。显示最慢的N个阶段耗时越长越靠前。如果使用–duration=0，则会将所有阶段按耗时从长到短排序后显示。 123456789101112131415161718192021222324252627282930313233343536373839404142G:\\vchen\\github\\project\\project&gt;pytest git_test_project/test_case -sv --durations=3===================================== test session starts =====================================platform win32 -- Python 3.7.4, pytest-5.0.1, py-1.8.0, pluggy-0.12.0 -- d:\\python3\\python.execachedir: .pytest_cacherootdir: G:\\vchen\\github\\project\\projectplugins: allure-pytest-2.8.0collected 4 items git_test_project/test_case/test_a.py::test_01 222222222PASSEDgit_test_project/test_case/test_a.py::test_02 222222222PASSEDgit_test_project/test_case/test_a.py::test_03 FAILEDgit_test_project/test_case/test_a.py::test_04 222222222PASSED======================================== FAILURES ========================================________________________________________ test_03 __________________________________________ @pytest.mark.unfinished def test_03():&gt; assert (1,2,3) == (3,2,1)E assert (1, 2, 3) == (3, 2, 1)E At index 0 diff: 1 != 3E Full diff:E - (1, 2, 3)E ? ^ ^E + (3, 2, 1)E ? ^ ^git_test_project\\test_case\\test_a.py:14: AssertionError==================================== slowest 3 test durations ====================================5.00s call git_test_project/test_case/test_a.py::test_043.00s call git_test_project/test_case/test_a.py::test_01(0.00 durations hidden. Use -vv to show these durations.)======================== 1 failed, 3 passed, 1 warnings in 8.25 seconds ==========================&lt;!--more--&gt;","categories":[],"tags":[{"name":"pytest","slug":"pytest","permalink":"http://example.com/tags/pytest/"}]},{"title":"linux常用命令","slug":"linux/linux常用命令","date":"2019-06-12T07:09:11.000Z","updated":"2021-09-22T11:19:04.634Z","comments":true,"path":"2019/06/12/linux/linux常用命令/","link":"","permalink":"http://example.com/2019/06/12/linux/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","excerpt":"","text":"linux常用命令 Linux的目录结构 123456789101112131415161718192021222324bin (binaries)存放二进制可执行文件sbin (super user binaries)存放二进制可执行文件，只有root才能访问etc (etcetera)存放系统配置文件usr (unix shared resources)用于存放共享的系统资源home 存放用户文件的根目录root 超级用户目录dev (devices)用于存放设备文件lib (library)存放跟文件系统中的程序运行所需要的共享库及内核模块mnt (mount)系统管理员安装临时文件系统的安装点boot 存放用于系统引导时使用的各种文件tmp (temporary)用于存放各种临时文件var (variable)用于存放运行时需要改变数据的文件 Linux常用命令 1命令格式：命令 -选项 参数 （选项和参数可以为空） 文件及目录 命令 参数 示例 说明 cd - cd /usr 切换目录 pwd - pwd 当前目录 touch - touch a.java 创建空文件 mkdir - mkdir dir 创建新目录 mkdir -p mkdir -p /usr/dir/java 创建多级目录 cp - cp a.java /usr 复制文件或目录 cp -r cp -f /usr/dir/a.txt /root 递归处理 rmdir - rmdir dirxx 删除空目录 more - more a.txt 分页显示文本文件内容 空格后，b向前 less - less a.txt 同上，支持底行 head - head a.txt 查看开头 默认10行 head -num head -20 a.txt 查看开头指定行 tail - tail a.txt 查看文本结尾，默认10行 tail -num tail -20 a.txt 查看文本结尾，指定行数 tail -f tail a.txt 循环滚动读取并动态显示 wc - wc a.txt 统计文本的行数，字数，字符数 wc -m wc -m a.txt 字符数 wc -w wc -w a.txt 文本字数 wc -l cd -l a.txt 文本行数 find -name find / -name a.txt 指定目录查文件 vi / vim 参数 说明 i 光标前插入 l 在光标当前行开始插入 a 光标后插入 A 在光标当前行末尾插入 o 在当前行下一行插入 O 在当前行上一行插入 :wq 保存退出 :q 退出","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://example.com/tags/linux/"}]},{"title":"反转单链表","slug":"反转单链表","date":"2019-06-10T05:07:26.000Z","updated":"2021-09-22T11:19:04.650Z","comments":true,"path":"2019/06/10/反转单链表/","link":"","permalink":"http://example.com/2019/06/10/%E5%8F%8D%E8%BD%AC%E5%8D%95%E9%93%BE%E8%A1%A8/","excerpt":"","text":"反转单链表 递归 1-&gt;2-&gt;3-&gt;4输出4-&gt;3-&gt;2-&gt;1 123456789101112131415161718192021222324252627282930313233343536373839404142// 定义Nodepublic static class Node &#123; public int value; public Node next; public Node(int data) &#123; this.value = data; &#125;&#125;public Node reverse(Node head) &#123; if (head == null || head.next == null) return head; Node temp = head.next; Node newHead = reverse(head.next); temp.next = head; head.next = null; return newHead; &#125;程序到达Node newHead = reverse(head.next);时进入递归我们假设此时递归到了3结点，此时head=3结点，temp=3结点.next(实际上是4结点)执行Node newHead = reverse(head.next);传入的head.next是4结点，返回的newHead是4结点。接下来就是弹栈过程了程序继续执行 temp.next = head就相当于4-&gt;3head.next = null 即把 3结点指向4结点的指针断掉。返回新链表的头结点newHead注意：当retuen后，系统会恢复2结点压栈时的现场，此时的head=2结点；temp=2结点.next(3结点)，再进行上述的操作。最后完成整个链表的翻转。 遍历 12345678910111213141516171819202122232425262728293031323334public static Node reverseList(Node node) &#123; Node pre = null; Node next = null; while (node != null) &#123; next = node.next; node.next = pre; pre = node; node = next; &#125; return pre;&#125;准备两个空结点 pre用来保存先前结点、next用来做临时变量在头结点node遍历的时候此时为1结点next = 1结点.next(2结点)1结点.next=pre(null)pre = 1结点node = 2结点进行下一次循环node=2结点next = 2结点.next(3结点)2结点.next=pre(1结点)=&gt;即完成2-&gt;1pre = 2结点node = 3结点进行循环...","categories":[],"tags":[{"name":"algorithm","slug":"algorithm","permalink":"http://example.com/tags/algorithm/"}]},{"title":"基础sql使用","slug":"mysql/sql_基础使用","date":"2019-04-08T07:42:06.000Z","updated":"2021-09-22T11:19:04.636Z","comments":true,"path":"2019/04/08/mysql/sql_基础使用/","link":"","permalink":"http://example.com/2019/04/08/mysql/sql_%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/","excerpt":"","text":"sql 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332Student(Sid,Sname,Sage,Ssex)学生表Sid：学号Sname：学生姓名Sage：学生年龄Ssex：学生性别Course(Cid,Cname,Tid)课程表Cid：课程编号Cname：课程名称Tid：教师编号SC(Sid,Cid,score)成绩表Sid：学号Cid：课程编号score：成绩Teacher(Tid,Tname)教师表Tid：教师编号：Tname：教师名字问题：1、查询“001”课程比“002”课程成绩高的所有学生的学号select a.Sid from (select Sid,score from SC where Cid=&#x27;001&#x27;)a, (select sid,score from SC where cid=&#x27;002&#x27;)b Where a.score&gt;b.score and a.sid = b.sid;2、查询平均成绩大于60分的同学的学号和平均成绩select Sid, avg(score) from sc group by Sid having avg(score)&gt;603、查询所有同学的学号、姓名、选课数、总成绩select student.Sid, student.Sname, count(sc.Cid), sum(score) from student left outer join SC on student.Sid = SC.Sid group by Student.Sid, Sname4、查询姓‘李’的老师的个数：select count(distinct(Tname)) from teacher where tname like &#x27;李%&#x27;;5、查询没有学过“叶平”老师可的同学的学号、姓名：select student.Sid, student.Sname from Student where Sid not in (select distinct(SC.Sid) from SC,Course,Teacher where sc.cid=course.cid AND teacher.Tid=course.Tid AND Teahcer.Tname =&#x27;叶平&#x27;);6、查询学过“叶平”老师所教的所有课的同学的学号、姓名：select Sid,Sname from Student where Sid in (select Sid from SC ,Course ,Teacher where SC.Cid=Course.Cid and Teacher.Tid=Course.Tid and Teacher.Tname=&#x27;叶平&#x27; group by Sid having count(SC.Cid)=(select count(Cid) from Course,Teacher where Teacher.Tid=Course.Tid and Tname=&#x27;叶平&#x27;));7、查询学过“011”并且也学过编号“002”课程的同学的学号、姓名：select Student.Sid,Student.Sname from Student,SC where Student.Sid=SC.Sid and SC.Cid=&#x27;001&#x27;and exists( Select * from SC as SC_2 where SC_2.Sid=SC.Sid and SC_2.Cid=&#x27;002&#x27;);8、查询课程编号“002”的成绩比课程编号“001”课程低的所有同学的学号、姓名：Select Sid,Sname from (select Student.Sid,Student.Sname,score ,(select score from SC SC_2 where SC_2.Sid=Student.Sid and SC_2.Cid=&#x27;002&#x27;) score2 from Student,SC where Student.Sid=SC.Sid and Cid=&#x27;001&#x27;) S_2 where score2 &lt; score; 9、查询所有课程成绩小于60的同学的学号、姓名：select Sid, sname from student where sid not in (select student.sid from student, sc where s.sid = sc.sid and score&gt;60);10、查询没有学全所有课的同学的学号、姓名：select student.sid, student.sname from student, scwhere student.sid=sc.sid group by student.sid, student.sname having count(cid)&lt;(select count(cid) from course);11、查询至少有一门课与学号为“1001”同学所学相同的同学的学号和姓名：select sid, Sname from Student, SC where student.sid = sc.sid and cid in (select cid from SC where sid=&#x27;1001&#x27;);12、查询至少学过学号为“001”同学所有一门课的其他同学学号和姓名；select distinct sc.sid , sname from student, sc where student.sid=sc.sid and cid in (select Cid from sc where sid=&#x27;001&#x27;);13、把“SC”表中“叶平”老师教的课的成绩都更改为此课程的平均成绩：Update Sc Set Score=(Select Avg(s2_Score) From sc s2 Where s2.cid=sc.cid) Where cid IN(Select cid From sc cs INNER JOIN Teacher tc ON cs.tid=tc.tid WHERE tname =&#x27;叶平&#x27;)14、查询和“1002”号的同学学习的课程完全相同的其他同学学号和姓名：select sid from sc where cid in (select cid from sc where sid=&#x27;1002&#x27;) group by sid having count(*)=(select count(*) from sc where sid=&#x27;1002&#x27;);15、删除学习“叶平”老师课的SC表记录：delect sc from course, Teacher where course.cid=sc.cid and course.tid=teacher.tid and tname=&#x27;叶平&#x27;;16、向SC表中插入一些记录，这些记录要求符合以下条件：没有上过编号“003”课程的同学学号、002号课的平均成绩：Insert SC select Sid,&#x27;002&#x27;,(Select avg(score) from SC where Cid=&#x27;002&#x27;) from Student where Sid not in (Select Sid from SC where Cid=&#x27;002&#x27;);17、按平均成绩从高到低显示所有学生的“数据库”、“企业管理”、“英语”三门的课程成绩，按如下形式显示：学生ID，数据库，企业管理，英语，有效课程数，有效平均分：select sid as 学生ID,(select score from sc where sc.sid=t.sid and cid=&#x27;004&#x27;) as 数据库,(select score from sc where sc.sid=t.sid and cid=&#x27;001&#x27;) as 企业管理,(select score from sc where sc.sid=t.sid and cid=&#x27;006&#x27;) as 英语,count(*) as 有效课程数, avg(t.score) as 平局成绩from sc as tgroup by sid order by avg(t.score)18、查询各科成绩最高和最低的分： 以如下的形式显示：课程ID，最高分，最低分select L.cid as 课程ID, L.score as 最高分,R.score as 最低分from sc L, sc R where L.cid = R.cid and L.score = (select max(IL.score) from sc IL, student as IM where L.cid=IL.cid and IM.sid=IL.sid group by IL.cid)and R.score = (select min(IR.score) from sc as IR where R.cid=IR.cid group by IR.cid);19、按各科平均成绩从低到高和及格率的百分数从高到低顺序：SELECT t.Cid AS 课程号,max(course.Cname)AS 课程名,isnull(AVG(score),0) AS 平均成绩,100 * SUM(CASE WHEN isnull(score,0)&gt;=60 THEN 1 ELSE 0 END)/COUNT(*) AS 及格百分数 FROM SC T,Course where t.Cid=course.Cid GROUP BY t.Cid ORDER BY 100 * SUM(CASE WHEN isnull(score,0)&gt;=60 THEN 1 ELSE 0 END)/COUNT(*) DESC 20、查询如下课程平均成绩和及格率的百分数(用”1行”显示): 企业管理（001），马克思（002），OO&amp;UML （003），数据库（004）：21、查询不同老师所教不同课程平均分从高到低显示： SELECT max(Z.Tid) AS 教师ID, MAX(Z.Tname) AS 教师姓名, C.Cid AS 课程ID, AVG(Score) AS 平均成绩 FROM SC AS T,Course AS C ,Teacher AS Z where T.Cid=C.Cid and C.Tid=Z.Tid GROUP BY C.Cid ORDER BY AVG(Score) DESC22、查询如下课程成绩第3名到第6名的学生成绩单：企业管理(001)，马克思(002)，UML(003)，数据库(004)：23、统计下列各科成绩，各分数段人数：课程ID，课程名称，[100-85],[85-70],[70-60],[ 小于60] ：SELECT SC.Cid as 课程ID, Cname as 课程名称,SUM(CASE WHEN score BETWEEN 85 AND 100 THEN 1 ELSE 0 END) AS [100 - 85] ,SUM(CASE WHEN score BETWEEN 70 AND 85 THEN 1 ELSE 0 END) AS [85 - 70],SUM(CASE WHEN score BETWEEN 60 AND 70 THEN 1 ELSE 0 END) AS [70 - 60],SUM(CASE WHEN score &lt; 60 THEN 1 ELSE 0 END) AS [60 -] FROM SC,Course where SC.Cid=Course.Cid GROUP BY SC.Cid,Cname;24、查询学生平均成绩及其名次：SELECT 1+(SELECT COUNT( distinct 平均成绩) FROM (SELECT Sid,AVG(score) AS 平均成绩 FROM SC GROUP BY Sid ) AS T1 WHERE 平均成绩 &gt; T2.平均成绩) as 名次, Sid as 学生学号,平均成绩 FROM (SELECT Sid,AVG(score) 平均成绩 FROM SC GROUP BY Sid ) AS T2 ORDER BY 平均成绩 desc; 25、查询各科成绩前三名的记录（不考虑成绩并列情况）：SELECT t1.Sid as 学生ID,t1.Cid as 课程ID,Score as 分数 FROM SC t1 WHERE score IN (SELECT TOP 3 score FROM SC WHERE t1.Cid= Cid ORDER BY score DESC) 26、查询每门课程被选修的学生数：select cid, count(sid) from sc group by cid;27、查询出只选修一门课程的全部学生的学号和姓名：select sc.sid, student.sname, count(cid) as 选课数from sc,student where sc.sid =student.sid group by sc.sid,Student.sname having count(cid)=1;28、查询男生、女生人数：select count(Ssex) as 男生人数 from student group by Ssex having Ssex=&#x27;男&#x27;；select count(Ssex) as 女生人数 from student group by Ssex having Ssex=&#x27;女&#x27;;29、查询姓“张”的学生名单：select sname from student where sname like &#x27;张%&#x27;;30、查询同名同姓的学生名单，并统计同名人数：select sanme,count(*) from student group by sname havang count(*)&gt;1;31、1981年出生的学生名单（注：student表中sage列的类型是datetime）:select sname, convert(char(11),DATEPART(year,sage)) as agefrom student where convert(char(11),DATEPART(year,Sage))=&#x27;1981&#x27;;32、查询平均成绩大于85的所有学生的学号、姓名和平均成绩：select Sname,SC.Sid ,avg(score) from Student,SC where Student.Sid=SC.Sid group by SC.Sid,Sname having avg(score)&gt;85;33、查询每门课程的平均成绩，结果按平均成绩升序排序，平均成绩相同时，按课程号降序排列：select Cid, avg(score) from sc group by cid order by avg(score), cid desc;34、查询课程名称为“数据库”，且分数低于60的学生名字和分数：select sname, isnull(score,0) from student, sc ,course where sc.sid=student.sid and sc.cid=course.cid and course.cname=&#x27;数据库&#x27; and score&lt;60;35、查询所有学生的选课情况：select sc.sid,sc.cid,sname,cname from sc,student course where sc.sid=student.sid and sc.cid=course.cid;36、查询任何一门课程成绩在70分以上的姓名、课程名称和分数：select distinct student.sid,student.sname,sc.cid,sc.score from student,sc where sc.score&gt;=70 and sc.sid=student.sid;37、查询不及格的课程，并按课程号从大到小的排列：select cid from sc where score&lt;60 order by cid;38、查询课程编号为“003”且课程成绩在80分以上的学生的学号和姓名：select sc.sid,student.sname from sc,student where sc.sid=student.sid and score&gt;80 and cid=&#x27;003&#x27;;39、求选了课程的学生人数：select count(*) from sc;40、查询选修“叶平”老师所授课程的学生中，成绩最高的学生姓名及其成绩：select student.sname,score from student,sc,course c, teacher where student.sid=sc.Sid and sc.cid=c.cidand c.Tid=teacher.Tidand teacher.tname=&#x27;叶平&#x27; and sc.score=(select max(score) from sc where cid=c.cid);41、查询各个课程及相应的选修人数：select count(*) from sc group by cid;42、查询不同课程成绩相同的学生和学号、课程号、学生成绩：select distinct a.sid,b.score from sc a ,sc b where a.score=b.score and a.cid&lt;&gt;b.cid;43、查询每门课程成绩最好的前两名：select t1.sid as 学生ID,t1.cid 课程ID, Score as 分数from sc t1 where score in (select top 2 score from sc where t1.cid=cid order by score desc)order by t1.cid;44、统计每门课程的学生选修人数(超过10人的课程才统计)。要求输出课程号和选修人数，查询结果按人数降序排序，若人数相同，按课程号升序排序：select cid as 课程号,count(*) as 人数from sc group by cidorder by count(*) desc cid;45、检索至少选修两门课程的学生学号：select sid from sc group by sid having count(*)&gt;=2;46、查询全部学生选修的课程和课程号和课程名：select cid ,cnamefrom course where cid in (select cid from sc group by cid);47、查询没学过”叶平”老师讲授的任一门课程的学生姓名：select sname from student where sid not in (select sid from course,teacher,sc where course.tid=teacher.tid and sc.cid=course.cid and tname=&#x27;叶平&#x27;);48、查询两门以上不及格课程的同学的学号以及其平均成绩：select sid,avg(isnull(score,0)) from sc where sid in (select sid from sc where score&lt;60 group by sid having count(*)&gt;2)group by sid;49、检索“004”课程分数小于60，按分数降序排列的同学学号：select sid from sc where cid=&#x27;004&#x27; and score&lt;60 order by score desc;50、删除“002”同学的“001”课程的成绩：delect from sc where sid=&#x27;002&#x27; and cid=&#x27;001&#x27;;","categories":[],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/tags/mysql/"}]},{"title":"Java 基础Gchat","slug":"java/java_GItChat_java","date":"2019-04-06T03:53:43.000Z","updated":"2021-09-22T11:19:04.624Z","comments":true,"path":"2019/04/06/java/java_GItChat_java/","link":"","permalink":"http://example.com/2019/04/06/java/java_GItChat_java/","excerpt":"","text":"Java 基础G JDK 和 JRE 有什么区别？ JDK：Java Development Kit 的简称，Java 开发工具包，提供了 Java 的开发环境和运行环境。 JRE：Java Runtime Environment 的简称，Java 运行环境，为 Java 的运行提供了所需环境。 具体来说 JDK 其实包含了 JRE，同时还包含了编译 Java 源码的编译器 Javac，还包含了很多 Java 程序调试和分析的工具。简单来说：如果你需要运行 Java 程序，只需安装 JRE 就可以了，如果你需要编写 Java 程序，需要安装 JDK。 == 和 equals 的区别是什么？ == 解读 对于基本类型和引用类型 == 的作用效果是不同的，如下所示： 基本类型：比较的是值是否相同； 引用类型：比较的是引用是否相同； 代码示例： 1234567String x = &quot;string&quot;;String y = &quot;string&quot;;String z = new String(&quot;string&quot;);System.out.println(x==y); // trueSystem.out.println(x==z); // falseSystem.out.println(x.equals(y)); // trueSystem.out.println(x.equals(z)); // true 代码解读：因为 x 和 y 指向的是同一个引用，所以 == 也是 true，而 new String()方法则重写开辟了内存空间，所以 == 结果为 false，而 equals 比较的一直是值，所以结果都为 true。 equals 解读 equals 本质上就是 ==，只不过 String 和 Integer 等重写了 equals 方法，把它变成了值比较。看下面的代码就明白了。 首先来看默认情况下 equals 比较一个有相同值的对象，代码如下： 123456789101112131415161718192021class Cat &#123; public Cat(String name) &#123; this.name = name; &#125; private String name; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125;&#125;Cat c1 = new Cat(&quot;tt&quot;);Cat c2 = new Cat(&quot;tt&quot;);System.out.println(c1.equals(c2)); // false 输出结果出乎我们的意料，竟然是 false？这是怎么回事，看了 equals 源码就知道了，源码如下： 123public boolean equals(Object obj) &#123; return (this == obj);&#125; 原来 equals 本质上就是 ==。 那问题来了，两个相同值的 String 对象，为什么返回的是 true？代码如下： 123String s1 = new String(&quot;老王&quot;);String s2 = new String(&quot;老王&quot;);System.out.println(s1.equals(s2)); // true 同样的，当我们进入 String 的 equals 方法，找到了答案，代码如下： 12345678910111213141516171819202122public boolean equals(Object anObject) &#123; if (this == anObject) &#123; return true; &#125; if (anObject instanceof String) &#123; String anotherString = (String)anObject; int n = value.length; if (n == anotherString.value.length) &#123; char v1[] = value; char v2[] = anotherString.value; int i = 0; while (n-- != 0) &#123; if (v1[i] != v2[i]) return false; i++; &#125; return true; &#125; &#125; return false;&#125; 原来是 String 重写了 Object 的 equals 方法，把引用比较改成了值比较。 总结 ：== 对于基本类型来说是值比较，对于引用类型来说是比较的是引用；而 equals 默认情况下是引用比较，只是很多类重新了 equals 方法，比如 String、Integer 等把它变成了值比较，所以一般情况下 equals 比较的是值是否相等。 两个对象的 hashCode() 相同，则 equals() 也一定为 true，对吗？ 不对，两个对象的 hashCode() 相同，equals() 不一定 true。 代码示例： 123456789String str1 = &quot;通话&quot;;String str2 = &quot;重地&quot;;System. out. println(String. format(&quot;str1：%d | str2：%d&quot;, str1. hashCode(),str2. hashCode()));System. out. println(str1. equals(str2));执行的结果：str1：1179395 | str2：1179395false 代码解读：很显然“通话”和“重地”的 hashCode() 相同，然而 equals() 则为 false，因为在散列表中，hashCode() 相等即两个键值对的哈希值相等，然而哈希值相等，并不一定能得出键值对相等。 final 在 Java 中有什么作用？ final 修饰的类叫最终类，该类不能被继承。 final 修饰的方法不能被重写。 final 修饰的变量叫常量，常量必须初始化，初始化之后值就不能被修改。 5. Java 中的 Math. round(-1. 5) 等于多少？ 等于 -1，因为在数轴上取值时，中间值（0.5）向右取整，所以正 0.5 是往上取整，负 0.5 是直接舍弃。 String 属于基础的数据类型吗？ String 不属于基础类型，基础类型有 8 种：byte、boolean、char、short、int、float、long、double，而 String 属于对象。 Java 中操作字符串都有哪些类？它们之间有什么区别？ 操作字符串的类有：String、StringBuffer、StringBuilder。 String 和 StringBuffer、StringBuilder 的区别在于 String 声明的是不可变的对象，每次操作都会生成新的 String 对象，然后将指针指向新的 String 对象，而 StringBuffer、StringBuilder 可以在原有对象的基础上进行操作，所以在经常改变字符串内容的情况下最好不要使用 String。 StringBuffer 和 StringBuilder 最大的区别在于，StringBuffer 是线程安全的，而 StringBuilder 是非线程安全的，但 StringBuilder 的性能却高于 StringBuffer，所以在单线程环境下推荐使用 StringBuilder，多线程环境下推荐使用 StringBuffer。 String str=&quot;i&quot;与 String str=new String(“i”)一样吗？ 不一样，因为内存的分配方式不一样。String str=&quot;i&quot;的方式，Java 虚拟机会将其分配到常量池中；而 String str=new String(“i”) 则会被分到堆内存中。 如何将字符串反转？ 使用 StringBuilder 或者 stringBuffer 的 reverse() 方法。 示例代码： 12345678// StringBuffer reverseStringBuffer stringBuffer = new StringBuffer();stringBuffer. append(&quot;abcdefg&quot;);System. out. println(stringBuffer. reverse()); // gfedcba// StringBuilder reverseStringBuilder stringBuilder = new StringBuilder();stringBuilder. append(&quot;abcdefg&quot;);System. out. println(stringBuilder. reverse()); // gfedcba String 类的常用方法都有那些？ 1234567891011indexOf()：返回指定字符的索引。charAt()：返回指定索引处的字符。replace()：字符串替换。trim()：去除字符串两端空白。split()：分割字符串，返回一个分割后的字符串数组。getBytes()：返回字符串的 byte 类型数组。length()：返回字符串长度。toLowerCase()：将字符串转成小写字母。toUpperCase()：将字符串转成大写字符。substring()：截取字符串。equals()：字符串比较。 抽象类必须要有抽象方法吗？ 不需要，抽象类不一定非要有抽象方法。 示例代码： 12345abstract class Cat &#123; public static void sayHi() &#123; System. out. println(&quot;hi~&quot;); &#125;&#125; 上面代码，抽象类并没有抽象方法但完全可以正常运行。 普通类和抽象类有哪些区别？ 普通类不能包含抽象方法，抽象类可以包含抽象方法。 抽象类不能直接实例化，普通类可以直接实例化。 13. 抽象类能使用 final 修饰吗？ 不能，定义抽象类就是让其他类继承的，如果定义为 final 该类就不能被继承，这样彼此就会产生矛盾，所以 final 不能修饰抽象类，如下图所示，编辑器也会提示错误信息： 编译器保存图 接口和抽象类有什么区别？ 实现：抽象类的子类使用 extends 来继承；接口必须使用 implements 来实现接口。 构造函数：抽象类可以有构造函数；接口不能有。 实现数量：类可以实现很多个接口；但是只能继承一个抽象类。 访问修饰符：接口中的方法默认使用 public 修饰；抽象类中的方法可以是任意访问修饰符。 Java 中 IO 流分为几种？ 按功能来分：输入流（input）、输出流（output）。 按类型来分：字节流和字符流。 字节流和字符流的区别是：字节流按 8 位传输以字节为单位输入输出数据，字符流按 16 位传输以字符为单位输入输出数据。 BIO、NIO、AIO 有什么区别？ BIO：Block IO 同步阻塞式 IO，就是我们平常使用的传统 IO，它的特点是模式简单使用方便，并发处理能力低。 NIO：Non IO 同步非阻塞 IO，是传统 IO 的升级，客户端和服务器端通过 Channel（通道）通讯，实现了多路复用。 AIO：Asynchronous IO 是 NIO 的升级，也叫 NIO2，实现了异步非堵塞 IO ，异步 IO 的操作基于事件和回调机制。 17. Files的常用方法都有哪些？ 123456789Files. exists()：检测文件路径是否存在。Files. createFile()：创建文件。Files. createDirectory()：创建文件夹。Files. delete()：删除一个文件或目录。Files. copy()：复制文件。Files. move()：移动文件。Files. size()：查看文件个数。Files. read()：读取文件。Files. write()：写入文件。 容器 Java 容器都有哪些？ Java 容器分为 Collection 和 Map 两大类，其下又有很多子类，如下所示： 12345678910111213141516CollectionListArrayListLinkedListVectorStackSetHashSetLinkedHashSetTreeSetMapHashMapLinkedHashMapTreeMapConcurrentHashMapHashtable Collection 和 Collections 有什么区别？ Collection 是一个集合接口，它提供了对集合对象进行基本操作的通用接口方法，所有集合都是它的子类，比如 List、Set 等。 Collections 是一个包装类，包含了很多静态方法，不能被实例化，就像一个工具类，比如提供的排序方法： Collections. sort(list)。 List、Set、Map 之间的区别是什么？ List、Set、Map 的区别主要体现在两个方面：元素是否有序、是否允许元素重复。 HashMap 和 Hashtable 有什么区别？ 存储：HashMap 运行 key 和 value 为 null，而 Hashtable 不允许。 线程安全：Hashtable 是线程安全的，而 HashMap 是非线程安全的。 推荐使用：在 Hashtable 的类注释可以看到，Hashtable 是保留类不建议使用，推荐在单线程环境下使用 HashMap 替代，如果需要多线程使用则用 ConcurrentHashMap 替代。 如何决定使用 HashMap 还是 TreeMap？ 对于在 Map 中插入、删除、定位一个元素这类操作，HashMap 是最好的选择，因为相对而言 HashMap 的插入会更快，但如果你要对一个 key 集合进行有序的遍历，那 TreeMap 是更好的选择。 说一下 HashMap 的实现原理？ HashMap 基于 Hash 算法实现的，我们通过 put(key,value)存储，get(key)来获取。当传入 key 时，HashMap 会根据 key. hashCode() 计算出 hash 值，根据 hash 值将 value 保存在 bucket 里。当计算出的 hash 值相同时，我们称之为 hash 冲突，HashMap 的做法是用链表和红黑树存储相同 hash 值的 value。当 hash 冲突的个数比较少时，使用链表否则使用红黑树。 说一下 HashSet 的实现原理？ HashSet 是基于 HashMap 实现的，HashSet 底层使用 HashMap 来保存所有元素，因此 HashSet 的实现比较简单，相关 HashSet 的操作，基本上都是直接调用底层 HashMap 的相关方法来完成，HashSet 不允许重复的值。 ArrayList 和 LinkedList 的区别是什么？ 数据结构实现：ArrayList 是动态数组的数据结构实现，而 LinkedList 是双向链表的数据结构实现。 随机访问效率：ArrayList 比 LinkedList 在随机访问的时候效率要高，因为 LinkedList 是线性的数据存储方式，所以需要移动指针从前往后依次查找。 增加和删除效率：在非首尾的增加和删除操作，LinkedList 要比 ArrayList 效率要高，因为 ArrayList 增删操作要影响数组内的其他数据的下标。 综合来说，在需要频繁读取集合中的元素时，更推荐使用 ArrayList，而在插入和删除操作较多时，更推荐使用 LinkedList。 如何实现数组和 List 之间的转换？ 数组转 List：使用 Arrays. asList(array) 进行转换。 List 转数组：使用 List 自带的 toArray() 方法。 代码示例： 12345678// list to arrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();list. add(&quot;tt&quot;);list. add(&quot;的博客&quot;);list. toArray();// array to listString[] array = new String[]&#123;&quot;tt&quot;,&quot;的博客&quot;&#125;;Arrays. asList(array); ArrayList 和 Vector 的区别是什么？ 线程安全：Vector 使用了 Synchronized 来实现线程同步，是线程安全的，而 ArrayList 是非线程安全的。 性能：ArrayList 在性能方面要优于 Vector。 扩容：ArrayList 和 Vector 都会根据实际的需要动态的调整容量，只不过在 Vector 扩容每次会增加 1 倍，而 ArrayList 只会增加 50%。 Array 和 ArrayList 有何区别？ Array 可以存储基本数据类型和对象，ArrayList 只能存储对象。 Array 是指定固定大小的，而 ArrayList 大小是自动扩展的。 Array 内置方法没有 ArrayList 多，比如 addAll、removeAll、iteration 等方法只有 ArrayList 有。 在 Queue 中 poll()和 remove()有什么区别？ 相同点：都是返回第一个元素，并在队列中删除返回的对象。 不同点：如果没有元素 poll()会返回 null，而 remove()会直接抛出 NoSuchElementException 异常。 代码示例： 123456Queue&lt;String&gt; queue = new LinkedList&lt;String&gt;();queue. offer(&quot;string&quot;); // addSystem. out. println(queue. poll());System. out. println(queue. remove());System. out. println(queue. size()); 哪些集合类是线程安全的？ Vector、Hashtable、Stack 都是线程安全的，而像 HashMap 则是非线程安全的，不过在 JDK 1.5 之后随着 Java. util. concurrent 并发包的出现，它们也有了自己对应的线程安全类，比如 HashMap 对应的线程安全类就是 ConcurrentHashMap。 迭代器 Iterator 是什么？ Iterator 接口提供遍历任何 Collection 的接口。我们可以从一个 Collection 中使用迭代器方法来获取迭代器实例。迭代器取代了 Java 集合框架中的 Enumeration，迭代器允许调用者在迭代过程中移除元素。 Iterator 怎么使用？有什么特点？ Iterator 使用代码如下： 123456List&lt;String&gt; list = new ArrayList&lt;&gt;();Iterator&lt;String&gt; it = list. iterator();while(it. hasNext())&#123; String obj = it. next(); System. out. println(obj);&#125; Iterator 的特点是更加安全，因为它可以确保，在当前遍历的集合元素被更改的时候，就会抛出 ConcurrentModificationException 异常。 Iterator 和 ListIterator 有什么区别？ Iterator 可以遍历 Set 和 List 集合，而 ListIterator 只能遍历 List。 Iterator 只能单向遍历，而 ListIterator 可以双向遍历（向前/后遍历）。 ListIterator 从 Iterator 接口继承，然后添加了一些额外的功能，比如添加一个元素、替换一个元素、获取前面或后面元素的索引位置。 怎么确保一个集合不能被修改？ 可以使用 Collections. unmodifiableCollection(Collection c) 方法来创建一个只读集合，这样改变集合的任何操作都会抛出 Java. lang. UnsupportedOperationException 异常。 示例代码如下： 12345List&lt;String&gt; list = new ArrayList&lt;&gt;();list. add(&quot;x&quot;);Collection&lt;String&gt; clist = Collections. unmodifiableCollection(list);clist. add(&quot;y&quot;); // 运行时此行报错System. out. println(list. size()); 多线程 并行和并发有什么区别？ 并行：多个处理器或多核处理器同时处理多个任务。 并发：多个任务在同一个 CPU 核上，按细分的时间片轮流(交替)执行，从逻辑上来看那些任务是同时执行。 如下图： 并发和并行 并发 = 两个队列和一台咖啡机。 并行 = 两个队列和两台咖啡机。 线程和进程的区别？ 一个程序下至少有一个进程，一个进程下至少有一个线程，一个进程下也可以有多个线程来增加程序的执行速度。 守护线程是什么？ 守护线程是运行在后台的一种特殊进程。它独立于控制终端并且周期性地执行某种任务或等待处理某些发生的事件。在 Java 中垃圾回收线程就是特殊的守护线程。 创建线程有哪几种方式？ 创建线程有三种方式： 继承 Thread 重写 run 方法； 实现 Runnable 接口； 实现 Callable 接口。 runnable 和 callable 区别 runnable 没有返回值，callable 可以拿到有返回值，callable 可以看作是 runnable 的补充。 线程状态 线程的状态： NEW 尚未启动 RUNNABLE 正在执行中 BLOCKED 阻塞的（被同步锁或者IO锁阻塞） WAITING 永久等待状态 TIMED_WAITING 等待指定的时间重新被唤醒的状态 TERMINATED 执行完成 sleep() 和 wait() 区别 类的不同：sleep() 来自 Thread，wait() 来自 Object。 释放锁：sleep() 不释放锁；wait() 释放锁。 用法不同：sleep() 时间到会自动恢复；wait() 可以使用 notify()/notifyAll()直接唤醒。 notify()和 notifyAll()区别 notifyAll()会唤醒所有的线程，notify()之后唤醒一个线程。notifyAll() 调用后，会将全部线程由等待池移到锁池，然后参与锁的竞争，竞争成功则继续执行，如果不成功则留在锁池等待锁被释放后再次参与竞争。而 notify()只会唤醒一个线程，具体唤醒哪一个线程由虚拟机控制。 线程的 run() 和 start() 区别 start() 方法用于启动线程，run() 方法用于执行线程的运行时代码。run() 可以重复调用，而 start() 只能调用一次。 创建线程池方式 线程池创建有七种方式，最核心的是最后一种： newSingleThreadExecutor()：它的特点在于工作线程数目被限制为 1，操作一个无界的工作队列，所以它保证了所有任务的都是被顺序执行，最多会有一个任务处于活动状态，并且不允许使用者改动线程池实例，因此可以避免其改变线程数目； newCachedThreadPool()：它是一种用来处理大量短时间工作任务的线程池，具有几个鲜明特点：它会试图缓存线程并重用，当无缓存线程可用时，就会创建新的工作线程；如果线程闲置的时间超过 60 秒，则被终止并移出缓存；长时间闲置时，这种线程池，不会消耗什么资源。其内部使用 SynchronousQueue 作为工作队列； newFixedThreadPool(int nThreads)：重用指定数目（nThreads）的线程，其背后使用的是无界的工作队列，任何时候最多有 nThreads 个工作线程是活动的。这意味着，如果任务数量超过了活动队列数目，将在工作队列中等待空闲线程出现；如果有工作线程退出，将会有新的工作线程被创建，以补足指定的数目 nThreads； newSingleThreadScheduledExecutor()：创建单线程池，返回 ScheduledExecutorService，可以进行定时或周期性的工作调度； newScheduledThreadPool(int corePoolSize)：和newSingleThreadScheduledExecutor()类似，创建的是个 ScheduledExecutorService，可以进行定时或周期性的工作调度，区别在于单一工作线程还是多个工作线程； newWorkStealingPool(int parallelism)：这是一个经常被人忽略的线程池，Java 8 才加入这个创建方法，其内部会构建ForkJoinPool，利用Work-Stealing算法，并行地处理任务，不保证处理顺序； ThreadPoolExecutor()：是最原始的线程池创建，上面1-3创建方式都是对ThreadPoolExecutor的封装。 线程池状态 RUNNING：这是最正常的状态，接受新的任务，处理等待队列中的任务。 SHUTDOWN：不接受新的任务提交，但是会继续处理等待队列中的任务。 STOP：不接受新的任务提交，不再处理等待队列中的任务，中断正在执行任务的线程。 TIDYING：所有的任务都销毁了，workCount 为 0，线程池的状态在转换为 TIDYING 状态时，会执行钩子方法 terminated()。 TERMINATED：terminated()方法结束后，线程池的状态就会变成这个。 线程池中 submit() 和 execute() 区别 execute()：只能执行 Runnable 类型的任务。 submit()：可以执行 Runnable 和 Callable 类型的任务。 Callable 类型的任务可以获取执行的返回值，而 Runnable 执行无返回值。 在 Java 程序中怎么保证多线程的运行安全 方法一：使用安全类，比如 Java. util. concurrent 下的类。 方法二：使用自动锁 synchronized。 方法三：使用手动锁 Lock。 手动锁 Java 示例代码如下： 12345678910Lock lock = new ReentrantLock();lock. lock();try &#123; System. out. println(&quot;获得锁&quot;);&#125; catch (Exception e) &#123; // TODO: handle exception&#125; finally &#123; System. out. println(&quot;释放锁&quot;); lock. unlock();&#125; 多线程中 synchronized 锁升级的原理是什么？ synchronized 锁升级原理：在锁对象的对象头里面有一个 threadid 字段，在第一次访问的时候 threadid 为空，jvm 让其持有偏向锁，并将 threadid 设置为其线程 id，再次进入的时候会先判断 threadid 是否与其线程 id 一致，如果一致则可以直接使用此对象，如果不一致，则升级偏向锁为轻量级锁，通过自旋循环一定次数来获取锁，执行一定次数之后，如果还没有正常获取到要使用的对象，此时就会把锁从轻量级升级为重量级锁，此过程就构成了 synchronized 锁的升级。 锁的升级的目的：锁升级是为了减低了锁带来的性能消耗。在 Java 6 之后优化 synchronized 的实现方式，使用了偏向锁升级为轻量级锁再升级到重量级锁的方式，从而减低了锁带来的性能消耗。 什么是死锁 当线程 A 持有独占锁a，并尝试去获取独占锁 b 的同时，线程 B 持有独占锁 b，并尝试获取独占锁 a 的情况下，就会发生 AB 两个线程由于互相持有对方需要的锁，而发生的阻塞现象，我们称为死锁。 怎么防止死锁？ 尽量使用 tryLock(long timeout, TimeUnit unit)的方法(ReentrantLock、ReentrantReadWriteLock)，设置超时时间，超时可以退出防止死锁。 尽量使用 Java. util. concurrent 并发类代替自己手写锁。 尽量降低锁的使用粒度，尽量不要几个功能用同一把锁。 尽量减少同步的代码块。 51. ThreadLocal 是什么？有哪些使用场景？ ThreadLocal 为每个使用该变量的线程提供独立的变量副本，所以每一个线程都可以独立地改变自己的副本，而不会影响其它线程所对应的副本。 ThreadLocal 的经典使用场景是数据库连接和 session 管理等。 synchronized 底层实现原理 synchronized 是由一对 monitorenter/monitorexit 指令实现的，monitor 对象是同步的基本实现单元。在 Java 6 之前，monitor 的实现完全是依靠操作系统内部的互斥锁，因为需要进行用户态到内核态的切换，所以同步操作是一个无差别的重量级操作，性能也很低。但在 Java 6 的时候，Java 虚拟机 对此进行了大刀阔斧地改进，提供了三种不同的 monitor 实现，也就是常说的三种不同的锁：偏向锁（Biased Locking）、轻量级锁和重量级锁，大大改进了其性能。 synchronized 和 volatile 的区别 volatile 是变量修饰符；synchronized 是修饰类、方法、代码段。 volatile 仅能实现变量的修改可见性，不能保证原子性；而 synchronized 则可以保证变量的修改可见性和原子性。 volatile 不会造成线程的阻塞；synchronized 可能会造成线程的阻塞。 synchronized 和 Lock 区别 synchronized 可以给类、方法、代码块加锁；而 lock 只能给代码块加锁。 synchronized 不需要手动获取锁和释放锁，使用简单，发生异常会自动释放锁，不会造成死锁；而 lock 需要自己加锁和释放锁，如果使用不当没有 unLock()去释放锁就会造成死锁。 通过 Lock 可以知道有没有成功获取锁，而 synchronized 却无法办到。 synchronized 和 ReentrantLock 区别是什么？ synchronized 早期的实现比较低效，对比 ReentrantLock，大多数场景性能都相差较大，但是在 Java 6 中对 synchronized 进行了非常多的改进。 主要区别如下： ReentrantLock 使用起来比较灵活，但是必须有释放锁的配合动作； ReentrantLock 必须手动获取与释放锁，而 synchronized 不需要手动释放和开启锁； ReentrantLock 只适用于代码块锁，而 synchronized 可用于修饰方法、代码块等。 volatile 标记的变量不会被编译器优化；synchronized 标记的变量可以被编译器优化。 atomic 的原理 atomic 主要利用 CAS (Compare And Wwap) 和 volatile 和 native 方法来保证原子操作，从而避免 synchronized 的高开销，执行效率大为提升。 反射 什么是反射 反射是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为 Java 语言的反射机制。 什么是 Java 序列化？什么情况下需要序列化？ Java 序列化是为了保存各种对象在内存中的状态，并且可以把保存的对象状态再读出来。 以下情况需要使用 Java 序列化： 想把的内存中的对象状态保存到一个文件中或者数据库中时候； 想用套接字在网络上传送对象的时候； 想通过RMI（远程方法调用）传输对象的时候。 动态代理是什么？有哪些应用？ 动态代理是运行时动态生成代理类。 动态代理的应用有 spring aop、hibernate 数据查询、测试框架的后端 mock、rpc，Java注解对象获取等。 怎么实现动态代理？ JDK 原生动态代理和 cglib 动态代理。JDK 原生动态代理是基于接口实现的，而 cglib 是基于继承当前类的子类实现的。 对象拷贝 为什么要使用克隆？ 克隆的对象可能包含一些已经修改过的属性，而 new 出来的对象的属性都还是初始化时候的值，所以当需要一个新的对象来保存当前对象的“状态”就靠克隆方法了。 如何实现对象克隆？ 实现 Cloneable 接口并重写 Object 类中的 clone() 方法。 实现 Serializable 接口，通过对象的序列化和反序列化实现克隆，可以实现真正的深度克隆。 深拷贝和浅拷贝区别是什么？ 浅克隆：当对象被复制时只复制它本身和其中包含的值类型的成员变量，而引用类型的成员对象并没有复制。 深克隆：除了对象本身被复制外，对象所包含的所有成员变量也将复制。 Java Web JSP 和 servlet 有什么区别？ JSP 是 servlet 技术的扩展，本质上就是 servlet 的简易方式。servlet 和 JSP 最主要的不同点在于，servlet 的应用逻辑是在 Java 文件中，并且完全从表示层中的 html 里分离开来，而 JSP 的情况是 Java 和 html 可以组合成一个扩展名为 JSP 的文件。JSP 侧重于视图，servlet 主要用于控制逻辑。 JSP 有哪些内置对象？作用分别是什么？ JSP 有 9 大内置对象： request：封装客户端的请求，其中包含来自 get 或 post 请求的参数； response：封装服务器对客户端的响应； pageContext：通过该对象可以获取其他对象； session：封装用户会话的对象； application：封装服务器运行环境的对象； out：输出服务器响应的输出流对象； config：Web 应用的配置对象； page：JSP 页面本身（相当于 Java 程序中的 this）； exception：封装页面抛出异常的对象。 说一下 JSP 的 4 种作用域？ page：代表与一个页面相关的对象和属性。 request：代表与客户端发出的一个请求相关的对象和属性。一个请求可能跨越多个页面，涉及多个 Web 组件；需要在页面显示的临时数据可以置于此作用域。 session：代表与某个用户与服务器建立的一次会话相关的对象和属性。跟某个用户相关的数据应该放在用户自己的 session 中。 application：代表与整个 Web 应用程序相关的对象和属性，它实质上是跨越整个 Web 应用程序，包括多个页面、请求和会话的一个全局作用域。 session 和 cookie 区别 存储位置不同：session 存储在服务器端；cookie 存储在浏览器端。 安全性不同：cookie 安全性一般，在浏览器存储，可以被伪造和修改。 容量和个数限制：cookie 有容量限制，每个站点下的 cookie 也有个数限制。 存储的多样性：session 可以存储在 Redis 中、数据库中、应用程序中；而 cookie 只能存储在浏览器中。 session 的工作原理 session 的工作原理是客户端登录完成之后，服务器会创建对应的 session，session 创建完之后，会把 session 的 id 发送给客户端，客户端再存储到浏览器中。这样客户端每次访问服务器时，都会带着 sessionid，服务器拿到 sessionid 之后，在内存找到与之对应的 session 这样就可以正常工作了。 如果客户端禁止 cookie 能实现 session 还能用吗？ 可以用，session 只是依赖 cookie 存储 sessionid，如果 cookie 被禁用了，可以使用 url 中添加 sessionid 的方式保证 session 能正常使用。 spring mvc 和 struts 的区别 拦截级别：struts2 是类级别的拦截；spring mvc 是方法级别的拦截。 数据独立性：spring mvc 的方法之间基本上独立的，独享 request 和 response 数据，请求数据通过参数获取，处理结果通过 ModelMap 交回给框架，方法之间不共享变量；而 struts2 虽然方法之间也是独立的，但其所有 action 变量是共享的，这不会影响程序运行，却给我们编码和读程序时带来了一定的麻烦。 拦截机制：struts2 有以自己的 interceptor 机制，spring mvc 用的是独立的 aop 方式，这样导致struts2 的配置文件量比 spring mvc 大。 对 ajax 的支持：spring mvc 集成了ajax，所有 ajax 使用很方便，只需要一个注解 @ResponseBody 就可以实现了；而 struts2 一般需要安装插件或者自己写代码才行。 如何避免 SQL 注入？ 使用预处理 PreparedStatement。 使用正则表达式过滤掉字符中的特殊字符。 什么是 XSS 攻击，如何避免？ XSS 攻击：即跨站脚本攻击，它是 Web 程序中常见的漏洞。原理是攻击者往 Web 页面里插入恶意的脚本代码（css 代码、Javascript 代码等），当用户浏览该页面时，嵌入其中的脚本代码会被执行，从而达到恶意攻击用户的目的，如盗取用户 cookie、破坏页面结构、重定向到其他网站等。 预防 XSS 的核心是必须对输入的数据做过滤处理。 什么是 CSRF 攻击，如何避免？ CSRF：Cross-Site Request Forgery（中文：跨站请求伪造），可以理解为攻击者盗用了你的身份，以你的名义发送恶意请求，比如：以你名义发送邮件、发消息、购买商品，虚拟货币转账等。 防御手段： 验证请求来源地址； 关键操作添加验证码； 在请求地址添加 token 并验证。 异常 throw 和 throws 的区别 throw：是真实抛出一个异常。 throws：是声明可能会抛出一个异常。 final、finally、finalize final：是修饰符，如果修饰类，此类不能被继承；如果修饰方法和变量，则表示此方法和此变量不能在被改变，只能使用。 finally：是 try{} catch{} finally{} 最后一部分，表示不论发生任何情况都会执行，finally 部分可以省略，但如果 finally 部分存在，则一定会执行 finally 里面的代码。 finalize： 是 Object 类的一个方法，在垃圾收集器执行的时候会调用被回收对象的此方法。 try-catch-finally 中哪个部分可以省略？ try-catch-finally 其中 catch 和 finally 都可以被省略，但是不能同时省略，也就是说有 try 的时候，必须后面跟一个 catch 或者 finally。 try-catch-finally 中，如果 catch 中 return 了，finally 还会执行吗？ finally 一定会执行，即使是 catch 中 return 了，catch 中的 return 会等 finally 中的代码执行完之后，才会执行。 常见的异常类有哪些？ NullPointerException 空指针异常 ClassNotFoundException 指定类不存在 NumberFormatException 字符串转换为数字异常 IndexOutOfBoundsException 数组下标越界异常 ClassCastException 数据类型转换异常 FileNotFoundException 文件未找到异常 NoSuchMethodException 方法不存在异常 IOException IO 异常 SocketException Socket 异常 网络 http 响应码 301 和 302 代表的是什么？有什么区别？ 301：永久重定向。 302：暂时重定向。 它们的区别是，301 对搜索引擎优化（SEO）更加有利；302 有被提示为网络拦截的风险。 forward 和 redirect 的区别？ forward 是转发 和 redirect 是重定向： 地址栏 url 显示：foward url 不会发生改变，redirect url 会发生改变； 数据共享：forward 可以共享 request 里的数据，redirect 不能共享； 效率：forward 比 redirect 效率高。 81. 简述 tcp 和 udp的区别？ tcp 和 udp 是 OSI 模型中的运输层中的协议。tcp 提供可靠的通信传输，而 udp 则常被用于让广播和细节控制交给应用的通信传输。 两者的区别大致如下： tcp 面向连接，udp 面向非连接即发送数据前不需要建立链接； tcp 提供可靠的服务（数据传输），udp 无法保证； tcp 面向字节流，udp 面向报文； tcp 数据传输慢，udp 数据传输快； tcp 为什么要三次握手，两次不行吗？为什么？ 如果采用两次握手，那么只要服务器发出确认数据包就会建立连接，但由于客户端此时并未响应服务器端的请求，那此时服务器端就会一直在等待客户端，这样服务器端就白白浪费了一定的资源。若采用三次握手，服务器端没有收到来自客户端的再此确认，则就会知道客户端并没有要求建立请求，就不会浪费服务器的资源。 tcp 粘包是怎么产生的 tcp 粘包可能发生在发送端或者接收端，分别来看两端各种产生粘包的原因： 发送端粘包：发送端需要等缓冲区满才发送出去，造成粘包； 接收方粘包：接收方不及时接收缓冲区的包，造成多个包接收。 84. OSI 的七层模型 物理层：利用传输介质为数据链路层提供物理连接，实现比特流的透明传输。 数据链路层：负责建立和管理节点间的链路。 网络层：通过路由选择算法，为报文或分组通过通信子网选择最适当的路径。 传输层：向用户提供可靠的端到端的差错和流量控制，保证报文的正确传输。 会话层：向两个实体的表示层提供建立和使用连接的方法。 表示层：处理用户信息的表示问题，如编码、数据格式转换和加密解密等。 应用层：直接向用户提供服务，完成用户希望在网络上完成的各种工作。 get 和 post 请求区别 get 请求会被浏览器主动缓存，而 post 不会。 get 传递参数有大小限制，而 post 没有。 post 参数传输更安全，get 的参数会明文限制在 url 上，post 不会。 如何实现跨域？ 服务器端运行跨域 设置 CORS 等于 *； 在单个接口使用注解 @CrossOrigin 运行跨域； 使用 jsonp 跨域； JSONP 实现原理 jsonp：JSON with Padding，它是利用script标签的 src 连接可以访问不同源的特性，加载远程返回的“JS 函数”来执行的。 设计模式 说一下你熟悉的设计模式？ 单例模式：保证被创建一次，节省系统开销。 工厂模式（简单工厂、抽象工厂）：解耦代码。 观察者模式：定义了对象之间的一对多的依赖，这样一来，当一个对象改变时，它的所有的依赖者都会收到通知并自动更新。 外观模式：提供一个统一的接口，用来访问子系统中的一群接口，外观定义了一个高层的接口，让子系统更容易使用。 模版方法模式：定义了一个算法的骨架，而将一些步骤延迟到子类中，模版方法使得子类可以在不改变算法结构的情况下，重新定义算法的步骤。 状态模式：允许对象在内部状态改变时改变它的行为，对象看起来好像修改了它的类。 简单工厂和抽象工厂有什么区别？ 简单工厂：用来生产同一等级结构中的任意产品，对于增加新的产品，无能为力。 工厂方法：用来生产同一等级结构中的固定产品，支持增加任意产品。 抽象工厂：用来生产不同产品族的全部产品，对于增加新的产品，无能为力；支持增加产品族。 Spring/Spring MVC 为什么要使用 spring？ spring 提供 ioc 技术，容器会帮你管理依赖的对象，从而不需要自己创建和管理依赖对象了，更轻松的实现了程序的解耦。 spring 提供了事务支持，使得事务操作变的更加方便。 spring 提供了面向切片编程，这样可以更方便的处理某一类的问题。 更方便的框架集成，spring 可以很方便的集成其他框架，比如 MyBatis、hibernate 等。 aop aop 是面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。 简单来说就是统一处理某一“切面”（类）的问题的编程思想，比如统一处理日志、异常等。 ioc ioc：Inversionof Control（中文：控制反转）是 spring 的核心，对于 spring 框架来说，就是由 spring 来负责控制对象的生命周期和对象间的关系。 简单来说，控制指的是当前对象对内部成员的控制权；控制反转指的是，这种控制权不由当前对象管理了，由其他（类,第三方容器）来管理。 spring 主要模块 spring core：框架的最基础部分，提供 ioc 和依赖注入特性。 spring context：构建于 core 封装包基础上的 context 封装包，提供了一种框架式的对象访问方法。 spring dao：Data Access Object 提供了JDBC的抽象层。 spring aop：提供了面向切面的编程实现，让你可以自定义拦截器、切点等。 spring Web：提供了针对 Web 开发的集成特性，例如文件上传，利用 servlet listeners 进行 ioc 容器初始化和针对 Web 的 ApplicationContext。 spring Web mvc：spring 中的 mvc 封装包提供了 Web 应用的 Model-View-Controller（MVC）的实现。 spring 常用的注入方式有哪些？ setter 属性注入 构造方法注入 注解方式注入 spring 中的 bean 是线程安全的吗？ spring 中的 bean 默认是单例模式，spring 框架并没有对单例 bean 进行多线程的封装处理。 实际上大部分时候 spring bean 无状态的（比如 dao 类），所有某种程度上来说 bean 也是安全的，但如果 bean 有状态的话（比如 view model 对象），那就要开发者自己去保证线程安全了，最简单的就是改变 bean 的作用域，把“singleton”变更为“prototype”，这样请求 bean 相当于 new Bean()了，所以就可以保证线程安全了。 有状态就是有数据存储功能。 无状态就是不会保存数据。 96. spring 支持几种 bean 的作用域？ spring 支持 5 种作用域，如下： singleton：spring ioc 容器中只存在一个 bean 实例，bean 以单例模式存在，是系统默认值； prototype：每次从容器调用 bean 时都会创建一个新的示例，既每次 getBean()相当于执行 new Bean()操作； Web 环境下的作用域： request：每次 http 请求都会创建一个 bean； session：同一个 http session 共享一个 bean 实例； global-session：用于 portlet 容器，因为每个 portlet 有单独的 session，globalsession 提供一个全局性的 http session。 注意： 使用 prototype 作用域需要慎重的思考，因为频繁创建和销毁 bean 会带来很大的性能开销。 spring 自动装配 bean 有哪些方式？ no：默认值，表示没有自动装配，应使用显式 bean 引用进行装配。 byName：它根据 bean 的名称注入对象依赖项。 byType：它根据类型注入对象依赖项。 构造函数：通过构造函数来注入依赖项，需要设置大量的参数。 autodetect：容器首先通过构造函数使用 autowire 装配，如果不能，则通过 byType 自动装配。 spring 事务实现方式 声明式事务：声明式事务也有两种实现方式，基于 xml 配置文件的方式和注解方式（在类上添加 @Transaction 注解）。 编码方式：提供编码的形式管理和维护事务。 spring 的事务隔离 spring 有五大隔离级别，默认值为 ISOLATION_DEFAULT（使用数据库的设置），其他四个隔离级别和数据库的隔离级别一致： ISOLATION_DEFAULT：用底层数据库的设置隔离级别，数据库设置的是什么我就用什么； ISOLATIONREADUNCOMMITTED：未提交读，最低隔离级别、事务未提交前，就可被其他事务读取（会出现幻读、脏读、不可重复读）； ISOLATIONREADCOMMITTED：提交读，一个事务提交后才能被其他事务读取到（会造成幻读、不可重复读），SQL server 的默认级别； ISOLATIONREPEATABLEREAD：可重复读，保证多次读取同一个数据时，其值都和事务开始时候的内容是一致，禁止读取到别的事务未提交的数据（会造成幻读），MySQL 的默认级别； ISOLATION_SERIALIZABLE：序列化，代价最高最可靠的隔离级别，该隔离级别能防止脏读、不可重复读、幻读。 脏读 ：表示一个事务能够读取另一个事务中还未提交的数据。比如，某个事务尝试插入记录 A，此时该事务还未提交，然后另一个事务尝试读取到了记录 A。 不可重复读 ：是指在一个事务内，多次读同一数据。 幻读 ：指同一个事务内多次查询返回的结果集不一样。比如同一个事务 A 第一次查询时候有 n 条记录，但是第二次同等条件下查询却有 n+1 条记录，这就好像产生了幻觉。发生幻读的原因也是另外一个事务新增或者删除或者修改了第一个事务结果集里面的数据，同一个记录的数据内容被修改了，所有数据行的记录就变多或者变少了。 spring mvc 运行流程 spring mvc 先将请求发送给 DispatcherServlet。 DispatcherServlet 查询一个或多个 HandlerMapping，找到处理请求的 Controller。 DispatcherServlet 再把请求提交到对应的 Controller。 Controller 进行业务逻辑处理后，会返回一个ModelAndView。 Dispathcher 查询一个或多个 ViewResolver 视图解析器，找到 ModelAndView 对象指定的视图对象。 视图对象负责渲染返回给客户端。 spring mvc 组件 前置控制器 DispatcherServlet。 映射控制器 HandlerMapping。 处理器 Controller。 模型和视图 ModelAndView。 视图解析器 ViewResolver。 @RequestMapping 的作用 将 http 请求映射到相应的类/方法上。 @Autowired 的作用 @Autowired 它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作，通过@Autowired 的使用来消除 set/get 方法。 Spring Boot/Spring Cloud spring boot spring boot 是为 spring 服务的，是用来简化新 spring 应用的初始搭建以及开发过程的。 为什么要用 spring boot 配置简单 独立运行 自动装配 无代码生成和 xml 配置 提供应用监控 易上手 提升开发效率 106. spring boot 核心配置文件是什么？ spring boot 核心的两个配置文件： bootstrap (. yml 或者 . properties)：boostrap 由父 ApplicationContext 加载的，比 applicaton 优先加载，且 boostrap 里面的属性不能被覆盖； application (. yml 或者 . properties)：用于 spring boot 项目的自动化配置。 107. spring boot 配置文件有哪几种类型？它们有什么区别？ 配置文件有 . properties 格式和 . yml 格式，它们主要的区别是书法风格不同。 . properties 配置如下： 12spring. RabbitMQ. port=5672 . yml 配置如下： 1234spring: RabbitMQ: port: 5672 . yml 格式不支持 @PropertySource 注解导入。 spring boot 有哪些方式可以实现热部署？ 使用 devtools 启动热部署，添加 devtools 库，在配置文件中把 spring. devtools. restart. enabled 设置为 true； 使用 Intellij Idea 编辑器，勾上自动编译或手动重新编译。 109. jpa 和 hibernate 有什么区别？ jpa 全称 Java Persistence API，是 Java 持久化接口规范，hibernate 属于 jpa 的具体实现。 什么是 spring cloud spring cloud 是一系列框架的有序集合。它利用 spring boot 的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用 spring boot 的开发风格做到一键启动和部署。 spring cloud 断路器的作用 在分布式架构中，断路器模式的作用也是类似的，当某个服务单元发生故障（类似用电器发生短路）之后，通过断路器的故障监控（类似熔断保险丝），向调用方返回一个错误响应，而不是长时间的等待。这样就不会使得线程因调用故障服务被长时间占用不释放，避免了故障在分布式系统中的蔓延。 spring cloud 的核心组件 Eureka：服务注册于发现。 Feign：基于动态代理机制，根据注解和选择的机器，拼接请求 url 地址，发起请求。 Ribbon：实现负载均衡，从一个服务的多台机器中选择一台。 Hystrix：提供线程池，不同的服务走不同的线程池，实现了不同服务调用的隔离，避免了服务雪崩的问题。 Zuul：网关管理，由 Zuul 网关转发请求给对应的服务。 Hibernate 为什么要使用 hibernate hibernate 是对 jdbc 的封装，大大简化了数据访问层的繁琐的重复性代码。 hibernate 是一个优秀的 ORM 实现，很多程度上简化了 DAO 层的编码功能。 可以很方便的进行数据库的移植工作。 提供了缓存机制，是程序执行更改的高效。 什么是 ORM 框架 ORM（Object Relation Mapping）对象关系映射，是把数据库中的关系数据映射成为程序中的对象。 使用 ORM 的优点：提高了开发效率降低了开发成本、开发更简单更对象化、可移植更强。 hibernate 中如何在控制台查看打印的 SQL 语句 在 Config 里面把 hibernate. show_SQL 设置为 true 就可以。但不建议开启，开启之后会降低程序的运行效率。 hibernate 有几种查询方式？ 三种：hql、原生 SQL、条件查询 Criteria。 hibernate 实体类可以被定义为 final 吗？ 实体类可以定义为 final 类，但这样的话就不能使用 hibernate 代理模式下的延迟关联提供性能了，所以不建议定义实体类为 final。 在 hibernate 中使用 Integer 和 int 做映射有什么区别 Integer 类型为对象，它的值允许为 null，而 int 属于基础数据类型，值不能为 null。 hibernate 是如何工作的？ 读取并解析配置文件。 读取并解析映射文件，创建 SessionFactory。 打开 Session。 创建事务。 进行持久化操作。 提交事务。 关闭 Session。 关闭 SessionFactory。 get()和 load()的区别？ 数据查询时，没有 OID 指定的对象，get() 返回 null；load() 返回一个代理对象。 load()支持延迟加载；get() 不支持延迟加载。 121. hibernate 的缓存机制 hibernate 常用的缓存有一级缓存和二级缓存： 一级缓存：也叫 Session 缓存，只在 Session 作用范围内有效，不需要用户干涉，由 hibernate 自身维护，可以通过：evict(object)清除 object 的缓存；clear()清除一级缓存中的所有缓存；flush()刷出缓存； 二级缓存：应用级别的缓存，在所有 Session 中都有效，支持配置第三方的缓存，如：EhCache。 hibernate 对象有哪些状态 临时/瞬时状态：直接 new 出来的对象，该对象还没被持久化（没保存在数据库中），不受 Session 管理。 持久化状态：当调用 Session 的 save/saveOrupdate/get/load/list 等方法的时候，对象就是持久化状态。 游离状态：Session 关闭之后对象就是游离状态。 123. 在 hibernate 中 getCurrentSession 和 openSession 的区别是什么 getCurrentSession 会绑定当前线程，而 openSession 则不会。 getCurrentSession 事务是 Spring 控制的，并且不需要手动关闭，而 openSession 需要我们自己手动开启和提交事务。 124. hibernate 实体类必须要有无参构造函数吗？为什么？ hibernate 中每个实体类必须提供一个无参构造函数，因为 hibernate 框架要使用 reflection api，通过调用 ClassnewInstance() 来创建实体类的实例，如果没有无参的构造函数就会抛出异常。 MyBatis MyBatis 中 #{}和 ${}的区别是什么？ #{}是预编译处理，${}是字符替换。 在使用 #{}时，MyBatis 会将 SQL 中的 #{}替换成“?”，配合 PreparedStatement 的 set 方法赋值，这样可以有效的防止 SQL 注入，保证程序的运行安全。 MyBatis 有几种分页方式？ 分页方式：逻辑分页和物理分页。 逻辑分页： 使用 MyBatis 自带的 RowBounds 进行分页，它是一次性查询很多数据，然后在数据中再进行检索。 物理分页： 自己手写 SQL 分页或使用分页插件 PageHelper，去数据库查询指定条数的分页数据的形式。 RowBounds 是一次性查询全部结果吗？为什么？ RowBounds 表面是在“所有”数据中检索数据，其实并非是一次性查询出所有数据，因为 MyBatis 是对 jdbc 的封装，在 jdbc 驱动中有一个 Fetch Size 的配置，它规定了每次最多从数据库查询多少条数据，假如你要查询更多数据，它会在你执行 next()的时候，去查询更多的数据。就好比你去自动取款机取 10000 元，但取款机每次最多能取 2500 元，所以你要取 4 次才能把钱取完。只是对于 jdbc 来说，当你调用 next()的时候会自动帮你完成查询工作。这样做的好处可以有效的防止内存溢出。 Fetch Size 官方相关文档：http://t.cn/EfSE2g3 MyBatis 逻辑分页和物理分页的区别是什么？ 逻辑分页是一次性查询很多数据，然后再在结果中检索分页的数据。这样做弊端是需要消耗大量的内存、有内存溢出的风险、对数据库压力较大。 物理分页是从数据库查询指定条数的数据，弥补了一次性全部查出的所有数据的种种缺点，比如需要大量的内存，对数据库查询压力较大等问题。 129. MyBatis 是否支持延迟加载？延迟加载的原理是什么？ MyBatis 支持延迟加载，设置 lazyLoadingEnabled=true 即可。 延迟加载的原理的是调用的时候触发加载，而不是在初始化的时候就加载信息。比如调用 a. getB(). getName()，这个时候发现 a. getB() 的值为 null，此时会单独触发事先保存好的关联 B 对象的 SQL，先查询出来 B，然后再调用 a. setB(b)，而这时候再调用 a. getB(). getName() 就有值了，这就是延迟加载的基本原理。 说一下 MyBatis 的一级缓存和二级缓存？ 一级缓存：基于 PerpetualCache 的 HashMap 本地缓存，它的声明周期是和 SQLSession 一致的，有多个 SQLSession 或者分布式的环境中数据库操作，可能会出现脏数据。当 Session flush 或 close 之后，该 Session 中的所有 Cache 就将清空，默认一级缓存是开启的。 二级缓存：也是基于 PerpetualCache 的 HashMap 本地缓存，不同在于其存储作用域为 Mapper 级别的，如果多个SQLSession之间需要共享缓存，则需要使用到二级缓存，并且二级缓存可自定义存储源，如 Ehcache。默认不打开二级缓存，要开启二级缓存，使用二级缓存属性类需要实现 Serializable 序列化接口(可用来保存对象的状态)。 开启二级缓存数据查询流程：二级缓存 -&gt; 一级缓存 -&gt; 数据库。 缓存更新机制：当某一个作用域(一级缓存 Session/二级缓存 Mapper)进行了C/U/D 操作后，默认该作用域下所有 select 中的缓存将被 clear。 MyBatis 和 hibernate 的区别有哪些？ 灵活性：MyBatis 更加灵活，自己可以写 SQL 语句，使用起来比较方便。 可移植性：MyBatis 有很多自己写的 SQL，因为每个数据库的 SQL 可以不相同，所以可移植性比较差。 学习和使用门槛：MyBatis 入门比较简单，使用门槛也更低。 二级缓存：hibernate 拥有更好的二级缓存，它的二级缓存可以自行更换为第三方的二级缓存。 132. MyBatis 有哪些执行器（Executor）？ MyBatis 有三种基本的Executor执行器： SimpleExecutor：每执行一次 update 或 select 就开启一个 Statement 对象，用完立刻关闭 Statement 对象； ReuseExecutor：执行 update 或 select，以 SQL 作为 key 查找 Statement 对象，存在就使用，不存在就创建，用完后不关闭 Statement 对象，而是放置于 Map 内供下一次使用。简言之，就是重复使用 Statement 对象； BatchExecutor：执行 update（没有 select，jdbc 批处理不支持 select），将所有 SQL 都添加到批处理中（addBatch()），等待统一执行（executeBatch()），它缓存了多个 Statement 对象，每个 Statement 对象都是 addBatch()完毕后，等待逐一执行 executeBatch()批处理，与 jdbc 批处理相同。 MyBatis 分页插件的实现原理是什么？ 分页插件的基本原理是使用 MyBatis 提供的插件接口，实现自定义插件，在插件的拦截方法内拦截待执行的 SQL，然后重写 SQL，根据 dialect 方言，添加对应的物理分页语句和物理分页参数。 MyBatis 如何编写一个自定义插件？ 自定义插件实现原理 MyBatis 自定义插件针对 MyBatis 四大对象（Executor、StatementHandler、ParameterHandler、ResultSetHandler）进行拦截： Executor：拦截内部执行器，它负责调用 StatementHandler 操作数据库，并把结果集通过 ResultSetHandler 进行自动映射，另外它还处理了二级缓存的操作； StatementHandler：拦截 SQL 语法构建的处理，它是 MyBatis 直接和数据库执行 SQL 脚本的对象，另外它也实现了 MyBatis 的一级缓存； ParameterHandler：拦截参数的处理； ResultSetHandler：拦截结果集的处理。 自定义插件实现关键 MyBatis 插件要实现 Interceptor 接口，接口包含的方法，如下： 12345public interface Interceptor &#123; Object intercept(Invocation invocation) throws Throwable; Object plugin(Object target); void setProperties(Properties properties);&#125; setProperties 方法是在 MyBatis 进行配置插件的时候可以配置自定义相关属性，即：接口实现对象的参数配置； plugin 方法是插件用于封装目标对象的，通过该方法我们可以返回目标对象本身，也可以返回一个它的代理，可以决定是否要进行拦截进而决定要返回一个什么样的目标对象，官方提供了示例：return Plugin. wrap(target, this)； intercept 方法就是要进行拦截的时候要执行的方法。 自定义插件实现示例 官方插件实现： 12345678910111213141516@Intercepts(&#123;@Signature(type = Executor. class, method = &quot;query&quot;, args = &#123;MappedStatement. class, Object. class, RowBounds. class, ResultHandler. class&#125;)&#125;)public class TestInterceptor implements Interceptor &#123; public Object intercept(Invocation invocation) throws Throwable &#123; Object target = invocation. getTarget(); //被代理对象 Method method = invocation. getMethod(); //代理方法 Object[] args = invocation. getArgs(); //方法参数 // do something . . . . . . 方法拦截前执行代码块 Object result = invocation. proceed(); // do something . . . . . . . 方法拦截后执行代码块 return result; &#125; public Object plugin(Object target) &#123; return Plugin. wrap(target, this); &#125;&#125; RabbitMQ RabbitMQ 的使用场景 抢购活动，削峰填谷，防止系统崩塌。 延迟信息处理，比如 10 分钟之后给下单未付款的用户发送邮件提醒。 解耦系统，对于新增的功能可以单独写模块扩展，比如用户确认评价之后，新增了给用户返积分的功能，这个时候不用在业务代码里添加新增积分的功能，只需要把新增积分的接口订阅确认评价的消息队列即可，后面再添加任何功能只需要订阅对应的消息队列即可。 136. RabbitMQ 有哪些重要的角色？ RabbitMQ 中重要的角色有：生产者、消费者和代理： 生产者：消息的创建者，负责创建和推送数据到消息服务器； 消费者：消息的接收方，用于处理数据和确认消息； 代理：就是 RabbitMQ 本身，用于扮演“快递”的角色，本身不生产消息，只是扮演“快递”的角色。 RabbitMQ 有哪些重要的组件？ ConnectionFactory（连接管理器）：应用程序与Rabbit之间建立连接的管理器，程序代码中使用。 Channel（信道）：消息推送使用的通道。 Exchange（交换器）：用于接受、分配消息。 Queue（队列）：用于存储生产者的消息。 RoutingKey（路由键）：用于把生成者的数据分配到交换器上。 BindingKey（绑定键）：用于把交换器的消息绑定到队列上。 138. RabbitMQ 中 vhost 的作用 vhost：每个 RabbitMQ 都能创建很多 vhost，我们称之为虚拟主机，每个虚拟主机其实都是 mini 版的RabbitMQ，它拥有自己的队列，交换器和绑定，拥有自己的权限机制。 RabbitMQ 的消息是怎么发送 首先客户端必须连接到 RabbitMQ 服务器才能发布和消费消息，客户端和 rabbit server 之间会创建一个 tcp 连接，一旦 tcp 打开并通过了认证（认证就是你发送给 rabbit 服务器的用户名和密码），你的客户端和 RabbitMQ 就创建了一条 amqp 信道（channel），信道是创建在“真实” tcp 上的虚拟连接，amqp 命令都是通过信道发送出去的，每个信道都会有一个唯一的 id，不论是发布消息，订阅队列都是通过这个信道完成的。 RabbitMQ 怎么保证消息的稳定性 提供了事务的功能。 通过将 channel 设置为 confirm（确认）模式。 RabbitMQ 怎么避免消息丢失？ 把消息持久化磁盘，保证服务器重启消息不丢失。 每个集群中至少有一个物理磁盘，保证消息落入磁盘。 要保证消息持久化成功的条件 声明队列必须设置持久化 durable 设置为 true. 消息推送投递模式必须设置持久化，deliveryMode 设置为 2（持久）。 消息已经到达持久化交换器。 消息已经到达持久化队列。 以上四个条件都满足才能保证消息持久化成功。 RabbitMQ 持久化有什么缺点 持久化的缺地就是降低了服务器的吞吐量，因为使用的是磁盘而非内存存储，从而降低了吞吐量。可尽量使用 ssd 硬盘来缓解吞吐量的问题。 RabbitMQ 有几种广播类型 direct（默认方式）：最基础最简单的模式，发送方把消息发送给订阅方，如果有多个订阅者，默认采取轮询的方式进行消息发送。 headers：与 direct 类似，只是性能很差，此类型几乎用不到。 fanout：分发模式，把消费分发给所有订阅者。 topic：匹配订阅模式，使用正则匹配到消息队列，能匹配到的都能接收到。 145. RabbitMQ 怎么实现延迟消息队列？ 延迟队列的实现有两种方式： 通过消息过期后进入死信交换器，再由交换器转发到延迟消费队列，实现延迟功能； 使用 RabbitMQ-delayed-message-exchange 插件实现延迟功能。 RabbitMQ 集群有什么用？ 集群主要有以下两个用途： 高可用：某个服务器出现问题，整个 RabbitMQ 还可以继续使用； 高容量：集群可以承载更多的消息量。 RabbitMQ 节点的类型 磁盘节点：消息会存储到磁盘。 内存节点：消息都存储在内存中，重启服务器消息丢失，性能高于磁盘类型。 RabbitMQ 集群搭建需要注意哪些问题 各节点之间使用“–link”连接，此属性不能忽略。 各节点使用的 erlang cookie 值必须相同，此值相当于“秘钥”的功能，用于各节点的认证。 整个集群中必须包含一个磁盘节点。 RabbitMQ 每个节点是其他节点的完整拷贝吗？为什么？ 不是，原因有以下两个： 存储空间的考虑：如果每个节点都拥有所有队列的完全拷贝，这样新增节点不但没有新增存储空间，反而增加了更多的冗余数据； 性能的考虑：如果每条消息都需要完整拷贝到每一个集群节点，那新增节点并没有提升处理消息的能力，最多是保持和单节点相同的性能甚至是更糟。 RabbitMQ 集群中唯一一个磁盘节点崩溃了会发生什么情况？ 如果唯一磁盘的磁盘节点崩溃了，不能进行以下操作： 不能创建队列 不能创建交换器 不能创建绑定 不能添加用户 不能更改权限 不能添加和删除集群节点 唯一磁盘节点崩溃了，集群是可以保持运行的，但你不能更改任何东西。 RabbitMQ 对集群节点停止顺序有要求吗？ RabbitMQ 对集群的停止的顺序是有要求的，应该先关闭内存节点，最后再关闭磁盘节点。如果顺序恰好相反的话，可能会造成消息的丢失。 Kafka kafka 可以脱离 zookeeper 单独使用吗？为什么？ kafka 不能脱离 zookeeper 单独使用，因为 kafka 使用 zookeeper 管理和协调 kafka 的节点服务器。 kafka 有几种数据保留的策略？ kafka 有两种数据保存策略：按照过期时间保留和按照存储的消息大小保留。 kafka 同时设置了 7 天和 10G 清除数据，到第五天的时候消息达到了 10G，这个时候 kafka 将如何处理？ 这个时候 kafka 会执行数据清除工作，时间和大小不论那个满足条件，都会清空数据。 什么情况会导致 kafka 运行变慢？ cpu 性能瓶颈 磁盘读写瓶颈 网络瓶颈 使用 kafka 集群需要注意什么？ 集群的数量不是越多越好，最好不要超过 7 个，因为节点越多，消息复制需要的时间就越长，整个群组的吞吐量就越低。 集群数量最好是单数，因为超过一半故障集群就不能用了，设置为单数容错率更高。 Zookeeper zookeeper 是什么 zookeeper 是一个分布式的，开放源码的分布式应用程序协调服务，是 google chubby 的开源实现，是 hadoop 和 hbase 的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。 zookeeper 都有哪些功能？ 集群管理：监控节点存活状态、运行请求等。 主节点选举：主节点挂掉了之后可以从备用的节点开始新一轮选主，主节点选举说的就是这个选举的过程，使用 zookeeper 可以协助完成这个过程。 分布式锁：zookeeper 提供两种锁：独占锁、共享锁。独占锁即一次只能有一个线程使用资源，共享锁是读锁共享，读写互斥，即可以有多线线程同时读同一个资源，如果要使用写锁也只能有一个线程使用。zookeeper可以对分布式锁进行控制。 命名服务：在分布式系统中，通过使用命名服务，客户端应用能够根据指定名字来获取资源或服务的地址，提供者等信息。 zookeeper 有几种部署模式？ zookeeper 有三种部署模式： 单机部署：一台集群上运行； 集群部署：多台集群运行； 伪集群部署：一台集群启动多个 zookeeper 实例运行。 zookeeper 怎么保证主从节点的状态同步？ zookeeper 的核心是原子广播，这个机制保证了各个 server 之间的同步。实现这个机制的协议叫做 zab 协议。 zab 协议有两种模式，分别是恢复模式（选主）和广播模式（同步）。当服务启动或者在领导者崩溃后，zab 就进入了恢复模式，当领导者被选举出来，且大多数 server 完成了和 leader 的状态同步以后，恢复模式就结束了。状态同步保证了 leader 和 server 具有相同的系统状态。 集群中为什么要有主节点？ 在分布式环境中，有些业务逻辑只需要集群中的某一台机器进行执行，其他的机器可以共享这个结果，这样可以大大减少重复计算，提高性能，所以就需要主节点。 集群中有 3 台服务器，其中一个节点宕机，这个时候 zookeeper 还可以使用吗？ 可以继续使用，单数服务器只要没超过一半的服务器宕机就可以继续使用。 说一下 zookeeper 的通知机制？ 客户端端会对某个 znode 建立一个 watcher 事件，当该 znode 发生变化时，这些客户端会收到 zookeeper 的通知，然后客户端可以根据 znode 变化来做出业务上的改变。 MySQL 数据库的三范式是什么？ 第一范式：强调的是列的原子性，即数据库表的每一列都是不可分割的原子数据项。 第二范式：要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性。 第三范式：任何非主属性不依赖于其它非主属性。 165. 一张自增表里面总共有 7 条数据，删除了最后 2 条数据，重启 MySQL 数据库，又插入了一条数据，此时 id 是几？ 表类型如果是 MyISAM ，那 id 就是 8。 表类型如果是 InnoDB，那 id 就是 6。 InnoDB 表只会把自增主键的最大 id 记录在内存中，所以重启之后会导致最大 id 丢失。 如何获取当前数据库版本？ 使用 select version() 获取当前 MySQL 数据库版本。 ACID 是什么？ Atomicity（原子性）：一个事务（transaction）中的所有操作，或者全部完成，或者全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被恢复（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。即，事务不可分割、不可约简。 Consistency（一致性）：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设约束、触发器、级联回滚等。 Isolation（隔离性）：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。 Durability（持久性）：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。 char 和 varchar 的区别 char(n) ：固定长度类型，比如订阅 char(10)，当你输入&quot;abc&quot;三个字符的时候，它们占的空间还是 10 个字节，其他 7 个是空字节。 chat 优点：效率高；缺点：占用空间；适用场景：存储密码的 md5 值，固定长度的，使用 char 非常合适。 varchar(n) ：可变长度，存储的值是每个值占用的字节再加上一个用来记录其长度的字节的长度。 所以，从空间上考虑 varcahr 比较合适；从效率上考虑 char 比较合适，二者使用需要权衡。 float 和 double 的区别 float 最多可以存储 8 位的十进制数，并在内存中占 4 字节。 double 最可可以存储 16 位的十进制数，并在内存中占 8 字节。 MySQL 的内连接、左连接、右连接区别 内连接关键字：inner join；左连接：left join；右连接：right join。 内连接是把匹配的关联数据显示出来；左连接是左边的表全部显示出来，右边的表显示出符合条件的数据；右连接正好相反。 MySQL 索引是怎么实现 索引是满足某种特定查找算法的数据结构，而这些数据结构会以某种方式指向数据，从而实现高效查找数据。 具体来说 MySQL 中的索引，不同的数据引擎实现有所不同，但目前主流的数据库引擎的索引都是 B+ 树实现的，B+ 树的搜索效率，可以到达二分法的性能，找到数据区域之后就找到了完整的数据结构了，所有索引的性能也是更好的。 怎么验证 MySQL 的索引是否满足需求 使用 explain 查看 SQL 是如何执行查询语句的，从而分析你的索引是否满足需求。 explain 语法：explain select * from table where type=1。 数据库的事务隔离 MySQL 的事务隔离是在 MySQL. ini 配置文件里添加的，在文件的最后添加： transaction-isolation = REPEATABLE-READ 可用的配置值：READ-UNCOMMITTED、READ-COMMITTED、REPEATABLE-READ、SERIALIZABLE。 READ-UNCOMMITTED：未提交读，最低隔离级别、事务未提交前，就可被其他事务读取（会出现幻读、脏读、不可重复读）。 READ-COMMITTED：提交读，一个事务提交后才能被其他事务读取到（会造成幻读、不可重复读）。 REPEATABLE-READ：可重复读，默认级别，保证多次读取同一个数据时，其值都和事务开始时候的内容是一致，禁止读取到别的事务未提交的数据（会造成幻读）。 SERIALIZABLE：序列化，代价最高最可靠的隔离级别，该隔离级别能防止脏读、不可重复读、幻读。 脏读 ：表示一个事务能够读取另一个事务中还未提交的数据。比如，某个事务尝试插入记录 A，此时该事务还未提交，然后另一个事务尝试读取到了记录 A。 不可重复读 ：是指在一个事务内，多次读同一数据。 幻读 ：指同一个事务内多次查询返回的结果集不一样。比如同一个事务 A 第一次查询时候有 n 条记录，但是第二次同等条件下查询却有 n+1 条记录，这就好像产生了幻觉。发生幻读的原因也是另外一个事务新增或者删除或者修改了第一个事务结果集里面的数据，同一个记录的数据内容被修改了，所有数据行的记录就变多或者变少了。 MySQL 常用的引擎 InnoDB 引擎：mysql 5.1 后默认的数据库引擎，提供了对数据库 acid 事务的支持，并且还提供了行级锁和外键的约束，它的设计的目标就是处理大数据容量的数据库系统。MySQL 运行的时候，InnoDB 会在内存中建立缓冲池，用于缓冲数据和索引。但是该引擎是不支持全文搜索，同时启动也比较的慢，它是不会保存表的行数的，所以当进行 select count(*) from table 指令的时候，需要进行扫描全表。由于锁的粒度小，写操作是不会锁定全表的,所以在并发度较高的场景下使用会提升效率的。 MyIASM 引擎：不提供事务的支持，也不支持行级锁和外键。因此当执行插入和更新语句时，即执行写操作的时候需要锁定这个表，所以会导致效率会降低。不过和 InnoDB 不同的是，MyIASM 引擎是保存了表的行数，于是当进行 select count(*) from table 语句时，可以直接的读取已经保存的值而不需要进行扫描全表。所以，如果表的读操作远远多于写操作时，并且不需要事务的支持的，可以将 MyIASM 作为数据库引擎的首选。 MySQL 的行锁和表锁 MyISAM 只支持表锁，InnoDB 支持表锁和行锁，默认为行锁。 表级锁：开销小，加锁快，不会出现死锁。锁定粒度大，发生锁冲突的概率最高，并发量最低。 行级锁：开销大，加锁慢，会出现死锁。锁力度小，发生锁冲突的概率小，并发度最高。 乐观锁和悲观锁 乐观锁：每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在提交更新的时候会判断一下在此期间别人有没有去更新这个数据。 悲观锁：每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会阻止，直到这个锁被释放。 数据库的乐观锁需要自己实现，在表里面添加一个 version 字段，每次修改成功值加 1，这样每次修改的时候先对比一下，自己拥有的 version 和数据库现在的 version 是否一致，如果不一致就不修改，这样就实现了乐观锁。 MySQL 问题排查都有哪些手段 使用 show processlist 命令查看当前所有连接信息。 使用 explain 命令查询 SQL 语句执行计划。 开启慢查询日志，查看慢查询的 SQL。 如何做 MySQL 的性能优化 为搜索字段创建索引。 避免使用 select *，列出需要查询的字段。 垂直分割分表。 选择正确的存储引擎。 Redis Redis 是什么？都有哪些使用场景？ Redis 是一个使用 C 语言开发的高速缓存数据库。 Redis 使用场景： 记录帖子点赞数、点击数、评论数； 缓存近期热帖； 缓存文章详情信息； 记录用户会话信息。 Redis 有哪些功能？ 数据缓存功能 分布式锁的功能 支持数据持久化 支持事务 支持消息队列 Redis 和 memcache 区别 存储方式不同：memcache 把数据全部存在内存之中，断电后会挂掉，数据不能超过内存大小；Redis 有部份存在硬盘上，这样能保证数据的持久性。 数据支持类型：memcache 对数据类型支持相对简单；Redis 有复杂的数据类型。 使用底层模型不同：它们之间底层实现方式，以及与客户端之间通信的应用协议不一样，Redis 自己构建了 vm 机制，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求。 value 值大小不同：Redis 最大可以达到 512mb；memcache 只有 1mb。 Redis 为什么是单线程的 因为 cpu 不是 Redis 的瓶颈，Redis 的瓶颈最有可能是机器内存或者网络带宽。既然单线程容易实现，而且 cpu 又不会成为瓶颈，那就顺理成章地采用单线程的方案了。 关于 Redis 的性能，官方网站也有，普通笔记本轻松处理每秒几十万的请求。 而且单线程并不代表就慢 nginx 和 nodejs 也都是高性能单线程的代表。 什么是缓存穿透？怎么解决？ 缓存穿透：指查询一个一定不存在的数据，由于缓存是不命中时需要从数据库查询，查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到数据库去查询，造成缓存穿透。 解决方案：最简单粗暴的方法如果一个查询返回的数据为空（不管是数据不存在，还是系统故障），我们就把这个空结果进行缓存，但它的过期时间会很短，最长不超过五分钟。 Redis 支持的数据类型有哪些？ Redis 支持的数据类型：string（字符串）、list（列表）、hash（字典）、set（集合）、zset（有序集合）。 Redis 支持的 Java 客户端都有哪些？ 支持的 Java 客户端有 Redisson、jedis、lettuce 等。 jedis 和 Redisson 区别 jedis：提供了比较全面的 Redis 命令的支持。 Redisson：实现了分布式和可扩展的 Java 数据结构，与 jedis 相比 Redisson 的功能相对简单，不支持排序、事务、管道、分区等 Redis 特性。 怎么保证缓存和数据库数据的一致性 合理设置缓存的过期时间。 新增、更改、删除数据库操作时同步更新 Redis，可以使用事物机制来保证数据的一致性。 Redis 持久化有几种方式？ Redis 的持久化有两种方式，或者说有两种策略： RDB（Redis Database）：指定的时间间隔能对你的数据进行快照存储。 AOF（Append Only File）：每一个收到的写命令都通过write函数追加到文件中。 Redis 怎么实现分布式锁？ Redis 分布式锁其实就是在系统里面占一个“坑”，其他程序也要占“坑”的时候，占用成功了就可以继续执行，失败了就只能放弃或稍后重试。 占坑一般使用 setnx(set if not exists)指令，只允许被一个程序占有，使用完调用 del 释放锁。 Redis 分布式锁有什么缺陷？ Redis 分布式锁不能解决超时的问题，分布式锁有一个超时时间，程序的执行如果超出了锁的超时时间就会出现问题。 Redis 如何做内存优化？ 尽量使用 Redis 的散列表，把相关的信息放到散列表里面存储，而不是把每个字段单独存储，这样可以有效的减少内存使用。比如将 Web 系统的用户对象，应该放到散列表里面再整体存储到 Redis，而不是把用户的姓名、年龄、密码、邮箱等字段分别设置 key 进行存储。 Redis 淘汰策略有哪些？ volatile-lru：从已设置过期时间的数据集（server. db[i]. expires）中挑选最近最少使用的数据淘汰。 volatile-ttl：从已设置过期时间的数据集（server. db[i]. expires）中挑选将要过期的数据淘汰。 volatile-random：从已设置过期时间的数据集（server. db[i]. expires）中任意选择数据淘汰。 allkeys-lru：从数据集（server. db[i]. dict）中挑选最近最少使用的数据淘汰。 allkeys-random：从数据集（server. db[i]. dict）中任意选择数据淘汰。 no-enviction（驱逐）：禁止驱逐数据。 Redis 常见的性能问题有哪些？该如何解决？ 主服务器写内存快照，会阻塞主线程的工作，当快照比较大时对性能影响是非常大的，会间断性暂停服务，所以主服务器最好不要写内存快照。 Redis 主从复制的性能问题，为了主从复制的速度和连接的稳定性，主从库最好在同一个局域网内。 JVM 说一下 JVM 的主要组成部分？及其作用？ 类加载器（ClassLoader） 运行时数据区（Runtime Data Area） 执行引擎（Execution Engine） 本地库接口（Native Interface） 组件的作用： 首先通过类加载器（ClassLoader）会把 Java 代码转换成字节码，运行时数据区（Runtime Data Area）再把字节码加载到内存中，而字节码文件只是 JVM 的一套指令集规范，并不能直接交给底层操作系统去执行，因此需要特定的命令解析器执行引擎（Execution Engine），将字节码翻译成底层系统指令，再交由 CPU 去执行，而这个过程中需要调用其他语言的本地库接口（Native Interface）来实现整个程序的功能。 JVM 运行时数据区？ 不同虚拟机的运行时数据区可能略微有所不同，但都会遵从 Java 虚拟机规范， Java 虚拟机规范规定的区域分为以下 5 个部分： 程序计数器（Program Counter Register）：当前线程所执行的字节码的行号指示器，字节码解析器的工作是通过改变这个计数器的值，来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能，都需要依赖这个计数器来完成； Java 虚拟机栈（Java Virtual Machine Stacks）：用于存储局部变量表、操作数栈、动态链接、方法出口等信息； 本地方法栈（Native Method Stack）：与虚拟机栈的作用是一样的，只不过虚拟机栈是服务 Java 方法的，而本地方法栈是为虚拟机调用 Native 方法服务的； Java 堆（Java Heap）：Java 虚拟机中内存最大的一块，是被所有线程共享的，几乎所有的对象实例都在这里分配内存； 方法区（Methed Area）：用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译后的代码等数据。 堆栈的区别？ 功能方面：堆是用来存放对象的，栈是用来执行程序的。 共享性：堆是线程共享的，栈是线程私有的。 空间大小：堆大小远远大于栈。 队列和栈是什么？有什么区别？ 队列和栈都是被用来预存储数据的。 队列允许先进先出检索元素，但也有例外的情况，Deque 接口允许从两端检索元素。 栈和队列很相似，但它运行对元素进行后进先出进行检索。 什么是双亲委派模型？ 在介绍双亲委派模型之前先说下类加载器。对于任意一个类，都需要由加载它的类加载器和这个类本身一同确立在 JVM 中的唯一性，每一个类加载器，都有一个独立的类名称空间。类加载器就是根据指定全限定名称将 class 文件加载到 JVM 内存，然后再转化为 class 对象。 类加载器分类： 启动类加载器（Bootstrap ClassLoader），是虚拟机自身的一部分，用来加载Java_HOME/lib/目录中的，或者被 -Xbootclasspath 参数所指定的路径中并且被虚拟机识别的类库； 其他类加载器： 扩展类加载器（Extension ClassLoader）：负责加载\\lib\\ext目录或Java. ext. dirs系统变量指定的路径中的所有类库； 应用程序类加载器（Application ClassLoader）。负责加载用户类路径（classpath）上的指定类库，我们可以直接使用这个类加载器。一般情况，如果我们没有自定义类加载器默认就是用这个加载器。 双亲委派模型：如果一个类加载器收到了类加载的请求，它首先不会自己去加载这个类，而是把这个请求委派给父类加载器去完成，每一层的类加载器都是如此，这样所有的加载请求都会被传送到顶层的启动类加载器中，只有当父加载无法完成加载请求（它的搜索范围中没找到所需的类）时，子加载器才会尝试去加载类。 类装载的执行过程 类装载分为以下 5 个步骤： 加载：根据查找路径找到相应的 class 文件然后导入； 检查：检查加载的 class 文件的正确性； 准备：给类中的静态变量分配内存空间； 解析：虚拟机将常量池中的符号引用替换成直接引用的过程。符号引用就理解为一个标示，而在直接引用直接指向内存中的地址； 初始化：对静态变量和静态代码块执行初始化工作。 怎么判断对象是否可以被回收 一般有两种方法来判断： 引用计数器：为每个对象创建一个引用计数，有对象引用时计数器 +1，引用被释放时计数 -1，当计数器为 0 时就可以被回收。它有一个缺点不能解决循环引用的问题； 可达性分析：从 GC Roots 开始向下搜索，搜索所走过的路径称为引用链。当一个对象到 GC Roots 没有任何引用链相连时，则证明此对象是可以被回收的。 Java 中都有哪些引用类型 强引用：发生 gc 的时候不会被回收。 软引用：有用但不是必须的对象，在发生内存溢出之前会被回收。 弱引用：有用但不是必须的对象，在下一次GC时会被回收。 虚引用（幽灵引用/幻影引用）：无法通过虚引用获得对象，用 PhantomReference 实现虚引用，虚引用的用途是在 gc 时返回一个通知。 JVM 有哪些垃圾回收算法 标记-清除算法：标记无用对象，然后进行清除回收。缺点：效率不高，无法清除垃圾碎片。 标记-整理算法：标记无用对象，让所有存活的对象都向一端移动，然后直接清除掉端边界以外的内存。 复制算法：按照容量划分二个大小相等的内存区域，当一块用完的时候将活着的对象复制到另一块上，然后再把已使用的内存空间一次清理掉。缺点：内存使用率不高，只有原来的一半。 分代算法：根据对象存活周期的不同将内存划分为几块，一般是新生代和老年代，新生代基本采用复制算法，老年代采用标记整理算法。 JVM 有哪些垃圾回收器 Serial：最早的单线程串行垃圾回收器。 Serial Old：Serial 垃圾回收器的老年版本，同样也是单线程的，可以作为 CMS 垃圾回收器的备选预案。 ParNew：是 Serial 的多线程版本。 Parallel 和 ParNew 收集器类似是多线程的，但 Parallel 是吞吐量优先的收集器，可以牺牲等待时间换取系统的吞吐量。 Parallel Old 是 Parallel 老生代版本，Parallel 使用的是复制的内存回收算法，Parallel Old 使用的是标记-整理的内存回收算法。 CMS：一种以获得最短停顿时间为目标的收集器，非常适用 B/S 系统。 G1：一种兼顾吞吐量和停顿时间的 GC 实现，是 JDK 9 以后的默认 GC 选项。 详细介绍一下 CMS 垃圾回收器？ CMS 是英文 Concurrent Mark-Sweep 的简称，是以牺牲吞吐量为代价来获得最短回收停顿时间的垃圾回收器。对于要求服务器响应速度的应用上，这种垃圾回收器非常适合。在启动 JVM 的参数加上“-XX:+UseConcMarkSweepGC”来指定使用 CMS 垃圾回收器。 CMS 使用的是标记-清除的算法实现的，所以在 gc 的时候回产生大量的内存碎片，当剩余内存不能满足程序运行要求时，系统将会出现 Concurrent Mode Failure，临时 CMS 会采用 Serial Old 回收器进行垃圾清除，此时的性能将会被降低。 新生代垃圾回收器和老生代垃圾回收器都有哪些？有什么区别？ 新生代回收器：Serial、ParNew、Parallel Scavenge 老年代回收器：Serial Old、Parallel Old、CMS 整堆回收器：G1 新生代垃圾回收器一般采用的是复制算法，复制算法的优点是效率高，缺点是内存利用率低；老年代回收器一般采用的是标记-整理的算法进行垃圾回收。 分代垃圾回收器是怎么工作 分代回收器有两个分区：老生代和新生代，新生代默认的空间占比总空间的 1/3，老生代的默认占比是 2/3。 新生代使用的是复制算法，新生代里有 3 个分区：Eden、To Survivor、From Survivor，它们的默认占比是 8:1:1，它的执行流程如下： 把 Eden + From Survivor 存活的对象放入 To Survivor 区； 清空 Eden 和 From Survivor 分区； From Survivor 和 To Survivor 分区交换，From Survivor 变 To Survivor，To Survivor 变 From Survivor。 每次在 From Survivor 到 To Survivor 移动时都存活的对象，年龄就 +1，当年龄到达 15（默认配置是 15）时，升级为老生代。大对象也会直接进入老生代。 老生代当空间占用到达某个值之后就会触发全局垃圾收回，一般使用标记整理的执行算法。以上这些循环往复就构成了整个分代垃圾回收的整体执行流程。 JVM 调优的工具 JDK 自带了很多监控工具，都位于 JDK 的 bin 目录下，其中最常用的是 jconsole 和 jvisualvm 这两款视图监控工具。 jconsole：用于对 JVM 中的内存、线程和类等进行监控； jvisualvm：JDK 自带的全能分析工具，可以分析：内存快照、线程快照、程序死锁、监控内存的变化、gc 变化等。 常用的 JVM 调优的参数都有哪些？ -Xms2g：初始化推大小为 2g； -Xmx2g：堆最大内存为 2g； -XX:NewRatio=4：设置年轻的和老年代的内存比例为 1:4； -XX:SurvivorRatio=8：设置新生代 Eden 和 Survivor 比例为 8:2； –XX:+UseParNewGC：指定使用 ParNew + Serial Old 垃圾回收器组合； -XX:+UseParallelOldGC：指定使用 ParNew + ParNew Old 垃圾回收器组合； -XX:+UseConcMarkSweepGC：指定使用 CMS + Serial Old 垃圾回收器组合； -XX:+PrintGC：开启打印 gc 信息； -XX:+PrintGCDetails：打印 gc 详细信息。","categories":[],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"rabbitMq","slug":"rabbitMq","date":"2019-03-03T03:25:26.000Z","updated":"2021-09-22T11:19:04.643Z","comments":true,"path":"2019/03/03/rabbitMq/","link":"","permalink":"http://example.com/2019/03/03/rabbitMq/","excerpt":"","text":"RabbitMQ 研究 介绍 RabbitMQ MQ全称为Message Queue，即消息队列， RabbitMQ是由erlang语言开发，基于AMQP（Advanced Message Queue 高级消息队列协议）协议实现的消息队列，它是一种应用程序之间的通信方法，消息队列在分布式系统开 发中应用非常广泛。RabbitMQ官方地址：http://www.rabbitmq.com 12345678910111213开发中消息队列通常有如下应用场景：1、任务异步处理。将不需要同步处理的并且耗时长的操作由消息队列通知消息接收方进行异步处理。提高了应用程序的响应时间。2、应用程序解耦合MQ相当于一个中介，生产方通过MQ与消费方交互，它将应用程序进行解耦合。市场上还有哪些消息队列？ActiveMQ，RabbitMQ，ZeroMQ，Kafka，MetaMQ，RocketMQ、Redis。为什么使用RabbitMQ呢？1、使得简单，功能强大。2、基于AMQP协议。3、社区活跃，文档完善。4、高并发性能好，这主要得益于Erlang语言。5、Spring Boot默认已集成RabbitMQ 2.入门 1. 工作原理 123456789101112131415161718组成部分说明如下：Broker：消息队列服务进程，此进程包括两个部分：Exchange和Queue。Exchange：消息队列交换机，按一定的规则将消息路由转发到某个队列，对消息进行过虑。Queue：消息队列，存储消息的队列，消息到达队列并转发给指定的消费方。Producer：消息生产者，即生产方客户端，生产方客户端将消息发送到MQ。Consumer：消息消费者，即消费方客户端，接收MQ转发的消息。消息发布接收流程：-----发送消息-----1、生产者和Broker建立TCP连接。2、生产者和Broker建立通道。3、生产者通过通道消息发送给Broker，由Exchange将消息进行转发。4、Exchange将消息转发到指定的Queue（队列）----接收消息-----1、消费者和Broker建立TCP连接2、消费者和Broker建立通道3、消费者监听指定的Queue（队列）4、当有消息到达Queue时Broker默认将消息推送给消费者。5、消费者接收到消息。 3.安装 RabbitMQ由Erlang语言开发，Erlang语言用于并发及分布式系统的开发，在电信领域应用广泛，OTP（Open Telecom Platform）作为Erlang语言的一部分，包含了很多基于Erlang开发的中间件及工具库，安装RabbitMQ需 要安装Erlang/OTP，并保持版本匹配， RabbitMQ的下载地址：http://www.rabbitmq.com/download.html erlang的下载地址： http://www.erlang.org/downloads 启动 从开始菜单启动RabbitMQ 在开始菜单找到RabbitMQ的菜单： RabbitMQ Service-install :安装服务 RabbitMQ Service-remove 删除服务 RabbitMQ Service-start 启动 RabbitMQ Service-stop 启动 安装并运行服务 rabbitmq-service.bat install 安装服务 rabbitmq-service.bat stop 停止服务 rabbitmq-service.bat start 启动服务 2）安装管理插件 安装rabbitMQ的管理插件，方便在浏览器端管理RabbitMQ 管理员身份运行 rabbitmq-plugins.bat enable rabbitmq_management 北京市昌平区建材城西路金燕龙办公楼一层 电话：400-618-90903、启动成功 登录RabbitMQ 进入浏览器，输入：http://localhost:15672 用 rabbitMQ官方提供的java client测试，目的是对RabbitMQ的交互过程有个清晰的认识。 参考 ：https://github.com/rabbitmq/rabbitmq-java-client/ 创建maven工程 创建生产者工程和消费者工程，分别加入RabbitMQ java client的依赖。 test-rabbitmq-producer：生产者工程 test-rabbitmq-consumer：消费者工程 12345678910&lt;dependency&gt;&lt;groupId&gt;com.rabbitmq&lt;/groupId&gt;&lt;artifactId&gt;amqp‐client&lt;/artifactId&gt;&lt;version&gt;4.0.3&lt;/version&gt;&lt;!‐‐此版本与spring boot 1.5.9版本匹配‐‐&gt;&lt;/dependency&gt;&lt;dependency&gt;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&lt;artifactId&gt;spring‐boot‐starter‐logging&lt;/artifactId&gt;&lt;/dependency&gt; 生产者 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455public class Producer01 &#123; //队列名称 private static final String QUEUE = &quot;helloworld&quot;; public static void main(String[] args) throws IOException, TimeoutException &#123; Connection connection = null; Channel channel = null; try &#123; ConnectionFactory factory = new ConnectionFactory(); factory.setHost(&quot;localhost&quot;); factory.setPort(5672); factory.setUsername(&quot;guest&quot;); factory.setPassword(&quot;guest&quot;); factory.setVirtualHost(&quot;/&quot;);//rabbitmq默认虚拟机名称为“/”，虚拟机相当于一个独立的mq服务 器 //创建与RabbitMQ服务的TCP连接 connection = factory.newConnection(); //创建与Exchange的通道，每个连接可以创建多个通道，每个通道代表一个会话任务 channel = connection.createChannel(); /** * 声明队列，如果Rabbit中没有此队列将自动创建 * param1:队列名称 * param2:是否持久化 * param3:队列是否独占此连接 * param4:队列不再使用时是否自动删除此队列 * param5:队列参数 */ channel.queueDeclare(QUEUE, true, false, false, null); String message = &quot;helloworld小明&quot;+System.currentTimeMillis(); /** * 消息发布方法 * param1：Exchange的名称，如果没有指定，则使用Default Exchange * param2:routingKey,消息的路由Key，是用于Exchange（交换机）将消息转发到指定的消息队列 * param3:消息包含的属性 * param4：消息体 */ /** * 这里没有指定交换机，消息将发送给默认交换机，每个队列也会绑定那个默认的交换机，但是不能显 示绑定或解除绑定 * 默认的交换机，routingKey等于队列名称 */ channel.basicPublish(&quot;&quot;, QUEUE, null, message.getBytes()); System.out.println(&quot;Send Message is:&#x27;&quot; + message + &quot;&#x27;&quot;); &#125; catch(Exception ex)&#123; ex.printStackTrace(); &#125; finally &#123; if(channel != null) &#123; channel.close(); &#125; if(connection != null)&#123; connection.close(); &#125; &#125; &#125;&#125; 消费者 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950public class Consumer01 &#123; private static final String QUEUE = &quot;helloworld&quot;; public static void main(String[] args) throws IOException, TimeoutException &#123; ConnectionFactory factory = new ConnectionFactory(); //设置MabbitMQ所在服务器的ip和端口 factory.setHost(&quot;127.0.0.1&quot;); factory.setPort(5672); Connection connection = factory.newConnection(); Channel channel = connection.createChannel(); //声明队列 channel.queueDeclare(QUEUE, true, false, false, null); //定义消费方法 DefaultConsumer consumer = new DefaultConsumer(channel) &#123; /** * 消费者接收消息调用此方法 * @param consumerTag 消费者的标签，在channel.basicConsume()去指定 * @param envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志 (收到消息失败后是否需要重新发送) * @param properties * @param body * @throws IOException */ @Override public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123; //交换机 String exchange = envelope.getExchange(); //路由key String routingKey = envelope.getRoutingKey(); //消息id long deliveryTag = envelope.getDeliveryTag(); //消息内容 String msg = new String(body,&quot;utf‐8&quot;); System.out.println(&quot;receive message..&quot; + msg); &#125; &#125;; /** * 监听队列String queue, boolean autoAck,Consumer callback * 参数明细 * 1、队列名称 * 2、是否自动回复，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置 为false则需要手动回复 * 3、消费消息的方法，消费者接收到消息后调用此方法 */ channel.basicConsume(QUEUE, true, consumer); &#125;&#125; 总结 1、发送端操作流程 1）创建连接 2）创建通道 3）声明队列 4）发送消息 2、接收端 1）创建连接 2）创建通道 3）声明队列 4）监听队列 5）接收消息","categories":[],"tags":[{"name":"消息队列","slug":"消息队列","permalink":"http://example.com/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"}]},{"title":"Java基础知识","slug":"java/Java_基础知识","date":"2019-02-18T05:18:33.000Z","updated":"2021-09-22T11:19:04.623Z","comments":true,"path":"2019/02/18/java/Java_基础知识/","link":"","permalink":"http://example.com/2019/02/18/java/Java_%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/","excerpt":"","text":"Java基础知识 原文：https://blog.csdn.net/linzhiqiang0316/article/details/80473906 相关概念 面向对象的三个特征 封装，继承，多态，这个应该是人人皆知，有时候也会加上抽象。 多态的好处 允许不同类对象对同一消息做出响应，即同一消息可以根据发送对象的不同而采用多种不同的行为方式(发送消息就是函数调用)。主要有以下优点： 可替换性：多态对已存在代码具有可替换性 可扩充性：增加新的子类不影响已经存在的类结构 接口性：多态是超类通过方法签名,向子类提供一个公共接口,由子类来完善或者重写它来实现的。 灵活性 简化性 代码中如何实现多态 实现多态主要有以下三种方式： ​ 接口实现 ​ 继承父类重写方法 ​ 同一类中进行方法重载 虚拟机是如何实现多态的 动态绑定技术(dynamic binding)，执行期间判断所引用对象的实际类型，根据实际类型调用对应的方法。 接口的意义 接口的意义用三个词就可以概括：规范，扩展，回调。 抽象类的意义 抽象类的意义可以用三句话来概括： 为其他子类提供一个公共的类型 封装子类中重复定义的内容 定义抽象方法,子类虽然有不同的实现，但是定义时一致的 接口和抽象类的区别 比较 抽象类 接口 默认方法 抽象类可以有默认的方法实现 java 8之前,接口中不存在方法的实现 实现方式 子类使用extends关键字来继承抽象类.如果子类不是抽象类,子类需要提供抽象类中所声明方法的实现 子类使用implements来实现接口,需要提供接口中所有声明的实现 构造器 抽象类中可以有构造器 接口中不能 和正常类区别 抽象类不能被实例化 接口则是完全不同的类型 访问修饰符 抽象方法可以有public,protected和default等修饰 接口默认是public,不能使用其他修饰符 多继承 一个子类只能存在一个父类 一个子类可以存在多个接口 添加新方法 想抽象类中添加新方法,可以提供默认的实现,因此可以不修改子类现有的代码 如果往接口中添加新方法,则子类中需要实现该方法 父类的静态方法能否被子类重写 不能。重写只适用于实例方法,不能用于静态方法，而子类当中含有和父类相同签名的静态方法，我们一般称之为隐藏 什么是不可变对象 不可变对象指对象一旦被创建，状态就不能再改变。任何修改都会创建一个新的对象，如 String、Integer及其它包装类 静态变量和实例变量的区别? 静态变量存储在方法区，属于类所有。实例变量存储在堆当中，其引用存在当前线程栈 能否创建一个包含可变对象的不可变对象? 当然可以创建一个包含可变对象的不可变对象的，你只需要谨慎一点，不要共享可变对象的引用就可以了，如果需要变化时，就返回原对象的一个拷贝。最常见的例子就是对象中包含一个日期对象的引用 java 创建对象的几种方式 采用new 通过反射 采用clone 通过序列化机制 前2者都需要显式地调用构造方法。造成耦合性最高的恰好是第一种，因此你发现无论什么框架，只要涉及到解耦必先减少new的使用。 switch中能否使用string做参数 在idk 1.7之前，switch只能支持byte, short, char, int或者其对应的封装类以及Enum类型。从idk 1.7之后switch开始支持String switch能否作用在byte, long上? 可以用在byte上，但是不能用在long上。 你对String对象的intern()熟悉么? intern()方法会首先从常量池中查找是否存在该常量值，如果常量池中不存在则现在常量池中创建，如果已经存在则直接返回。 比如 String s1=”aa”; String s2=s1.intern(); System.out.print(s1==s2);//返回true String s1=”ab”, String s2=”a”+”b”, String s3=”a”, String s4=”b”, s5=s3+s4请问s5==s2返回什么？ 返回false。在编译过程中，编译器会将s2直接优化为”ab”，会将其放置在常量池当中，s5则是被创建在堆区，相当于s5=new String(“ab”); Object中有哪些公共方法? equals() clone() getClass() notify(),notifyAll(),wait() toString java当中的四种引用 强引用，软引用，弱引用，虚引用。不同的引用类型主要体现在GC上: ​ 强引用：如果一个对象具有强引用，它就不会被垃圾回收器回收。即使当前内存空间不足，JVM也不会回收它，而是抛出 OutOfMemoryError 错误，使程序异常终止。如果想中断强引用和某个对象之间的关联，可以显式地将引用赋值为null，这样一来的话，JVM在合适的时间就会回收该对象。 软引用：在使用软引用时，如果内存的空间足够，软引用就能继续被使用，而不会被垃圾回收器回收，只有在内存不足时，软引用才会被垃圾回收器回收。 弱引用：具有弱引用的对象拥有的生命周期更短暂。因为当 JVM 进行垃圾回收，一旦发现弱引用对象，无论当前内存空间是否充足，都会将弱引用回收。不过由于垃圾回收器是一个优先级较低的线程，所以并不一定能迅速发现弱引用对象。 虚引用：顾名思义，就是形同虚设，如果一个对象仅持有虚引用，那么它相当于没有引用，在任何时候都可能被垃圾回收器回收。 WeakReference与SoftReference的区别? 这点在四种引用类型中已经做了解释,这里简单说明一下即可: 虽然 WeakReference 与 SoftReference 都有利于提高 GC 和 内存的效率，但是 WeakReference ，一旦失去最后一个强引用，就会被 GC 回收，而软引用虽然不能阻止被回收，但是可以延迟到 JVM 内存不足的时候 为什么要有不同的引用类型 不像C语言，我们可以控制内存的申请和释放，在Java中有时候我们需要适当的控制对象被回收的时机，因此就诞生了不同的引用类型，可以说不同的引用类型实则是对GC回收时机不可控的妥协。有以下几个使用场景可以充分的说明： 利用软引用和弱引用解决OOM问题：用一个HashMap来保存图片的路径和相应图片对象关联的软引用之间的映射关系，在内存不足时，JVM会自动回收这些缓存图片对象所占用的空间，从而有效地避免了OOM的问题. 通过软引用实现Java对象的高速缓存:比如我们创建了一Person的类，如果每次需要查询一个人的信息,哪怕是几秒中之前刚刚查询过的，都要重新构建一个实例，这将引起大量Person对象的消耗，并且由于这些对象的生命周期相对较短，会引起多次GC影响性能。此时，通过软引用和 HashMap 的结合可以构建高速缓存，提供性能 java中==和eqauls()的区别,equals()和`hashcode的区别 == 是运算符，用于比较两个变量是否相等，而equals是Object类的方法，用于比较两个对象是否相等。默认Object类的equals方法是比较两个对象的地址，此时和 == 的结果一样。换句话说：基本类型比较用==，比较的是他们的值。默认下，对象用==比较时，比较的是内存地址，如果需要比较对象内容，需要重写equal方法 equals()和hashcode()的联系 hashCode()是Object类的一个方法，返回一个哈希值。如果两个对象根据equal()方法比较相等，那么调用这两个对象中任意一个对象的hashCode()方法必须产生相同的哈希值。 如果两个对象根据eqaul()方法比较不相等，那么产生的哈希值不一定相等(碰撞的情况下还是会相等的。) a.hashCode()有什么用?与a.equals(b)有什么关系 hashCode() 方法是相应对象整型的 hash 值。它常用于基于 hash 的集合类，如 Hashtable、HashMap、LinkedHashMap等等。它与 equals() 方法关系特别紧密。根据 Java 规范，使用 equal() 方法来判断两个相等的对象，必须具有相同的 hashcode。 将对象放入到集合中时，首先判断要放入对象的hashcode是否已经在集合中存在，不存在则直接放入集合。如果hashcode相等，然后通过equal()方法判断要放入对象与集合中的任意对象是否相等：如果equal()判断不相等，直接将该元素放入集合中，否则不放入 有没有可能两个不相等的对象有相同的hashcode 有可能，两个不相等的对象可能会有相同的 hashcode 值，这就是为什么在 hashmap 中会有冲突。如果两个对象相等，必须有相同的hashcode 值，反之不成立 可以在hashcode中使用随机数字吗? 不行，因为同一对象的 hashcode 值必须是相同的 a==b与a.equals(b)有什么区别 如果a 和b 都是对象，则 a==b 是比较两个对象的引用，只有当 a 和 b 指向的是堆中的同一个对象才会返回 true，而 a.equals(b) 是进行逻辑比较，所以通常需要重写该方法来提供逻辑一致性的比较。例如，String 类重写 equals() 方法，所以可以用于两个不同对象，但是包含的字母相同的比较 3*0.1==0.3返回值是什么 false，因为有些浮点数不能完全精确的表示出来 a=a+b与a+=b有什么区别吗? +=操作符会进行隐式自动类型转换，此处a+=b隐式的将加操作的结果类型强制转换为持有结果的类型，而a=a+b则不会自动进行类型转换。如： byte a = 127; byte b = 127; b = a + b; // error : cannot convert from int to byte b += a; // ok （译者注：这个地方应该表述的有误，其实无论 a+b 的值为多少，编译器都会报错，因为 a+b 操作会将 a、b 提升为 int 类型，所以将 int 类型赋值给 byte 就会编译出错） short s1= 1; s1 = s1 + 1; 该段代码是否有错,有的话怎么改？ 有错误，short类型在进行运算时会自动提升为int类型，也就是说s1+1的运算结果是int类型。 short s1= 1; s1 += 1; 该段代码是否有错，有的话怎么改？ +=操作符会自动对右边的表达式结果强转匹配左边的数据类型，所以没错。 &amp; 和 &amp;&amp;的区别 首先记住&amp;是位操作，而&amp;&amp;是逻辑运算符。另外需要记住逻辑运算符具有短路特性，而&amp;不具备短路特性 123456789101112public class Test&#123; static String name; public static void main(String[] args)&#123; if(name!=null&amp;userName.equals(&quot;&quot;))&#123; System.out.println(&quot;ok&quot;); &#125;else&#123; System.out.println(&quot;erro&quot;); &#125; &#125;&#125; 一个java文件内部可以有类？(非内部类) 只能有一个public公共类，但是可以有多个default修饰的类。 如何正确的退出多层嵌套循环？ 使用标号和break; 通过在外层循环中添加标识符 内部类的作用 内部类可以有多个实例，每个实例都有自己的状态信息，并且与其他外围对象的信息相互独立.在单个外围类当中，可以让多个内部类以不同的方式实现同一接口，或者继承同一个类.创建内部类对象的时刻不依赖于外部类对象的创建。内部类并没有令人疑惑的”is-a”管系，它就像是一个独立的实体。 内部类提供了更好的封装，除了该外围类，其他类都不能访问 final, finalize和finally的不同之处 final 是一个修饰符，可以修饰变量、方法和类。如果 final 修饰变量，意味着该变量的值在初始化后不能被改变。 finalize 方法是在对象被回收之前调用的方法，给对象自己最后一个复活的机会，但是什么时候调用 finalize 没有保证。 finally 是一个关键字，与 try 和 catch 一起用于异常的处理。finally 块一定会被执行，无论在 try 块中是否有发生异常 clone()是哪个类的方法? java.lang.Cloneable 是一个标示性接口，不包含任何方法，clone 方法在 object 类中定义。并且需要知道 clone() 方法是一个本地方法，这意味着它是由 c 或 c++ 或 其他本地语言实现的 深拷贝和浅拷贝的区别是什么? 浅拷贝：被复制对象的所有变量都含有与原来的对象相同的值，而所有的对其他对象的引用仍然指向原来的对象。换言之，浅拷贝仅仅复制所考虑的对象，而不复制它所引用的对象。 深拷贝：被复制对象的所有变量都含有与原来的对象相同的值，而那些引用其他对象的变量将指向被复制过的新对象，而不再是原有的那些被引用的对象。换言之，深拷贝把要复制的对象所引用的对象都复制了一遍 static都有哪些用法? 几乎所有的人都知道static关键字这两个基本的用法：静态变量和静态方法。也就是被static所修饰的变量/方法都属于类的静态资源，类实例所共享。 除了静态变量和静态方法之外，static也用于静态块，多用于初始化操作： public calss PreCache&#123; static&#123; //执行相关操作 &#125; &#125; 此外static也多用于修饰内部类，此时称之为静态内部类。 最后一种用法就是静态导包，即import static.import static是在JDK 1.5之后引入的新特性，可以用来指定导入某个类中的静态资源，并且不需要使用类名。资源名，可以直接使用资源名，比如： ​ ​ import static java.lang.Math.*; public class Test&#123; public static void main(String[] args)&#123; //System.out.println(Math.sin(20));传统做法 System.out.println(sin(20)); &#125; &#125; final有哪些用法 final也是很多面试喜欢问的地方，能回答下以下三点就不错了： ​ 1.被final修饰的类不可以被继承 2.被final修饰的方法不可以被重写 3.被final修饰的变量不可以被改变。如果修饰引用，那么表示引用不可变，引用指向的内容可变。 4.被final修饰的方法，JVM会尝试将其内联，以提高运行效率 5.被final修饰的常量，在编译阶段会存入常量池中。 回答出编译器对final域要遵守的两个重排序规则更好： 1.在构造函数内对一个final域的写入，与随后把这个被构造对象的引用赋值给一个引用变量,这两个操作之间不能重排序。 2.初次读一个包含final域的对象的引用，与随后初次读这个final域,这两个操作之间不能重排序。 数据类型相关 java中int char,long各占多少字节? 类型 位数 字节数 short 2 16 int 4 32 long 8 64 float 4 32 double 8 64 char 2 16 64位的JVM当中,int的长度是多少? Java 中，int 类型变量的长度是一个固定值，与平台无关，都是 32 位。意思就是说，在 32 位 和 64 位 的Java 虚拟机中，int 类型的长度是相同的 int和Integer的区别 Integer是int的包装类型，在拆箱和装箱中，二者自动转换。int是基本类型，直接存数值，而integer是对象，用一个引用指向这个对象 int 和Integer谁占用的内存更多? Integer 对象会占用更多的内存。Integer是一个对象，需要存储对象的元数据。但是 int 是一个原始类型的数据，所以占用的空间更少 String, StringBuffer和StringBuilder区别 String是字符串常量，final修饰：StringBuffer字符串变量(线程安全)； StringBuilder 字符串变量(线程不安全)。 String和StringBuffer String和StringBuffer主要区别是性能：String是不可变对象，每次对String类型进行操作都等同于产生了一个新的String对象，然后指向新的String对象。所以尽量不在对String进行大量的拼接操作，否则会产生很多临时对象，导致GC开始工作，影响系统性能。 StringBuffer是对对象本身操作，而不是产生新的对象，因此在有大量拼接的情况下，我们建议使用StringBuffer。 但是需要注意现在JVM会对String拼接做一定的优化： String s=“This is only ”+”simple”+”test”会被虚拟机直接优化成String s=“This is only simple test”，此时就不存在拼接过程。 StringBuffer和StringBuilder StringBuffer是线程安全的可变字符串，其内部实现是可变数组。StringBuilder是jdk 1.5新增的，其功能和StringBuffer类似，但是非线程安全。因此，在没有多线程问题的前提下，使用StringBuilder会取得更好的性能 什么是编译器常量？使用它有什么风险？ 公共静态不可变（public static final ）变量也就是我们所说的编译期常量，这里的 public 可选的。实际上这些变量在编译时会被替换掉，因为编译器知道这些变量的值，并且知道这些变量在运行时不能改变。这种方式存在的一个问题是你使用了一个内部的或第三方库中的公有编译时常量，但是这个值后面被其他人改变了，但是你的客户端仍然在使用老的值，甚至你已经部署了一个新的jar。为了避免这种情况，当你在更新依赖 JAR 文件时，确保重新编译你的程序 java当中使用什么类型表示价格比较好? 如果不是特别关心内存和性能的话，使用BigDecimal，否则使用预定义精度的 double 类型 如何将byte转为String 可以使用 String 接收 byte[] 参数的构造器来进行转换，需要注意的点是要使用的正确的编码，否则会使用平台默认编码，这个编码可能跟原来的编码相同，也可能不同 可以将int强转为byte类型么?会产生什么问题? 我们可以做强制转换，但是Java中int是32位的而byte是8 位的，所以,如果强制转化int类型的高24位将会被丢弃，byte 类型的范围是从-128到128 关于垃圾回收 你知道哪些垃圾回收算法? 垃圾回收从理论上非常容易理解,具体的方法有以下几种: 标记-清除 标记-复制 标记-整理 分代回收 更详细的内容参见深入理解垃圾回收算法： http://blog.csdn.net/dd864140130/article/details/50084471 如何判断一个对象是否应该被回收 这就是所谓的对象存活性判断，常用的方法有两种：1.引用计数法; 2.对象可达性分析。由于引用计数法存在互相引用导致无法进行GC的问题，所以目前JVM虚拟机多使用对象可达性分析算法 简单的解释一下垃圾回收 Java 垃圾回收机制最基本的做法是分代回收。内存中的区域被划分成不同的世代，对象根据其存活的时间被保存在对应世代的区域中。一般的实现是划分成3个世代：年轻、年老和永久。内存的分配是发生在年轻世代中的。当一个对象存活时间足够长的时候，它就会被复制到年老世代中。对于不同的世代可以使用不同的垃圾回收算法。进行世代划分的出发点是对应用中对象存活时间进行研究之后得出的统计规律。一般来说，一个应用中的大部分对象的存活时间都很短。比如局部变量的存活时间就只在方法的执行过程中。基于这一点，对于年轻世代的垃圾回收算法就可以很有针对性 调用System.gc()会发生什么? 通知GC开始工作，但是GC真正开始的时间不确定 进程,线程相关 说说进程，线程，协程之间的区别 简而言之，进程是程序运行和资源分配的基本单位，一个程序至少有一个进程，一个进程至少有一个线程。进程在执行过程中拥有独立的内存单元，而多个线程共享内存资源，减少切换次数，从而效率更高。线程是进程的一个实体，是cpu调度和分派的基本单位，是比程序更小的能独立运行的基本单位。同一进程中的多个线程之间可以并发执行 你了解守护线程吗？它和非守护线程有什么区别 程序运行完毕，jvm会等待非守护线程完成后关闭，但是jvm不会等待守护线程。守护线程最典型的例子就是GC线程 什么是多线程上下文切换 多线程的上下文切换是指CPU控制权由一个已经正在运行的线程切换到另外一个就绪并等待获取CPU执行权的线程的过程 创建两种线程的方式?他们有什么区别? 通过实现java.lang.Runnable或者通过扩展java.lang.Thread类。相比扩展Thread，实现Runnable接口可能更优.原因有二： Java不支持多继承。因此扩展Thread类就代表这个子类不能扩展其他类。而实现Runnable接口的类还可能扩展另一个类。 类可能只要求可执行即可，因此继承整个Thread类的开销过大 Thread类中的start()和run()方法有什么区别? start()方法被用来启动新创建的线程，而且start()内部调用了run()方法，这和直接调用run()方法的效果不一样。当你调用run()方法的时候，只会是在原来的线程中调用，没有新的线程启动，start()方法才会启动新线程 怎么检测一个线程是否持有对象监视器 Thread类提供了一个holdsLock(Object obj)方法，当且仅当对象obj的监视器被某条线程持有的时候才会返回true，注意这是一个static方法，这意味着”某条线程”指的是当前线程 Runnable和Callable的区别 Runnable接口中的run()方法的返回值是void，它做的事情只是纯粹地去执行run()方法中的代码而已；Callable接口中的call()方法是有返回值的，是一个泛型，和Future、FutureTask配合可以用来获取异步执行的结果。 这其实是很有用的一个特性，因为多线程相比单线程更难、更复杂的一个重要原因就是因为多线程充满着未知性，某条线程是否执行了？某条线程执行了多久？某条线程执行的时候我们期望的数据是否已经赋值完毕？无法得知，我们能做的只是等待这条多线程的任务执行完毕而已。而Callable+Future/FutureTask却可以方便获取多线程运行的结果，可以在等待时间太长没获取到需要的数据的情况下取消该线程的任务。 什么导致线程阻塞 阻塞指的是暂停一个线程的执行以等待某个条件发生（如某资源就绪），学过操作系统的同学对它一定已经很熟悉了。Java 提供了大量方法来支持阻塞，下面让我们逐一分析 方法 说明 sleep() sleep() 允许 指定以毫秒为单位的一段时间作为参数，它使得线程在指定的时间内进入阻塞状态，不能得到CPU 时间，指定的时间一过，线程重新进入可执行状态。 典型地，sleep() 被用在等待某个资源就绪的情形：测试发现条件不满足后，让线程阻塞一段时间后重新测试，直到条件满足为止 suspend() 和 resume() 两个方法配套使用，suspend()使得线程进入阻塞状态，并且不会自动恢复，必须其对应的resume() 被调用，才能使得线程重新进入可执行状态。典型地，suspend() 和 resume() 被用在等待另一个线程产生的结果的情形：测试发现结果还没有产生后，让线程阻塞，另一个线程产生了结果后，调用 resume() 使其恢复 yield() yield() 使当前线程放弃当前已经分得的CPU 时间，但不使当前线程阻塞，即线程仍处于可执行状态，随时可能再次分得 CPU 时间。调用 yield() 的效果等价于调度程序认为该线程已执行了足够的时间从而转到另一个线程 wait() 和 notify() 两个方法配套使用，wait() 使得线程进入阻塞状态，它有两种形式，一种允许 指定以毫秒为单位的一段时间作为参数，另一种没有参数，前者当对应的 notify() 被调用或者超出指定时间时线程重新进入可执行状态，后者则必须对应的 notify() 被调用。 wait(),notify()和suspend(),resume()之间的区别 初看起来它们与 suspend() 和 resume() 方法对没有什么分别，但是事实上它们是截然不同的。区别的核心在于，前面叙述的所有方法，阻塞时都不会释放占用的锁（如果占用了的话），而这一对方法则相反。上述的核心区别导致了一系列的细节上的区别。 首先，前面叙述的所有方法都隶属于 Thread 类，但是这一对却直接隶属于 Object 类，也就是说，所有对象都拥有这一对方法。初看起来这十分不可思议，但是实际上却是很自然的，因为这一对方法阻塞时要释放占用的锁，而锁是任何对象都具有的，调用任意对象的 wait() 方法导致线程阻塞，并且该对象上的锁被释放。而调用 任意对象的notify()方法则导致从调用该对象的 wait() 方法而阻塞的线程中随机选择的一个解除阻塞（但要等到获得锁后才真正可执行）。 其次，前面叙述的所有方法都可在任何位置调用，但是这一对方法却必须在 synchronized 方法或块中调用，理由也很简单，只有在synchronized 方法或块中当前线程才占有锁，才有锁可以释放。同样的道理，调用这一对方法的对象上的锁必须为当前线程所拥有，这样才有锁可以释放。因此，这一对方法调用必须放置在这样的 synchronized 方法或块中，该方法或块的上锁对象就是调用这一对方法的对象。若不满足这一条件，则程序虽然仍能编译，但在运行时会出现IllegalMonitorStateException 异常。 wait() 和 notify() 方法的上述特性决定了它们经常和synchronized关键字一起使用，将它们和操作系统进程间通信机制作一个比较就会发现它们的相似性：synchronized方法或块提供了类似于操作系统原语的功能，它们的执行不会受到多线程机制的干扰，而这一对方法则相当于 block 和wakeup 原语（这一对方法均声明为 synchronized）。它们的结合使得我们可以实现操作系统上一系列精妙的进程间通信的算法（如信号量算法），并用于解决各种复杂的线程间通信问题。 关于 wait() 和 notify() 方法最后再说明两点： 第一：调用 notify() 方法导致解除阻塞的线程是从因调用该对象的 wait() 方法而阻塞的线程中随机选取的，我们无法预料哪一个线程将会被选择，所以编程时要特别小心，避免因这种不确定性而产生问题。 第二：除了 notify()，还有一个方法 notifyAll() 也可起到类似作用，唯一的区别在于，调用 notifyAll() 方法将把因调用该对象的 wait() 方法而阻塞的所有线程一次性全部解除阻塞。当然，只有获得锁的那一个线程才能进入可执行状态。 谈到阻塞，就不能不谈一谈死锁，略一分析就能发现，suspend() 方法和不指定超时期限的 wait() 方法的调用都可能产生死锁。遗憾的是，Java 并不在语言级别上支持死锁的避免，我们在编程中必须小心地避免死锁。 以上我们对 Java 中实现线程阻塞的各种方法作了一番分析，我们重点分析了 wait() 和 notify() 方法，因为它们的功能最强大，使用也最灵活，但是这也导致了它们的效率较低，较容易出错。实际使用中我们应该灵活使用各种方法，以便更好地达到我们的目的。 产生死锁的条件 1.互斥条件：一个资源每次只能被一个进程使用。 2.请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。 3.不剥夺条件:进程已获得的资源，在末使用完之前，不能强行剥夺。 4.循环等待条件:若干进程之间形成一种头尾相接的循环等待资源关系。 为什么wait()方法和notify()/notifyAll()方法要在同步块中被调用 这是JDK强制的，wait()方法和notify()/notifyAll()方法在调用前都必须先获得对象的锁 wait()方法和notify()/notifyAll()方法在放弃对象监视器时有什么区别 wait()方法和notify()/notifyAll()方法在放弃对象监视器的时候的区别在于：wait()方法立即释放对象监视器，notify()/notifyAll()方法则会等待线程剩余代码执行完毕才会放弃对象监视器。 wait()与sleep()的区别 关于这两者已经在上面进行详细的说明,这里就做个概括好了: sleep()来自Thread类，和wait()来自Object类。调用sleep()方法的过程中，线程不会释放对象锁。而 调用 wait 方法线程会释放对象锁 sleep()睡眠后不出让系统资源，wait让其他线程可以占用CPU sleep(milliseconds)需要指定一个睡眠时间，时间一到会自动唤醒.而wait()需要配合notify()或者notifyAll()使用 为什么wait, nofity和nofityAll这些方法不放在Thread类当中 一个很明显的原因是JAVA提供的锁是对象级的而不是线程级的，每个对象都有锁，通过线程获得。如果线程需要等待某些锁那么调用对象中的wait()方法就有意义了。如果wait()方法定义在Thread类中，线程正在等待的是哪个锁就不明显了。简单的说，由于wait，notify和notifyAll都是锁级别的操作，所以把他们定义在Object类中因为锁属于对象 怎么唤醒一个阻塞的线程 如果线程是因为调用了wait()、sleep()或者join()方法而导致的阻塞，可以中断线程，并且通过抛出InterruptedException来唤醒它；如果线程遇到了IO阻塞，无能为力，因为IO是操作系统实现的，Java代码并没有办法直接接触到操作系统 什么是多线程的上下文切换 多线程的上下文切换是指CPU控制权由一个已经正在运行的线程切换到另外一个就绪并等待获取CPU执行权的线程的过程 synchronized和ReentrantLock的区别 synchronized是和if、else、for、while一样的关键字，ReentrantLock是类，这是二者的本质区别。既然ReentrantLock是类，那么它就提供了比synchronized更多更灵活的特性，可以被继承、可以有方法、可以有各种各样的类变量，ReentrantLock比synchronized的扩展性体现在几点上： ​ （1）ReentrantLock可以对获取锁的等待时间进行设置，这样就避免了死锁 （2）ReentrantLock可以获取各种锁的信息 （3）ReentrantLock可以灵活地实现多路通知 另外，二者的锁机制其实也是不一样的:ReentrantLock底层调用的是Unsafe的park方法加锁，synchronized操作的应该是对象头中mark word FutureTask是什么 这个其实前面有提到过，FutureTask表示一个异步运算的任务。FutureTask里面可以传入一个Callable的具体实现类，可以对这个异步运算的任务的结果进行等待获取、判断是否已经完成、取消任务等操作。当然，由于FutureTask也是Runnable接口的实现类，所以FutureTask也可以放入线程池中 一个线程如果出现了运行时异常怎么办? 如果这个异常没有被捕获的话，这个线程就停止执行了。另外重要的一点是：如果这个线程持有某个某个对象的监视器，那么这个对象监视器会被立即释放 Java当中有哪几种锁 自旋锁: 自旋锁在JDK1.6之后就默认开启了。基于之前的观察，共享数据的锁定状态只会持续很短的时间，为了这一小段时间而去挂起和恢复线程有点浪费，所以这里就做了一个处理，让后面请求锁的那个线程在稍等一会，但是不放弃处理器的执行时间，看看持有锁的线程能否快速释放。为了让线程等待，所以需要让线程执行一个忙循环也就是自旋操作。在jdk6之后，引入了自适应的自旋锁，也就是等待的时间不再固定了，而是由上一次在同一个锁上的自旋时间及锁的拥有者状态来决定。 偏向锁: 在JDK1.之后引入的一项锁优化，目的是消除数据在无竞争情况下的同步原语。进一步提升程序的运行性能。 偏向锁就是偏心的偏，意思是这个锁会偏向第一个获得他的线程，如果接下来的执行过程中，改锁没有被其他线程获取，则持有偏向锁的线程将永远不需要再进行同步。偏向锁可以提高带有同步但无竞争的程序性能，也就是说他并不一定总是对程序运行有利，如果程序中大多数的锁都是被多个不同的线程访问，那偏向模式就是多余的，在具体问题具体分析的前提下，可以考虑是否使用偏向锁。 轻量级锁: 为了减少获得锁和释放锁所带来的性能消耗，引入了“偏向锁”和“轻量级锁”，所以在Java SE1.6里锁一共有四种状态，无锁状态，偏向锁状态，轻量级锁状态和重量级锁状态，它会随着竞争情况逐渐升级。锁可以升级但不能降级，意味着偏向锁升级成轻量级锁后不能降级成偏向锁。 如何在两个线程间共享数据 通过在线程之间共享对象就可以了，然后通过wait/notify/notifyAll、await/signal/signalAll进行唤起和等待，比方说阻塞队列BlockingQueue就是为线程之间共享数据而设计的。 如何正确的使用wait()？使用if还是while？ wait() 方法应该在循环调用，因为当线程获取到 CPU 开始执行的时候，其他条件可能还没有满足，所以在处理前，循环检测条件是否满足会更好。下面是一段标准的使用 wait 和 notify 方法的代码： synchronized (obj) &#123; while (condition does not hold) obj.wait(); // (Releases lock, and reacquires on wakeup) ... // Perform action appropriate to condition &#125; 什么是线程局部变量ThreadLocal 线程局部变量是局限于线程内部的变量，属于线程自身所有，不在多个线程间共享。Java提供ThreadLocal类来支持线程局部变量，是一种实现线程安全的方式。但是在管理环境下（如 web 服务器）使用线程局部变量的时候要特别小心，在这种情况下，工作线程的生命周期比任何应用变量的生命周期都要长。任何线程局部变量一旦在工作完成后没有释放，Java 应用就存在内存泄露的风险。 ThreadLoal的作用是什么? 简单说ThreadLocal就是一种以空间换时间的做法在每个Thread里面维护了一个ThreadLocal.ThreadLocalMap把数据进行隔离，数据不共享，自然就没有线程安全方面的问题了。 生产者消费者模型的作用是什么? （1）通过平衡生产者的生产能力和消费者的消费能力来提升整个系统的运行效率，这是生产者消费者模型最重要的作用。 （2）解耦，这是生产者消费者模型附带的作用，解耦意味着生产者和消费者之间的联系少，联系越少越可以独自发展而不需要收到相互的制约。 写一个生产者-消费者队列 可以通过阻塞队列实现，也可以通过wait-notify来实现。 使用阻塞队列来实现： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566//消费者public class Producer implements Runnable&#123; private final BlockingQueue&lt;Integer&gt; queue; public Producer(BlockingQueue q)&#123; this.queue=q; &#125; @Override public void run() &#123; try &#123; while (true)&#123; Thread.sleep(1000);//模拟耗时 queue.put(produce()); &#125; &#125;catch (InterruptedException e)&#123; &#125; &#125; private int produce() &#123; int n=new Random().nextInt(10000); System.out.println(&quot;Thread:&quot; + Thread.currentThread().getId() + &quot; produce:&quot; + n); return n; &#125;&#125;//消费者public class Consumer implements Runnable &#123; private final BlockingQueue&lt;Integer&gt; queue; public Consumer(BlockingQueue q)&#123; this.queue=q; &#125; @Override public void run() &#123; while (true)&#123; try &#123; Thread.sleep(2000);//模拟耗时 consume(queue.take()); &#125;catch (InterruptedException e)&#123; &#125; &#125; &#125; private void consume(Integer n) &#123; System.out.println(&quot;Thread:&quot; + Thread.currentThread().getId() + &quot; consume:&quot; + n); &#125;&#125;//测试public class Main &#123; public static void main(String[] args) &#123; BlockingQueue&lt;Integer&gt; queue=new ArrayBlockingQueue&lt;Integer&gt;(100); Producer p=new Producer(queue); Consumer c1=new Consumer(queue); Consumer c2=new Consumer(queue); new Thread(p).start(); new Thread(c1).start(); new Thread(c2).start(); &#125;&#125; 如果你提交任务时，线程池队列已满，这时会发生什么 如果你使用的LinkedBlockingQueue，也就是无界队列的话，没关系，继续添加任务到阻塞队列中等待执行，因为LinkedBlockingQueue可以近乎认为是一个无穷大的队列，可以无限存放任务；如果你使用的是有界队列比方说ArrayBlockingQueue的话，任务首先会被添加到ArrayBlockingQueue中，ArrayBlockingQueue满了，则会使用拒绝策略RejectedExecutionHandler处理满了的任务，默认是AbortPolicy 为什么要使用线程池. 避免频繁地创建和销毁线程，达到线程对象的重用。另外，使用线程池还可以根据项目灵活地控制并发的数目。 java中用到的线程调度算法是什么 抢占式。一个线程用完CPU之后，操作系统会根据线程优先级、线程饥饿情况等数据算出一个总的优先级并分配下一个时间片给某个线程执行。 Thread.sleep(0)的作用是什么 由于Java采用抢占式的线程调度算法，因此可能会出现某条线程常常获取到CPU控制权的情况，为了让某些优先级比较低的线程也能获取到CPU控制权，可以使用Thread.sleep(0)手动触发一次操作系统分配时间片的操作，这也是平衡CPU控制权的一种操作。 什么是CAS CAS，全称为Compare and Swap，即比较-替换。假设有三个操作数：内存值V、旧的预期值A、要修改的值B，当且仅当预期值A和内存值V相同时，才会将内存值修改为B并返回true，否则什么都不做并返回false。当然CAS一定要volatile变量配合，这样才能保证每次拿到的变量是主内存中最新的那个值，否则旧的预期值A对某条线程来说，永远是一个不会变的值A，只要某次CAS操作失败，永远都不可能成功。 什么是乐观锁和悲观锁 乐观锁：乐观锁认为竞争不总是会发生，因此它不需要持有锁，将比较-替换这两个动作作为一个原子操作尝试去修改内存中的变量，如果失败则表示发生冲突，那么就应该有相应的重试逻辑。 悲观锁：悲观锁认为竞争总是会发生，因此每次对某资源进行操作时，都会持有一个独占的锁，就像synchronized，不管三七二十一，直接上了锁就操作资源了。 ConcurrentHashMap的并发度是什么? ConcurrentHashMap的并发度就是segment的大小，默认为16，这意味着最多同时可以有16条线程操作ConcurrentHashMap，这也是ConcurrentHashMap对Hashtable的最大优势，任何情况下，Hashtable能同时有两条线程获取Hashtable中的数据吗？ ConcurrentHashMap的工作原理 ConcurrentHashMap在jdk 1.6和jdk 1.8实现原理是不同的。 jdk 1.6: ​ ConcurrentHashMap是线程安全的，但是与Hashtablea相比，实现线程安全的方式不同。Hashtable是通过对hash表结构进行锁定，是阻塞式的，当一个线程占有这个锁时，其他线程必须阻塞等待其释放锁。ConcurrentHashMap是采用分离锁的方式，它并没有对整个hash表进行锁定，而是局部锁定，也就是说当一个线程占有这个局部锁时，不影响其他线程对hash表其他地方的访问。 具体实现:ConcurrentHashMap内部有一个Segment. jdk 1.8 在jdk 8中，ConcurrentHashMap不再使用Segment分离锁，而是采用一种乐观锁CAS算法来实现同步问题，但其底层还是“数组+链表-&gt;红黑树”的实现 CyclicBarrier和CountDownLatch区别 这两个类非常类似，都在java.util.concurrent下，都可以用来表示代码运行到某个点上，二者的区别在于： CyclicBarrier的某个线程运行到某个点上之后，该线程即停止运行，直到所有的线程都到达了这个点，所有线程才重新运行；CountDownLatch则不是，某线程运行到某个点上之后，只是给某个数值-1而已，该线程继续运行。 CyclicBarrier只能唤起一个任务，CountDownLatch可以唤起多个任务 CyclicBarrier可重用，CountDownLatch不可重用，计数值为0该CountDownLatch就不可再用了。 java中的++操作符线程安全么? 不是线程安全的操作。它涉及到多个指令，如读取变量值，增加，然后存储回内存，这个过程可能会出现多个线程交差 你有哪些多线程开发良好的实践? 给线程命名 最小化同步范围 优先使用volatile 尽可能使用更高层次的并发工具而非wait和notify()来实现线程通信,如BlockingQueue,Semeaphore 优先使用并发容器而非同步容器. 考虑使用线程池 关于集合 Java中的集合及其继承关系 关于集合的体系是每个人都应该烂熟于心的,尤其是对我们经常使用的List,Map的原理更该如此.这里我们看这张图即可: 更多内容可见集合类总结： http://write.blog.csdn.net/postedit/40826423 poll()方法和remove()方法区别？ poll() 和 remove() 都是从队列中取出一个元素，但是 poll() 在获取元素失败的时候会返回空，但是 remove() 失败的时候会抛出异常。 LinkedHashMap和PriorityQueue的区别 PriorityQueue 是一个优先级队列,保证最高或者最低优先级的的元素总是在队列头部，但是 LinkedHashMap 维持的顺序是元素插入的顺序。当遍历一个 PriorityQueue 时，没有任何顺序保证，但是 LinkedHashMap 课保证遍历顺序是元素插入的顺序 WeakHashMap与HashMap的区别是什么? WeakHashMap 的工作与正常的 HashMap 类似，但是使用弱引用作为 key，意思就是当 key 对象没有任何引用时，key/value 将会被回收。 ArrayList和LinkedList的区别? 最明显的区别是 ArrrayList底层的数据结构是数组，支持随机访问，而 LinkedList 的底层数据结构是双向循环链表，不支持随机访问。使用下标访问一个元素，ArrayList 的时间复杂度是 O(1)，而 LinkedList 是 O(n)。 ArrayList和Array有什么区别? Array可以容纳基本类型和对象，而ArrayList只能容纳对象。 Array是指定大小的，而ArrayList大小是固定的 ArrayList和HashMap默认大小? 在 Java 7 中，ArrayList 的默认大小是 10 个元素，HashMap 的默认大小是16个元素（必须是2的幂）。这就是 Java 7 中 ArrayList 和 HashMap 类的代码片段。 private static final int DEFAULT_CAPACITY = 10; //from HashMap.java JDK 7 static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4; Comparator和Comparable的区别? Comparable 接口用于定义对象的自然顺序，而 comparator 通常用于定义用户定制的顺序。Comparable 总是只有一个，但是可以有多个 comparator 来定义对象的顺序。 如何实现集合排序? 你可以使用有序集合，如 TreeSet 或 TreeMap，你也可以使用有顺序的的集合，如 list，然后通过 Collections.sort() 来排序。 如何打印数组内容 你可以使用 Arrays.toString() 和 Arrays.deepToString() 方法来打印数组。由于数组没有实现 toString() 方法，所以如果将数组传递给 System.out.println() 方法，将无法打印出数组的内容，但是 Arrays.toString() 可以打印每个元素 LinkedList的是单向链表还是双向? 双向循环列表，具体实现自行查阅源码。 TreeMap是实现原理 采用红黑树实现，具体实现自行查阅源码。 遍历ArrayList时如何正确移除一个元素 该问题的关键在于面试者使用的是 ArrayList 的 remove() 还是 Iterator 的 remove()方法。这有一段示例代码，是使用正确的方式来实现在遍历的过程中移除元素，而不会出现 ConcurrentModificationException 异常的示例代码 什么是ArrayMap?它和HashMap有什么区别? ArrayMap是Android SDK中提供的，非Android开发者可以略过。 ArrayMap是用两个数组来模拟map，更少的内存占用空间,更高的效率。 具体参考这篇文章：ArrayMap VS HashMap：http://lvable.com/?p=217] HashMap的实现原理 HashMap概述： HashMap是基于哈希表的Map接口的非同步实现。此实现提供所有可选的映射操作，并允许使用null值和null键。此类不保证映射的顺序，特别是它不保证该顺序恒久不变。 HashMap的数据结构： 在java编程语言中，最基本的结构就是两种，一个是数组，另外一个是模拟指针（引用），所有的数据结构都可以用这两个基本结构来构造的，HashMap也不例外。HashMap实际上是一个“链表散列”的数据结构，即数组和链表的结合体。 当我们往Hashmap中put元素时,首先根据key的hashcode重新计算hash值,根绝hash值得到这个元素在数组中的位置(下标),如果该数组在该位置上已经存放了其他元素,那么在这个位置上的元素将以链表的形式存放,新加入的放在链头,最先加入的放入链尾.如果数组中该位置没有元素,就直接将该元素放到数组的该位置上. 需要注意Jdk 1.8中对HashMap的实现做了优化,当链表中的节点数据超过八个之后,该链表会转为红黑树来提高查询效率,从原来的O(n)到O(logn) 你了解Fail-Fast机制吗？ Fail-Fast即我们常说的快速失败， 更多内容参看fail-fast机制：http://blog.csdn.net/chenssy/article/details/38151189 Fail-fast和Fail-safe有什么区别 Iterator的fail-fast属性与当前的集合共同起作用，因此它不会受到集合中任何改动的影响。Java.util包中的所有集合类都被设计为fail-&gt;fast的，而java.util.concurrent中的集合类都为fail-safe的。当检测到正在遍历的集合的结构被改变时，Fail-fast迭代器抛出ConcurrentModificationException，而fail-safe迭代器从不抛出ConcurrentModificationException。 关于日期 SimpleDateFormat是线程安全的吗? 非常不幸，DateFormat 的所有实现，包括 SimpleDateFormat 都不是线程安全的，因此你不应该在多线程序中使用，除非是在对外线程安全的环境中使用，如 将 SimpleDateFormat 限制在 ThreadLocal 中。如果你不这么做，在解析或者格式化日期的时候，可能会获取到一个不正确的结果。因此，从日期、时间处理的所有实践来说，我强力推荐 joda-time 库。 如何格式化日期? Java 中，可以使用 SimpleDateFormat 类或者 joda-time 库来格式日期。DateFormat 类允许你使用多种流行的格式来格式化日期。参见答案中的示例代码，代码中演示了将日期格式化成不同的格式，如 dd-MM-yyyy 或 ddMMyyyy。 关于异常 简单描述java异常体系 相比没有人不了解异常体系,关于异常体系的更多信息可以见 白话异常机制：http://blog.csdn.net/dd864140130/article/details/42504189 throw和throws的区别 throw用于主动抛出java.lang.Throwable 类的一个实例化对象，意思是说你可以通过关键字 throw 抛出一个 Error 或者 一个Exception，如：throw new IllegalArgumentException(“size must be multiple of 2″), 而throws 的作用是作为方法声明和签名的一部分，方法被抛出相应的异常以便调用者能处理。Java 中，任何未处理的受检查异常强制在 throws 子句中声明。 关于序列化 Java 中，Serializable 与 Externalizable 的区别 Serializable 接口是一个序列化 Java 类的接口，以便于它们可以在网络上传输或者可以将它们的状态保存在磁盘上，是 JVM 内嵌的默认序列化方式，成本高、脆弱而且不安全。Externalizable 允许你控制整个序列化过程，指定特定的二进制格式，增加安全机制。 关于JVM JVM特性 平台无关性. Java语言的一个非常重要的特点就是与平台的无关性。而使用Java虚拟机是实现这一特点的关键。一般的高级语言如果要在不同的平台上运行，至少需要编译成不同的目标代码。而引入Java语言虚拟机后，Java语言在不同平台上运行时不需要重新编译。Java语言使用模式Java虚拟机屏蔽了与具体平台相关的信息，使得Java语言编译程序只需生成在Java虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。Java虚拟机在执行字节码时，把字节码解释成具体平台上的机器指令执行。 简单解释一下类加载器 有关类加载器一般会问你四种类加载器的应用场景以及双亲委派模型, 更多的内容参看深入理解JVM加载器： http://blog.csdn.net/dd864140130/article/details/49817357 简述堆和栈的区别 VM 中堆和栈属于不同的内存区域，使用目的也不同。栈常用于保存方法帧和局部变量，而对象总是在堆上分配。栈通常都比堆小，也不会在多个线程之间共享，而堆被整个 JVM 的所有线程共享。 简述JVM内存分配 基本数据类型比变量和对象的引用都是在栈分配的。 堆内存用来存放由new创建的对象和数组。 类变量（static修饰的变量），程序在一加载的时候就在堆中为类变量分配内存，堆中的内存地址存放在栈中。 实例变量：当你使用java关键字new的时候，系统在堆中开辟并不一定是连续的空间分配给变量，是根据零散的堆内存地址，通过哈希算法换算为一长串数字以表征这个变量在堆中的”物理位置”,实例变量的生命周期–当实例变量的引用丢失后，将被GC（垃圾回收器）列入可回收“名单”中，但并不是马上就释放堆中内存。 局部变量: 由声明在某方法，或某代码段里（比如for循环），执行到它的时候在栈中开辟内存，当局部变量一但脱离作用域，内存立即释放。 其他 java当中采用的是大端还是小端? XML解析的几种方式和特点 DOM, SAX, PULL三种解析方式： DOM:消耗内存：先把xml文档都读到内存中，然后再用DOM API来访问树形结构，并获取数据。这个写起来很简单，但是很消耗内存。要是数据过大，手机不够牛逼，可能手机直接死机 SAX:解析效率高，占用内存少，基于事件驱动的：更加简单地说就是对文档进行顺序扫描，当扫描到文档(document)开始与结束、元素(element)开始与结束、文档(document)结束等地方时通知事件处理函数，由事件处理函数做相应动作，然后继续同样的扫描，直至文档结束。 PULL:与 SAX 类似，也是基于事件驱动，我们可以调用它的next（）方法，来获取下一个解析事件（就是开始文档，结束文档，开始标签，结束标签），当处于某个元素时可以调用XmlPullParser的getAttributte()方法来获取属性的值，也可调用它的nextText()获取本节点的值。 JDK 1.7特性 然 JDK 1.7 不像 JDK 5 和 8 一样的大版本，但是，还是有很多新的特性，如 try-with-resource 语句，这样你在使用流或者资源的时候，就不需要手动关闭，Java 会自动关闭。Fork-Join 池某种程度上实现 Java 版的 Map-reduce。允许 Switch 中有 String 变量和文本。菱形操作符(&lt;&gt;)用于类型推断，不再需要在变量声明的右边申明泛型，因此可以写出可读写更强、更简洁的代码。 JDK 1.8特性 java 8 在 Java 历史上是一个开创新的版本，下面 JDK 8 中 5 个主要的特性： Lambda 表达式，允许像对象一样传递匿名函数 Stream API，充分利用现代多核 CPU，可以写出很简洁的代码 Date 与 Time API，最终，有一个稳定、简单的日期和时间库可供你使用 扩展方法，现在，接口中可以有静态、默认方法。 重复注解，现在你可以将相同的注解在同一类型上使用多次。 Maven和ANT有什么区别? 虽然两者都是构建工具，都用于创建 Java 应用，但是 Maven 做的事情更多，在基于“约定优于配置”的概念下，提供标准的Java 项目结构，同时能为应用自动管理依赖（应用中所依赖的 JAR 文件。 JDBC最佳实践 优先使用批量操作来插入和更新数据 使用PreparedStatement来避免SQL漏洞 使用数据连接池 通过列名来获取结果集 IO操作最佳实践 使用有缓冲的IO类,不要单独读取字节或字符 使用NIO和NIO 2或者AIO,而非BIO 在finally中关闭流 使用内存映射文件获取更快的IO","categories":[],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"MnsUtil","slug":"消息队列简单使用","date":"2019-02-16T11:20:26.000Z","updated":"2021-09-22T11:19:04.655Z","comments":true,"path":"2019/02/16/消息队列简单使用/","link":"","permalink":"http://example.com/2019/02/16/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/","excerpt":"","text":"消息队列简单使用 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163package com.ifenghui.queue;import com.aliyun.mns.client.CloudAccount;import com.aliyun.mns.client.CloudQueue;import com.aliyun.mns.client.MNSClient;import com.aliyun.mns.model.Message;import com.aliyun.mns.model.QueueMeta;import com.fasterxml.jackson.core.JsonProcessingException;import com.fasterxml.jackson.databind.ObjectMapper;import com.ifenghui.app.comment.exception.FhException;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Value;import org.springframework.integration.support.json.Jackson2JsonObjectMapper;import org.springframework.stereotype.Component;import java.lang.reflect.Method;import java.util.Date;@Componentpublic class MnsUtil&#123; Logger logger= Logger.getLogger(MnsUtil.class); public MNSClient getClient() &#123; return client; &#125; private static MNSClient client = null; @Value(&quot;$&#123;mns.accountendpoint&#125;&quot;) String endPoint;//=&quot;http://20900454.mns.cn-hangzhou.aliyuncs.com&quot;; @Value(&quot;$&#123;mns.accesskeyid&#125;&quot;) String accessKeyId;//=&quot;xxxxxxxxx&quot;; @Value(&quot;$&#123;mns.accesskeysecret&#125;&quot;) String accessKeySecret;//=&quot;xxxxxxxxxxxx&quot;; @Value(&quot;$&#123;mns.prefix&#125;&quot;) String mnsPrefix; public MnsUtil() &#123; &#125; public MnsUtil(String endPoint,String accessKeyId,String accessKeySecret,String mnsPrefix) &#123; this.endPoint=endPoint; this.accessKeySecret=accessKeySecret; this.accessKeyId=accessKeyId; this.mnsPrefix=mnsPrefix; &#125; public void init()&#123; if(client!=null)&#123; return; &#125; CloudAccount account = new CloudAccount( accessKeyId, accessKeySecret, endPoint); client = account.getMNSClient(); &#125; public CloudQueue createQueue(String queueName)&#123; this.init(); CloudQueue queue1=null; try&#123; QueueMeta meta1 = new QueueMeta(); meta1.setQueueName(this.mnsPrefix+queueName); meta1.setPollingWaitSeconds(30); meta1.setMaxMessageSize(2048L); queue1 = client.createQueue(meta1); return queue1; &#125;catch (Exception e)&#123; e.printStackTrace(); &#125; return queue1; &#125; public void deleteMessage(CloudQueue queue,String messageHandle)&#123; this.init(); queue.deleteMessage(messageHandle); &#125; public &lt;M&gt; void popMessageThread(String queueName,Object listener,Class&lt;M&gt; messageType)&#123; MnsUtil mnsUtil=this; try&#123; this.createQueue(queueName); &#125;catch (Exception e)&#123; e.printStackTrace(); &#125; Runnable task=new Runnable() &#123; @Override public void run() &#123; mnsUtil.popMessage(queueName,listener,messageType); &#125; &#125;; Thread t=new Thread(task); t.start(); &#125; public &lt;M&gt; Message popMessage(String queueName,Object listener,Class&lt;M&gt; messageType)&#123; this.init(); CloudQueue queue= client.getQueueRef(mnsPrefix+queueName); while (true)&#123; try&#123; Message popMsg=null; try&#123; popMsg = queue.popMessage(); &#125;catch (Exception e)&#123; logger.info(&quot;popMessage a message error&gt;&gt;&gt;&gt; currentTime&quot;+new Date()); Thread.sleep(60000); e.printStackTrace(); &#125; if(popMsg==null)&#123; continue; &#125; logger.info(&quot;read a message&gt;&gt;&gt;&gt;&quot;+popMsg.getMessageBody()); Method method=listener.getClass().getMethod(&quot;process&quot;, messageType); M message=this.getMessageBody(popMsg.getMessageBody(),messageType); method.invoke(listener,message); String handle=popMsg.getReceiptHandle(); queue.deleteMessage(handle); &#125;catch (Exception e)&#123; logger.error(&quot;error message&gt;&gt;&gt;&gt;&quot;+e.getMessage()+&quot;:&quot;+queueName); e.printStackTrace(); continue; &#125; System.out.println(&quot;read a message&quot;); &#125; &#125; public &lt;M&gt; M getMessageBody(String messageBody,Class&lt;M&gt; jsonType) throws Exception &#123; Jackson2JsonObjectMapper jackson2JsonObjectMapper=new Jackson2JsonObjectMapper(); M messageObj=jackson2JsonObjectMapper.fromJson(messageBody,jsonType); return messageObj; &#125; public Message pushMessage(MnsMessage object) throws JsonProcessingException &#123; if(object.getQueueName()==null)&#123; logger.error(&quot;queue is null&quot;); return null; &#125; this.init(); ObjectMapper mapper = new ObjectMapper(); CloudQueue queue= client.getQueueRef(mnsPrefix+MnsMessageListener.mnsQueueName); String messageBody= mapper.writeValueAsString(object); Message message = new Message(); message.setMessageBody(messageBody); Message putMsg = queue.putMessage(message); return putMsg; &#125; public static void main(String[] args)&#123; MnsUtil mnsUtil=new MnsUtil(); System.out.println(&quot;over&quot;); &#125;&#125; 123456ImMessage imMessage=new ImMessage();imMessage.setContent(p.getContent());imMessage.setFrom(&quot;29&quot;);imMessage.setTo(userList);mnsUtil.pushMessage(imMessage);","categories":[],"tags":[{"name":"消息队列","slug":"消息队列","permalink":"http://example.com/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"}]},{"title":"关键字执行顺序","slug":"mysql/sql_ 关键字执行顺序","date":"2019-02-15T07:42:06.000Z","updated":"2021-09-22T11:19:04.636Z","comments":true,"path":"2019/02/15/mysql/sql_ 关键字执行顺序/","link":"","permalink":"http://example.com/2019/02/15/mysql/sql_%20%E5%85%B3%E9%94%AE%E5%AD%97%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/","excerpt":"","text":"mysql 关键字执行顺序 12345678910111.from2.on3.join4.where5.group by6.having7.select8.distinct9.union10.order by","categories":[],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/tags/mysql/"}]},{"title":"elasticsearch 模糊搜索","slug":"elasticsearch 模糊搜索","date":"2019-02-13T13:44:45.000Z","updated":"2021-09-22T11:19:04.615Z","comments":true,"path":"2019/02/13/elasticsearch 模糊搜索/","link":"","permalink":"http://example.com/2019/02/13/elasticsearch%20%E6%A8%A1%E7%B3%8A%E6%90%9C%E7%B4%A2/","excerpt":"","text":"elasticsearch 模糊搜索 1234567elastic.search.ex.index=xxx-exceptionelastic.search.story.index=xx-searchelastic.search.host=xx.xx.62.93elastic.search.port=9200elastic.search.user=elastic:xxxxx 123456789101112131415@Value(&quot;$&#123;elastic.search.host&#125;&quot;)String host;@Value(&quot;$&#123;elastic.search.port&#125;&quot;)Integer port;@Value(&quot;$&#123;elastic.search.user&#125;&quot;)String elasticUser;@Value(&quot;/$&#123;elastic.search.ex.index&#125;/ex&quot;)String elasticIndex;@Value(&quot;$&#123;elastic.search.story.index&#125;&quot;)String elasticIndex_story; 12345678910111213141516171819202122232425262728293031 RestClient restClient; Header header;// String elasticKey=&quot;/&quot;+elasticIndex+&quot;/user&quot;; public RestClient getClient() &#123;// if(restClient==null)&#123;&#125; synchronized (ElasticServiceImpl.class) &#123; restClient = RestClient.builder( new HttpHost(host, port, &quot;http&quot;) ).build(); &#125; return restClient; &#125; public Header getHeader()&#123; if(header==null)&#123; synchronized (ElasticServiceImpl.class) &#123; String token = Base64.getEncoder().encodeToString(elasticUser.getBytes()); header = new BasicHeader(&quot;Authorization&quot;, &quot;Basic &quot; + token); &#125; &#125; return header; &#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354 @Override public Page&lt;Map&gt; searchStoryNotNow(String content, int pageNo, int pageSize) throws Exception &#123; restClient = this.getClient(); Pageable pageable=new PageRequest(pageNo,pageSize); Map&lt;String,String&gt; params = Collections.emptyMap(); String jsonString = &quot;&#123;\\n&quot; + &quot; \\&quot;from\\&quot;: &quot;+pageable.getOffset()+&quot;,\\n&quot; + &quot; \\&quot;size\\&quot;: &quot;+pageable.getPageSize()+&quot;,\\n&quot; + &quot; \\&quot;query\\&quot;: &#123;\\n&quot; + &quot; \\&quot;bool\\&quot;: &#123;\\n&quot; + &quot; \\&quot;should\\&quot;: [\\n&quot; + &quot; &#123; \\&quot;match\\&quot;: &#123; \\&quot;name\\&quot;: \\&quot;&quot; + content + &quot;\\&quot; &#125; &#125;,\\n&quot; + &quot; &#123; \\&quot;wildcard\\&quot;: &#123; \\&quot;name\\&quot;: \\&quot;&quot;+&quot;*&quot;+ content + &quot;*&quot; + &quot;\\&quot; &#125; &#125;,\\n&quot; + &quot; &#123; \\&quot;wildcard\\&quot;: &#123;\\&quot;py_name\\&quot;: \\&quot;&quot; +&quot;*&quot;+ content +&quot;*&quot;+ &quot;\\&quot; &#125; &#125;\\n&quot; + &quot; ],\\n&quot; + &quot; \\&quot;must_not\\&quot;: [\\n&quot; + &quot; &#123; \\&quot;match\\&quot;: &#123; \\&quot;is_now\\&quot;: \\&quot;1\\&quot; &#125; &#125;\\n&quot; + &quot; ]\\n&quot; + &quot; &#125;\\n&quot; + &quot; &#125;\\n&quot; + //如果自定义了排序,那么默认的_score排序就会失效// &quot; \\&quot;sort\\&quot;: [\\n&quot; +// &quot;&#123;\\&quot;id\\&quot;: \\&quot;desc\\&quot;&#125;\\n&quot; +// &quot;]\\n&quot; + &quot;&#125;&quot;; //为HttpEntity指定ContentType非常重要，因为它将用于设置Content-Type请求头，以便Elasticsearch可以正确解析内容。 HttpEntity entity = new NStringEntity(jsonString, ContentType.APPLICATION_JSON); logger.info(&quot;try get elastic_search_story_not_now&quot;); Response response = restClient.performRequest(&quot;GET&quot;, &quot;/&quot; +elasticIndex_story +&quot;/&quot; + &quot;_search&quot;, params, entity); logger.info(response.toString()); String resp= EntityUtils.toString(response.getEntity()); JsonObjectMapper jsonObjectMapper=new Jackson2JsonObjectMapper(); ElasticResp&lt;Story&gt; elasticResp=(ElasticResp&lt;Story&gt;)jsonObjectMapper.fromJson(resp, ElasticResp.class); logger.debug(response.toString()); List&lt;Story&gt; statusList=elasticResp.getHits().getSouceList(); ElasticResp&lt;Map&gt; elasticResp2=(ElasticResp&lt;Map&gt;)jsonObjectMapper.fromJson(resp,ElasticResp.class); List&lt;Map&gt; statusListMap=(List&lt;Map&gt;)elasticResp2.getHits().getSouceList(); Page&lt;Map&gt; userPage=new PageImpl&lt;Map&gt;(statusListMap,pageable,elasticResp.getHits().getTotal()); restClient.close(); return userPage; &#125;","categories":[],"tags":[{"name":"elasticsearch","slug":"elasticsearch","permalink":"http://example.com/tags/elasticsearch/"}]},{"title":"我的世界指令","slug":"我的世界简单指令","date":"2019-02-04T02:50:36.000Z","updated":"2021-09-22T11:19:04.653Z","comments":true,"path":"2019/02/04/我的世界简单指令/","link":"","permalink":"http://example.com/2019/02/04/%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8C%E7%AE%80%E5%8D%95%E6%8C%87%E4%BB%A4/","excerpt":"","text":"我的世界简单指令 123456/kill 自杀/gamerule keepInventory true 死亡掉落/spawnpoint 重生地 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201/give 蓝色小火 Obsidian 64 黑曜石 Obsidian铁矿石 iron_oreStone 石头Dirt 泥土Cobblestone 原石Wood 木板Sapling 树苗Water 水Lava 岩浆Sand 沙子Gravel 沙砾Gold Ore 金矿Iron Ore 铁矿Log 木头Red Log 红木Birch Log 白杨木Leaves 树叶Sponge 海绵Glass 玻璃Lapis Lazuli Ore 青金石矿Lapis Lazuli 青金石Dispenser 发射器Sandstone 沙石Note Block 音符盒White Wool 白羊毛Orange Wool 橙羊毛Magenta Wool 淡紫羊毛Light Blue Wool 淡蓝羊毛Yellow Wool 黄羊毛Light Green Wool 浅绿羊毛pink Wool 粉红羊毛Gray Wool 灰羊毛Light Gray Wool 浅灰羊毛Cyan Woolurple Wool 紫羊毛Blue Wool 蓝羊毛Brown Wool 棕羊毛Dark Green Wool 墨绿羊毛Red Wool 红羊毛Black Wool 黑羊毛Yellow Flower 黄花Red Rose 红玫瑰Brown Mushroom 棕蘑菇Red Mushroom 红蘑菇Gold Block 黄金块Iron Block 铁块Stone Slab 石板Sandstone Slab 砂岩板Wooden Slab 木制板Cobblestone Slab 鹅卵石板Brick 砖TNT TNTBookcase 书架Mossy Cobblestone 长满青苔的鹅卵石Obsidian 黑曜岩Torch 火炬Wooden Stairs 木楼梯Chest 胸部Diamond Block 钻石块Workbench 工作台Furnace 炉Ladder 梯子Minecart Tracks 矿车轨道Cobblestone Stairs 鹅卵石楼梯Lever 杠杆Stone Pressure Plate 石头压板Wooden Pressure Plate 木制压板Redstone Torch 红石火把Stone Button 石头按钮Ice 冰Snow Block 雪块Cactus 仙人掌Jukebox 自动点唱机Fence 栅栏umpkin 南瓜子仁Red Mossy Cobblestone 红色长满青苔的鹅卵石Slow Sand 慢砂Lightstone Ore 浅石色矿Jack-O-Lantern 杰克灯笼Iron Spade 铁铲Iron Pickaxe 铁锄Iron Axe 铁斧Flint and Steel 打火石Red Apple 红苹果Bow 弓Arrow 箭头Coal 煤炭Diamond 钻石Iron Ingot 铁锭Gold Ingot 金元宝Iron Sword 铁剑Wooden Sword 木剑Wooden Spade 木铲Wooden Pickaxe 木柄鹤嘴锄Wooden Axe 木斧Stone Sword 石剑Stone Spade 石锹Stone Pickaxe 石镐Stone Axe 石斧头Diamond Sword 钻石剑Diamond Spade 钻石锹Diamond Pickaxe 钻石镐Diamond Axe 钻石斧Stick 棍子Bowl 碗Mushroom Soup 蘑菇汤Gold Sword 金剑Gold Spade 金锹Gold Pickaxe 金镐Gold Axe 金斧子String 线Feather 羽毛Gunpowder 火药Wooden Hoe 木锄Stone Hoe 石锄Iron Hoe 铁锄头Diamond Hoe 钻石锄头Gold Hoe 金锄头Seeds 种子Wheat 小麦Bread 面包Leather Helmet 皮革头盔Leather ChestplateLeather Pants 皮裤Leather Boots 皮靴子Iron Helmet 铁头盔Iron Chestplate 铁护胸Iron Pants 铁裤Iron Boots 铁靴Diamond Helmet 钻石头盔Diamond ChestplateDiamond Pants 钻石的裤子Diamond Boots 钻石的靴子Gold Helmet 金头盔Gold Chestplate 金护胸Gold Pants 黄金的裤子Gold Boots 金靴子Flint 燧石ork 兽人Grilled Pork 烤的猪肉aintings 油画Golden Apple 金苹果Sign 标志Wooden Door 木门Bucket 桶Water Bucket 水桶Lava Bucket 岩浆桶Mine Cart 矿山车Saddle 马鞍Iron Door 铁门Redstone 红石Snowball 雪球Boat 小船Leather 皮革Milk Bucket 牛奶桶Clay Brick 粘土砖Clay Balls 粘土球Reed 芦苇aper 野猪Book 本书Slime Ball 泥球Storage Minecartowered Minecart 动力矿车Egg 鸡蛋Compass 指南针Fishing Rod 钓鱼杆Watch 手表Lightstone Dust 星彩蓝宝石Raw Fish 生鱼Cooked Fish 煮熟的鱼Ink Sac Dye 墨囊染料Rose Red Dye 玫瑰红染料Cactus Green DyeCocoa Beans Dye 可可豆染料Lapis Lazuli Dyeurple Dye 紫色染料Cyan Dye 青色染料Light Gray Dye 淡灰色染料Gray Dye 灰色染料ink Dye 染料墨水Lime Dye 石灰染料Dandelion Yellow DyeLight Blue Dye 淡蓝色染料MagentaDye 品红色染料Orange Dye 橙色染料Bone Meal Dye 肉骨粉染料Bone 骨Sugar 糖Cake 蛋糕Gold Record 金唱片Green RecordIf 绿色记录如果","categories":[],"tags":[{"name":"我的世界","slug":"我的世界","permalink":"http://example.com/tags/%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8C/"}]},{"title":"Java 信任SSL证书","slug":"http/http_Java信任SSL证书","date":"2019-01-28T10:21:46.000Z","updated":"2021-09-22T11:19:04.621Z","comments":true,"path":"2019/01/28/http/http_Java信任SSL证书/","link":"","permalink":"http://example.com/2019/01/28/http/http_Java%E4%BF%A1%E4%BB%BBSSL%E8%AF%81%E4%B9%A6/","excerpt":"","text":"Java 信任所有SSL证书(解决PKIX path building failed问题) http://javaweb.org/?p=1237 12345678910111213141516171819202122232425262728293031323334javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target at sun.security.ssl.Alerts.getSSLException(Alerts.java:192) at sun.security.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1884) at sun.security.ssl.Handshaker.fatalSE(Handshaker.java:276) at sun.security.ssl.Handshaker.fatalSE(Handshaker.java:270) at sun.security.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:1341) at sun.security.ssl.ClientHandshaker.processMessage(ClientHandshaker.java:153) at sun.security.ssl.Handshaker.processLoop(Handshaker.java:868) at sun.security.ssl.Handshaker.process_record(Handshaker.java:804) at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:1016) at sun.security.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1312) at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1339) at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1323) at sun.net.www.protocol.https.HttpsClient.afterConnect(HttpsClient.java:563) at sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:185) at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1300) at sun.net.www.protocol.https.HttpsURLConnectionImpl.getInputStream(HttpsURLConnectionImpl.java:254) at SslTest.getRequest(SslTest.java:16) at SslTest.main(SslTest.java:40)Caused by: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:385) at sun.security.validator.PKIXValidator.engineValidate(PKIXValidator.java:230) at sun.security.validator.Validator.validate(Validator.java:260) at sun.security.ssl.X509TrustManagerImpl.validate(X509TrustManagerImpl.java:326) at sun.security.ssl.X509TrustManagerImpl.checkTrusted(X509TrustManagerImpl.java:231) at sun.security.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:126) at sun.security.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:1323) ... 13 moreCaused by: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target at sun.security.provider.certpath.SunCertPathBuilder.engineBuild(SunCertPathBuilder.java:196) at java.security.cert.CertPathBuilder.build(CertPathBuilder.java:268) at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:380) ... 19 more 解决办法： 1、导入证书到本地证书库 2、信任所有SSL证书 最好的解决办法或许是信任所有SSL证书，因为某些时候不能每次都手动的导入证书非常麻烦。现在封装了个方法，在连接openConnection的时候忽略掉证书就行了。 1SslUtils.ignoreSsl(); SslUtils.java: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152import java.security.cert.CertificateException;import java.security.cert.X509Certificate;import javax.net.ssl.HostnameVerifier;import javax.net.ssl.HttpsURLConnection;import javax.net.ssl.SSLContext;import javax.net.ssl.SSLSession;import javax.net.ssl.TrustManager;import javax.net.ssl.X509TrustManager;public class SslUtils &#123; private static void trustAllHttpsCertificates() throws Exception &#123; TrustManager[] trustAllCerts = new TrustManager[1]; TrustManager tm = new miTM(); trustAllCerts[0] = tm; SSLContext sc = SSLContext.getInstance(&quot;SSL&quot;); sc.init(null, trustAllCerts, null); HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory()); &#125; static class miTM implements TrustManager,X509TrustManager &#123; public X509Certificate[] getAcceptedIssuers() &#123; return null; &#125; public boolean isServerTrusted(X509Certificate[] certs) &#123; return true; &#125; public boolean isClientTrusted(X509Certificate[] certs) &#123; return true; &#125; public void checkServerTrusted(X509Certificate[] certs, String authType) throws CertificateException &#123; return; &#125; public void checkClientTrusted(X509Certificate[] certs, String authType) throws CertificateException &#123; return; &#125; &#125; /** * 忽略HTTPS请求的SSL证书，必须在openConnection之前调用 * @throws Exception */ public static void ignoreSsl() throws Exception&#123; HostnameVerifier hv = new HostnameVerifier() &#123; public boolean verify(String urlHostName, SSLSession session) &#123; System.out.println(&quot;Warning: URL Host: &quot; + urlHostName + &quot; vs. &quot; + session.getPeerHost()); return true; &#125; &#125;; trustAllHttpsCertificates(); HttpsURLConnection.setDefaultHostnameVerifier(hv); &#125;&#125; SslTest.java: 12345678910111213141516171819202122232425262728293031323334353637383940414243import java.io.OutputStreamWriter;import java.net.URL;import java.net.URLConnection;import org.apache.commons.io.IOUtils;public class SslTest &#123; public String getRequest(String url,int timeOut) throws Exception&#123; URL u = new URL(url); if(&quot;https&quot;.equalsIgnoreCase(u.getProtocol()))&#123; SslUtils.ignoreSsl(); &#125; URLConnection conn = u.openConnection(); conn.setConnectTimeout(timeOut); conn.setReadTimeout(timeOut); return IOUtils.toString(conn.getInputStream()); &#125; public String postRequest(String urlAddress,String args,int timeOut) throws Exception&#123; URL url = new URL(urlAddress); if(&quot;https&quot;.equalsIgnoreCase(url.getProtocol()))&#123; SslUtils.ignoreSsl(); &#125; URLConnection u = url.openConnection(); u.setDoInput(true); u.setDoOutput(true); u.setConnectTimeout(timeOut); u.setReadTimeout(timeOut); OutputStreamWriter osw = new OutputStreamWriter(u.getOutputStream(), &quot;UTF-8&quot;); osw.write(args); osw.flush(); osw.close(); u.getOutputStream(); return IOUtils.toString(u.getInputStream()); &#125; public static void main(String[] args) &#123; try &#123; SslTest st = new SslTest(); String a = st.getRequest(&quot;https://xxx.com/login.action&quot;, 3000); System.out.println(a); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125;&#125;","categories":[],"tags":[{"name":"Http","slug":"Http","permalink":"http://example.com/tags/Http/"}]},{"title":"Spring Boot缓存注解","slug":"Spring Boot缓存注解","date":"2019-01-24T06:19:51.000Z","updated":"2021-09-22T11:19:04.609Z","comments":true,"path":"2019/01/24/Spring Boot缓存注解/","link":"","permalink":"http://example.com/2019/01/24/Spring%20Boot%E7%BC%93%E5%AD%98%E6%B3%A8%E8%A7%A3/","excerpt":"","text":"Spring Boot缓存注解 123456789101112131415161718Cache注解详解@CacheConfig：主要用于配置该类中会用到的一些共用的缓存配置。在这里@CacheConfig(cacheNames = &quot;users&quot;)：配置了该数据访问对象中返回的内容将存储于名为users的缓存对象中，我们也可以不使用该注解，直接通过@Cacheable自己配置缓存集的名字来定义。@Cacheable：配置了findByName函数的返回值将被加入缓存。同时在查询时，会先从缓存中获取，若不存在才再发起对数据库的访问。该注解主要有下面几个参数：value、cacheNames：两个等同的参数（cacheNames为Spring 4新增，作为value的别名），用于指定缓存存储的集合名。由于Spring 4中新增了@CacheConfig，因此在Spring 3中原本必须有的value属性，也成为非必需项了key：缓存对象存储在Map集合中的key值，非必需，缺省按照函数的所有参数组合作为key值，若自己配置需使用SpEL表达式，比如：@Cacheable(key = &quot;#p0&quot;)：使用函数第一个参数作为缓存的key值，更多关于SpEL表达式的详细内容可参考官方文档condition：缓存对象的条件，非必需，也需使用SpEL表达式，只有满足表达式条件的内容才会被缓存，比如：@Cacheable(key = &quot;#p0&quot;, condition = &quot;#p0.length() &lt; 3&quot;)，表示只有当第一个参数的长度小于3的时候才会被缓存，若做此配置上面的AAA用户就不会被缓存，读者可自行实验尝试。unless：另外一个缓存条件参数，非必需，需使用SpEL表达式。它不同于condition参数的地方在于它的判断时机，该条件是在函数被调用之后才做判断的，所以它可以通过对result进行判断。keyGenerator：用于指定key生成器，非必需。若需要指定一个自定义的key生成器，我们需要去实现org.springframework.cache.interceptor.KeyGenerator接口，并使用该参数来指定。需要注意的是：该参数与key是互斥的cacheManager：用于指定使用哪个缓存管理器，非必需。只有当有多个时才需要使用cacheResolver：用于指定使用那个缓存解析器，非必需。需通过org.springframework.cache.interceptor.CacheResolver接口来实现自己的缓存解析器，并用该参数指定。除了这里用到的两个注解之外，还有下面几个核心注解：@CachePut：配置于函数上，能够根据参数定义条件来进行缓存，它与@Cacheable不同的是，它每次都会真是调用函数，所以主要用于数据新增和修改操作上。它的参数与@Cacheable类似，具体功能可参考上面对@Cacheable参数的解析@CacheEvict：配置于函数上，通常用在删除方法上，用来从缓存中移除相应数据。除了同@Cacheable一样的参数之外，它还有下面两个参数：allEntries：非必需，默认为false。当为true时，会移除所有数据beforeInvocation：非必需，默认为false，会在调用方法之后移除数据。当为true时，会在调用方法之前移除数据。 123456789101112@Cacheable(cacheNames =&quot;ktx_fudai_user_&quot;,key = &quot;&#x27;ktx_fudai_user_&#x27;+#root.args[0]&quot; )ActivityUser findActivityUserById(Integer id);@Cacheable(cacheNames =&quot;ktx_fudai_user_&quot;,key = &quot;&#x27;ktx_fudai_user_&#x27;+#root.args[0]&quot; )ActivityUser findActivityUserByUnionId(String unionId);@Override@Caching(evict = &#123; @CacheEvict(cacheNames = &quot;ktx_fudai_user_&quot;,key = &quot;&#x27;ktx_fudai_user_&#x27;+#root.args[0].id&quot;), @CacheEvict(cacheNames = &quot;ktx_fudai_user_&quot;,key = &quot;&#x27;ktx_fudai_user_&#x27;+#root.args[0].unionId&quot;)&#125;)ActivityUser save(ActivityUser activityUser); @Cacheable 作用和配置方法 参数 解释 示例 value 缓存的名称，在 spring 配置文件中定义，必须指定至少一个 @Cacheable(value=”testcache”,key=”#userName”) key 缓存的 key，可以为空，如果指定要按照 SpEL 表达式编写，如果不指定，则缺省按照方法的所有参数进行组合 @Cacheable(value=”testcache”,key=”#userName”) condition 缓存的条件，可以为空，使用 SpEL 编写，返回 true 或者 false，只有为 true 才进行缓存 @Cacheable(value=”testcache”,condition=”#userName.length()&gt;2”) @CachePut @CachePut 的作用 主要针对方法配置，能够根据方法的请求参数对其结果进行缓存，和 @Cacheable 不同的是，它每次都会触发真实方法的调用 @CachePut 作用和配置方法 参数 解释 示例 value 缓存的名称，在 spring 配置文件中定义，必须指定至少一个 @CachePut(value=”my cache”) key 缓存的 key，可以为空，如果指定要按照 SpEL 表达式编写，如果不指定，则缺省按照方法的所有参数进行组合 @CachePut(value=”testcache”,key=”#userName”) condition 缓存的条件，可以为空，使用 SpEL 编写，返回 true 或者 false，只有为 true 才进行缓存 @CachePut(value=”testcache”,condition=”#userName.length()&gt;2”) 12345@CachePut(value=&quot;accountCache&quot;,key=&quot;#account.getName()&quot;)public Account updateAccount(Account account) &#123; return updateDB(account); &#125; @CacheEvict @CachEvict 的作用 主要针对方法配置，能够根据一定的条件对缓存进行清空 @CacheEvict 作用和配置方法 参数 解释 示例 value 缓存的名称，在 spring 配置文件中定义，必须指定至少一个 @CachePut(value=”my cache”) key 缓存的 key，可以为空，如果指定要按照 SpEL 表达式编写，如果不指定，则缺省按照方法的所有参数进行组合 @CachePut(value=”testcache”,key=”#userName”) condition 缓存的条件，可以为空，使用 SpEL 编写，返回 true 或者 false，只有为 true 才进行缓存 @CachePut(value=”testcache”,condition=”#userName.length()&gt;2”) allEntries 是否清空所有缓存内容，缺省为 false，如果指定为 true，则方法调用后将立即清空所有缓存 @CachEvict(value=”testcache”,allEntries=true) beforeInvocation 是否在方法执行前就清空，缺省为 false，如果指定为 true，则在方法还没有执行的时候就清空缓存，缺省情况下，如果方法执行抛出异常，则不会清空缓存 @CachEvict(value=”testcache”，beforeInvocation=true) 12345678910111213141516@CacheEvict(value=&quot;accountCache&quot;,key=&quot;#account.getName()&quot;)// 清空accountCache 缓存 public void updateAccount(Account account) &#123; updateDB(account); &#125; @CacheEvict(value=&quot;accountCache&quot;,allEntries=true)// 清空accountCache 缓存public void reload() &#123; reloadAll()&#125;@Cacheable(value=&quot;accountCache&quot;,condition=&quot;#userName.length() &lt;=4&quot;)// 缓存名叫 accountCache public Account getAccountByName(String userName) &#123; // 方法内部实现不考虑缓存逻辑，直接实现业务 return getFromDB(userName); &#125; 条件缓存 12345678910111213141516//@Cacheable将在执行方法之前( #result还拿不到返回值)判断condition，如果返回true，则查缓存； @Cacheable(value = &quot;user&quot;, key = &quot;#id&quot;, condition = &quot;#id lt 10&quot;)public User conditionFindById(final Long id) //@CachePut将在执行完方法后（#result就能拿到返回值了）判断condition，如果返回true，则放入缓存； @CachePut(value = &quot;user&quot;, key = &quot;#id&quot;, condition = &quot;#result.username ne &#x27;zhang&#x27;&quot;) public User conditionSave(final User user) //@CachePut将在执行完方法后（#result就能拿到返回值了）判断unless，如果返回false，则放入缓存；（即跟condition相反）@CachePut(value = &quot;user&quot;, key = &quot;#user.id&quot;, unless = &quot;#result.username eq &#x27;zhang&#x27;&quot;)public User conditionSave2(final User user) //@CacheEvict， beforeInvocation=false表示在方法执行之后调用（#result能拿到返回值了）；且判断condition，如果返回true，则移除缓存；@CacheEvict(value = &quot;user&quot;, key = &quot;#user.id&quot;, beforeInvocation = false, condition = &quot;#result.username ne &#x27;zhang&#x27;&quot;) public User conditionDelete(final User user) @Caching 1234567@Caching(put = &#123;@CachePut(value = &quot;user&quot;, key = &quot;#user.id&quot;),@CachePut(value = &quot;user&quot;, key = &quot;#user.username&quot;),@CachePut(value = &quot;user&quot;, key = &quot;#user.email&quot;)&#125;)public User save(User user) &#123; SpEL上下文数据 名称 位置 描述 示例 methodName root对象 当前被调用的方法名 root.methodName method root对象 当前被调用的方法 root.methodName target root对象 当前被调用的目标对象 root.target targetClass root对象 当前被调用的目标对象类 root.targetClass args root对象 当前被调用的方法的参数列表 root.args[0] caches root对象 当前方法调用使用的缓存列表（如@Cacheable(value={“cache1”, “cache2”})），则有两个cache root.caches[0].name argument 执行上下文 当前被调用的方法的参数，如findById(Long id)，我们可以通过#id拿到参数 user.id result 执行上下文 方法执行后的返回值（仅当方法执行之后的判断有效，如‘unless’，’cache evict’的beforeInvocation=false） result 123@CacheEvict(value = &quot;user&quot;, key = &quot;#user.id&quot;, condition = &quot;#root.target.canCache() and #root.caches[0].get(#user.id).get().username ne #user.username&quot;, beforeInvocation = true) public void conditionUpdate(User user)","categories":[],"tags":[{"name":"springboot","slug":"springboot","permalink":"http://example.com/tags/springboot/"}]},{"title":"数据库-性能优化","slug":"mysql/sql_数据库性能优化","date":"2019-01-14T02:43:14.000Z","updated":"2021-09-22T11:19:04.638Z","comments":true,"path":"2019/01/14/mysql/sql_数据库性能优化/","link":"","permalink":"http://example.com/2019/01/14/mysql/sql_%E6%95%B0%E6%8D%AE%E5%BA%93%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/","excerpt":"","text":"1、 为什么要进行数据库优化？ 1.1、 避免网站页面出现访问错误 由于数据库连接timeout产生页面5xx错误 由于慢查询造成页面无法加载 由于阻塞造成数据无法提交 1.2、 增加数据库的稳定性 很多数据库问题都是由于低效的查询引起的 1.3、 优化用户体验 流畅页面的访问速度 良好的网站功能体验 2、mysql数据库优化 可以从哪几个方面进行数据库的优化？如下图所示： ![](file:///C:/Users/Deborah/AppData/Local/Temp/msohtmlclip1/01/clip_image002.png) 2.1、 SQL及索引优化 ​ 根据需求写出良好的SQL，并创建有效的索引，实现某一种需求可以多种写法，这时候我们就要选择一种效率最高的写法。这个时候就要了解sql优化 2.2、 数据库表结构优化 根据数据库的范式，设计表结构，表结构设计的好直接关系到写SQL语句。 2.3、 系统配置优化 大多数运行在Linux机器上，如tcp连接数的限制、打开文件数的限制、安全性的限制，因此我们要对这些配置进行相应的优化。 2.4、硬件配置优化 选择适合数据库服务的cpu，更快的IO，更高的内存；cpu并不是越多越好，某些数据库版本有最大的限制，IO操作并不是减少阻塞。 注：通过上图可以看出，该金字塔中，优化的成本从下而上逐渐增高，而优化的效果会逐渐降低。 3、SQL及索引优化 3.1、查看mysql的版本 12345678910select @@version;mysql&gt; select @@version;+-----------+| @@version |+-----------+| 5.6.25 |+-----------+1 row in set (0.00 sec) 3.2、准备数据 网址：https://dev.mysql.com/doc/sakila/en/sakila-installation.html 步骤： 1、通过命令行来连接数据库 12shell&gt; mysql -u root -p 2、创建表及语句执行 1mysql&gt; SOURCE C:/temp/sakila-db/sakila-schema.sql; 3、加载数据 1mysql&gt; SOURCE C:/temp/sakila-db/sakila-data.sql; 4、使用数据库 1USE sakila; 5、检查创建的表 1234567891011121314151617181920212223242526272829SHOW TABLES;+----------------------------+| Tables_in_sakila |+----------------------------+| actor || actor_info || address || category || city || country || customer || customer_list || film || film_actor || film_category || film_list || film_text || inventory || language || nicer_but_slower_film_list || payment || rental || sales_by_film_category || sales_by_store || staff || staff_list || store |+----------------------------+ 6、检验数据是否加载进去 1234567891011121314151617181920212223242526272829303132mysql&gt; select count(*) from film;+----------+| count(*) |+----------+| 1000 |+----------+1 row in set (0.00 sec)mysql&gt; select count(*) from payment ;+----------+| count(*) |+----------+| 16049 |+----------+1 row in set (0.00 sec)mysql&gt; select count(*) from staff ;+----------+| count(*) |+----------+| 2 |+----------+1 row in set (0.00 sec)mysql&gt; select count(*) from store;+----------+| count(*) |+----------+| 2 |+----------+1 row in set (0.00 sec) 注：该表结构关系是用工具生成的。（powerDisigner） 3.3、如何发现有问题的SQL MySQL慢查日志的开启方式和存储格式 3.3.1、检查慢查日志是否开启： 123456789_query_log&#x27;mysql&gt; show variables like &#x27;slow_query_log&#x27;;+----------------+-------+| Variable_name | Value |+----------------+-------+| slow_query_log | OFF |+----------------+-------+1 row in set (0.00 sec) 3.3.2、查看所有日志的变量信息 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132mysql&gt; show variables like &#x27;%log%&#x27;;+-----------------------------------------+------------------------------------+| Variable_name | Value |+-----------------------------------------+------------------------------------+| back_log |80 || binlog_cache_size | 32768 || binlog_checksum | CRC32 || binlog_direct_non_transactional_updates |OFF || binlog_error_action | IGNORE_ERROR || binlog_format | STATEMENT || binlog_gtid_simple_recovery | OFF || binlog_max_flush_queue_time | 0 || binlog_order_commits | ON || binlog_row_image | FULL || binlog_rows_query_log_events | OFF || binlog_stmt_cache_size | 32768 || binlogging_impossible_mode | IGNORE_ERROR || expire_logs_days | 0 || general_log | OFF || general_log_file |/var/lib/mysql/mysql-host.log || innodb_api_enable_binlog | OFF || innodb_flush_log_at_timeout | 1 || innodb_flush_log_at_trx_commit | 1 || innodb_locks_unsafe_for_binlog | OFF || innodb_log_buffer_size | 8388608 || innodb_log_compressed_pages | ON || innodb_log_file_size | 50331648 || innodb_log_files_in_group | 2 || innodb_log_group_home_dir | ./ || innodb_mirrored_log_groups | 1 || innodb_online_alter_log_max_size | 134217728 || innodb_undo_logs | 128 || log_bin | OFF || log_bin_basename | || log_bin_index | || log_bin_trust_function_creators | OFF || log_bin_use_v1_row_events | OFF || log_error |/var/log/mysqld.log || log_output | FILE || log_queries_not_using_indexes | ON || log_slave_updates | OFF || log_slow_admin_statements | OFF || log_slow_slave_statements | OFF ||log_throttle_queries_not_using_indexes |0 || log_warnings | 1 || max_binlog_cache_size | 18446744073709547520 || max_binlog_size | 1073741824 || max_binlog_stmt_cache_size | 18446744073709547520 || max_relay_log_size | 0 || relay_log | || relay_log_basename | || relay_log_index | || relay_log_info_file | relay-log.info || relay_log_info_repository | FILE || relay_log_purge | ON || relay_log_recovery | OFF || relay_log_space_limit | 0 || simplified_binlog_gtid_recovery | OFF ||slow_query_log |OFF || slow_query_log_file |/var/lib/mysql/mysql-host-slow.log || sql_log_bin | ON || sql_log_off | OFF || sync_binlog | 0 || sync_relay_log | 10000 || sync_relay_log_info | 10000 |+-----------------------------------------+------------------------------------+ 61 rows in set (0.01 sec) 开启慢查日志： 1show variables like &#x27;%log%&#x27; 12345678910log_queries_not_using_indexes | ON | slow_query_log | OFF || slow_query_log_file | /var/lib/mysql/mysql-slow.log |//通过这个命令来设置开启慢日志mysql&gt; set global slow_query_log=on;Query OK, 0 rows affected (0.32 sec) 验证慢查询日志是否开启： 12345# Time: 181026 0:39:29# User@Host: root[root] @ localhost [] Id: 3# Query_time: 0.000098 Lock_time: 0.000050 Rows_sent: 1 Rows_examined: 2SET timestamp=1540485569;select count(*) from staff; 在mysql操作中， 12345678Show databases;Use sakila;select * from store;select * from staff; 监听日志文件，看是否写入 1tail -f /var/lib/mysql/mysql-slow.log 3.3.3、MySQL慢查日志的存储格式 123456789show variables like &#x27;slow%&#x27;;+---------------------+---------------------------------------------------------------------+| Variable_name | Value |+---------------------+---------------------------------------------------------------------+| slow_launch_time | 2 || slow_query_log | OFF || slow_query_log_file | C:\\ProgramData\\MySQL\\MySQL Server 5.5\\Data\\DESKTOP-2LA2VDS-slow.log |+---------------------+---------------------------------------------------------------------+ 参数说明： 1、# Time: 180526 1:06:54 -------à查询的执行时间 2、# User@Host: root[root] @ localhost [] Id: 4 -------à执行sql的主机信息 3、# Query_time: 0.000401 Lock_time: 0.000105 Rows_sent: 2 Rows_examined: 2-------àSQL的执行信息： Query_time：SQL的查询时间 Lock_time：锁定时间 Rows_sent：所发送的行数 Rows_examined：锁扫描的行数 4、SET timestamp=1527268014; -------àSQL执行时间 5、select * from staff; -------àSQL的执行内容 4、MySQL慢查日志分析工具（mysqldumpslow） 1、介绍 如何进行查看慢查询日志，如果开启了慢查询日志，就会生成很多的数据，然后我们就可以通过对日志的分析，生成分析报表，然后通过报表进行优化。 2、用法 接下来我们查看一下这个工具的用法 注意：在mysql数据库所在的服务器上，而不是在mysql&gt;命令行中 该工具如何使用：mysqldumpslow -h 查看verbose信息 Mysqldumpslow -v 查看慢查询日志的前10个，mysqldumpslow 分析的结果如下 12345678910111213141516[root@mysql ~]# mysqldumpslow -t 10 /var/lib/mysql/mysql-slow.logReading mysql slow query log from /var/lib/mysql/mysql-slow.logCount: 1 Time=0.01s (0s) Lock=0.00s (0s) Rows=1000.0 (1000), root[root]@localhost select * from filmCount: 1 Time=0.00s (0s) Lock=0.00s (0s) Rows=200.0 (200), root[root]@localhost select * from actorCount: 2 Time=0.00s (0s) Lock=0.00s (0s) Rows=1.0 (2), root[root]@localhost select count(*) from filmCount: 2 Time=0.00s (0s) Lock=0.00s (0s) Rows=1.0 (2), root[root]@localhost select count(*) from staffDied at /usr/bin/mysqldumpslow line 161, &lt;&gt; chunk 6. 如上图两条就是分析的结果，每条结果都显示是执行时间，锁定时间，发送的行数，扫描的行数 12345678910111213141516[root@mysql mysql]# tail -f /var/lib/mysql/mysql-slow.log# Time: 181026 0:41:46# User@Host: root[root] @ localhost [] Id: 3# Query_time: 0.000121 Lock_time: 0.000059 Rows_sent: 1 Rows_examined: 2SET timestamp=1540485706;select count(*) from staff;# Time: 181026 0:42:12# User@Host: root[root] @ localhost [] Id: 3# Query_time: 0.000634 Lock_time: 0.000069 Rows_sent: 200 Rows_examined: 200SET timestamp=1540485732;select * from actor;# Time: 181026 1:05:41# User@Host: root[root] @ localhost [] Id: 3# Query_time: 0.008336 Lock_time: 0.000101 Rows_sent: 1000 Rows_examined: 1000SET timestamp=1540487141;select * from film; 这个工具是最常用的工具，通过安装mysql进行附带安装，但是该工具统计的结果比较少，对我们的优化锁表现的数据还是比较少。 5、MySQL慢查日志分析工具(pt-query-digest) 1、介绍及作用 作为一名优秀的mysql dba也需要有掌握几个好用的mysql管理工具，所以我也一直在整理和查找一些能够便于管理mysql的利器。以后的一段时间内，将会花一大部分的精力去搜索这些工具。 性 能的管理一直都是摆在第一位的，dba的很多工作管理层都看不到也没有办法衡量价值，但是如果一个系统慢的跟蜗牛一样，dba通过监控调优把系统从崩溃边缘重新拉回到高铁时代。这种价值和触动应该是巨大的。（很多企业的领导认为系统跑不动了就需要换更快的CPU、更大的内存、更快的存储，而且这还不是少数，所以DBA的价值也一直体现不出来，薪水自然也就不会很高） mysql 的日志是跟踪mysql性能瓶颈的最快和最直接的方式了，系统性能出现瓶颈的时候，首先要打开慢查询日志，进行跟踪；这段时间关于慢查询日志的管理和查看已经整理过两篇文章了，不经意间又发现了一个查看慢查询日志的工具：mk-query-digest，这个工具网上号称mysql dba必须掌握的十大工具之首。 2、安装pt-query-digest工具 1.1、快速安装（注：必须先要安装wget） 1.2、检查是否安装完成： 命令行中输入：pt-summary 显示如下图所示：说明安装成功！输入【[root@node03 mysql]# pt-query-digest --help】 1.3、工具使用简介： 12345678910111213141516171819202122232425262728293031323334[root@mysql ~]# pt-summary --helpUsage: pt-summaryFor more information, &#x27;man pt-summary&#x27; or &#x27;perldoc /usr/bin/pt-summary&#x27;.Command line options: --config Read this comma-separated list of config files. --help Print help and exit. --read-samples Create a report from the files in this directory. --save-samples Save the collected data in this directory. --sleep How long to sleep when gathering samples from vmstat. --summarize-mounts Report on mounted filesystems and disk usage. --summarize-network Report on network controllers and configuration. --summarize-processes Report on top processes and C&lt;vmstat&gt; output. --version Print tool&#x27;s version and exit.Options and values after processing arguments: --config (No value) --help TRUE --read-samples (No value) --save-samples (No value) --sleep 5 --summarize-mounts TRUE --summarize-network TRUE --summarize-processes TRUE --version FALSE[root@mysql ~]# pt-summary --versionpt-summary 2.2.16[root@mysql ~]# 1、查看服务器信息 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326[root@mysql ~]# man pt-summaryPT-SUMMARY(1p) User Contributed Perl Documentation PT-SUMMARY(1p)NAME pt-summary - Summarize system information nicely.SYNOPSIS Usage: pt-summary pt-summary conveniently summarizes the status and configuration of a server. It is not a tuning tool or diagnosis tool. It produces a report that is easy to diff and can be pasted into emails without losing the formatting. This tool works well on many types of Unix systems. Download and run: wget http://percona.com/get/pt-summary bash ./pt-summaryRISKS Percona Toolkit is mature, proven in the real world, and well tested, but all database tools can pose a risk to the system and the database server. Before using this tool, please: Â· Read the toolâ€™s documentation Â· Review the toolâ€™s known &quot;BUGS&quot; Â· Test the tool on a non-production server Â· Backup your production server and verify the backupsDESCRIPTION pt-summary runs a large variety of commands to inspect system status and configuration, saves the output into files in a temporary directory, and then runs Unix commands on these results to format them nicely. It works best when executed as a privileged user, but will also work without privileges, although some output might not be possible to generate without root.OUTPUT Many of the outputs from this tool are deliberately rounded to show their magnitude but not the exact detail. This is called fuzzy-rounding. The idea is that it doesnâ€™t matter whether a particular counter is 918 or 921; such a small variation is insignificant, and only makes the output hard to compare to other servers. Fuzzy-rounding rounds in larger increments as the input grows. It begins by rounding to the nearest 5, then the nearest 10, nearest 25, and then repeats by a factor of 10 larger (50, 100, 250), and so on, as the input grows. The following is a simple report generated from a CentOS virtual machine, broken into sections with commentary following each section. Some long lines are reformatted for clarity when reading this documentation as a manual page in a terminal. # Percona Toolkit System Summary Report ###################### Date | 2012-03-30 00:58:07 UTC (local TZ: EDT -0400) Hostname | localhost.localdomain Uptime | 20:58:06 up 1 day, 20 min, 1 user, load average: 0.14, 0.18, 0.18 System | innotek GmbH; VirtualBox; v1.2 () Service Tag | 0 Platform | Linux Release | CentOS release 5.5 (Final) Kernel | 2.6.18-194.el5 Architecture | CPU = 32-bit, OS = 32-bit Threading | NPTL 2.5 Compiler | GNU CC version 4.1.2 20080704 (Red Hat 4.1.2-48). SELinux | Enforcing Virtualized | VirtualBox This section shows the current date and time, and a synopsis of the server and operating system. # Processor ################################################## Processors | physical = 1, cores = 0, virtual = 1, hyperthreading = no Speeds | 1x2510.626 Models | 1xIntel(R) Core(TM) i5-2400S CPU @ 2.50GHz Caches | 1x6144 KB This section is derived from /proc/cpuinfo. # Memory ##################################################### Total | 503.2M Free | 29.0M Used | physical = 474.2M, swap allocated = 1.0M, swap used = 16.0k, virtual = 474.3M Buffers | 33.9M Caches | 262.6M Dirty | 396 kB UsedRSS | 201.9M Swappiness | 60 DirtyPolicy | 40, 10 Locator Size Speed Form Factor Type Type Detail ======= ==== ===== =========== ==== =========== Information about memory is gathered from &quot;free&quot;. The Used statistic is the total of the rss sizes displayed by &quot;ps&quot;. The Dirty statistic for the cached value comes from /proc/meminfo. On Linux, the swappiness settings are gathered from &quot;sysctl&quot;. The final portion of this section is a table of the DIMMs, which comes from &quot;dmidecode&quot;. In this example there is no output. # Mounted Filesystems ######################################## Filesystem Size Used Type Opts Mountpoint /dev/mapper/VolGroup00-LogVol00 15G 17% ext3 rw / /dev/sda1 99M 13% ext3 rw /boot tmpfs 252M 0% tmpfs rw /dev/shm The mounted filesystem section is a combination of information from &quot;mount&quot; and &quot;df&quot;. This section is skipped if you disable &quot;--summarize-mounts&quot;. # Disk Schedulers And Queue Size ############################# dm-0 | UNREADABLE dm-1 | UNREADABLE hdc | [cfq] 128 md0 | UNREADABLE sda | [cfq] 128 The disk scheduler information is extracted from the /sys filesystem in Linux. # Disk Partioning ############################################ Device Type Start End Size ============ ==== ========== ========== ================== /dev/sda Disk 17179869184 /dev/sda1 Part 1 13 98703360 /dev/sda2 Part 14 2088 17059230720 Information about disk partitioning comes from &quot;fdisk -l&quot;. # Kernel Inode State ######################################### dentry-state | 10697 8559 45 0 0 0 file-nr | 960 0 50539 inode-nr | 14059 8139 These lines are from the files of the same name in the /proc/sys/fs directory on Linux. Read the &quot;proc&quot; man page to learn about the meaning of these files on your system. # LVM Volumes ################################################ LV VG Attr LSize Origin Snap% Move Log Copy% Convert LogVol00 VolGroup00 -wi-ao 269.00G LogVol01 VolGroup00 -wi-ao 9.75G This section shows the output of &quot;lvs&quot;. # RAID Controller ############################################ Controller | No RAID controller detected The tool can detect a variety of RAID controllers by examining &quot;lspci&quot; and &quot;dmesg&quot; information. If the controller software is installed on the system, in many cases it is able to execute status commands and show a summary of the RAID controllerâ€™s status and configuration. If your system is not supported, please file a bug report. # Network Config ############################################# Controller | Intel Corporation 82540EM Gigabit Ethernet Controller FIN Timeout | 60 Port Range | 61000 The network controllers attached to the system are detected from &quot;lspci&quot;. The TCP/IP protocol configuration parameters are extracted from &quot;sysctl&quot;. You can skip this section by disabling the &quot;--summarize-network&quot; option. # Interface Statistics ####################################### interface rx_bytes rx_packets rx_errors tx_bytes tx_packets tx_errors ========= ======== ========== ========= ======== ========== ========= lo 60000000 12500 0 60000000 12500 0 eth0 15000000 80000 0 1500000 10000 0 sit0 0 0 0 0 0 0 Interface statistics are gathered from &quot;ip -s link&quot; and are fuzzy-rounded. The columns are received and transmitted bytes, packets, and errors. You can skip this section by disabling the &quot;--summarize-network&quot; option. # Network Connections ######################################## Connections from remote IP addresses 127.0.0.1 2 Connections to local IP addresses 127.0.0.1 2 Connections to top 10 local ports 38346 1 60875 1 States of connections ESTABLISHED 5 LISTEN 8 This section shows a summary of network connections, retrieved from &quot;netstat&quot; and &quot;fuzzy-rounded&quot; to make them easier to compare when the numbers grow large. There are two sub-sections showing how many connections there are per origin and destination IP address, and a sub-section showing the count of ports in use. The section ends with the count of the network connectionsâ€™ states. You can skip this section by disabling the &quot;--summarize-network&quot; option. # Top Processes ############################################## PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 1 root 15 0 2072 628 540 S 0.0 0.1 0:02.55 init 2 root RT -5 0 0 0 S 0.0 0.0 0:00.00 migration/0 3 root 34 19 0 0 0 S 0.0 0.0 0:00.03 ksoftirqd/0 4 root RT -5 0 0 0 S 0.0 0.0 0:00.00 watchdog/0 5 root 10 -5 0 0 0 S 0.0 0.0 0:00.97 events/0 6 root 10 -5 0 0 0 S 0.0 0.0 0:00.00 khelper 7 root 10 -5 0 0 0 S 0.0 0.0 0:00.00 kthread 10 root 10 -5 0 0 0 S 0.0 0.0 0:00.13 kblockd/0 11 root 20 -5 0 0 0 S 0.0 0.0 0:00.00 kacpid # Notable Processes ########################################## PID OOM COMMAND 2028 +0 sshd This section shows the first few lines of &quot;top&quot; so that you can see what processes are actively using CPU time. The notable processes include the SSH daemon and any process whose out-of-memory-killer priority is set to 17. You can skip this section by disabling the &quot;--summarize-processes&quot; option. # Simplified and fuzzy rounded vmstat (wait please) ########## procs ---swap-- -----io---- ---system---- --------cpu-------- r b si so bi bo ir cs us sy il wa st 2 0 0 0 3 15 30 125 0 0 99 0 0 0 0 0 0 0 0 1250 800 6 10 84 0 0 0 0 0 0 0 0 1000 125 0 0 100 0 0 0 0 0 0 0 0 1000 125 0 0 100 0 0 0 0 0 0 0 450 1000 125 0 1 88 11 0 # The End #################################################### This section is a trimmed-down sample of &quot;vmstat 1 5&quot;, so you can see the general status of the system at present. The values in the table are fuzzy-rounded, except for the CPU columns. You can skip this section by disabling the &quot;--summarize-processes&quot; option.OPTIONS --config type: string Read this comma-separated list of config files. If specified, this must be the first option on the command line. --help Print help and exit. --read-samples type: string Create a report from the files in this directory. --save-samples type: string Save the collected data in this directory. --sleep type: int; default: 5 How long to sleep when gathering samples from vmstat. --summarize-mounts default: yes; negatable: yes Report on mounted filesystems and disk usage. --summarize-network default: yes; negatable: yes Report on network controllers and configuration. --summarize-processes default: yes; negatable: yes Report on top processes and &quot;vmstat&quot; output. --version Print toolâ€™s version and exit.ENVIRONMENT This tool does not use any environment variables.SYSTEM REQUIREMENTS This tool requires the Bourne shell (/bin/sh).BUGS For a list of known bugs, see http://www.percona.com/bugs/pt-summary &lt;http://www.percona.com/bugs/pt- summary&gt;. Please report bugs at https://bugs.launchpad.net/percona-toolkit &lt;https://bugs.launchpad.net/percona- toolkit&gt;. Include the following information in your bug report: Â· Complete command-line used to run the tool Â· Tool &quot;--version&quot; Â· MySQL version of all servers involved Â· Output from the tool including STDERR Â· Input files (log/dump/config files, etc.) If possible, include debugging output by running the tool with &quot;PTDEBUG&quot;; see &quot;ENVIRONMENT&quot;.DOWNLOADING Visit http://www.percona.com/software/percona-toolkit/ &lt;http://www.percona.com/software/percona- toolkit/&gt; to download the latest release of Percona Toolkit. Or, get the latest release from the command line: wget percona.com/get/percona-toolkit.tar.gz wget percona.com/get/percona-toolkit.rpm wget percona.com/get/percona-toolkit.deb You can also get individual tools from the latest release: wget percona.com/get/TOOL Replace &quot;TOOL&quot; with the name of any tool.AUTHORS Baron Schwartz, Kevin van Zonneveld, and Brian FraserABOUT PERCONA TOOLKIT This tool is part of Percona Toolkit, a collection of advanced command-line tools for MySQL developed by Percona. Percona Toolkit was forked from two projects in June, 2011: Maatkit and Aspersa. Those projects were created by Baron Schwartz and primarily developed by him and Daniel Nichter. Visit &lt;http://www.percona.com/software/&gt; to learn about other free, open-source software from Percona.COPYRIGHT, LICENSE, AND WARRANTY This program is copyright 2011-2015 Percona LLC and/or its affiliates, 2010-2011 Baron Schwartz. THIS PROGRAM IS PROVIDED &quot;AS IS&quot; AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2; OR the Perl Artistic License. On UNIX and similar systems, you can issue â€˜man perlgplâ€™ or â€˜man perlartisticâ€™ to read these licenses. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.VERSION pt-summary 2.2.16perl v5.14.2 2015-11-06 PT-SUMMARY(1p) 2、查看磁盘开销使用信息 12345678910111213[root@mysql ~]# pt-diskstats #ts device rd_s rd_avkb rd_mb_s rd_mrg rd_cnc rd_rt wr_s wr_avkb wr_mb_s wr_mrg wr_cnc wr_rt busy in_prg io_s qtime stime 1.0 sda 0.0 0.0 0.0 0% 0.0 0.0 5.0 4.0 0.0 0% 0.0 4.8 0% 0 5.0 3.8 1.0 1.0 sda2 0.0 0.0 0.0 0% 0.0 0.0 5.0 4.0 0.0 0% 0.0 4.8 0% 0 5.0 3.8 1.0 1.0 dm-0 0.0 0.0 0.0 0% 0.0 0.0 5.0 4.0 0.0 0% 0.0 4.8 0% 0 5.0 3.8 1.0 1.0 sda 0.0 0.0 0.0 0% 0.0 0.0 0.0 0.0 0.0 0% 0.0 0.0 0% 0 0.0 0.0 0.0 1.0 sda2 0.0 0.0 0.0 0% 0.0 0.0 0.0 0.0 0.0 0% 0.0 0.0 0% 0 0.0 0.0 0.0 1.0 dm-0 0.0 0.0 0.0 0% 0.0 0.0 0.0 0.0 0.0 0% 0.0 0.0 0% 0 0.0 0.0 0.0 1.0 sda 0.0 0.0 0.0 0% 0.0 0.0 0.0 0.0 0.0 0% 0.0 0.0 0% 0 0.0 0.0 0.0 1.0 sda2 0.0 0.0 0.0 0% 0.0 0.0 0.0 0.0 0.0 0% 0.0 0.0 0% 0 0.0 0.0 0.0 1.0 dm-0 0.0 0.0 0.0 0% 0.0 0.0 0.0 0.0 0.0 0% 0.0 0.0 0% 0 0.0 0.0 0.0 3、查看mysql数据库信息 ![](file:///C:/Users/Deborah/AppData/Local/Temp/msohtmlclip1/01/clip_image018.png) 4、分析慢查询日志 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149[root@mysql ~]# pt-query-digest /var/lib/mysql/mysql-slow.log # 410ms user time, 110ms system time, 24.40M rss, 204.76M vsz# Current date: Fri Oct 26 02:02:37 2018# Hostname: mysql# Files: /var/lib/mysql/mysql-slow.log# Overall: 8 total, 6 unique, 0.00 QPS, 0.00x concurrency ________________# Time range: 2018-10-26 00:36:02 to 01:50:11# Attribute total min max avg 95% stddev median# ============ ======= ======= ======= ======= ======= ======= =======# Exec time 27ms 98us 15ms 3ms 15ms 5ms 1ms# Lock time 2ms 50us 2ms 293us 2ms 471us 105us# Rows sent 1.18k 1 1000 150.75 964.41 315.86 0.99# Rows examine 3.14k 2 1000 401.88 964.41 450.80 578.59# Query size 279 18 92 34.88 88.31 22.24 24.84# Profile# Rank Query ID Response time Calls R/Call V/M Item# ==== ================== ============= ===== ====== ===== ===============# 1 0x3A23B0CB7839AF05 0.0153 55.9% 1 0.0153 0.00 SELECT INFORMATION_SCHEMA.TRIGGERS# 2 0x687D590364E29465 0.0083 30.5% 1 0.0083 0.00 SELECT film# 3 0x9134F278CE0AB549 0.0017 6.2% 1 0.0017 0.00 SELECT mysql.user# 4 0xEBA2FBA69B1FF476 0.0012 4.2% 2 0.0006 0.00 SELECT film# MISC 0xMISC 0.0009 3.1% 3 0.0003 0.0 &lt;2 ITEMS&gt;# Query 1: 0 QPS, 0x concurrency, ID 0x3A23B0CB7839AF05 at byte 1678 _____# This item is included in the report because it matches --limit.# Scores: V/M = 0.00# Time range: all events occurred at 2018-10-26 01:50:11# Attribute pct total min max avg 95% stddev median# ============ === ======= ======= ======= ======= ======= ======= =======# Count 12 1# Exec time 55 15ms 15ms 15ms 15ms 15ms 0 15ms# Lock time 16 387us 387us 387us 387us 387us 0 387us# Rows sent 0 1 1 1 1 1 0 1# Rows examine 0 6 6 6 6 6 0 6# Query size 17 48 48 48 48 48 0 48# String:# Databases sakila# Hosts localhost# Users root# Query_time distribution# 1us# 10us# 100us# 1ms# 10ms ################################################################# 100ms# 1s# 10s+# Tables# SHOW TABLE STATUS FROM `INFORMATION_SCHEMA` LIKE &#x27;TRIGGERS&#x27;\\G# SHOW CREATE TABLE `INFORMATION_SCHEMA`.`TRIGGERS`\\G# EXPLAIN /*!50100 PARTITIONS*/SELECT COUNT(*) FROM INFORMATION_SCHEMA.TRIGGERS\\G# Query 2: 0 QPS, 0x concurrency, ID 0x687D590364E29465 at byte 1208 _____# This item is included in the report because it matches --limit.# Scores: V/M = 0.00# Time range: all events occurred at 2018-10-26 01:05:41# Attribute pct total min max avg 95% stddev median# ============ === ======= ======= ======= ======= ======= ======= =======# Count 12 1# Exec time 30 8ms 8ms 8ms 8ms 8ms 0 8ms# Lock time 4 101us 101us 101us 101us 101us 0 101us# Rows sent 82 1000 1000 1000 1000 1000 0 1000# Rows examine 31 1000 1000 1000 1000 1000 0 1000# Query size 6 18 18 18 18 18 0 18# String:# Databases sakila# Hosts localhost# Users root# Query_time distribution# 1us# 10us# 100us# 1ms ################################################################# 10ms# 100ms# 1s# 10s+# Tables# SHOW TABLE STATUS FROM `sakila` LIKE &#x27;film&#x27;\\G# SHOW CREATE TABLE `sakila`.`film`\\G# EXPLAIN /*!50100 PARTITIONS*/select * from film\\G# Query 3: 0 QPS, 0x concurrency, ID 0x9134F278CE0AB549 at byte 1409 _____# This item is included in the report because it matches --limit.# Scores: V/M = 0.00# Time range: all events occurred at 2018-10-26 01:50:11# Attribute pct total min max avg 95% stddev median# ============ === ======= ======= ======= ======= ======= ======= =======# Count 12 1# Exec time 6 2ms 2ms 2ms 2ms 2ms 0 2ms# Lock time 64 2ms 2ms 2ms 2ms 2ms 0 2ms# Rows sent 0 1 1 1 1 1 0 1# Rows examine 0 5 5 5 5 5 0 5# Query size 32 92 92 92 92 92 0 92# String:# Databases sakila# Hosts localhost# Users root# Query_time distribution# 1us# 10us# 100us# 1ms ################################################################# 10ms# 100ms# 1s# 10s+# Tables# SHOW TABLE STATUS FROM `mysql` LIKE &#x27;user&#x27;\\G# SHOW CREATE TABLE `mysql`.`user`\\G# EXPLAIN /*!50100 PARTITIONS*/SELECT COUNT(*), SUM(user=&quot;&quot;), SUM(password=&quot;&quot;), SUM(password NOT LIKE &quot;*%&quot;) FROM mysql.user\\G# Query 4: 0.01 QPS, 0.00x concurrency, ID 0xEBA2FBA69B1FF476 at byte 0 __# This item is included in the report because it matches --limit.# Scores: V/M = 0.00# Time range: 2018-10-26 00:36:02 to 00:39:22# Attribute pct total min max avg 95% stddev median# ============ === ======= ======= ======= ======= ======= ======= =======# Count 25 2# Exec time 4 1ms 413us 746us 579us 746us 235us 579us# Lock time 7 167us 51us 116us 83us 116us 45us 83us# Rows sent 0 2 1 1 1 1 0 1# Rows examine 62 1.95k 1000 1000 1000 1000 0 1000# Query size 17 50 25 25 25 25 0 25# String:# Databases sakila# Hosts localhost# Users root# Query_time distribution# 1us# 10us# 100us ################################################################# 1ms# 10ms# 100ms# 1s# 10s+# Tables# SHOW TABLE STATUS FROM `sakila` LIKE &#x27;film&#x27;\\G# SHOW CREATE TABLE `sakila`.`film`\\G# EXPLAIN /*!50100 PARTITIONS*/select count(*) from film\\G[root@mysql ~]# 5、查找mysql的从库和同步状态 1234567891011121314[root@mysql ~]# pt-slave-find --host=localhost --user=root --password=123456localhostVersion 5.6.25Server ID 0Uptime 3+01:31:37 (started 2018-10-23T00:31:39)Replication Is not a slave, has 0 slaves connected, is not read_onlyFilters Binary logging STATEMENTSlave status Slave mode STRICTAuto-increment increment 1, offset 1InnoDB version 5.6.25[root@mysql ~]# ^C[root@mysql ~]# 6、查看mysql的死锁信息 1pt-deadlock-logger --user=root --password=123456 localhost 7、从慢查询日志中分析索引使用情况 12345678[root@mysql ~]# pt-index-usage --user=root --password=123456 localhost /var/lib/mysql/mysql-slow.log localhost does not exist or is not readable at /usr/bin/pt-index-usage line 4447.ALTER TABLE `sakila`.`actor` DROP KEY `idx_actor_last_name`; -- type:non-uniqueALTER TABLE `sakila`.`film` DROP KEY `idx_fk_original_language_id`, DROP KEY `idx_title`; -- type:non-uniqueALTER TABLE `sakila`.`staff` DROP KEY `idx_fk_address_id`; -- type:non-unique 8、查找数据库表中重复的索引 12345678910111213141516171819202122[root@mysql ~]# pt-duplicate-key-checker --host=localhost --user=root --password=123456# ######################################################################### menagerie.A # ######################################################################### id is a duplicate of PRIMARY# Key definitions:# KEY `id` (`A_ID`)# PRIMARY KEY (`A_ID`),# Column types:# `a_id` int(11) not null auto_increment# To remove this duplicate index, execute:ALTER TABLE `menagerie`.`A` DROP INDEX `id`;# ######################################################################### Summary of indexes # ######################################################################### Size Duplicate Indexes 12# Total Duplicate Indexes 1# Total Indexes 99[root@mysql ~]# 9、查看mysql表和文件的当前活动IO开销 12345[root@mysql ~]# pt-ioprofileFri Oct 26 02:14:17 CST 2018Tracing process ID 37860 total filename[root@mysql ~]# 10、查看不同mysql配置文件的差异 12[root@mysql ~]# pt-config-diff /etc/my.cnf /etc/my_master.cnf[root@mysql ~]# 11、pt-find查找mysql表和执行命令，示例如下 查找数据库里大于2G的表： 12[root@mysql ~]# pt-find --user=root --password=123456 --tablesize +2G[root@mysql ~]# 查找10天前创建，MyISAM引擎的表： 12[root@mysql ~]# pt-find --user=root --password=123456 --ctime +10 --engine MyISAM[root@mysql ~]# 查看表和索引大小并排序 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115[root@mysql ~]# pt-find --user=root --password=123456 --printf &quot;%T\\t%D.%N\\n&quot; | sort -rn2785280 `sakila`.`rental`2228224 `sakila`.`payment`588216 `mysql`.`help_topic`376832 `sakila`.`inventory`278528 `sakila`.`film_actor`278528 `sakila`.`film`196608 `sakila`.`film_text`141280 `mysql`.`help_keyword`131072 `sakila`.`customer`98304 `sakila`.`staff`98304 `sakila`.`address`81920 `sakila`.`film_category`65536 `sakila`.`city`49152 `sakila`.`store`49152 `mysql`.`innodb_index_stats`33463 `mysql`.`help_relation`32768 `sakila`.`actor`16384 `sakila`.`language`16384 `sakila`.`country`16384 `sakila`.`category`16384 `mysql`.`slave_worker_info`16384 `mysql`.`slave_relay_log_info`16384 `mysql`.`slave_master_info`16384 `mysql`.`innodb_table_stats`16384 `menagerie`.`shop`16384 `menagerie`.`pet`16384 `menagerie`.`employee_tbl`16384 `menagerie`.`employee`16384 `menagerie`.`B`16384 `menagerie`.`A`16384 `test22`.`shop`16384 `test22`.`pet`16384 `test22`.`B`16384 `test22`.`A`12388 `mysql`.`proc`6506 `mysql`.`proxies_priv`6000 `mysql`.`db`4192 `mysql`.`help_category`4096 `mysql`.`tables_priv`4096 `mysql`.`procs_priv`4096 `mysql`.`columns_priv`2692 `mysql`.`user`2048 `mysql`.`event`1024 `mysql`.`time_zone_transition_type`1024 `mysql`.`time_zone_transition`1024 `mysql`.`time_zone_name`1024 `mysql`.`time_zone_leap_second`1024 `mysql`.`time_zone`1024 `mysql`.`servers`1024 `mysql`.`plugin`1024 `mysql`.`ndb_binlog_index`1024 `mysql`.`func`0 `sakila`.`staff_list`0 `sakila`.`sales_by_store`0 `sakila`.`sales_by_film_category`0 `sakila`.`nicer_but_slower_film_list`0 `sakila`.`film_list`0 `sakila`.`customer_list`0 `sakila`.`actor_info`0 `performance_schema`.`users`0 `performance_schema`.`threads`0 `performance_schema`.`table_lock_waits_summary_by_table`0 `performance_schema`.`table_io_waits_summary_by_table`0 `performance_schema`.`table_io_waits_summary_by_index_usage`0 `performance_schema`.`socket_summary_by_instance`0 `performance_schema`.`socket_summary_by_event_name`0 `performance_schema`.`socket_instances`0 `performance_schema`.`setup_timers`0 `performance_schema`.`setup_objects`0 `performance_schema`.`setup_instruments`0 `performance_schema`.`setup_consumers`0 `performance_schema`.`setup_actors`0 `performance_schema`.`session_connect_attrs`0 `performance_schema`.`session_account_connect_attrs`0 `performance_schema`.`rwlock_instances`0 `performance_schema`.`performance_timers`0 `performance_schema`.`objects_summary_global_by_type`0 `performance_schema`.`mutex_instances`0 `performance_schema`.`hosts`0 `performance_schema`.`host_cache`0 `performance_schema`.`file_summary_by_instance`0 `performance_schema`.`file_summary_by_event_name`0 `performance_schema`.`file_instances`0 `performance_schema`.`events_waits_summary_global_by_event_name`0 `performance_schema`.`events_waits_summary_by_user_by_event_name`0 `performance_schema`.`events_waits_summary_by_thread_by_event_name`0 `performance_schema`.`events_waits_summary_by_instance`0 `performance_schema`.`events_waits_summary_by_host_by_event_name`0 `performance_schema`.`events_waits_summary_by_account_by_event_name`0 `performance_schema`.`events_waits_history_long`0 `performance_schema`.`events_waits_history`0 `performance_schema`.`events_waits_current`0 `performance_schema`.`events_statements_summary_global_by_event_name`0 `performance_schema`.`events_statements_summary_by_user_by_event_name`0 `performance_schema`.`events_statements_summary_by_thread_by_event_name`0 `performance_schema`.`events_statements_summary_by_host_by_event_name`0 `performance_schema`.`events_statements_summary_by_digest`0 `performance_schema`.`events_statements_summary_by_account_by_event_name`0 `performance_schema`.`events_statements_history_long`0 `performance_schema`.`events_statements_history`0 `performance_schema`.`events_statements_current`0 `performance_schema`.`events_stages_summary_global_by_event_name`0 `performance_schema`.`events_stages_summary_by_user_by_event_name`0 `performance_schema`.`events_stages_summary_by_thread_by_event_name`0 `performance_schema`.`events_stages_summary_by_host_by_event_name`0 `performance_schema`.`events_stages_summary_by_account_by_event_name`0 `performance_schema`.`events_stages_history_long`0 `performance_schema`.`events_stages_history`0 `performance_schema`.`events_stages_current`0 `performance_schema`.`cond_instances`0 `performance_schema`.`accounts`0 `mysql`.`slow_log`0 `mysql`.`general_log`[root@mysql ~]# 12、pt-kill 杀掉符合标准的mysql进程 显示查询时间大于60秒的查询 123[root@mysql ~]# pt-kill --user=root --password=123456 --busy-time 60 --print^C[root@mysql ~]# kill掉大于60秒的查询 1pt-kill --user=root --password=123456 --busy-time 60 --kill 13、查看mysql授权 12345678910111213141516171819^C[root@mysql ~]# pt-show-grants --user=root --password=123456-- Grants dumped by pt-show-grants-- Dumped from server Localhost via UNIX socket, MySQL 5.6.25 at 2018-10-26 02:45:29-- Grants for &#x27;root&#x27;@&#x27;%&#x27;GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY PASSWORD &#x27;*6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9&#x27;;-- Grants for &#x27;root&#x27;@&#x27;127.0.0.1&#x27;GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;127.0.0.1&#x27; IDENTIFIED BY PASSWORD &#x27;*6E666163AC88D2C7122156EB3B633E3172F24604&#x27; WITH GRANT OPTION;-- Grants for &#x27;root&#x27;@&#x27;::1&#x27;GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;::1&#x27; IDENTIFIED BY PASSWORD &#x27;*6E666163AC88D2C7122156EB3B633E3172F24604&#x27; WITH GRANT OPTION;-- Grants for &#x27;root&#x27;@&#x27;localhost&#x27;GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY PASSWORD &#x27;*6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9&#x27; WITH GRANT OPTION;GRANT PROXY ON &#x27;&#x27;@&#x27;&#x27; TO &#x27;root&#x27;@&#x27;localhost&#x27; WITH GRANT OPTION;-- Grants for &#x27;root&#x27;@&#x27;mysql&#x27;GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;mysql&#x27; IDENTIFIED BY PASSWORD &#x27;*6E666163AC88D2C7122156EB3B633E3172F24604&#x27; WITH GRANT OPTION;GRANT PROXY ON &#x27;&#x27;@&#x27;&#x27; TO &#x27;root&#x27;@&#x27;mysql&#x27; WITH GRANT OPTION;[root@mysql ~]# 14、验证数据库复制的完整性 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051[root@mysql ~]# pt-table-checksum --user=root --password=123456Diffs cannot be detected because no slaves were found. Please read the --recursion-method documentation for information. TS ERRORS DIFFS ROWS CHUNKS SKIPPED TIME TABLE10-26T02:47:01 0 0 3 1 0 0.010 test22.A10-26T02:47:01 0 0 3 1 0 0.011 test22.B10-26T02:47:01 0 0 8 1 0 0.025 test22.pet10-26T02:47:01 0 0 7 1 0 0.011 test22.shop10-26T02:47:01 0 0 3 1 0 0.008 menagerie.A10-26T02:47:01 0 0 3 1 0 0.007 menagerie.B10-26T02:47:01 0 0 9 1 0 0.011 menagerie.employee10-26T02:47:01 0 0 6 1 0 0.026 menagerie.employee_tbl10-26T02:47:01 0 0 8 1 0 0.007 menagerie.pet10-26T02:47:01 0 0 7 1 0 0.006 menagerie.shop10-26T02:47:01 0 0 0 1 0 0.007 mysql.columns_priv10-26T02:47:01 0 0 2 1 0 0.008 mysql.db10-26T02:47:01 0 0 0 1 0 0.006 mysql.event10-26T02:47:01 0 0 0 1 0 0.006 mysql.func10-26T02:47:01 0 0 40 1 0 0.023 mysql.help_category10-26T02:47:01 0 0 608 1 0 0.010 mysql.help_keyword10-26T02:47:01 0 0 1215 1 0 0.018 mysql.help_relation10-26T02:47:01 0 0 583 1 0 0.039 mysql.help_topic10-26T02:47:01 0 0 0 1 0 0.008 mysql.ndb_binlog_index10-26T02:47:01 0 0 0 1 0 0.007 mysql.plugin10-26T02:47:01 0 0 6 1 0 0.007 mysql.proc10-26T02:47:01 0 0 0 1 0 0.010 mysql.procs_priv10-26T02:47:01 0 0 2 1 0 0.007 mysql.proxies_priv10-26T02:47:01 0 0 0 1 0 0.027 mysql.servers10-26T02:47:01 0 0 0 1 0 0.007 mysql.tables_priv10-26T02:47:01 0 0 0 1 0 0.008 mysql.time_zone10-26T02:47:01 0 0 0 1 0 0.009 mysql.time_zone_leap_second10-26T02:47:01 0 0 0 1 0 0.008 mysql.time_zone_name10-26T02:47:01 0 0 0 1 0 0.010 mysql.time_zone_transition10-26T02:47:01 0 0 0 1 0 0.011 mysql.time_zone_transition_type10-26T02:47:01 0 0 5 1 0 0.031 mysql.user10-26T02:47:01 0 0 200 1 0 0.010 sakila.actor10-26T02:47:01 0 0 603 1 0 0.013 sakila.address10-26T02:47:01 0 0 16 1 0 0.011 sakila.category10-26T02:47:01 0 0 600 1 0 0.012 sakila.city10-26T02:47:01 0 0 109 1 0 0.014 sakila.country10-26T02:47:01 0 0 599 1 0 0.011 sakila.customer10-26T02:47:01 0 0 1000 1 0 0.016 sakila.film10-26T02:47:01 0 0 5462 1 0 0.020 sakila.film_actor10-26T02:47:01 0 0 1000 1 0 0.013 sakila.film_category10-26T02:47:01 0 0 1000 1 0 0.013 sakila.film_text10-26T02:47:01 0 0 4581 1 0 0.058 sakila.inventory10-26T02:47:01 0 0 6 1 0 0.008 sakila.language10-26T02:47:01 0 0 16049 1 0 0.059 sakila.payment10-26T02:47:02 0 0 16044 1 0 0.069 sakila.rental10-26T02:47:02 0 0 2 1 0 0.008 sakila.staff10-26T02:47:02 0 0 2 1 0 0.011 sakila.store[root@mysql ~]# 15、附录： ![](file:///C:/Users/Deborah/AppData/Local/Temp/msohtmlclip1/01/clip_image020.png) 6、如何通过慢查日志发现有问题的SQL 1、查询次数多且每次查询占用时间长的sql 通常为pt-query-digest分析的前几个查询；该工具可以很清楚的看出每个SQL执行的次数及百分比等信息，执行的次数多，占比比较大的SQL 2、IO大的sql 注意pt-query-digest分析中的Rows examine项。扫描的行数越多，IO越大。 3、未命中的索引的SQL 注意pt-query-digest分析中的Rows examine 和Rows Send的对比。说明该SQL的索引命中率不高，对于这种SQL，我们要重点进行关注。 7、通过explain查询分析SQL的执行计划 1、使用explain查询SQL的执行计划 SQL的执行计划侧面反映出了SQL的执行效率，具体执行方式如下所示： 123EXPLAIN SELECT * FROM `user` JOIN `post` ON `user`.id = `post`.uidWHERE user.`created_at` &lt; &#x27;2018-10-01 00:00:00&#x27; AND `post`.status = 1; 在执行的SQL前面加上explain关键词即可； 2、每个字段的说明： 1）id列数字越大越先执行，如果说数字一样大，那么就从上往下依次执行，id列为null的就表是这是一个结果集，不需要使用它来进行查询。 2）select_type列常见的有： A：simple：表示不需要union操作或者不包含子查询的简单select查询。有连接查询时，外层的查询为simple，且只有一个 B：primary：一个需要union操作或者含有子查询的select，位于最外层的单位查询的select_type即为primary。且只有一个 C：union：union连接的两个select查询，第一个查询是dervied派生表，除了第一个表外，第二个以后的表select_type都是union D：dependent union：与union一样，出现在union 或unionall语句中，但是这个查询要受到外部查询的影响 E：union result：包含union的结果集，在union和unionall语句中,因为它不需要参与查询，所以id字段为null F：subquery：除了from字句中包含的子查询外，其他地方出现的子查询都可能是subquery G：dependentsubquery：与dependent union类似，表示这个subquery的查询要受到外部表查询的影响 H：derived：from字句中出现的子查询，也叫做派生表，其他数据库中可能叫做内联视图或嵌套select 3）table 显示的查询表名，如果查询使用了别名，那么这里显示的是别名，如果不涉及对数据表的操作，那么这显示为null，如果显示为尖括号括起来的就表示这个是临时表，后边的N就是执行计划中的id，表示结果来自于这个查询产生。如果是尖括号括起来的&lt;union M,N&gt;，与类似，也是一个临时表，表示这个结果来自于union查询的id为M,N的结果集。 4）type 依次从好到差：system，const，eq_ref，ref，fulltext，ref_or_null，unique_subquery，index_subquery，range，index_merge，index，ALL，除了all之外，其他的type都可以使用到索引，除了index_merge之外，其他的type只可以用到一个索引 A：system：表中只有一行数据或者是空表，且只能用于myisam和memory表。如果是Innodb引擎表，type列在这个情况通常都是all或者index B：const：使用唯一索引或者主键，返回记录一定是1行记录的等值where条件时，通常type是const。其他数据库也叫做唯一索引扫描 C：eq_ref：出现在要连接过个表的查询计划中，驱动表只返回一行数据，且这行数据是第二个表的主键或者唯一索引，且必须为not null，唯一索引和主键是多列时，只有所有的列都用作比较时才会出现eq_ref D：ref：不像eq_ref那样要求连接顺序，也没有主键和唯一索引的要求，只要使用相等条件检索时就可能出现，常见与辅助索引的等值查找。或者多列主键、唯一索引中，使用第一个列之外的列作为等值查找也会出现，总之，返回数据不唯一的等值查找就可能出现。 E：fulltext：全文索引检索，要注意，全文索引的优先级很高，若全文索引和普通索引同时存在时，mysql不管代价，优先选择使用全文索引 F：ref_or_null：与ref方法类似，只是增加了null值的比较。实际用的不多。 G：unique_subquery：用于where中的in形式子查询，子查询返回不重复值唯一值 H：index_subquery：用于in形式子查询使用到了辅助索引或者in常数列表，子查询可能返回重复值，可以使用索引将子查询去重。 I：range：索引范围扫描，常见于使用&gt;,&lt;,is null,between ,in ,like等运算符的查询中。 J：index_merge：表示查询使用了两个以上的索引，最后取交集或者并集，常见and ，or的条件使用了不同的索引，官方排序这个在ref_or_null之后，但是实际上由于要读取所个索引，性能可能大部分时间都不如range K：index：索引全表扫描，把索引从头到尾扫一遍，常见于使用索引列就可以处理不需要读取数据文件的查询、可以使用索引排序或者分组的查询。 L：all：这个就是全表扫描数据文件，然后再在server层进行过滤返回符合要求的记录。 5）possible_keys 查询可能使用到的索引都会在这里列出来 6）key 查询真正使用到的索引，select_type为index_merge时，这里可能出现两个以上的索引，其他的select_type这里只会出现一个。 7）key_len 用于处理查询的索引长度，如果是单列索引，那就整个索引长度算进去，如果是多列索引，那么查询不一定都能使用到所有的列，具体使用到了多少个列的索引，这里就会计算进去，没有使用到的列，这里不会计算进去。留意下这个列的值，算一下你的多列索引总长度就知道有没有使用到所有的列了。要注意，mysql的ICP特性使用到的索引不会计入其中。另外，key_len只计算where条件用到的索引长度，而排序和分组就算用到了索引，也不会计算到key_len中。 8）ref 如果是使用的常数等值查询，这里会显示const，如果是连接查询，被驱动表的执行计划这里会显示驱动表的关联字段，如果是条件使用了表达式或者函数，或者条件列发生了内部隐式转换，这里可能显示为func 9）rows 这里是执行计划中估算的扫描行数，不是精确值 10）extra 这个列可以显示的信息非常多，有几十种，常用的有 A：distinct：在select部分使用了distinc关键字 B：no tables used：不带from字句的查询或者From dual查询 C：使用not in()形式子查询或not exists运算符的连接查询，这种叫做反连接。即，一般连接查询是先查询内表，再查询外表，反连接就是先查询外表，再查询内表。 D：using filesort：排序时无法使用到索引时，就会出现这个。常见于order by和group by语句中 E：using index：查询时不需要回表查询，直接通过索引就可以获取查询的数据。 F：using join buffer（block nested loop），using join buffer（batched key accss）：5.6.x之后的版本优化关联查询的BNL，BKA特性。主要是减少内表的循环数量以及比较顺序地扫描查询。 G：using sort_union，using_union，using intersect，using sort_intersection： using intersect：表示使用and的各个索引的条件时，该信息表示是从处理结果获取交集 using union：表示使用or连接各个使用索引的条件时，该信息表示从处理结果获取并集 using sort_union和usingsort_intersection：与前面两个对应的类似，只是他们是出现在用and和or查询信息量大时，先查询主键，然后进行排序合并后，才能读取记录并返回。 H：using temporary：表示使用了临时表存储中间结果。临时表可以是内存临时表和磁盘临时表，执行计划中看不出来，需要查看status变量，used_tmp_table，used_tmp_disk_table才能看出来。 I：using where：表示存储引擎返回的记录并不是所有的都满足查询条件，需要在server层进行过滤。查询条件中分为限制条件和检查条件，5.6之前，存储引擎只能根据限制条件扫描数据并返回，然后server层根据检查条件进行过滤再返回真正符合查询的数据。5.6.x之后支持ICP特性，可以把检查条件也下推到存储引擎层，不符合检查条件和限制条件的数据，直接不读取，这样就大大减少了存储引擎扫描的记录数量。extra列显示using index condition J：firstmatch(tb_name)：5.6.x开始引入的优化子查询的新特性之一，常见于where字句含有in()类型的子查询。如果内表的数据量比较大，就可能出现这个 K：loosescan(m…n)：5.6.x之后引入的优化子查询的新特性之一，在in()类型的子查询中，子查询返回的可能有重复记录时，就可能出现这个 除了这些之外，还有很多查询数据字典库，执行计划过程中就发现不可能存在结果的一些提示信息 11）filtered 使用explain extended时会出现这个列，5.7之后的版本默认就有这个字段，不需要使用explain extended了。这个字段表示存储引擎返回的数据在server层过滤后，剩下多少满足查询的记录数量的比例，注意是百分比，不是具体记录数。 3 具体慢查询的优化案例 1、Limit查询的优化 Limit常用于分页处理，时长会伴随orderby从句使用，因此大多时候回使用Filesorts这样会造成大量的IO问题。 优化步骤1： 使用有索引的列或主键进行order by操作，因为大家知道，innodb是按照主键的逻辑顺序进行排序的。可以避免很多的IO操作。 优化步骤2、记录上次返回的主键， 在下次查询时使用主键过滤。（说明：避免了数据量大时扫描过多的记录） 注意事项： 主键要顺序排序并连续的，如果主键中间空缺了某一列，或者某几列，会出现列出数据不足5行的数据；如果不连续的情况，建立一个附加的列index_id列，保证这一列数据要自增的，并添加索引即可。 2、索引的优化 1、什么是索引？ 索引的作用相当于图书的目录，可以根据目录中的页码快速找到所需的内容。 数据库使用索引以找到特定值，然后顺指针找到包含该值的行。在表中建立索引，然后在索引中找到符合查询条件的索引值，最后通过保存在索引中的ROWID（相当于页码）快速找到表中对应的记录。索引的建立是表中比较有指向性的字段，相当于目录，比如说行政区域代码，同一个地域的行政区域代码都是相同的，那么给这一列加上索引，避免让它重复扫描，从而达到优化的目的！ 2、如何创建索引 在执行CREATE TABLE语句时可以创建索引，也可以单独用CREATE INDEX或ALTER TABLE来为表增加索引。 1、ALTER TABLE ALTER TABLE用来创建普通索引、UNIQUE索引或PRIMARY KEY索引。 ALTER TABLE table_name ADDINDEX index_name (column_list) ALTER TABLE table_name ADDUNIQUE (column_list) ALTER TABLE table_name ADDPRIMARY KEY (column_list) 说明：其中table_name是要增加索引的表名，column_list指出对哪些列进行索引，多列时各列之间用逗号分隔。索引名index_name可选，缺省时，MySQL将根据第一个索引列赋一个名称。另外，ALTER TABLE允许在单个语句中更改多个表，因此可以在同时创建多个索引。 2、CREATE INDEX CREATE INDEX可对表增加普通索引或UNIQUE索引。 CREATE INDEX index_name ONtable_name (column_list) CREATE UNIQUE INDEXindex_name ON table_name (column_list) 说明：table_name、index_name和column_list具有与ALTER TABLE语句中相同的含义，索引名不可选。另外，不能用CREATE INDEX语句创建PRIMARY KEY索引。 3、索引类型 在创建索引时，可以规定索引能否包含重复值。如果不包含，则索引应该创建为PRIMARY KEY或UNIQUE索引。对于单列惟一性索引，这保证单列不包含重复的值。对于多列惟一性索引，保证多个值的组合不重复。 PRIMARY KEY索引和UNIQUE索引非常类似。 事实上，PRIMARY KEY索引仅是一个具有名称PRIMARY的UNIQUE索引。这表示一个表只能包含一个PRIMARY KEY，因为一个表中不可能具有两个同名的索引。 下面的SQL语句对students表在sid上添加PRIMARYKEY索引。 ALTER TABLE students ADDPRIMARY KEY (sid) 4、删除索引 可利用ALTER TABLE或DROPINDEX语句来删除索引。类似于CREATE INDEX语句，DROPINDEX可以在ALTER TABLE内部作为一条语句处理，语法如下。 DROP INDEX index_name ONtalbe_name ALTER TABLE table_name DROPINDEX index_name ALTER TABLE table_name DROPPRIMARY KEY 其中，前两条语句是等价的，删除掉table_name中的索引index_name。 第3条语句只在删除PRIMARYKEY索引时使用，因为一个表只可能有一个PRIMARY KEY索引，因此不需要指定索引名。如果没有创建PRIMARY KEY索引，但表具有一个或多个UNIQUE索引，则MySQL将删除第一个UNIQUE索引。 如果从表中删除了某列，则索引会受到影响。对于多列组合的索引，如果删除其中的某列，则该列也会从索引中删除。如果删除组成索引的所有列，则整个索引将被删除。 5、查看索引 6、什么情况下，使用索引了？ 1、表的主关键字 2、自动建立唯一索引 3、表的字段唯一约束 4、直接条件查询的字段（在SQL中用于条件约束的字段） 5、查询中与其它表关联的字段 6、查询中排序的字段（排序的字段如果通过索引去访问那将大大提高排序速度） 7、查询中统计或分组统计的字段 8、表记录太少（如果一个表只有5条记录，采用索引去访问记录的话，那首先需访问索引表，再通过索引表访问数据表，一般索引表与数据表不在同一个数据块） 9、经常插入、删除、修改的表（对一些经常处理的业务表应在查询允许的情况下尽量减少索引） 10、数据重复且分布平均的表字段（假如一个表有10万行记录，有一个字段A只有T和F两种值，且每个值的分布概率大约为50%，那么对这种表A字段建索引一般不会提高数据库的查询速度。） 11、经常和主字段一块查询但主字段索引值比较多的表字段 12、对千万级MySQL数据库建立索引的事项及提高性能的手段 3、如何选择合适的列建立索引 1、在where从句，group by从句，order by从句，on从句中虚线的列添加索引 2、索引字段越小越好（因为数据库数据存储单位是以“页”为单位的，数据存储的越多，IO也会越大） 3、离散度大的列放到联合索引的前面 例子： 注意: 是index（staff_id，customer_id）好，还是index（customer_id，staff_id）好 那我们怎么进行验证离散度好了？ A、我们先查看一下表结构 ![](file:///C:/Users/Deborah/AppData/Local/Temp/msohtmlclip1/01/clip_image087.jpg) B、分别查看这两个字段中不同的id的数量，数量越多，则表明离散程度越大：因此可以通过下图看出：customer_id 离散程度大。 ![](file:///C:/Users/Deborah/AppData/Local/Temp/msohtmlclip1/01/clip_image089.jpg) 结论：由于customer_id 离散程度大，使用index（customer_id，staff_id）好 C、mysql联合索引 ①命名规则 ：表名_字段名 1、需要加索引的字段，要在where条件中 2、数据量少的字段不需要加索引 3、如果where条件中是OR关系，加索引不起作用 4、符合最左原则 ②什么是联合索引 1、两个或更多个列上的索引被称作联合索引，又被称为是复合索引。 2、利用索引中的附加列，您可以缩小搜索的范围，但使用一个具有两列的索引不同于使用两个单独的索引。复合索引的结构与电话簿类似，人名由姓和名构成，电话簿首先按姓氏对进行排序，然后按名字对有相同姓氏的人进行排序。如果您知 道姓，电话簿将非常有用；如果您知道姓和名，电话簿则更为有用，但如果您只知道名不姓，电话簿将没有用处。 所以说创建复合索引时，应该仔细考虑列的顺序。对索引中的所有列执行搜索或仅对前几列执行搜索时，复合索引非常有用；仅对后面的任意列执行搜索时，复合索引则没有用处。 4、索引优化SQL的方法 1、索引的维护及优化（重复及冗余索引） 增加索引会有利于查询效率，但会降低insert，update，delete的效率，但实际上往往不是这样的，过多的索引会不但会影响使用效率，同时会影响查询效率，这是由于数据库进行查询分析时，首先要选择使用哪一个索引进行查询，如果索引过多，分析过程就会越慢，这样同样的减少查询的效率，因此我们要知道如何增加，有时候要知道维护和删除不需要的索引 2、如何找到重复和冗余的索引 重复索引： 重复索引是指相同的列以相同的顺序简历的同类型的索引，如下表中的 primary key和ID列上的索引就是重复索引 冗余索引： 冗余索引是指多个索引的前缀列相同，或是在联合索引中包含了主键的索引，下面这个例子中key（name，id）就是一个冗余索引。 说明：对于innodb来说，每一个索引后面，实际上都会包含主键，这时候我们建立的联合索引，又人为的把主键包含进去，那么这个时候就是一个冗余索引。 3、如何查找重复索引 工具：使用pt-duplicate-key-checker工具检查重复及冗余索引 ![](file:///C:/Users/Deborah/AppData/Local/Temp/msohtmlclip1/01/clip_image091.jpg) 4、索引维护的方法 由于业务变更，某些索引是后续不需要使用的，就要进行杀出。 在mysql中，目前只能通过慢查询日志配合pt-index-usage工具来进行索引使用情况的分析； ![](file:///C:/Users/Deborah/AppData/Local/Temp/msohtmlclip1/01/clip_image093.jpg) 附：https://www.percona.com/downloads/ 5、注意事项 设计好MySql的索引可以让你的数据库飞起来，大大的提高数据库效率。设计MySql索引的时候有一下几点注意： 1，创建索引 对于查询占主要的应用来说，索引显得尤为重要。很多时候性能问题很简单的就是因为我们忘了添加索引而造成的，或者说没有添加更为有效的索引导致。如果不加 索引的话，那么查找任何哪怕只是一条特定的数据都会进行一次全表扫描，如果一张表的数据量很大而符合条件的结果又很少，那么不加索引会引起致命的性能下降。 但是也不是什么情况都非得建索引不可，比如性别可能就只有两个值，建索引不仅没什么优势，还会影响到更新速度，这被称为过度索引。 2，复合索引 比如有一条语句是这样的：select * from users where area=’beijing’ and age=22; 如果我们是在area和age上分别创建单个索引的话，由于mysql查询每次只能使用一个索引，所以虽然这样已经相对不做索引时全表扫描提高了很多效 率，但是如果在area、age两列上创建复合索引的话将带来更高的效率。如果我们创建了(area, age,salary)的复合索引，那么其实相当于创建了(area,age,salary)、(area,age)、(area)三个索引，这被称为最佳左前缀特性。 因此我们在创建复合索引时应该将最常用作限制条件的列放在最左边，依次递减。 3，索引不会包含有NULL值的列 只要列中包含有NULL值都将不会被包含在索引中，复合索引中只要有一列含有NULL值，那么这一列对于此复合索引就是无效的。所以我们在数据库设计时不要让字段的默认值为NULL。 4，使用短索引 对串列进行索引，如果可能应该指定一个前缀长度。例如，如果有一个CHAR(255)的 列，如果在前10 个或20 个字符内，多数值是惟一的，那么就不要对整个列进行索引。短索引不仅可以提高查询速度而且可以节省磁盘空间和I/O操作。 5，排序的索引问题 mysql查询只使用一个索引，因此如果where子句中已经使用了索引的话，那么order by中的列是不会使用索引的。因此数据库默认排序可以符合要求的情况下不要使用排序操作；尽量不要包含多个列的排序，如果需要最好给这些列创建复合索引。 6，like语句操作 一般情况下不鼓励使用like操作，如果非使用不可，如何使用也是一个问题。like “%aaa%” 不会使用索引而like “aaa%”可以使用索引。 7，不要在列上进行运算 select* from users where YEAR(adddate) 8，不使用NOT IN和操作 NOTIN和操作都不会使用索引将进行全表扫描。NOT IN可以NOT EXISTS代替，id3则可使用id&gt;3 or id","categories":[],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/tags/mysql/"}]},{"title":"数据库-进阶","slug":"mysql/sql_数据库进阶","date":"2019-01-14T02:42:06.000Z","updated":"2021-09-22T11:19:04.638Z","comments":true,"path":"2019/01/14/mysql/sql_数据库进阶/","link":"","permalink":"http://example.com/2019/01/14/mysql/sql_%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9B%E9%98%B6/","excerpt":"","text":"1 编码mysql 1.1 查看mysql编码 12345678910111213mysql&gt; show variables like &#x27;character%&#x27;;+--------------------------+----------------------------+| Variable_name | Value |+--------------------------+----------------------------+| character_set_client | utf8 || character_set_connection | utf8 || character_set_database | latin1 || character_set_filesystem | binary || character_set_results | utf8 || character_set_server | latin1 || character_set_system | utf8 || character_sets_dir | /usr/share/mysql/charsets/ |+--------------------------+----------------------------+ 1.2 设置mysql编码 12345678910111213141516171819202122232425262728293031323334353637383940# vi /etc/my.cnf如下(少补)：[mysqld]character-set-server=utf8 collation-server=utf8_general_ci sql_mode=&#x27;NO_ENGINE_SUBSTITUTION&#x27;[mysql]default-character-set = utf8[mysql.server]default-character-set = utf8[mysqld_safe]default-character-set = utf8[client]default-character-set = utf8重启mysql# service mysqld restart再次查看编码：# mysql -uroot -pmysql&gt; show variables like &#x27;character%&#x27;;+--------------------------+----------------------------+| Variable_name | Value |+--------------------------+----------------------------+| character_set_client | utf8 || character_set_connection | utf8 || character_set_database | utf8 || character_set_filesystem | binary || character_set_results | utf8 || character_set_server | utf8 || character_set_system | utf8 || character_sets_dir | /usr/share/mysql/charsets/ |+--------------------------+----------------------------+8 rows in set (0.00 sec) 2 mysql的目录及配置文件 A**/etc/my.cnf** 这是mysql的主配置文件 B/var/lib/mysql mysql数据库的数据库文件存放位置 1234567891011121314151617[root@mysql etc]# cd /var/lib/mysql/[root@mysql mysql]# lltotal 176172-rw-rw----. 1 mysql mysql 56 Oct 20 00:10 auto.cnf-rw-rw----. 1 mysql mysql 79691776 Oct 21 04:46 ibdata1-rw-rw----. 1 mysql mysql 50331648 Oct 21 04:46 ib_logfile0-rw-rw----. 1 mysql mysql 50331648 Oct 20 00:09 ib_logfile1drwx------. 2 mysql mysql 4096 Oct 21 01:38 test11drwx------. 2 mysql mysql 4096 Oct 21 04:45 menageriedrwx--x--x. 2 mysql mysql 4096 Oct 20 00:09 mysql-rw-r-----. 1 mysql root 2219 Oct 20 00:14 mysql.err-rw-rw----. 1 mysql mysql 5 Oct 20 00:10 mysql.pidsrwxrwxrwx. 1 mysql mysql 0 Oct 20 00:10 mysql.sockdrwx------. 2 mysql mysql 4096 Oct 20 00:09 performance_schema-rw-r--r--. 1 root root 111 Oct 20 00:09 RPM_UPGRADE_HISTORY-rw-r--r--. 1 mysql mysql 111 Oct 20 00:09 RPM_UPGRADE_MARKER-LASTdrwxr-xr-x. 2 mysql mysql 4096 Oct 20 00:09 test 我们的mysql数据库的数据库文件通常是存放在了/ver/lib/mysql这个目录下 C/var/log/mysql数据库的日志输出存放位置 D查看端口。Netstat –nltp 看是否能找到3306的端口 1234567891011121314[root@mysql menagerie]# netstat -nltpActive Internet connections (only servers)Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name tcp 0 0 0.0.0.0:57958 0.0.0.0:* LISTEN 1306/rpc.statd tcp 0 0 0.0.0.0:111 0.0.0.0:* LISTEN 1284/rpcbind tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN 1573/sshd tcp 0 0 127.0.0.1:631 0.0.0.0:* LISTEN 1362/cupsd tcp 0 0 127.0.0.1:25 0.0.0.0:* LISTEN 1654/master tcp 0 0 :::3306 :::* LISTEN 37860/mysqld tcp 0 0 :::49647 :::* LISTEN 1306/rpc.statd tcp 0 0 :::111 :::* LISTEN 1284/rpcbind tcp 0 0 :::22 :::* LISTEN 1573/sshd tcp 0 0 ::1:631 :::* LISTEN 1362/cupsd tcp 0 0 ::1:25 :::* LISTEN 1654/master 123[root@mysql mysql]# cat mysql.pid37860 3 数据库-原理部分 常用的术语 3.1数据模型 ​ 数据模型（Data model）是数据库结构的基础，是用来描述数据的一组概念和定义，数据模型主要有三个要素：数据结构数据操作数据约束条件。 数据结构：对象类型的集合，是对静态属性的描述。 数据操作：是对数据库中的各种对象性数据，允许执行的操作的集合，如增删改查等；数据操作是对系统动态热性的描述。 数据的约束条件：是一组完整性规则的集合，也就是说，对于具体的应用必须先遵循特定的语义约束条件。比如：性别只能取 “男”或者“女”中的之一。考试成绩：（满分100）只能是0-100的数值。 3.2数据库 ​ 数据库（database）是长期存储在计算机外存上有结构，可共享的数据集合；数据库中的数据按照一定的数据模型描述组织和存储，具有较小的冗余度，较高的数据独立性和可扩展性，并可以为多个用户共享。 常见数据库分类： 关系型数据库：如：MySQL，oracle，sqlserver 非关系型数据库：如：redis，hbase等 3.3数据库管理系统 ​ 数据库管理系统（database managerment system， DBMS）是指数据库系统中对数据库进行管理的软件系统，是数据库系统的核心组成部分。数据库的一切操作，如增删改查以及各种控制，都是通过DBMS进行的。 具有以下4个基本的功能： 1数据定义功能 用户可以通过DBMS提供的数据定义语言对数据库的数据进行定义。 2数据操纵功能 用户可以通过数据操纵语言实现对数据库的增删改查操作 3数据库运行管理 管理数据库的运行是DBMS运行时的核心工作。所有访问数据库的操作都要在DBMS的统一管理下进行，以保证数据的安全性完整性一致性以及多用户对数据库的并发使用。 4数据库的建立和维护 建立数据库，包括数据库初始数据的输入与数据转换等。维护数据库，包括数据库的转储与恢复，数据库的重组织，性能监控和分析。 3.4数据库系统相关人员 数据库系统的相关人员是数据库系统的重要组成部分，具体可以分为以下的三类人员 1数据库管理员 职责：负责数据库的建立使用维护的专门人员 2应用程序开发人员 职责：开发数据库应用程序的人员，可以使用数据库管理系统的所有功能。 3最终用户 职责：一般来说，是通过应用程序使用数据库的人员，最终用户无需自己编写应用程序。 3.5数据库系统 ​ 数据库系统（database system DBS）是由硬件系统，数据库管理系统，数据库，数据库应用程序，数据库系统相关人员构成的人-机系统，是指有数据库的整个计算机系统。 说明：在许多场合下，数据库，数据库管理系统，数据库系统不做严格区分； 4 关系代数分类 4.1 基本运算 ​ 并差笛卡尔积选择投影； 关系代数的基本操作（原始运算）：“选择”“投影”笛卡尔积（也叫做“叉积”或“交叉连接”）并集差集和“重命名”。 4.2 组合运算 ​ 交连接自然连接和除； ​ 其中最重要的是交集除法和自然连接。(inner join [join]) 4.3 扩充的关系代数操作 ​ 外连接（左外和右外）外部并和半连接；(left join ,right join) 5 数据库设计 关系型数据库的设计分为以下5个阶段： 5.1需求分析 (1) 明确用户需求，到底做什么？ 5.2概念模式设计 (1) 该阶段是整个数据库设计的关键，它通过对用户需求进行综合归纳与抽象。主要是通过E-R图表示。 (2) 优点： A简单明了，容易理解 B独立于计算机与具体的RDBMS无关。 (3) E-R模型的基本元素 A实体（Entity） 如：学生 B属性（attribute）如：姓名 C键码（key）如：身份证号码； D关系（relationship）如：两个实体之间的关系 a) 一对一（1:1）： 一个人一个身份证号码；一个学校一个校长 b) 一对多（1：n）：学校和老师的关系 c) 多对多（n：n）：学生选课，一个学生可以选择多门课程，一门课程课被多名学生进行选修。 EE-R符号表示： 5.3 逻辑模式设计 (1) 该阶段会涉及到更多的概念，方法，理论。 (2) 主要任务： A与具体的数据库相关 B规范化处理，尽可能的消除关系操作过程中的异常情况。 CE-R图转换为如下的关系模式 电影（片名，出品年份，影片长度，影片类型，公司名称） 明星（姓名，联系地址，公司名称） 扮演（片名，出品年份，姓名，角色） 影片公司（公司名称，地址） 卡通片（片名，出品年份，设计平台） 5.4 数据库实施 (1) 创建数据库，定义数据库结构，组织数据入库，调试数据库并进行数据库的试运行。 5.5 数据库的运行和维护 (1) 数据库正式运行之后，对数据库运行过程中对其进行评价，调整，修改，调优等。 #6数据库设计遵循的原则 6.1 范式概念 概念：范式就是符合某一规范级别的关系模式的集合。共有7种范式： 1NF ⊃2NF⊃3NF⊃BCNF⊃4NF⊃5NF⊃6NF 6.1.1 第一范式（First Normal Form） 如果一个关系模式R的所有属性都是不可分割的基本数据项，则这个关系属于第一范式。 举例说明：(学生选课：学号，姓名，系别，系部地址，课程名称，课程成绩) Student(s_no,s_name,s_dept,s_location,s_course_name,s_grade) 注：1NF是关系模式应具备的最起码的条件，如果数据库设计不能满足第一范式，就不能称作是关系模式；关系数据库设计研究的关系规范化是在1NF基础之上进行的。 6.1.2 第二范式（Second Normal Form） 定义：若关系模式R属于第一范式，且每个非主属性都是完全函数依赖于主键，则R属于第二范式。 说明：从2NF的定义可以看出，从2NF开始讨论的是主键和非主属性之间的函数依赖关系，所以分析关系模式是属于2NF，首先指明关系模式的主键，然后在讨论非主属性和主键之间的函数依赖关系。 例如：选课关系模式 SC（s_no,c_no,score）中，主键为（s_no,c_no），而非主属性score与主键之间不存在部分函数依赖关系，所以关系模式SC属于2NF 6.1.3 第三范式（Third Normal Form） 定义：若关系模式R属于第一范式，且每个非主属性都不传递函数依赖于主键，则R属于第三范式。 说明：3NF说明的是非主属性和主键之间的函数依赖关系 例如：选课关系模式 SC（s_no,c_no,score）中,由于除了主键之外，只有一个非主属性score，所以score不可能构成与主键之间的传递函数依赖，所以SC属于3NF 6.1.4 BCNF（Boyce-Codd Normal Form） 定义：若关系模式R属于第一范式，且每个属性都不传递依赖于主键，则R属于BC范式。 说明：也就是说，在关系模式R中，凡是决定因素的属性或属性集包含键码，决定因素是函数依赖的左部属性集，比如X-&gt;Y，X称为决定因素。 由BC范式的定义可以得到以下的结论，一个满足BC范式的关系模式有： ​ 1所有非主属性对每一个候选码都是完全函数依赖 ​ 2所有的主属性对每一个不包含它的候选码都是完全函数依赖 ​ 3没有任何属性完全函数依赖于非候选码的任何一组属性 7 事务并发操作出现几种问题 ​ 所谓事务，是用户定义的一个数据库操作序列，是数据库环境中的逻辑工作单元，是一个不可分割的整体。 事务的这个4个特性简称为ACID特性，事务ACID特性可能遭到破坏的因素有： ①多个事务并发执行，不同事务的操作交叉执行； ②事务在运行过程中被强行终止。 如何保证在多个事务并发执行的过程中不发生上述的两种情况，是数据库管理系统并发控制的主要责任。 7.1 丢失修改数据 举例：银行卡有100元，事务A取10元，事务B取10元，事务AB两人同时取钱，初始值都是100 7.2 读“脏”数据 数据库技术中，如果正常提交的事务A使用了事务B未提交的撤销数据，这种数据成为“脏数据”，会造成数据的脏读和污读。 7.3 不一致分析 造成这种数据不一致的主要原因是并发执行的两个事务中，一个事务在读取数据时，另一个事务正在修改同一个数据。这样就可能导致两个事务的相互干扰及“读”事务的错误执行结果。 8 数据库并发的控制（了解部分） 8.1 并发调度的可串行化 可串行化准则：多个事务的并发执行时正确的，当且仅当其结果按某一次序串行执行它们时的结果相同，这种调度策略称为可串行化调度。可串行化是并发事务正确性的准则，一个给定的并发调度，当且仅当它是可串行化的，才认为是正确的。 8.2 封锁 封锁是实现并发控制的非常重要的技术。封锁是指某事务在对某数据对象进行操作以前，先请求系统对其加锁，成功加锁之后该事务就对该数据对象有了控制权，只有该事务对其进行解锁之后，其他的事务才能更新它，DBMS有两种锁： ① 排它锁（也称作X锁） ​ 如果事务T在对某个数据对象实施了X锁，那么其他的事务必须要等到T事务接触对该数据对象的X锁之后，才能对这个数据进行加锁。 ② 共享锁（也称作S锁） ​ 如果事务T在对某个数据对象实施了S锁，那么其他的事务也能对该数据对象实施S锁，但是对这个数据对象施加的所有S锁都接触之前不允许任何事务对该数据对象实施X锁。 8.3 死锁 封锁技术可以避免一些并发操作引起的不一致错误，但也会产生其他的一些问题，活锁和死锁。 ① 活锁 如果某个事务处在永远等待的状态，得不到封锁的机会，这种现象为活锁，避免这种锁最好的方法就是采用先来先服务的策略。 ② 死锁 两个或两个以上的事务都处于等待状态每个事务都在等待对方事务接触封锁，它才能继续执行下去，这样任何事务都处于等待状态而无法继续执行的现象称为死锁 解决死锁问题方法有两类： A 死锁的预防 B 死锁的诊断与预防","categories":[],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/tags/mysql/"}]},{"title":"数据库-基础","slug":"mysql/sql_数据库基础","date":"2019-01-14T02:16:28.000Z","updated":"2021-09-22T11:19:04.637Z","comments":true,"path":"2019/01/14/mysql/sql_数据库基础/","link":"","permalink":"http://example.com/2019/01/14/mysql/sql_%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/","excerpt":"","text":"1.1什么是数据库 ​ 数据库：保存数据的仓库。它体现我们电脑中，就是一个文件系统。然后把数据都保存这些特殊的文件中，并且需要使用固定的语言（SQL语言）去操作文件中的数据。 技术定义： ​ 数据库(Database)是按照数据结构来组织、[存储和管理数据的建立在计算机存储设备上的仓库。 1.2数据库介绍 ​ 我们开发应用程序的时候，程序中的所有数据，最后都需要保存到专业软件中。这些专业的保存数据的软件我们称为数据库。 我们学习数据库，并不是学习如何去开发一个数据库软件，我们学习的是如何使用数据库以及数据库中的数据记录的操作。而数据库软件是由第三方公司研发。 1.3数据库的分类 ​ 关系型、非关系型的数据库 常见的数据库软件： Oracle：它是Oracle公司的大型关系型数据库，它是收费的。 DB2：IBM公司的数据库，它是收费的。 SqlServer：微软数据库。收费 Sybase：Sybase公司的。 工具PowerDesign 数据库建模工具。 MySql：早期瑞典一个公司发明，后期被sun公司收购，后期被Oracle。 Java开发应用程序主要使用的数据库： MySQL（5.5）、Oracle、DB2。 1.4什么是关系型数据库 ​ 在开发软件的时候，软件中的数据之间必然会有一定的关系存在，需要把这些数据保存在数据库中，同时也要维护数据之间的关系，这时就可以直接使用上述的那些数据库。而上述的所有数据库都属于关系型数据库。 ​ 描述数据之间的关系，并保存在数据库中，同时学习如果根据这些关系查询数据库中的数据， 关系型数据：设计数据库的时候，需要使用E-R图来描述。实体关系 E-R：实体关系图。 ​ 实体：可以理解成我们Java程序中的一个对象。在E-R图中使用 矩形(长方形) 表示。 针对一个实体中的属性，我们称为这个实体的数据，在E-R图中使用 椭圆表示。 实体和实体之间的关系：在E-R图中使用菱形表示。 2、mysql在linux-安装篇 ##2.1、vmware中安装linux注意事项 2.1.1、记得关闭防火墙 12service iptables stopchkconfig iptables off（关闭开机自启：所谓的永久关闭防火墙） 2.1.2、创建统一的管理目录 123mkdir -p /exprot/softwaremkdir -p /export/servers 2.1.3软件环境 1VMware、crt、centos6.9 2.1.4安装环境 1234567891011121、VMware软件安装 2、构建虚拟机 3、需要配置Linux（ip,mac地址，hostname，防火墙），就可以通过crt这个客户端连接进行操作 4、在linux操作系统进行安装msyql-5.6 说明：因为在linux操作系统中，安装软件的方式主要有3种：1、源码安装（redis）2、rpm安装 3、yum在线安装（安装MySQL为例）---linux联网（） 2.2、centos6.9安装mysql 2.2.1、检查是否有自带的mysql 12[root@hadoop-01 servers]# rpm -qa |grep mysql mysql-libs-5.1.73-8.el6_8.x86_64 2.2.2、卸载自带的mysql 12[root@hadoop-01 servers]# rpm -e --nodeps mysql-libs-5.1.73-8.el6_8.x86_64[root@hadoop-01 servers]# 2.2.3、下载mysql安装包 2.2.4、上传安装包到linux服务器 12rz 上传文件到指定的目录（yum install lrzsz）/export/software/mysql 2.2.5、安装 1rpm -ivh *.rpm 2.2.6、查看初始化密码 12A RANDOM PASSWORD HAS BEEN SET FOR THE MySQL root USER !You will find that password in &#x27;/root/.mysql_secret&#x27;. 1234[root@mysql ~]# cat /root/.mysql_secret# The random password set for the root user at Wed Aug 8 22:19:00 2018 (local time): xQkcU3kbyuZby1_V[root@mysql ~]# 2.2.7、启动mysql并登录 12#启动mysqlservice mysql start 123#登录mysqlmysql -uroot -p(粘贴密码：xQkcU3kbyuZby1_V) 2.2.8、修改密码 1set PASSWORD=PASSWORD(&#x27;123456&#x27;); 2.2.9、退出mysql客户端 1mysql&gt;quit 2.2.10、用新密码进行登录 12mysql -uroot -p123456（新密码） 2.2.11、远程授权 12grant all privileges on *.* to &#x27;root&#x27; @&#x27;%&#x27; identified by &#x27;123456&#x27;; flush privileges; 2.2.12、验证远程授权是否成功 1通过windows的mysql客户端工具连接，是否能连接上，能连接上就授权成功，没有连接上，说明没有授权成功！ 3、mysql-基础操作篇 3.1、登录mysql 12mysql -uroot -p123456 3.2、退出mysql 1mysql&gt;quit 3.3、输入查询 查看当前mysql的版本号及当前时间 1SELECT VERSION(), CURRENT_DATE; 1234567mysql&gt; SELECT VERSION(), CURRENT_DATE;+-----------+--------------+| VERSION() | CURRENT_DATE |+-----------+--------------+| 5.6.25 | 2018-08-08 |+-----------+--------------+1 row in set (0.32 sec) mysql中sql语句不区分大小写 123mysql&gt; SELECT VERSION(), CURRENT_DATE;mysql&gt; select version(), current_date;mysql&gt; SeLeCt vErSiOn(), current_DATE; 12345678910111213141516171819202122232425mysql&gt; SELECT VERSION(), CURRENT_DATE;+-----------+--------------+| VERSION() | CURRENT_DATE |+-----------+--------------+| 5.6.25 | 2018-08-08 |+-----------+--------------+1 row in set (0.00 sec)mysql&gt; select version(), current_date;+-----------+--------------+| version() | current_date |+-----------+--------------+| 5.6.25 | 2018-08-08 |+-----------+--------------+1 row in set (0.00 sec)mysql&gt; SeLeCt vErSiOn(), current_DATE;+-----------+--------------+| vErSiOn() | current_DATE |+-----------+--------------+| 5.6.25 | 2018-08-08 |+-----------+--------------+1 row in set (0.00 sec)mysql&gt; 可以进行简单的计算（如下所示） 123456789mysql&gt;SELECT SIN(PI()/4), (4+1)*5;mysql&gt; SELECT SIN(PI()/4), (4+1)*5;+--------------------+---------+| SIN(PI()/4) | (4+1)*5 |+--------------------+---------+| 0.7071067811865475 | 25 |+--------------------+---------+1 row in set (0.34 sec) 多条语句比较短，可以写在一行 12345678910111213141516mysql&gt;SELECT VERSION(); SELECT NOW();mysql&gt; SELECT VERSION(); SELECT NOW();+-----------+| VERSION() |+-----------+| 5.6.25 |+-----------+1 row in set (0.00 sec)+---------------------+| NOW() |+---------------------+| 2018-08-08 23:11:11 |+---------------------+1 row in set (0.00 sec) 多个字段之间可以用逗号分隔，多行组成一条语句结束以分号结束 123456789mysql&gt; SELECT-&gt; USER()-&gt; ,-&gt; CURRENT_DATE;+---------------+--------------+| USER() | CURRENT_DATE |+---------------+--------------+| jon@localhost | 2010-08-06 |+---------------+--------------+ sql语句写了一半，又不想执行可以在语句末尾加上’\\c’ 1234mysql&gt; select -&gt; user() -&gt; \\cmysql&gt; ##3.4、创建和使用数据库 查看当前有哪些数据库 123456789101112mysql&gt;show databases;mysql&gt; show databases;+--------------------+| Database |+--------------------+| information_schema || mysql || performance_schema || test |+--------------------+4 rows in set (0.07 sec) 创建数据库 1mysql&gt; CREATE DATABASE menagerie; 使用及切换数据库 12mysql&gt; USE menagerieDatabase changed 3.5、创建表及使用 查看当前数据库有哪些表 1mysql&gt;show tables; 创建一个表 12mysql&gt; CREATE TABLE pet (name VARCHAR(20), owner VARCHAR(20), -&gt; species VARCHAR(20), sex CHAR(1), birth DATE, death DATE); 校验创建表语句是否和执行的一致 1234567891011121314mysql&gt;show create table pet;+-------+--------------------------------| Table | Create Table +-------+--------------------------------| pet | CREATE TABLE `pet` ( `name` varchar(20) DEFAULT NULL, `owner` varchar(20) DEFAULT NULL, `species` varchar(20) DEFAULT NULL, `sex` char(1) DEFAULT NULL, `birth` date DEFAULT NULL, `death` date DEFAULT NULL) ENGINE=InnoDB DEFAULT CHARSET=latin1 |+-------+-------------------------------- 查看表详情 1234567891011mysql&gt; desc pet;+---------+-------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+---------+-------------+------+-----+---------+-------+| name | varchar(20) | YES | | NULL | || owner | varchar(20) | YES | | NULL | || species | varchar(20) | YES | | NULL | || sex | char(1) | YES | | NULL | || birth | date | YES | | NULL | || death | date | YES | | NULL | |+---------+-------------+------+-----+---------+-------+ 准备数据 12345678Fluffy Harold cat f 1993-02-04Claws Gwen cat m 1994-03-17Buffy Harold dog f 1989-05-13Fang Benny dog m 1990-08-27Bowser Diane dog m 1979-08-31 1995-07-29Chirpy Gwen bird f 1998-09-11Whistler Gwen bird 1997-12-09Slim Benny snake m 1996-04-29 3.6、表中导入数据 ​ 在表中导入数据的方式有两种 第一种：将以上数据整理成SQL语句，insert into pet… 第二种：通过加载文件的方式将数据导入到表中 1、创建一个pet.txt的文件（注：每个字段中用tab键隔开，字段没有值得记录用\\N代替） 12345678Fluffy Harold cat f 1993-02-04Claws Gwen cat m 1994-03-17Buffy Harold dog f 1989-05-13Fang Benny dog m 1990-08-27Bowser Diane dog m 1979-08-31 1995-07-29Chirpy Gwen bird f 1998-09-11Whistler Gwen bird \\N 1997-12-09 \\NSlim Benny snake m 1996-04-29 2、加载数据 123mysql&gt; load data local infile &#x27;/root/data/pet.txt&#x27; into table pet;Query OK, 8 rows affected, 6 warnings (0.06 sec)Records: 8 Deleted: 0 Skipped: 0 Warnings: 6 3、校验是否加载进去 1234567891011121314mysql&gt; select *from pet;+----------+--------+---------+------+------------+------------+| name | owner | species | sex | birth | death |+----------+--------+---------+------+------------+------------+| Fluffy | Harold | cat | f | 1993-02-04 | NULL || Claws | Gwen | cat | m | 1994-03-17 | NULL || Buffy | Harold | dog | f | 1989-05-13 | NULL || Fang | Benny | dog | m | 1990-08-27 | NULL || Bowser | Diane | dog | m | 1979-08-31 | 1995-07-29 || Chirpy | Gwen | bird | f | 1998-09-11 | NULL || Whistler | Gwen | bird | NULL | 1997-12-09 | NULL || Slim | Benny | snake | m | 1996-04-29 | NULL |+----------+--------+---------+------+------------+------------+8 rows in set (0.01 sec) 3.7、数据检索部分 3.7.1、检索全部数据 1234567891011121314mysql&gt; select *from pet;+----------+--------+---------+------+------------+------------+| name | owner | species | sex | birth | death |+----------+--------+---------+------+------------+------------+| Fluffy | Harold | cat | f | 1993-02-04 | NULL || Claws | Gwen | cat | m | 1994-03-17 | NULL || Buffy | Harold | dog | f | 1989-05-13 | NULL || Fang | Benny | dog | m | 1990-08-27 | NULL || Bowser | Diane | dog | m | 1979-08-31 | 1995-07-29 || Chirpy | Gwen | bird | f | 1998-09-11 | NULL || Whistler | Gwen | bird | NULL | 1997-12-09 | NULL || Slim | Benny | snake | m | 1996-04-29 | NULL |+----------+--------+---------+------+------------+------------+8 rows in set (0.01 sec) 3.7.2、删除表中全部数据 12mysql&gt; DELETE FROM pet;mysql&gt; LOAD DATA LOCAL INFILE &#x27;/path/pet.txt&#x27; INTO TABLE pet; 3.7.3、更新表中特定记录的数据 更新表中名字为Bowser的生日 1mysql&gt; UPDATE pet SET birth = &#x27;1989-08-31&#x27; WHERE name = &#x27;Bowser&#x27;; 3.7.4、查询特定的行 查询名字为Bowser的记录 123456mysql&gt; SELECT * FROM pet WHERE name = &#x27;Bowser&#x27;;+--------+-------+---------+------+------------+------------+| name | owner | species | sex | birth | death |+--------+-------+---------+------+------------+------------+| Bowser | Diane | dog | m | 1989-08-31 | 1995-07-29 |+--------+-------+---------+------+------------+------------+ 说明：字符串比较不区分大小写！如下所示： 1234567891011121314151617181920212223mysql&gt; SELECT * FROM pet WHERE name = &#x27;Bowser&#x27;;+--------+-------+---------+------+------------+------------+| name | owner | species | sex | birth | death |+--------+-------+---------+------+------------+------------+| Bowser | Diane | dog | m | 1979-08-31 | 1995-07-29 |+--------+-------+---------+------+------------+------------+1 row in set (0.00 sec)mysql&gt; SELECT * FROM pet WHERE name = &#x27;BowsEr&#x27;;+--------+-------+---------+------+------------+------------+| name | owner | species | sex | birth | death |+--------+-------+---------+------+------------+------------+| Bowser | Diane | dog | m | 1979-08-31 | 1995-07-29 |+--------+-------+---------+------+------------+------------+1 row in set (0.00 sec)mysql&gt; SELECT * FROM pet WHERE name = &#x27;BOWSER&#x27;;+--------+-------+---------+------+------------+------------+| name | owner | species | sex | birth | death |+--------+-------+---------+------+------------+------------+| Bowser | Diane | dog | m | 1979-08-31 | 1995-07-29 |+--------+-------+---------+------+------------+------------+1 row in set (0.00 sec) 3.7.4.1、查找生日在1998年以后的特定查询 1234567mysql&gt; SELECT * FROM pet WHERE birth &gt;= &#x27;1998-1-1&#x27;;+----------+-------+---------+------+------------+-------+| name | owner | species | sex | birth | death |+----------+-------+---------+------+------------+-------+| Chirpy | Gwen | bird | f | 1998-09-11 | NULL || Puffball | Diane | hamster | f | 1999-03-30 | NULL |+----------+-------+---------+------+------------+-------+ 3.7.4.2、多条件查询（and | or） 123456mysql&gt; SELECT * FROM pet WHERE species = &#x27;dog&#x27; AND sex = &#x27;f&#x27;;+-------+--------+---------+------+------------+-------+| name | owner | species | sex | birth | death |+-------+--------+---------+------+------------+-------+| Buffy | Harold | dog | f | 1989-05-13 | NULL |+-------+--------+---------+------+------------+-------+ 12345678mysql&gt; SELECT * FROM pet WHERE species = &#x27;snake&#x27; OR species = &#x27;bird&#x27;;+----------+-------+---------+------+------------+-------+| name | owner | species | sex | birth | death |+----------+-------+---------+------+------------+-------+| Chirpy | Gwen | bird | f | 1998-09-11 | NULL || Whistler | Gwen | bird | NULL | 1997-12-09 | NULL || Slim | Benny | snake | m | 1996-04-29 | NULL |+----------+-------+---------+------+------------+-------+ 优先执行括号中的逻辑 12345678mysql&gt; SELECT * FROM pet WHERE (species = &#x27;cat&#x27; AND sex = &#x27;m&#x27;)-&gt; OR (species = &#x27;dog&#x27; AND sex = &#x27;f&#x27;);+-------+--------+---------+------+------------+-------+| name | owner | species | sex | birth | death |+-------+--------+---------+------+------------+-------+| Claws | Gwen | cat | m | 1994-03-17 | NULL || Buffy | Harold | dog | f | 1989-05-13 | NULL |+-------+--------+---------+------+------------+-------+ 3.7.5、检索特定的列 1234567891011121314mysql&gt; SELECT name, birth FROM pet;+----------+------------+| name | birth |+----------+------------+| Fluffy | 1993-02-04 || Claws | 1994-03-17 || Buffy | 1989-05-13 || Fang | 1990-08-27 || Bowser | 1989-08-31 || Chirpy | 1998-09-11 || Whistler | 1997-12-09 || Slim | 1996-04-29 || Puffball | 1999-03-30 |+----------+------------+ 查询不重复的字段要使用关键词DISTINCT 123456789mysql&gt; SELECT DISTINCT owner FROM pet;+--------+| owner |+--------+| Benny || Diane || Gwen || Harold |+--------+ 可以使用组合条件查询特定的列 1234567891011mysql&gt; SELECT name, species, birth FROM pet-&gt; WHERE species = &#x27;dog&#x27; OR species = &#x27;cat&#x27;;+--------+---------+------------+| name | species | birth |+--------+---------+------------+| Fluffy | cat | 1993-02-04 || Claws | cat | 1994-03-17 || Buffy | dog | 1989-05-13 || Fang | dog | 1990-08-27 || Bowser | dog | 1989-08-31 |+--------+---------+------------+ 3.7.6、排序 根据某个字段进行排序（关键词：ORDER BY ） 1234567891011121314mysql&gt; SELECT name, birth FROM pet ORDER BY birth;+----------+------------+| name | birth |+----------+------------+| Buffy | 1989-05-13 || Bowser | 1989-08-31 || Fang | 1990-08-27 || Fluffy | 1993-02-04 || Claws | 1994-03-17 || Slim | 1996-04-29 || Whistler | 1997-12-09 || Chirpy | 1998-09-11 || Puffball | 1999-03-30 |+----------+------------+ 升降序排列（desc：降序；asc：升序） 12mysql&gt; SELECT name, birth FROM pet ORDER BY birth desc;//降序排列mysql&gt; SELECT name, birth FROM pet ORDER BY birth asc ;//升序排列 多列排序 根据species字段升序排列，根据birth字段降序排列 注： ORDER BY species 中无asc，desc，默认为升序排列 123456789101112131415mysql&gt; SELECT name, species, birth FROM pet-&gt; ORDER BY species, birth DESC;+----------+---------+------------+| name | species | birth |+----------+---------+------------+| Chirpy | bird | 1998-09-11 || Whistler | bird | 1997-12-09 || Claws | cat | 1994-03-17 || Fluffy | cat | 1993-02-04 || Fang | dog | 1990-08-27 || Bowser | dog | 1989-08-31 || Buffy | dog | 1989-05-13 || Puffball | hamster | 1999-03-30 || Slim | snake | 1996-04-29 |+----------+---------+------------+ 3.7.7、日期计算 查看宠物多少岁，就可以使用计算日期的函数TIMESTAMPDIFF() 12345678910111213141516171819202122232425262728293031#查询当前的日期mysql&gt; select curdate() from pet;+------------+| curdate() |+------------+| 2018-08-09 |+------------+#获取当年的年mysql&gt; select YEAR(&#x27;2018-02-05&#x27;) AS YEARS from pet;+-------+| YEARS |+-------+| 2018 |+-------+#获取当年的月mysql&gt; select month(&#x27;2018-02-05&#x27;) AS YEARS from pet; +-------+| YEARS |+-------+| 2 |+-------+#获取当年的日mysql&gt; select day(&#x27;2018-02-05&#x27;) AS YEARS from pet; +-------+| YEARS |+-------+| 5 |+-------+ 123mysql&gt; SELECT name, birth, CURDATE(),-&gt; TIMESTAMPDIFF(YEAR,birth,CURDATE()) AS age-&gt; FROM pet; 3.7.8、null和not null值 对一些字段类型要进行检查，判断某些字段是否为NULL，或者 non-NULL 12345678mysql&gt; SELECT name, birth, death,-&gt; TIMESTAMPDIFF(YEAR,birth,death) AS age-&gt; FROM pet WHERE death IS NOT NULL ORDER BY age;+--------+------------+------------+------+| name | birth | death | age |+--------+------------+------------+------+| Bowser | 1989-08-31 | 1995-07-29 | 5 |+--------+------------+------------+------+ 4、实例 以下是如何解决MySQL的一些常见问题的示例。 4.1、首先创建一个表，并且导入数据 12345678910CREATE TABLE shop (article INT(4) UNSIGNED ZEROFILL DEFAULT &#x27;0000&#x27; NOT NULL,dealer CHAR(20) DEFAULT &#x27;&#x27; NOT NULL,price DOUBLE(16,2) DEFAULT &#x27;0.00&#x27; NOT NULL,PRIMARY KEY(article, dealer));INSERT INTO shop VALUES(1,&#x27;A&#x27;,3.45),(1,&#x27;B&#x27;,3.99),(2,&#x27;A&#x27;,10.99),(3,&#x27;B&#x27;,1.45),(3,&#x27;C&#x27;,1.69),(3,&#x27;D&#x27;,1.25),(4,&#x27;D&#x27;,19.95); 4.2、检索表中的全部数据 12345678910111213select * from shop;+---------+--------+-------+| article | dealer | price |+---------+--------+-------+| 0001 | A | 3.45 || 0001 | B | 3.99 || 0002 | A | 10.99 || 0003 | B | 1.45 || 0003 | C | 1.69 || 0003 | D | 1.25 || 0004 | D | 19.95 |+---------+--------+-------+ 4.3、求某一列的最大值或者 最小值 12345678910111213141516SELECT MAX(article) AS article FROM shop;+---------+| article |+---------+| 4 |+---------+//求某一列的最小值 select min(price) as article from shop; +---------+| article |+---------+| 1.25 |+---------+ ##4.4、过滤出某个字段值最大的整条记录数据-涉及到子查询 123456789SELECT article, dealer, priceFROM shopWHERE price=(SELECT MAX(price) FROM shop);+---------+--------+-------+| article | dealer | price |+---------+--------+-------+| 0004 | D | 19.95 |+---------+--------+-------+ 4.4、也可以通过关联查询来进行检索 123456789SELECT s1.article, s1.dealer, s1.priceFROM shop s1LEFT JOIN shop s2 ON s1.price &lt; s2.priceWHERE s2.article IS NULL;SELECT article, dealer, priceFROM shopORDER BY price DESCLIMIT 1; 4.5、求出每一列的最大值，并且根据某一个字段进行分组–分组topn求法 123456789101112SELECT article, MAX(price) AS priceFROM shopGROUP BY article;+---------+-------+| article | price |+---------+-------+| 0001 | 3.99 || 0002 | 10.99 || 0003 | 1.69 || 0004 | 19.95 |+---------+-------+ 4.5的另一种写法 1234567891011121314SELECT article, dealer, priceFROM shop s1WHERE price=(SELECT MAX(s2.price)FROM shop s2WHERE s1.article = s2.article);+---------+--------+-------+| article | dealer | price |+---------+--------+-------+| 0001 | B | 3.99 || 0002 | A | 10.99 || 0003 | C | 1.69 || 0004 | D | 19.95 |+---------+--------+-------+ 5、SQL中的聚合函数 ​ SQL语言中定义了部分的函数，可以帮助我们完成对查询结果的计算操作： 1.count 统计个数（行数） 2.sum函数：求和 3.avg函数：求平均值 4.max、min 求最大值和最小值 5.1、count函数 语法：select count(*)|count(列名) from表名 注意： count在根据指定的列统计的时候，如果这一列中有null 不会被统计在其中。 1234567891011121314151617181920212223242526272829303132333435363738mysql&gt; select * from pet;+----------+--------+---------+------+------------+------------+| name | owner | species | sex | birth | death |+----------+--------+---------+------+------------+------------+| Fluffy | Harold | cat | f | 1993-02-04 | NULL || Claws | Gwen | cat | m | 1994-03-17 | NULL || Buffy | Harold | dog | f | 1989-05-13 | NULL || Fang | Benny | dog | m | 1990-08-27 | NULL || Bowser | Diane | dog | m | 1989-08-31 | 1995-07-29 || Chirpy | Gwen | bird | f | 1998-09-11 | NULL || Whistler | Gwen | bird | NULL | 1997-12-09 | NULL || Slim | Benny | snake | m | 1996-04-29 | NULL |+----------+--------+---------+------+------------+------------+8 rows in set (0.00 sec)mysql&gt; select count(sex) from pet; +------------+| count(sex) |+------------+| 7 |+------------+1 row in set (0.00 sec)mysql&gt; select count(owner) from pet; +--------------+| count(owner) |+--------------+| 8 |+--------------+1 row in set (0.00 sec)mysql&gt; select count(death) from pet; +--------------+| count(death) |+--------------+| 1 |+--------------+ 5.2、sum函数 **语法：select sum(**列名) from 表名; 注意事项： 1、如果使用sum 多列进行求和的时候，如果某一列中的有null，这一列所在的行中的其他数据不会被加到总和。 2、可以使用mysql 数据库提供的函数 ifnull(列名,值) 3、在数据库中定义double类型数据，是一个近似值，需要确定准确的位数，这时可以把这一列设计成numeric类型。numeric(数据的总列数,小数位数) numericdouble float 123456mysql&gt; select sum(price) from shop; +------------+| sum(price) |+------------+| 42.77 |+------------+ 5.3、avg函数 语法：select avg(列名) from 表名; 123456mysql&gt; select avg(price) from shop; +------------+| avg(price) |+------------+| 6.110000 |+------------+ 5.4、max函数 语法：select max(列名) from 表名; 123456mysql&gt; select max(price) from shop; +------------+| max(price) |+------------+| 19.95 |+------------+ 5.5、min函数 语法：select min(列名) from 表名; 123456mysql&gt; select min(price) from shop; +------------+| min(price) |+------------+| 1.25 |+------------+ 6、SQL分类 6.1、DDL （数据定义问题） 数据定义语言 - Data Definition Language 用来定义数据库的对象，如数据表、视图、索引等 1234创建数据库：create database test;创建视图：create view test;创建索引：create index test;创建表：create table test1; 6.2、DML （数据操纵问题） 数据处理语言 - Data Manipulation Language 在数据库表中更新，增加和删除记录 如 update， insert， delete 12345update tableName set age=&#x27;18&#x27; where name=&#x27;lisi&#x27;insert into tableName value(&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;);drop table tableName //删除表操作 6.3、DCL （数据控制问题） 数据控制语言 – Data Control Language 指用于设置用户权限和控制事务语句 如grant，revoke，if…else，while，begintransaction 6.4、DQL （数据查询问题） 数据查询语言 – Data Query Language select 6.5、小结 123456781、创建数据库：create database test1;2、使用数据库：use test1;3、查看当前数据库中的所有表：show tables ;4、查看所有的数据库：show databases;5、删除数据库：drop database test1;6、删除数据库中的表：drop table t1; 7、数据库的备份与恢复 7.1、备份命令 ​ 在mysql的安装目录的bin目录下有mysqldump命令，可以完成对数据库的备份。 语法：mysqldump -u 用户名 -p 数据库名&gt; 磁盘SQL文件路径 由于mysqldump命令不是sql命令，需要在dos窗口下使用。 ​ 注意：在备份数据的时候，数据库不会被删除。可以手动删除数据库。同时在恢复数据的时候，不会 自动的给我们创建数据库，仅仅只会恢复数据库中的表和表中的数据。 1234mysqldump -uroot -p123456 menagerie &gt;/root/data/menagerie.sql//备份的文件-rw-r--r--. 1 root root 3118 Oct 20 04:04 menagerie.sql 7.2、恢复命令 恢复数据库，需要手动的先创建数据库： create database heima2; 语法：mysql -u 用户名-p 导入库名&lt; 硬盘SQL文件绝对路径 需求： ​ 1、创建heima8数据库。 ​ 2、重新开启一个新的dos窗口。 ​ 3、将mydb2备份的数据表和表数据 恢复到mydb6中。 1234//恢复命令mysql -uroot -p123456 test1&lt;/root/data/menagerie.sql//恢复校验 8、多表查询 8.1、笛卡尔积介绍 ​ 笛卡尔乘积是指在数学中，两个集合X和Y的笛卡尓积（Cartesian product），又称直积，表示为X × Y，第一个对象是X的成员而第二个对象是Y的所有可能有序对的其中一个成员 准备数据： 12345678910111213141516create table A( A_ID int primary key auto_increment, A_NAME varchar(20) not null);insert into A values(1,&#x27;apple&#x27;);insert into A values(2,&#x27;orange&#x27;);insert into A values(3,&#x27;banana&#x27;);create table B( A_ID int primary key auto_increment, B_PRICE double);insert into B values(1,2.30);insert into B values(2,3.50);insert into B values(4,null); 展示效果： 1234567891011121314mysql&gt; select * from A,B;+------+--------+------+---------+| A_ID | A_NAME | A_ID | B_PRICE |+------+--------+------+---------+| 1 | apple | 1 | 2.3 || 2 | orange | 1 | 2.3 || 3 | banana | 1 | 2.3 || 1 | apple | 2 | 3.5 || 2 | orange | 2 | 3.5 || 3 | banana | 2 | 3.5 || 1 | apple | 4 | NULL || 2 | orange | 4 | NULL || 3 | banana | 4 | NULL |+------+--------+------+---------+ 作用：笛卡尔积的数据，对程序是没有意义的，我们需要对笛卡尔积中的数据再次进行过滤。 对于多表查询操作，需要过滤出满足条件的数据，需要把多个表进行连接，连接之后需要加上过滤的条件。 12345678910111213141516mysql&gt; select * from A,B where B.A_ID=1;+------+--------+------+---------+| A_ID | A_NAME | A_ID | B_PRICE |+------+--------+------+---------+| 1 | apple | 1 | 2.3 || 2 | orange | 1 | 2.3 || 3 | banana | 1 | 2.3 |+------+--------+------+---------+3 rows in set (0.00 sec)mysql&gt; select * from A,B where B.A_ID=1 and A.A_ID=1;+------+--------+------+---------+| A_ID | A_NAME | A_ID | B_PRICE |+------+--------+------+---------+| 1 | apple | 1 | 2.3 |+------+--------+------+---------+ 8.2、内连接 内连接： 语法一： select 列名 , 列名 … from 表名1,表名2 where 表名1.列名 = 表名2.列名; 语法二： select * from 表名1 inner join 表名2 on 条件 1234567mysql&gt; select * from A inner join B on A.A_ID=B.A_ID;+------+--------+------+---------+| A_ID | A_NAME | A_ID | B_PRICE |+------+--------+------+---------+| 1 | apple | 1 | 2.3 || 2 | orange | 2 | 3.5 |+------+--------+------+---------+ 8.3、左外连接 外链接：左外连接、右外连接、全连接、自连接。 左外连接：用左边表去右边表中查询对应记录，不管是否找到，都将显示左边表中全部记录。 即：虽然右表没有香蕉对应的价格，也要把他查询出来。 语法：select * from 表1 left outer join 表2 on 条件; 12345678mysql&gt; select * from A left join B on A.A_ID=B.A_ID;+------+--------+------+---------+| A_ID | A_NAME | A_ID | B_PRICE |+------+--------+------+---------+| 1 | apple | 1 | 2.3 || 2 | orange | 2 | 3.5 || 3 | banana | NULL | NULL |+------+--------+------+---------+ 8.4、右外连接 用右边表去左边表查询对应记录，不管是否找到，右边表全部记录都将显示。 即：不管左方能够找到右方价格对应的水果，都要把左方的价格显示出来。 语法：select * from 表1 right outer join 表2 on 条件; 12345678mysql&gt; select * from A right join B on A.A_ID=B.A_ID; +------+--------+------+---------+| A_ID | A_NAME | A_ID | B_PRICE |+------+--------+------+---------+| 1 | apple | 1 | 2.3 || 2 | orange | 2 | 3.5 || NULL | NULL | 4 | NULL |+------+--------+------+---------+ 8.5、全外连接 全外连接：左外连接和右外连接的结果合并，单会去掉重复的记录。 select * from 表1 full outer join 表2 on 条件 select * from a full outer join b on a.A_ID = b.A_ID; 但是mysql数据库不支持此语法。 ## 8.6、关联子查询 子查询：把一个sql的查询结果作为另外一个查询的参数存在。 8.6.1、in和exist关键词的用法 关联子查询其他的关键字使用： 回忆：age=23 or age=24 等价于 age in (23,24) in 表示条件应该是在多个列值中。 in：使用在where后面，经常表示是一个列表中的数据，只要被查询的数据在这个列表中存在即可。 123456789101112131415161718192021222324252627282930mysql&gt; select * from A where A_ID in(1,2,3);+------+--------+| A_ID | A_NAME |+------+--------+| 1 | apple || 2 | orange || 3 | banana |+------+--------+3 rows in set (0.00 sec)mysql&gt; select * from A where A_ID =1 or A_ID =2 or A_ID =3;+------+--------+| A_ID | A_NAME |+------+--------+| 1 | apple || 2 | orange || 3 | banana |+------+--------+//not inmysql&gt; select * from A where A_ID not in (1,2,3,4);Empty set (0.00 sec)mysql&gt; select * from A where A_ID not in (3,4); +------+--------+| A_ID | A_NAME |+------+--------+| 1 | apple || 2 | orange |+------+--------+2 rows in set (0.00 sec) exists： exists：表示存在，当子查询的结果存在，就会显示主查询中的所有数据。 使用exists完成： 1234567891011mysql&gt; select * from A where exists(select A_ID from B);+------+--------+| A_ID | A_NAME |+------+--------+| 1 | apple || 2 | orange || 3 | banana |+------+--------+mysql&gt; select * from A where not exists(select A_ID from B);Empty set (0.00 sec) 8.6.2、union 和union all使用法 UNION 语句：用于将不同表中相同列中查询的数据展示出来；（不包括重复数据） UNION ALL 语句：用于将不同表中相同列中查询的数据展示出来；（包括重复数据） 123456789101112131415161718192021222324mysql&gt; select * from A union select * from B; +------+--------+| A_ID | A_NAME |+------+--------+| 1 | apple || 2 | orange || 3 | banana || 1 | 2.3 || 2 | 3.5 || 4 | NULL |+------+--------+6 rows in set (0.00 sec)mysql&gt; select * from A union all select * from B;+------+--------+| A_ID | A_NAME |+------+--------+| 1 | apple || 2 | orange || 3 | banana || 1 | 2.3 || 2 | 3.5 || 4 | NULL |+------+--------+ 8.6.3、case when 语句 case when 语句语法结构： 1234CASE sex WHEN &#x27;1&#x27; THEN &#x27;男&#x27; WHEN &#x27;2&#x27; THEN &#x27;女&#x27; ELSE &#x27;其他&#x27; END 准备数据 123456789101112131415161718192021//创建表create table employee(empid int , deptid int , sex varchar(20) , salary double );//加载数据1 10 female 5500.02 10 male 4500.03 20 female 1900.04 20 male 4800.05 40 female 6500.06 40 female 14500.07 40 male 44500.08 50 male 6500.09 50 male 7500.0load data local infile &#x27;/root/data/emp.txt&#x27; into table employee ; 1234567891011select *,case when salary &lt; 5000 then &quot;低等收入&quot; when salary&gt;= 5000 and salary &lt; 10000 then &quot;中等收入&quot;when salary &gt; 10000 then &quot;高等收入&quot; end as level,case sexwhen &quot;female&quot; then 1 when &quot;male&quot; then 0end as flag from employee; 9、MySQL 数据类型 MySQL中定义数据字段的类型对你数据库的优化是非常重要的。 MySQL支持多种类型，大致可以分为三类：数值、日期/时间和字符串(字符)类型。 9.1、数值类型 MySQL支持所有标准SQL数值数据类型。 这些类型包括严格数值数据类型(INTEGER、SMALLINT、DECIMAL和NUMERIC)，以及近似数值数据类型(FLOAT、REAL和DOUBLE PRECISION)。 关键字INT是INTEGER的同义词，关键字DEC是DECIMAL的同义词。 BIT数据类型保存位字段值，并且支持MyISAM、MEMORY、InnoDB和BDB表。 作为SQL标准的扩展，MySQL也支持整数类型TINYINT、MEDIUMINT和BIGINT。下面的表显示了需要的每个整数类型的存储和范围。 类型 大小 范围（有符号） 范围（无符号） 用途 TINYINT 1 字节 (-128，127) (0，255) 小整数值 SMALLINT 2 字节 (-32 768，32 767) (0，65 535) 大整数值 MEDIUMINT 3 字节 (-8 388 608，8 388 607) (0，16 777 215) 大整数值 INT或INTEGER 4 字节 (-2 147 483 648，2 147 483 647) (0，4 294 967 295) 大整数值 BIGINT 8 字节 (-9 233 372 036 854 775 808，9 223 372 036 854 775 807) (0，18 446 744 073 709 551 615) 极大整数值 FLOAT 4 字节 (-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38) 0，(1.175 494 351 E-38，3.402 823 466 E+38) 单精度浮点数值 DOUBLE 8 字节 (-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308) 0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308) 双精度浮点数值 DECIMAL 对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2 依赖于M和D的值 依赖于M和D的值 小数值 9.2、日期和时间类型 表示时间值的日期和时间类型为DATETIME、DATE、TIMESTAMP、TIME和YEAR。 每个时间类型有一个有效值范围和一个&quot;零&quot;值，当指定不合法的MySQL不能表示的值时使用&quot;零&quot;值。 TIMESTAMP类型有专有的自动更新特性，将在后面描述。 类型 大小(字节) 范围 格式 用途 DATE 3 1000-01-01/9999-12-31 YYYY-MM-DD 日期值 TIME 3 ‘-838:59:59’/‘838:59:59’ HH:MM:SS 时间值或持续时间 YEAR 1 1901/2155 YYYY 年份值 DATETIME 8 1000-01-01 00:00:00/9999-12-31 23:59:59 YYYY-MM-DD HH:MM:SS 混合日期和时间值 TIMESTAMP 4 1970-01-01 00:00:00/2038结束时间是第 2147483647 秒，北京时间 2038-1-19 11:14:07，格林尼治时间 2038年1月19日 凌晨 03:14:07 YYYYMMDD HHMMSS 混合日期和时间值，时间戳 9.3、字符串类型 字符串类型指CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM和SET。该节描述了这些类型如何工作以及如何在查询中使用这些类型。 类型 大小 用途 CHAR 0-255字节 定长字符串 VARCHAR 0-65535 字节 变长字符串 TINYBLOB 0-255字节 不超过 255 个字符的二进制字符串 TINYTEXT 0-255字节 短文本字符串 BLOB 0-65 535字节 二进制形式的长文本数据 TEXT 0-65 535字节 长文本数据 MEDIUMBLOB 0-16 777 215字节 二进制形式的中等长度文本数据 MEDIUMTEXT 0-16 777 215字节 中等长度文本数据 LONGBLOB 0-4 294 967 295字节 二进制形式的极大文本数据 LONGTEXT 0-4 294 967 295字节 极大文本数据 CHAR 和 VARCHAR 类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。 BINARY 和 VARBINARY 类似于 CHAR 和 VARCHAR，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。 BLOB 是一个二进制大对象，可以容纳可变数量的数据。有 4 种 BLOB 类型：TINYBLOB、BLOB、MEDIUMBLOB 和 LONGBLOB。它们区别在于可容纳存储范围不同。 有 4 种 TEXT 类型：TINYTEXT、TEXT、MEDIUMTEXT 和 LONGTEXT。对应的这 4 种 BLOB 类型，可存储的最大长度不同，可根据实际情况选择。 MySQL 5.0 以上的版本： 1、一个汉字占多少长度与编码有关： UTF－8：一个汉字＝3个字节 GBK：一个汉字＝2个字节 2、varchar(n) 表示 n 个字符，无论汉字和英文，Mysql 都能存入 n 个字符，仅是实际字节长度有所区别 3、MySQL 检查长度，可用 SQL 语言来查看： 1select LENGTH(fieldname) from tablename 1、整型 MySQL数据类型 含义（有符号） tinyint(m) 1个字节 范围(-128~127) smallint(m) 2个字节 范围(-32768~32767) mediumint(m) 3个字节 范围(-8388608~8388607) int(m) 4个字节 范围(-2147483648~2147483647) bigint(m) 8个字节 范围(±9.22*10的18次方) 取值范围如果加了 unsigned，则最大值翻倍，如 tinyint unsigned 的取值范围为(0~256)。 int(m) 里的 m 是表示 SELECT 查询结果集中的显示宽度，并不影响实际的取值范围，没有影响到显示的宽度，不知道这个 m 有什么用。 2、浮点型(float 和 double) MySQL数据类型 含义 float(m,d) 单精度浮点型 8位精度(4字节) m总个数，d小数位 double(m,d) 双精度浮点型 16位精度(8字节) m总个数，d小数位 设一个字段定义为 float(5,3)，如果插入一个数 123.45678,实际数据库里存的是 123.457，但总个数还以实际为准，即 6 位。 3、定点数 浮点型在数据库中存放的是近似值，而定点类型在数据库中存放的是精确值。 decimal(m,d) 参数 m&lt;65 是总个数，d&lt;30 且 d&lt;m 是小数位。 4、字符串(char,varchar,_text) MySQL数据类型 含义 char(n) 固定长度，最多255个字符 varchar(n) 固定长度，最多65535个字符 tinytext 可变长度，最多255个字符 text 可变长度，最多65535个字符 mediumtext 可变长度，最多2的24次方-1个字符 longtext 可变长度，最多2的32次方-1个字符 char 和 varchar： ** 1.char(n) 若存入字符数小于n，则以空格补于其后，查询之时再将空格去掉。所以 char 类型存储的字符串末尾不能有空格，varchar 不限于此。 ** 2.char(n) 固定长度，char(4) 不管是存入几个字符，都将占用 4 个字节，varchar 是存入的实际字符数 +1 个字节（n&lt;=255）或2个字节(n&gt;255)，所以 varchar(4),存入 3 个字符将占用 4 个字节。 ** 3.char 类型的字符串检索速度要比 varchar 类型的快。 varchar 和 text： ** 1.varchar 可指定 n，text 不能指定，内部存储 varchar 是存入的实际字符数 +1 个字节（n&lt;=255）或 2 个字节(n&gt;255)，text 是实际字符数 +2 个字节。 ** 2.text 类型不能有默认值。 ** 3.varchar 可直接创建索引，text 创建索引要指定前多少个字符。varchar 查询速度快于 text, 在都创建索引的情况下，text 的索引似乎不起作用。 5.二进制数据(_Blob) ** 1._BLOB和_text存储方式不同，_TEXT以文本方式存储，英文存储区分大小写，而_Blob是以二进制方式存储，不分大小写。 ** 2._BLOB存储的数据只能整体读出。 ** 3._TEXT可以指定字符集，_BLOB不用指定字符集。 6.日期时间类型 MySQL数据类型 含义 date 日期 ‘2008-12-2’ time 时间 ‘12:25:36’ datetime 日期时间 ‘2008-12-2 22:06:44’ timestamp 自动存储记录修改时间 若定义一个字段为timestamp，这个字段里的时间数据会随其他字段修改的时候自动刷新，所以这个数据类型的字段可以存放这条记录最后被修改的时间。 数据类型的属性 MySQL关键字 含义 NULL 数据列可包含NULL值 NOT NULL 数据列不允许包含NULL值 DEFAULT 默认值 PRIMARY KEY 主键 AUTO_INCREMENT 自动递增，适用于整数类型 UNSIGNED 无符号 CHARACTER SET name 指定一个字符集 10、MySQL GROUP BY 语句 GROUP BY 语句根据一个或多个列对结果集进行分组。 在分组的列上我们可以使用 COUNT, SUM, AVG,等函数。 语法结构： 1234SELECT column_name, function(column_name)FROM table_nameWHERE column_name operator valueGROUP BY column_name; 准备数据： 1234567891011CREATE TABLE `employee_tbl` ( `id` int(11) NOT NULL, `name` char(10) NOT NULL DEFAULT &#x27;&#x27;, `date` datetime NOT NULL, `singin` tinyint(4) NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;登录次数&#x27;, PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8;-- ----------------------------INSERT INTO `employee_tbl` VALUES (&#x27;1&#x27;, &#x27;小明&#x27;, &#x27;2016-04-22 15:25:33&#x27;, &#x27;1&#x27;), (&#x27;2&#x27;, &#x27;小王&#x27;, &#x27;2016-04-20 15:25:47&#x27;, &#x27;3&#x27;), (&#x27;3&#x27;, &#x27;小丽&#x27;, &#x27;2016-04-19 15:26:02&#x27;, &#x27;2&#x27;), (&#x27;4&#x27;, &#x27;小王&#x27;, &#x27;2016-04-07 15:26:14&#x27;, &#x27;4&#x27;), (&#x27;5&#x27;, &#x27;小明&#x27;, &#x27;2016-04-11 15:26:40&#x27;, &#x27;4&#x27;), (&#x27;6&#x27;, &#x27;小明&#x27;, &#x27;2016-04-04 15:26:54&#x27;, &#x27;2&#x27;); 123456789101112131415161718192021222324252627282930mysql&gt; SELECT name, COUNT(*) FROM employee_tbl GROUP BY name;+--------+----------+| name | COUNT(*) |+--------+----------+| 小丽 | 1 || 小明 | 3 || 小王 | 2 |+--------+----------+mysql&gt; select * from employee_tbl;+----+------+---------------------+--------+| id | name | date | singin |+----+------+---------------------+--------+| 1 | ?? | 2016-04-22 15:25:33 | 1 || 2 | ?? | 2016-04-20 15:25:47 | 3 || 3 | ?? | 2016-04-19 15:26:02 | 2 || 4 | ?? | 2016-04-07 15:26:14 | 4 || 5 | ?? | 2016-04-11 15:26:40 | 4 || 6 | ?? | 2016-04-04 15:26:54 | 2 |+----+------+---------------------+--------+mysql&gt; select * from employee_tbl group by singin;+----+------+---------------------+--------+| id | name | date | singin |+----+------+---------------------+--------+| 1 | ?? | 2016-04-22 15:25:33 | 1 || 3 | ?? | 2016-04-19 15:26:02 | 2 || 2 | ?? | 2016-04-20 15:25:47 | 3 || 4 | ?? | 2016-04-07 15:26:14 | 4 |+----+------+---------------------+--------+ 注意： 1、group by 可以实现一个最简单的去重查询，假设想看下有哪些员工，除了用 distinct,还可以用： 1SELECT name FROM employee_tbl GROUP BY name; 返回的结果集就是所有员工的名字。 2、分组后的条件使用 HAVING 来限定，WHERE 是对原始数据进行条件限制。几个关键字的使用顺序为 where 、group by 、having、order by ，例如： 1SELECT name ,sum(*) FROM employee_tbl WHERE id&lt;&gt;1 GROUP BY name HAVING sum(*)&gt;5 ORDER BY sum(*) DESC; 11、MySQL LIKE 子句 我们知道在 MySQL 中使用 SQL SELECT 命令来读取数据， 同时我们可以在 SELECT 语句中使用 WHERE 子句来获取指定的记录。 WHERE 子句中可以使用等号 = 来设定获取数据的条件，如 “company = 'test1”。 但是有时候我们需要获取 company 字段含有 “it” 字符的所有记录，这时我们就需要在 WHERE 子句中使用 SQL LIKE 子句。 SQL LIKE 子句中使用百分号 %字符来表示任意字符，类似于UNIX或正则表达式中的星号 *。 如果没有使用百分号 %, LIKE 子句与等号 = 的效果是一样的。 语法： 以下是 SQL SELECT 语句使用 LIKE 子句从数据表中读取数据的通用语法： 123SELECT field1, field2,...fieldN FROM table_nameWHERE field1 LIKE condition1 [AND [OR]] filed2 = &#x27;somevalue&#x27; 你可以在 WHERE 子句中指定任何条件。 你可以在 WHERE 子句中使用LIKE子句。 你可以使用LIKE子句代替等号 =。 LIKE 通常与 % 一同使用，类似于一个元字符的搜索。 你可以使用 AND 或者 OR 指定一个或多个条件。 你可以在 DELETE 或 UPDATE 命令中使用 WHERE…LIKE 子句来指定条件。 12345678910mysql&gt; select * from pet where species like &#x27;%d%&#x27;;+----------+--------+---------+------+------------+------------+| name | owner | species | sex | birth | death |+----------+--------+---------+------+------------+------------+| Buffy | Harold | dog | f | 1989-05-13 | NULL || Fang | Benny | dog | m | 1990-08-27 | NULL || Bowser | Diane | dog | m | 1989-08-31 | 1995-07-29 || Chirpy | Gwen | bird | f | 1998-09-11 | NULL || Whistler | Gwen | bird | NULL | 1997-12-09 | NULL |+----------+--------+---------+------+------------+------------+ 12、MySQL NULL 值处理 我们已经知道 MySQL 使用 SQL SELECT 命令及 WHERE 子句来读取数据表中的数据,但是当提供的查询条件字段为 NULL 时，该命令可能就无法正常工作。 为了处理这种情况，MySQL提供了三大运算符: IS NULL: 当列的值是 NULL,此运算符返回 true。 IS NOT NULL: 当列的值不为 NULL, 运算符返回 true。 &lt;=&gt;: 比较操作符（不同于=运算符），当比较的的两个值为 NULL 时返回 true。 关于 NULL 的条件比较运算是比较特殊的。你不能使用 = NULL 或 != NULL 在列中查找 NULL 值 。 在 MySQL 中，NULL 值与任何其它值的比较（即使是 NULL）永远返回 false，即 NULL = NULL 返回false 。 MySQL 中处理 NULL 使用 IS NULL 和 IS NOT NULL 运算符。 13、MySQL 元数据 你可能想知道MySQL以下三种信息： 查询结果信息： SELECT, UPDATE 或 DELETE语句影响的记录数。 数据库和数据表的信息： 包含了数据库及数据表的结构信息。 MySQL服务器信息： 包含了数据库服务器的当前状态，版本号等。 在MySQL的命令提示符中，我们可以很容易的获取以上服务器信息。 获取服务器元数据 以下命令语句可以在 MySQL 的命令提示符使用，也可以在脚本中 使用，如PHP脚本。 命令 描述 SELECT VERSION( ) 服务器版本信息 SELECT DATABASE( ) 当前数据库名 (或者返回空) SELECT USER( ) 当前用户名 SHOW STATUS 服务器状态 SHOW VARIABLES 服务器配置变量 14、MySQL ALTER命令 当我们需要修改数据表名或者修改数据表字段时，就需要使用到MySQL ALTER命令。 14.1、删除、添加或修改表字段 如下命令使用了 ALTER 命令及 DROP 子句来删除以上创建表的 i 字段： 1mysql&gt; ALTER TABLE testalter_tbl DROP i; 如果数据表中只剩余一个字段则无法使用DROP来删除字段。 MySQL 中使用 ADD 子句来向数据表中添加列，如下实例在表 testalter_tbl 中添加 i 字段，并定义数据类型: 1mysql&gt; ALTER TABLE testalter_tbl ADD i INT; 执行以上命令后，i 字段会自动添加到数据表字段的末尾 14.2、修改字段类型及名称 如果需要修改字段类型及名称, 你可以在ALTER命令中使用 MODIFY 或 CHANGE 子句 。 例如，把字段 c 的类型从 CHAR(1) 改为 CHAR(10)，可以执行以下命令: 1mysql&gt; ALTER TABLE testalter_tbl MODIFY c CHAR(10); 14.3、修改表名 如果需要修改数据表的名称，可以在 ALTER TABLE 语句中使用 RENAME 子句来实现。 尝试以下实例将数据表 testalter_tbl 重命名为 alter_tbl： 1mysql&gt; ALTER TABLE testalter_tbl RENAME TO alter_tbl; 15、MySQL 函数 MySQL 有很多内置的函数，以下列出了这些函数的说明。 15.1、MySQL 字符串函数 函数 描述 实例 ASCII(s) 返回字符串 s 的第一个字符的 ASCII 码。 返回 CustomerName 字段第一个字母的 ASCII 码：SELECT ASCII(CustomerName) AS NumCodeOfFirstCharFROM Customers; CHAR_LENGTH(s) 返回字符串 s 的字符数 返回字符串 test1 的字符数SELECT CHAR_LENGTH(&quot;test1&quot;) AS LengthOfString; CHARACTER_LENGTH(s) 返回字符串 s 的字符数 返回字符串 test1 的字符数SELECT CHARACTER_LENGTH(&quot;test1&quot;) AS LengthOfString; CONCAT(s1,s2…sn) 字符串 s1,s2 等多个字符串合并为一个字符串 合并多个字符串SELECT CONCAT(&quot;SQL &quot;, &quot;test1 &quot;, &quot;Gooogle &quot;, &quot;Facebook&quot;) AS ConcatenatedString; CONCAT_WS(x, s1,s2…sn) 同 CONCAT(s1,s2,…) 函数，但是每个字符串直接要加上 x，x 可以是分隔符 合并多个字符串，并添加分隔符：SELECT CONCAT_WS(&quot;-&quot;, &quot;SQL&quot;, &quot;Tutorial&quot;, &quot;is&quot;, &quot;fun!&quot;)AS ConcatenatedString; FIELD(s,s1,s2…) 返回第一个字符串 s 在字符串列表(s1,s2…)中的位置 返回字符串 c 在列表值中的位置：SELECT FIELD(&quot;c&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;); FIND_IN_SET(s1,s2) 返回在字符串s2中与s1匹配的字符串的位置 返回字符串 c 在指定字符串中的位置：SELECT FIND_IN_SET(&quot;c&quot;, &quot;a,b,c,d,e&quot;); FORMAT(x,n) 函数可以将数字 x 进行格式化 “#,### .##”, 将 x 保留到小数点后 n 位，最后一位四舍五入。 格式化数字 “#,### .##” 形式：SELECT FORMAT(250500.5634, 2); -- 输出 250,500.56 INSERT(s1,x,len,s2) 字符串 s2 替换 s1 的 x 位置开始长度为 len 的字符串 从字符串第一个位置开始的 6 个字符替换为 test1：SELECT INSERT(&quot;google.com&quot;, 1, 6, &quot;runnob&quot;); -- 输出：test1.com LOCATE(s1,s) 从字符串 s 中获取 s1 的开始位置 获取 b 在字符串 abc 中的位置：SELECT INSTR('abc','b') -- 2 LCASE(s) 将字符串 s 的所有字母变成小写字母 字符串 test1 转换为小写：SELECT LOWER('test1') -- test1 LEFT(s,n) 返回字符串 s 的前 n 个字符 返回字符串 test1 中的前两个字符：SELECT LEFT('test1',2) -- it LEFT(s,n) 返回字符串 s 的前 n 个字符 返回字符串 abcde 的前两个字符：SELECT LEFT('abcde',2) -- ab LOCATE(s1,s) 从字符串 s 中获取 s1 的开始位置 返回字符串 abc 中 b 的位置：SELECT LOCATE('b', 'abc') -- 2 LOWER(s) 将字符串 s 的所有字母变成小写字母 字符串 test1 转换为小写：SELECT LOWER('test1') -- test1 LPAD(s1,len,s2) 在字符串 s1 的开始处填充字符串 s2，使字符串长度达到 len 将字符串 xx 填充到 abc 字符串的开始处：SELECT LPAD('abc',5,'xx') -- xxabc LTRIM(s) 去掉字符串 s 开始处的空格 去掉字符串 test1开始处的空格：SELECT LTRIM(&quot; test1&quot;) AS LeftTrimmedString;-- test1 MID(s,n,len) 从字符串 s 的 start 位置截取长度为 length 的子字符串，同 SUBSTRING(s,n,len) 从字符串 test1 中的第 2 个位置截取 3个 字符：SELECT MID(&quot;test1&quot;, 2, 3) AS ExtractString; -- UNO POSITION(s1 IN s) 从字符串 s 中获取 s1 的开始位置 返回字符串 abc 中 b 的位置：SELECT POSITION('b' in 'abc') -- 2 REPEAT(s,n) 将字符串 s 重复 n 次 将字符串 test1 重复三次：SELECT REPEAT('test1',3) -- test1test1test1 REPLACE(s,s1,s2) 将字符串 s2 替代字符串 s 中的字符串 s1 将字符串 abc 中的字符 a 替换为字符 x：SELECT REPLACE('abc','a','x') --xbc REVERSE(s) 将字符串s的顺序反过来 将字符串 abc 的顺序反过来：SELECT REVERSE('abc') -- cba RIGHT(s,n) 返回字符串 s 的后 n 个字符 返回字符串 test1 的后两个字符：SELECT RIGHT('test1',2) -- ob RPAD(s1,len,s2) 在字符串 s1 的结尾处添加字符串 s1，使字符串的长度达到 len 将字符串 xx 填充到 abc 字符串的结尾处：SELECT RPAD('abc',5,'xx') -- abcxx RTRIM(s) 去掉字符串 s 结尾处的空格 去掉字符串 test1 的末尾空格：SELECT RTRIM(&quot;test1 &quot;) AS RightTrimmedString; -- test1 SPACE(n) 返回 n 个空格 返回 10 个空格：SELECT SPACE(10); STRCMP(s1,s2) 比较字符串 s1 和 s2，如果 s1 与 s2 相等返回 0 ，如果 s1&gt;s2 返回 1，如果 s1&lt;s2 返回 -1 比较字符串：SELECT STRCMP(&quot;test1&quot;, &quot;test1&quot;); -- 0 SUBSTR(s, start, length) 从字符串 s 的 start 位置截取长度为 length 的子字符串 从字符串 test1 中的第 2 个位置截取 3个 字符：SELECT SUBSTR(&quot;test1&quot;, 2, 3) AS ExtractString; -- UNO SUBSTRING(s, start, length) 从字符串 s 的 start 位置截取长度为 length 的子字符串 从字符串 test1 中的第 2 个位置截取 3个 字符：SELECT SUBSTRING(&quot;test1&quot;, 2, 3) AS ExtractString; -- UNO SUBSTRING_INDEX(s, delimiter, number) 返回从字符串 s 的第 number 个出现的分隔符 delimiter 之后的子串。如果 number 是正数，返回第 number 个字符左边的字符串。如果 number 是负数，返回第(number 的绝对值(从右边数))个字符右边的字符串。 SELECT SUBSTRING_INDEX('a*b','*',1) -- aSELECT SUBSTRING_INDEX('a*b','*',-1) -- bSELECT SUBSTRING_INDEX(SUBSTRING_INDEX('a*b*c*d*e','*',3),'*',-1) -- c TRIM(s) 去掉字符串 s 开始和结尾处的空格 去掉字符串 test1 的首尾空格：SELECT TRIM(' test1 ') AS TrimmedString; UCASE(s) 将字符串转换为大写 将字符串 test1 转换为大写：SELECT UCASE(&quot;test1&quot;); -- test1 UPPER(s) 将字符串转换为大写 将字符串 test1 转换为大写：SELECT UPPER(&quot;test1&quot;); -- test1 15.2、MySQL 数字函数 函数名 描述 实例 ABS(x) 返回 x 的绝对值 返回 -1 的绝对值：SELECT ABS(-1) -- 返回1 ACOS(x) 求 x 的反余弦值(参数是弧度) SELECT ACOS(0.25); ASIN(x) 求反正弦值(参数是弧度) SELECT ASIN(0.25); ATAN(x) 求反正切值(参数是弧度) SELECT ATAN(2.5); ATAN2(n, m) 求反正切值(参数是弧度) SELECT ATAN2(-0.8, 2); AVG(expression) 返回一个表达式的平均值，expression 是一个字段 返回 Products 表中Price 字段的平均值：SELECT AVG(Price) AS AveragePrice FROM Products; CEIL(x) 返回大于或等于 x 的最小整数 SELECT CEIL(1.5) -- 返回2 CEILING(x) 返回大于或等于 x 的最小整数 SELECT CEIL(1.5) -- 返回2 COS(x) 求余弦值(参数是弧度) SELECT COS(2); COT(x) 求余切值(参数是弧度) SELECT COT(6); COUNT(expression) 返回查询的记录总数，expression 参数是一个字段或者 * 号 返回 Products 表中 products 字段总共有多少条记录：SELECT COUNT(ProductID) AS NumberOfProducts FROM Products; DEGREES(x) 将弧度转换为角度 SELECT DEGREES(3.1415926535898) -- 180 n DIV m 整除，n 为被除数，m 为除数 计算 10 除于 5：SELECT 10 DIV 5; -- 2 EXP(x) 返回 e 的 x 次方 计算 e 的三次方：SELECT EXP(3) -- 20.085536923188 FLOOR(x) 返回小于或等于 x 的最大整数 小于或等于 1.5 的整数：SELECT FLOOR(1.5) -- 返回1 GREATEST(expr1, expr2, expr3, …) 返回列表中的最大值 返回以下数字列表中的最大值：SELECT GREATEST(3, 12, 34, 8, 25); -- 34返回以下字符串列表中的最大值：SELECT GREATEST(&quot;Google&quot;, &quot;test1&quot;, &quot;Apple&quot;); -- test1 LEAST(expr1, expr2, expr3, …) 返回列表中的最小值 返回以下数字列表中的最小值：SELECT LEAST(3, 12, 34, 8, 25); -- 3返回以下字符串列表中的最小值：SELECT LEAST(&quot;Google&quot;, &quot;test1&quot;, &quot;Apple&quot;); -- Apple LN 返回数字的自然对数 返回 2 的自然对数：SELECT LN(2); -- 0.6931471805599453 LOG(x) 返回自然对数(以 e 为底的对数) SELECT LOG(20.085536923188) -- 3 LOG10(x) 返回以 10 为底的对数 SELECT LOG10(100) -- 2 LOG2(x) 返回以 2 为底的对数 返回以 2 为底 6 的对数：SELECT LOG2(6); -- 2.584962500721156 MAX(expression) 返回字段 expression 中的最大值 返回数据表 Products 中字段 Price 的最大值：SELECT MAX(Price) AS LargestPrice FROM Products; MIN(expression) 返回字段 expression 中的最小值 返回数据表 Products 中字段 Price 的最小值：SELECT MIN(Price) AS LargestPrice FROM Products; MOD(x,y) 返回 x 除以 y 以后的余数 5 除于 2 的余数：SELECT MOD(5,2) -- 1 PI() 返回圆周率(3.141593） SELECT PI() --3.141593 POW(x,y) 返回 x 的 y 次方 2 的 3 次方：SELECT POW(2,3) -- 8 POWER(x,y) 返回 x 的 y 次方 2 的 3 次方：SELECT POWER(2,3) -- 8 RADIANS(x) 将角度转换为弧度 180 度转换为弧度：SELECT RADIANS(180) -- 3.1415926535898 RAND() 返回 0 到 1 的随机数 SELECT RAND() --0.93099315644334 ROUND(x) 返回离 x 最近的整数 SELECT ROUND(1.23456) --1 SIGN(x) 返回 x 的符号，x 是负数、0、正数分别返回 -1、0 和 1 SELECT SIGN(-10) -- (-1) SIN(x) 求正弦值(参数是弧度) SELECT SIN(RADIANS(30)) -- 0.5 SQRT(x) 返回x的平方根 25 的平方根：SELECT SQRT(25) -- 5 SUM(expression) 返回指定字段的总和 计算 OrderDetails 表中字段 Quantity 的总和：SELECT SUM(Quantity) AS TotalItemsOrdered FROM OrderDetails; TAN(x) 求正切值(参数是弧度) SELECT TAN(1.75); -- -5.52037992250933 TRUNCATE(x,y) 返回数值 x 保留到小数点后 y 位的值（与 ROUND 最大的区别是不会进行四舍五入） SELECT TRUNCATE(1.23456,3) -- 1.234 15.3、MySQL 日期函数 函数名 描述 实例 ADDDATE(d,n) 计算其实日期 d 加上 n 天的日期 SELECT ADDDATE(&quot;2017-06-15&quot;, INTERVAL 10 DAY);-&gt;2017-06-25 ADDTIME(t,n) 时间 t 加上 n 秒的时间 SELECT ADDTIME('2011-11-11 11:11:11', 5)-&gt;2011-11-11 11:11:16 (秒) CURDATE() 返回当前日期 SELECT CURDATE();-&gt; 2018-09-19 CURRENT_DATE() 返回当前日期 SELECT CURRENT_DATE();-&gt; 2018-09-19 CURRENT_TIME 返回当前时间 SELECT CURRENT_TIME();-&gt; 19:59:02 CURRENT_TIMESTAMP() 返回当前日期和时间 SELECT CURRENT_TIMESTAMP()-&gt; 2018-09-19 20:57:43 CURTIME() 返回当前时间 SELECT CURTIME();-&gt; 19:59:02 DATE() 从日期或日期时间表达式中提取日期值 SELECT DATE(&quot;2017-06-15&quot;); -&gt; 2017-06-15 DATEDIFF(d1,d2) 计算日期 d1-&gt;d2 之间相隔的天数 SELECT DATEDIFF('2001-01-01','2001-02-02')-&gt; -32 DATE_ADD(d，INTERVAL expr type) 计算起始日期 d 加上一个时间段后的日期 SELECT ADDDATE('2011-11-11 11:11:11',1)-&gt; 2011-11-12 11:11:11 (默认是天)SELECT ADDDATE('2011-11-11 11:11:11', INTERVAL 5 MINUTE)-&gt; 2011-11-11 11:16:11 (TYPE的取值与上面那个列出来的函数类似) DATE_FORMAT(d,f) 按表达式 f的要求显示日期 d SELECT DATE_FORMAT('2011-11-11 11:11:11','%Y-%m-%d %r')-&gt; 2011-11-11 11:11:11 AM DATE_SUB(date,INTERVAL expr type) 函数从日期减去指定的时间间隔。 Orders 表中 OrderDate 字段减去 2 天：SELECT OrderId,DATE_SUB(OrderDate,INTERVAL 2 DAY) AS OrderPayDateFROM Orders DAY(d) 返回日期值 d 的日期部分 SELECT DAY(&quot;2017-06-15&quot;); -&gt; 15 DAYNAME(d) 返回日期 d 是星期几，如 Monday,Tuesday SELECT DAYNAME('2011-11-11 11:11:11')-&gt;Friday DAYOFMONTH(d) 计算日期 d 是本月的第几天 SELECT DAYOFMONTH('2011-11-11 11:11:11')-&gt;11 DAYOFWEEK(d) 日期 d 今天是星期几，1 星期日，2 星期一，以此类推 SELECT DAYOFWEEK('2011-11-11 11:11:11')-&gt;6 DAYOFYEAR(d) 计算日期 d 是本年的第几天 SELECT DAYOFYEAR('2011-11-11 11:11:11')-&gt;315 EXTRACT(type FROM d) 从日期 d 中获取指定的值，type 指定返回的值。 type可取值为： MICROSECONDSECONDMINUTEHOURDAYWEEKMONTHQUARTERYEARSECOND_MICROSECONDMINUTE_MICROSECONDMINUTE_SECONDHOUR_MICROSECONDHOUR_SECONDHOUR_MINUTEDAY_MICROSECONDDAY_SECONDDAY_MINUTEDAY_HOURYEAR_MONTH SELECT EXTRACT(MINUTE FROM '2011-11-11 11:11:11') -&gt; 11 ROM_DAYS(n) 计算从 0000 年 1 月 1 日开始 n 天后的日期 SELECT FROM_DAYS(1111)-&gt; 0003-01-16 HOUR(t) 返回 t 中的小时值 SELECT HOUR('1:2:3')-&gt; 1 LAST_DAY(d) 返回给给定日期的那一月份的最后一天 SELECT LAST_DAY(&quot;2017-06-20&quot;);-&gt; 2017-06-30 LOCALTIME() 返回当前日期和时间 SELECT LOCALTIME()-&gt; 2018-09-19 20:57:43 LOCALTIMESTAMP() 返回当前日期和时间 SELECT LOCALTIMESTAMP()-&gt; 2018-09-19 20:57:43 MAKEDATE(year, day-of-year) 基于给定参数年份 year 和所在年中的天数序号 day-of-year 返回一个日期 SELECT MAKEDATE(2017, 3);-&gt; 2017-01-03 MAKETIME(hour, minute, second) 组合时间，参数分别为小时、分钟、秒 SELECT MAKETIME(11, 35, 4);-&gt; 11:35:04 MICROSECOND(date) 返回日期参数所对应的毫秒数 SELECT MICROSECOND(&quot;2017-06-20 09:34:00.000023&quot;);-&gt; 23 MINUTE(t) 返回 t 中的分钟值 SELECT MINUTE('1:2:3')-&gt; 2 MONTHNAME(d) 返回日期当中的月份名称，如 Janyary SELECT MONTHNAME('2011-11-11 11:11:11')-&gt; November MONTH(d) 返回日期d中的月份值，1 到 12 SELECT MONTH('2011-11-11 11:11:11')-&gt;11 NOW() 返回当前日期和时间 SELECT NOW()-&gt; 2018-09-19 20:57:43 PERIOD_ADD(period, number) 为 年-月 组合日期添加一个时段 SELECT PERIOD_ADD(201703, 5); -&gt; 201708 PERIOD_DIFF(period1, period2) 返回两个时段之间的月份差值 SELECT PERIOD_DIFF(201710, 201703);-&gt; 7 QUARTER(d) 返回日期d是第几季节，返回 1 到 4 SELECT QUARTER('2011-11-11 11:11:11')-&gt; 4 SECOND(t) 返回 t 中的秒钟值 SELECT SECOND('1:2:3')-&gt; 3 SEC_TO_TIME(s) 将以秒为单位的时间 s 转换为时分秒的格式 SELECT SEC_TO_TIME(4320)-&gt; 01:12:00 STR_TO_DATE(string, format_mask) 将字符串转变为日期 SELECT STR_TO_DATE(&quot;August 10 2017&quot;, &quot;%M %d %Y&quot;);-&gt; 2017-08-10 SUBDATE(d,n) 日期 d 减去 n 天后的日期 SELECT SUBDATE('2011-11-11 11:11:11', 1)-&gt;2011-11-10 11:11:11 (默认是天) SUBTIME(t,n) 时间 t 减去 n 秒的时间 SELECT SUBTIME('2011-11-11 11:11:11', 5)-&gt;2011-11-11 11:11:06 (秒) SYSDATE() 返回当前日期和时间 SELECT SYSDATE()-&gt; 2018-09-19 20:57:43 TIME(expression) 提取传入表达式的时间部分 SELECT TIME(&quot;19:30:10&quot;);-&gt; 19:30:10 TIME_FORMAT(t,f) 按表达式 f 的要求显示时间 t SELECT TIME_FORMAT('11:11:11','%r')11:11:11 AM TIME_TO_SEC(t) 将时间 t 转换为秒 SELECT TIME_TO_SEC('1:12:00')-&gt; 4320 TIMEDIFF(time1, time2) 计算时间差值 SELECT TIMEDIFF(&quot;13:10:11&quot;, &quot;13:10:10&quot;);-&gt; 00:00:01 TIMESTAMP(expression, interval) 单个参数时，函数返回日期或日期时间表达式；有2个参数时，将参数加和 SELECT TIMESTAMP(&quot;2017-07-23&quot;, &quot;13:10:11&quot;);-&gt; 2017-07-23 13:10:11 TO_DAYS(d) 计算日期 d 距离 0000 年 1 月 1 日的天数 SELECT TO_DAYS('0001-01-01 01:01:01')-&gt; 366 WEEK(d) 计算日期 d 是本年的第几个星期，范围是 0 到 53 SELECT WEEK('2011-11-11 11:11:11')-&gt; 45 WEEKDAY(d) 日期 d 是星期几，0 表示星期一，1 表示星期二 SELECT WEEKDAY(&quot;2017-06-15&quot;);-&gt; 3 WEEKOFYEAR(d) 计算日期 d 是本年的第几个星期，范围是 0 到 53 SELECT WEEKOFYEAR('2011-11-11 11:11:11')-&gt; 45 YEAR(d) 返回年份 SELECT YEAR(&quot;2017-06-15&quot;);-&gt; 2017 YEARWEEK(date, mode) 返回年份及第几周（0到53），mode 中 0 表示周天，1表示周一，以此类推 SELECT YEARWEEK(&quot;2017-06-15&quot;);-&gt; 201724 15.4、MySQL 高级函数 函数名 描述 实例 BIN(x) 返回 x 的二进制编码 15 的 2 进制编码:SELECT BIN(15); -- 1111 BINARY(s) 将字符串 s 转换为二进制字符串 SELECT BINARY &quot;test1&quot;;-&gt; test1 CASE expression WHEN condition1 THEN result1 WHEN condition2 THEN result2 ... WHEN conditionN THEN resultN ELSE resultEND CASE 表示函数开始，END 表示函数结束。如果 condition1 成立，则返回 result1, 如果 condition2 成立，则返回 result2，当全部不成立则返回 result，而当有一个成立之后，后面的就不执行了。 SELECT CASE WHEN 1 &gt; 0 THEN '1 &gt; 0' WHEN 2 &gt; 0 THEN '2 &gt; 0' ELSE '3 &gt; 0' END-&gt;1 &gt; 0 CAST(x AS type) 转换数据类型 字符串日期转换为日期：SELECT CAST(&quot;2017-08-29&quot; AS DATE);-&gt; 2017-08-29 COALESCE(expr1, expr2, …, expr_n) 返回参数中的第一个非空表达式（从左向右） SELECT COALESCE(NULL, NULL, NULL, 'test1.com', NULL, 'google.com');-&gt; test1.com CONNECTION_ID() 返回服务器的连接数 SELECT CONNECTION_ID();-&gt; 4292835 CONV(x,f1,f2) 返回 f1 进制数变成 f2 进制数 SELECT CONV(15, 10, 2);-&gt; 1111 CONVERT(s USING cs) 函数将字符串 s 的字符集变成 cs SELECT CHARSET('ABC')-&gt;utf-8 SELECT CHARSET(CONVERT('ABC' USING gbk))-&gt;gbk CURRENT_USER() 返回当前用户 SELECT CURRENT_USER();-&gt; guest@% DATABASE() 返回当前数据库名 SELECT DATABASE(); -&gt; test1 IF(expr,v1,v2) 如果表达式 expr 成立，返回结果 v1；否则，返回结果 v2。 SELECT IF(1 &gt; 0,'正确','错误') -&gt;正确 IFNULL(v1,v2) 如果 v1 的值不为 NULL，则返回 v1，否则返回 v2。 SELECT IFNULL(null,'Hello Word')-&gt;Hello Word ISNULL(expression) 判断表达式是否为空 SELECT ISNULL(NULL);-&gt;1 LAST_INSERT_ID() 返回最近生成的 AUTO_INCREMENT 值 SELECT LAST_INSERT_ID();-&gt;6 NULLIF(expr1, expr2) 比较两个字符串，如果字符串 expr1 与 expr2 相等 返回 NULL，否则返回 expr1 SELECT NULLIF(25, 25);-&gt; SESSION_USER() 返回当前用户 SELECT SESSION_USER();-&gt; guest@% SYSTEM_USER() 返回当前用户 SELECT SYSTEM_USER();-&gt; guest@% USER() 返回当前用户 SELECT USER();-&gt; guest@% VERSION() 返回数据库的版本号 SELECT VERSION()-&gt; 5.6.34 16、MySQL 索引 MySQL索引的建立对于MySQL的高效运行是很重要的，索引可以大大提高MySQL的检索速度。 索引分单列索引和组合索引。单列索引，即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引。组合索引，即一个索引包含多个列。 创建索引时，你需要确保该索引是应用在 SQL 查询语句的条件(一般作为 WHERE 子句的条件)。 实际上，索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录。 上面都在说使用索引的好处，但过多的使用索引将会造成滥用。因此索引也会有它的缺点：虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件。 建立索引会占用磁盘空间的索引文件。 16.1、普通索引 16.1.1、创建索引 这是最基本的索引，它没有任何限制。它有以下几种创建方式： 1234CREATE INDEX indexName ON mytable(username(length)); //创建索引 create index id on B(A_ID); 如果是CHAR，VARCHAR类型，length可以小于字段实际长度；如果是BLOB和TEXT类型，必须指定 length。 16.1.2、修改表结构(添加索引) 12ALTER table tableName ADD INDEX indexName(columnName) 16.1.3、创建表的时候直接指定 123456789CREATE TABLE mytable( ID INT NOT NULL, username VARCHAR(16) NOT NULL, INDEX [indexName] (username(length)) ); 16.1.4、删除索引的语法 1DROP INDEX [indexName] ON mytable; 16.2、唯一索引 它与前面的普通索引类似，不同的就是：索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。它有以下几种创建方式： 16.2.1、创建索引 1CREATE UNIQUE INDEX indexName ON mytable(username(length)) 16.2.2、修改表结构 1ALTER table mytable ADD UNIQUE [indexName] (username(length)) 16.2.3、创建表的时候直接指定 123456789CREATE TABLE mytable( ID INT NOT NULL, username VARCHAR(16) NOT NULL, UNIQUE [indexName] (username(length)) ); 16.3、使用ALTER 命令添加和删除索引 有四种方式来添加数据表的索引： ALTER TABLE tbl_name ADD PRIMARY KEY (column_list): 该语句添加一个主键，这意味着索引值必须是唯一的，且不能为NULL。 ALTER TABLE tbl_name ADD UNIQUE index_name (column_list): 这条语句创建索引的值必须是唯一的（除了NULL外，NULL可能会出现多次）。 ALTER TABLE tbl_name ADD INDEX index_name (column_list): 添加普通索引，索引值可出现多次。 **ALTER TABLE tbl_name ADD FULLTEXT index_name (column_list)😗*该语句指定了索引为 FULLTEXT ，用于全文索引。 以下实例为在表中添加索引。 1mysql&gt; ALTER TABLE testalter_tbl ADD INDEX (c); 你还可以在 ALTER 命令中使用 DROP 子句来删除索引。尝试以下实例删除索引: 1mysql&gt; ALTER TABLE testalter_tbl DROP INDEX c; 16.4、使用 ALTER 命令添加和删除主键 主键只能作用于一个列上，添加主键索引时，你需要确保该主键默认不为空（NOT NULL）。实例如下： 12mysql&gt; ALTER TABLE testalter_tbl MODIFY test1 INT NOT NULL;mysql&gt; ALTER TABLE testalter_tbl ADD PRIMARY KEY (test1); 你也可以使用 ALTER 命令删除主键： 1mysql&gt; ALTER TABLE testalter_tbl DROP PRIMARY KEY; 删除主键时只需指定PRIMARY KEY，但在删除索引时，你必须知道索引名。 16.5、显示索引信息 你可以使用 SHOW INDEX 命令来列出表中的相关的索引信息。可以通过添加 \\G 来格式化输出信息。 尝试以下实例: 1mysql&gt; SHOW INDEX FROM table_name; \\G mysql&gt; show index from B; ±------±-----------±---------±-------------±------------±----------±------------±---------±-------±-----±-----------±--------±--------------+ | Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment | ±------±-----------±---------±-------------±------------±----------±------------±---------±-------±-----±-----------±--------±--------------+ | B | 0 | PRIMARY | 1 | A_ID | A | 3 | NULL | NULL | | BTREE | | | ±------±-----------±---------±-------------±------------±----------±------------±---------±-------±-----±-----------±--------±--------------+ 17、MySQL 事务 ​ MySQL 事务主要用于处理操作量大，复杂度高的数据。比如说，在人员管理系统中，你删除一个人员，你即需要删除人员的基本资料，也要删除和该人员相关的信息，如信箱，文章等等，这样，这些数据库操作语句就构成一个事务！ 在 MySQL 中只有使用了 Innodb 数据库引擎的数据库或表才支持事务。 事务处理可以用来维护数据库的完整性，保证成批的 SQL 语句要么全部执行，要么全部不执行。 事务用来管理 insert,update,delete 语句 一般来说，事务是必须满足4个条件（ACID）：：原子性（Atomicity，或称不可分割性）、一致性（Consistency）、隔离性（Isolation，又称独立性）、持久性（Durability）。 **原子性：**一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，在中间某个环节不会结束。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。 **一致性：**在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。 **隔离性：**数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。 **持久性：**事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。 17.1、事务控制语句： BEGIN或START TRANSACTION；显式地开启一个事务； COMMIT；也可以使用COMMIT WORK，不过二者是等价的。COMMIT会提交事务，并使已对数据库进行的所有修改成为永久性的； ROLLBACK；有可以使用ROLLBACK WORK，不过二者是等价的。回滚会结束用户的事务，并撤销正在进行的所有未提交的修改； SAVEPOINT identifier；SAVEPOINT允许在事务中创建一个保存点，一个事务中可以有多个SAVEPOINT； RELEASE SAVEPOINT identifier；删除一个事务的保存点，当没有指定的保存点时，执行该语句会抛出一个异常； ROLLBACK TO identifier；把事务回滚到标记点； SET TRANSACTION；用来设置事务的隔离级别。InnoDB存储引擎提供事务的隔离级别有READ UNCOMMITTED、READ COMMITTED、REPEATABLE READ和SERIALIZABLE。 17.2、MYSQL 事务处理主要有两种方法： 1、用 BEGIN, ROLLBACK, COMMIT来实现 BEGIN 开始一个事务 ROLLBACK 事务回滚 COMMIT 事务确认 2、直接用 SET 来改变 MySQL 的自动提交模式: SET AUTOCOMMIT=0 禁止自动提交 SET AUTOCOMMIT=1 开启自动提交","categories":[],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/tags/mysql/"}]},{"title":"vue-select","slug":"vue-select","date":"2019-01-11T08:42:37.000Z","updated":"2021-09-22T11:19:04.649Z","comments":true,"path":"2019/01/11/vue-select/","link":"","permalink":"http://example.com/2019/01/11/vue-select/","excerpt":"","text":"vue_el-select 123456789101112131415161718192021222324&lt;template&gt; &lt;div&gt; &lt;el-select v-model=&quot;que&quot;&gt; &lt;el-option v-for=&quot;item in options&quot; :key=&quot;item.value&quot; :value=&quot;item.value&quot; :label=&quot;item.label&quot;&gt;&lt;/el-option&gt; &lt;/el-select&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default&#123; data() &#123; return &#123; options: [&#123; value: 1, label: &#x27;我的&#x27; &#125;, &#123; value: 2, label: &#x27;你的&#x27; &#125;], que: 2 &#125; &#125;&#125;&lt;/script&gt;&lt;style&gt;&lt;/style&gt; 1234567&lt;el-form-item label=&quot;订单状态&quot;&gt; &lt;el-select placeholder=&quot;订单状态&quot; v-model=&quot;queryParams.status&quot; ref=&quot;queryParams.status&quot;&gt; &lt;el-option label=&quot;全部&quot; value=&quot;&quot; name=&quot;status&quot;&gt;全部&lt;/el-option&gt; &lt;el-option label=&quot;已完成&quot; value=&quot;1&quot; name=&quot;status&quot;&gt;已完成&lt;/el-option&gt; &lt;el-option label=&quot;未支付&quot; value=&quot;0&quot; name=&quot;status&quot;&gt;未支付&lt;/el-option&gt; &lt;/el-select&gt; &lt;/el-form-item&gt;","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"http://example.com/tags/vue/"}]},{"title":"文件上传_springMVCweb","slug":"文件上传_springMVCweb","date":"2019-01-08T12:42:35.000Z","updated":"2021-09-22T11:19:04.654Z","comments":true,"path":"2019/01/08/文件上传_springMVCweb/","link":"","permalink":"http://example.com/2019/01/08/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0_springMVCweb/","excerpt":"","text":"文件上传 12345A form 表单的 enctype 取值必须是： multipart/form-data(默认值是:application/x-www-form-urlencoded)enctype:是表单请求正文的类型B method 属性取值必须是 PostC 提供一个文件选择域&lt;input type=”file” /&gt; 环境 1234567891011121314151617181920212223242526272829303132&lt;web-app&gt; &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt; &lt;servlet&gt; &lt;servlet-name&gt;dispatcherServlet&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:springmvc.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;dispatcherServlet&lt;/servlet-name&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;!--配置解决中文乱码的过滤器--&gt; &lt;filter&gt; &lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt; &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt; &lt;init-param&gt; &lt;param-name&gt;encoding&lt;/param-name&gt; &lt;param-value&gt;UTF-8&lt;/param-value&gt; &lt;/init-param&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;/filter-mapping&gt;&lt;/web-app&gt; springmvc.xml 12345678910111213141516171819202122232425262728293031323334353637&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot; http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt; &lt;!-- 开启注解扫描 --&gt; &lt;context:component-scan base-package=&quot;cn.test&quot;/&gt; &lt;!-- 视图解析器对象 --&gt; &lt;bean id=&quot;internalResourceViewResolver&quot; class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt; &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/pages/&quot;/&gt; &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt; &lt;/bean&gt; &lt;!--前端控制器，哪些静态资源不拦截--&gt; &lt;mvc:resources location=&quot;/css/&quot; mapping=&quot;/css/**&quot;/&gt; &lt;mvc:resources location=&quot;/images/&quot; mapping=&quot;/images/**&quot;/&gt; &lt;mvc:resources location=&quot;/js/&quot; mapping=&quot;/js/**&quot;/&gt; &lt;!--配置文件解析器对象--&gt; &lt;bean id=&quot;multipartResolver&quot; class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt; &lt;property name=&quot;maxUploadSize&quot; value=&quot;10485760&quot; /&gt; &lt;/bean&gt; &lt;!-- 开启SpringMVC框架注解的支持 --&gt; &lt;mvc:annotation-driven /&gt;&lt;/beans&gt; 文件上传 1234567891011121314151617181920212223242526272829303132333435363738 &lt;%-- Created by IntelliJ IDEA. User: Administrator Date: 2018/5/4 Time: 21:56 To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h3&gt;传统文件上传&lt;/h3&gt; &lt;form action=&quot;/user/fileupload1&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt; 选择文件：&lt;input type=&quot;file&quot; name=&quot;upload&quot; /&gt;&lt;br/&gt; &lt;input type=&quot;submit&quot; value=&quot;上传&quot; /&gt; &lt;/form&gt; &lt;h3&gt;Springmvc文件上传&lt;/h3&gt; &lt;form action=&quot;/user/fileupload2&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt; 选择文件：&lt;input type=&quot;file&quot; name=&quot;upload&quot; /&gt;&lt;br/&gt; &lt;input type=&quot;submit&quot; value=&quot;上传&quot; /&gt; &lt;/form&gt; &lt;h3&gt;跨服务器文件上传&lt;/h3&gt; &lt;form action=&quot;/user/fileupload3&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt; 选择文件：&lt;input type=&quot;file&quot; name=&quot;upload&quot; /&gt;&lt;br/&gt; &lt;input type=&quot;submit&quot; value=&quot;上传&quot; /&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105/** * 跨服务器文件上传 * @return */ @RequestMapping(&quot;/fileupload3&quot;) public String fileuoload3(MultipartFile upload) throws Exception &#123; System.out.println(&quot;跨服务器文件上传...&quot;); // 定义上传文件服务器路径 String path = &quot;http://localhost:9090/uploads/&quot;; // 说明上传文件项 // 获取上传文件的名称 String filename = upload.getOriginalFilename(); // 把文件的名称设置唯一值，uuid String uuid = UUID.randomUUID().toString().replace(&quot;-&quot;, &quot;&quot;); filename = uuid+&quot;_&quot;+filename; // 创建客户端的对象 Client client = Client.create(); // 和图片服务器进行连接 WebResource webResource = client.resource(path + filename); // 上传文件 webResource.put(upload.getBytes()); return &quot;success&quot;; &#125; /** * SpringMVC文件上传 * @return */ @RequestMapping(&quot;/fileupload2&quot;) public String fileuoload2(HttpServletRequest request, MultipartFile upload) throws Exception &#123; System.out.println(&quot;springmvc文件上传...&quot;); // 使用fileupload组件完成文件上传 // 上传的位置 String path = request.getSession().getServletContext().getRealPath(&quot;/uploads/&quot;); // 判断，该路径是否存在 File file = new File(path); if(!file.exists())&#123; // 创建该文件夹 file.mkdirs(); &#125; // 说明上传文件项 // 获取上传文件的名称 String filename = upload.getOriginalFilename(); // 把文件的名称设置唯一值，uuid String uuid = UUID.randomUUID().toString().replace(&quot;-&quot;, &quot;&quot;); filename = uuid+&quot;_&quot;+filename; // 完成文件上传 upload.transferTo(new File(path,filename)); return &quot;success&quot;; &#125; /** * 文件上传 * @return */ @RequestMapping(&quot;/fileupload1&quot;) public String fileuoload1(HttpServletRequest request) throws Exception &#123; System.out.println(&quot;文件上传...&quot;); // 使用fileupload组件完成文件上传 // 上传的位置 String path = request.getSession().getServletContext().getRealPath(&quot;/uploads/&quot;); // 判断，该路径是否存在 File file = new File(path); if(!file.exists())&#123; // 创建该文件夹 file.mkdirs(); &#125; // 解析request对象，获取上传文件项 DiskFileItemFactory factory = new DiskFileItemFactory(); ServletFileUpload upload = new ServletFileUpload(factory); // 解析request List&lt;FileItem&gt; items = upload.parseRequest(request); // 遍历 for(FileItem item:items)&#123; // 进行判断，当前item对象是否是上传文件项 if(item.isFormField())&#123; // 说明普通表单向 &#125;else&#123; // 说明上传文件项 // 获取上传文件的名称 String filename = item.getName(); // 把文件的名称设置唯一值，uuid String uuid = UUID.randomUUID().toString().replace(&quot;-&quot;, &quot;&quot;); filename = uuid+&quot;_&quot;+filename; // 完成文件上传 item.write(new File(path,filename)); // 删除临时文件 item.delete(); &#125; &#125; return &quot;success&quot;; &#125;","categories":[],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"nginx文件大小限制","slug":"nginx文件大小限制","date":"2018-12-29T10:40:11.000Z","updated":"2021-09-22T11:19:04.639Z","comments":true,"path":"2018/12/29/nginx文件大小限制/","link":"","permalink":"http://example.com/2018/12/29/nginx%E6%96%87%E4%BB%B6%E5%A4%A7%E5%B0%8F%E9%99%90%E5%88%B6/","excerpt":"","text":"nginx文件大小限制 上传超过1M大的客户端文件无法正常上传，nginx直接报错，上传文件太大，于是修改了下nginx的配置，就可以了。 按照网上所说的加上client_max_body_size 字段，怎么重启nginx都不行。后来发现放的位置有问题！ 123456查询容器docker ps进入容器docker exec -it e12d7e64036c /bin/bash 12345678910111213141516server &#123; listen 80; server_name localhost; client_max_body_size 10M; location /web &#123; alias D:/web; index main.html; &#125; location /web/service &#123; proxy_pass http://192.168.1.188:8080/service; &#125; location /web/service/upload &#123; proxy_pass http://192.168.1.188/upload; &#125; &#125; php.ini修改php上传文件大小限制的方法 vi *.php 1234&lt;?phpecho phpinfo(); php56 *.php | grep php.ini 重启 ： /etc/init.d/php56-php-fpm restart 打开php.ini，首先找到 file_uploads = on ;是否允许通过HTTP上传文件的开关。默认为ON即是开 upload_tmp_dir ;文件上传至服务器上存储临时文件的地方，如果没指定就会用系统默认的临时文件夹 upload_max_filesize = 8m ;望文生意，即允许上传文件大小的最大值。默认为2M post_max_size = 8m ;指通过表单POST给PHP的所能接收的最大值，包括表单里的所有值。默认为8M 一般地，设置好上述四个参数后，上传&lt;=8M的文件是不成问题，在网络正常的情况下。 但如果要上传&gt;8M的大体积文件，只设置上述四项还一定能行的通。 进一步配置以下的参数 max_execution_time = 600 ;每个PHP页面运行的最大时间值(秒)，默认30秒 max_input_time = 600 ;每个PHP页面接收数据所需的最大时间，默认60秒 memory_limit = 8m ;每个PHP页面所吃掉的最大内存，默认8M 把上述参数修改后，在网络所允许的正常情况下，就可以上传大体积文件了 max_execution_time = 600 max_input_time = 600 memory_limit = 32m file_uploads = on upload_tmp_dir = /tmp upload_max_filesize = 32m post_max_size = 32m","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://example.com/tags/linux/"}]},{"title":"Docker","slug":"Docker","date":"2018-12-28T10:56:26.000Z","updated":"2021-09-22T11:19:04.604Z","comments":true,"path":"2018/12/28/Docker/","link":"","permalink":"http://example.com/2018/12/28/Docker/","excerpt":"","text":"Docker 1 Docker简介 1.1 什么是虚拟化 ​ 在计算机中，虚拟化（英语：Virtualization）是一种资源管理技术，是将计算机的各种实体资源，如服务器、网络、内存及存储等，予以抽象、转换后呈现出来，打破实体结构间的不可切割的障碍，使用户可以比原本的组态更好的方式来应用这些资源。这些资源的新虚拟部份是不受现有资源的架设方式，地域或物理组态所限制。一般所指的虚拟化资源包括计算能力和资料存储。 ​ 在实际的生产环境中，虚拟化技术主要用来解决高性能的物理硬件产能过剩和老的旧的硬件产能过低的重组重用，透明化底层物理硬件，从而最大化的利用物理硬件 对资源充分利用 ​ 虚拟化技术种类很多，例如：软件虚拟化、硬件虚拟化、内存虚拟化、网络虚拟化(vip)、桌面虚拟化、服务虚拟化、虚拟机等等。 1.2 什么是Docker ​ Docker 是一个开源项目，诞生于 2013 年初，最初是 dotCloud 公司内部的一个业余项目。它基于 Google 公司推出的 Go 语言实现。 项目后来加入了 Linux 基金会，遵从了 Apache 2.0 协议，项目代码在 GitHub 上进行维护。 ​ ​ Docker 自开源后受到广泛的关注和讨论，以至于 dotCloud 公司后来都改名为 Docker Inc。Redhat 已经在其 RHEL6.5 中集中支持 Docker；Google 也在其 PaaS 产品中广泛应用。 ​ Docker 项目的目标是实现轻量级的操作系统虚拟化解决方案。 Docker 的基础是 Linux 容器（LXC）等技术。 ​ 在 LXC 的基础上 Docker 进行了进一步的封装，让用户不需要去关心容器的管理，使得操作更为简便。用户操作 Docker 的容器就像操作一个快速轻量级的虚拟机一样简单。 为什么选择Docker? （1）上手快。 ​ 用户只需要几分钟，就可以把自己的程序“Docker化”。Docker依赖于“写时复制”（copy-on-write）模型，使修改应用程序也非常迅速，可以说达到“随心所致，代码即改”的境界。 随后，就可以创建容器来运行应用程序了。大多数Docker容器只需要不到1秒中即可启动。由于去除了管理程序的开销，Docker容器拥有很高的性能，同时同一台宿主机中也可以运行更多的容器，使用户尽可能的充分利用系统资源。 （2）职责的逻辑分类 ​ 使用Docker，开发人员只需要关心容器中运行的应用程序，而运维人员只需要关心如何管理容器。Docker设计的目的就是要加强开发人员写代码的开发环境与应用程序要部署的生产环境一致性。从而降低那种“开发时一切正常，肯定是运维的问题（测试环境都是正常的，上线后出了问题就归结为肯定是运维的问题）” （3）快速高效的开发生命周期 ​ Docker的目标之一就是缩短代码从开发、测试到部署、上线运行的周期，让你的应用程序具备可移植性，易于构建，并易于协作。（通俗一点说，Docker就像一个盒子，里面可以装很多物件，如果需要这些物件的可以直接将该大盒子拿走，而不需要从该盒子中一件件的取。） （4）鼓励使用面向服务的架构 ​ Docker还鼓励面向服务的体系结构和微服务架构。Docker推荐单个容器只运行一个应用程序或进程，这样就形成了一个分布式的应用程序模型，在这种模型下，应用程序或者服务都可以表示为一系列内部互联的容器，从而使分布式部署应用程序，扩展或调试应用程序都变得非常简单，同时也提高了程序的内省性。（当然，可以在一个容器中运行多个应用程序） 1.3 容器与虚拟机比较 ​ 下面的图片比较了 Docker 和传统虚拟化方式的不同之处，可见容器是在操作系统层面上实现虚拟化，直接复用本地主机的操作系统，而传统方式则是在硬件层面实现。 与传统的虚拟机相比，Docker优势体现为启动速度快、占用体积小。 1.4 Docker 组件 1.4.1 Docker服务器与客户端 ​ Docker是一个客户端-服务器（C/S）架构程序。Docker客户端只需要向Docker服务器或者守护进程发出请求，服务器或者守护进程将完成所有工作并返回结果。Docker提供了一个命令行工具Docker以及一整套RESTful API。你可以在同一台宿主机上运行Docker守护进程和客户端，也可以从本地的Docker客户端连接到运行在另一台宿主机上的远程Docker守护进程。 1.4.2 Docker镜像与容器 ​ 镜像是构建Docker的基石。用户基于镜像来运行自己的容器。镜像也是Docker生命周期中的“构建”部分。镜像是基于联合文件系统的一种层式结构，由一系列指令一步一步构建出来。例如： 添加一个文件； 执行一个命令； 打开一个窗口。 也可以将镜像当作容器的“源代码”。镜像体积很小，非常“便携”，易于分享、存储和更新。 ​ Docker可以帮助你构建和部署容器，你只需要把自己的应用程序或者服务打包放进容器即可。容器是基于镜像启动起来的，容器中可以运行一个或多个进程。我们可以认为，镜像是Docker生命周期中的构建或者打包阶段，而容器则是启动或者执行阶段。 容器基于镜像启动，一旦容器启动完成后，我们就可以登录到容器中安装自己需要的软件或者服务。 所以Docker容器就是： ​ 一个镜像格式； ​ 一些列标准操作； ​ 一个执行环境。 ​ Docker借鉴了标准集装箱的概念。标准集装箱将货物运往世界各地，Docker将这个模型运用到自己的设计中，唯一不同的是：集装箱运输货物，而Docker运输软件。 和集装箱一样，Docker在执行上述操作时，并不关心容器中到底装了什么，它不管是web服务器，还是数据库，或者是应用程序服务器什么的。所有的容器都按照相同的方式将内容“装载”进去。 Docker也不关心你要把容器运到何方：我们可以在自己的笔记本中构建容器，上传到Registry，然后下载到一个物理的或者虚拟的服务器来测试，在把容器部署到具体的主机中。像标准集装箱一样，Docker容器方便替换，可以叠加，易于分发，并且尽量通用。 1.4.3 Registry（注册中心） ​ Docker用Registry来保存用户构建的镜像。Registry分为公共和私有两种。Docker公司运营公共的Registry叫做Docker Hub。用户可以在Docker Hub注册账号，分享并保存自己的镜像（说明：在Docker Hub下载镜像巨慢，可以自己构建私有的Registry）。 ​ https://hub.docker.com/ 2 Docker安装与启动 2.1 安装Docker ​ Docker官方建议在Ubuntu中安装，因为Docker是基于Ubuntu发布的，而且一般Docker出现的问题Ubuntu是最先更新或者打补丁的。在很多版本的CentOS中是不支持更新最新的一些补丁包的。 ​ 由于我们学习的环境都使用的是CentOS，因此这里我们将Docker安装到CentOS上。注意：这里建议安装在CentOS7.x以上的版本，在CentOS6.x的版本中，安装前需要安装其他很多的环境而且Docker很多补丁不支持更新。 ​ 请直接挂载课程配套的Centos7.x镜像 （1）yum 包更新到最新 1sudo yum update （2）安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的 1sudo yum install -y yum-utils device-mapper-persistent-data lvm2 （3）设置yum源为阿里云 1sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo （4）安装docker 1sudo yum install docker-ce （5）安装后查看docker版本 1docker -v 2.2 设置ustc的镜像 ustc是老牌的linux镜像服务提供者了，还在遥远的ubuntu 5.04版本的时候就在用。ustc的docker镜像加速器速度很快。ustc docker mirror的优势之一就是不需要注册，是真正的公共服务。 https://lug.ustc.edu.cn/wiki/mirrors/help/docker 编辑该文件： 1vi /etc/docker/daemon.json 在该文件中输入如下内容： 123&#123;&quot;registry-mirrors&quot;: [&quot;https://docker.mirrors.ustc.edu.cn&quot;]&#125; 2.3 Docker的启动与停止 systemctl命令是系统服务管理器指令 启动docker： 1systemctl start docker 停止docker： 1systemctl stop docker 重启docker： 1systemctl restart docker 查看docker状态： 1systemctl status docker 开机启动： 1systemctl enable docker 查看docker概要信息 1docker info 查看docker帮助文档 1docker --help 3 常用命令 3.1 镜像相关命令 3.1.1 查看镜像 1docker https://threadv.github.io/docker_images REPOSITORY：镜像名称 TAG：镜像标签 https://threadv.github.io/docker_image ID：镜像ID CREATED：镜像的创建日期（不是获取该镜像的日期） SIZE：镜像大小 这些镜像都是存储在Docker宿主机的/var/lib/docker目录下 3.1.2 搜索镜像 如果你需要从网络中查找需要的镜像，可以通过以下命令搜索 1docker search 镜像名称 NAME：仓库名称 DESCRIPTION：镜像描述 STARS：用户评价，反应一个镜像的受欢迎程度 OFFICIAL：是否官方 AUTOMATED：自动构建，表示该镜像由Docker Hub自动构建流程创建的 3.1.3 拉取镜像 拉取镜像就是从中央仓库中下载镜像到本地 1docker pull 镜像名称 例如，我要下载centos7镜像 1docker pull centos:7 3.1.4 删除镜像 按镜像ID删除镜像 1docker rmi 镜像ID 删除所有镜像 1docker rmi `docker https://threadv.github.io/docker_images -q` 3.2 容器相关命令 3.2.1 查看容器 查看正在运行的容器 1docker ps 查看所有容器 1docker ps –a 查看最后一次运行的容器 1docker ps –l 查看停止的容器 1docker ps -f status=exited 3.2.2 创建与启动容器 创建容器常用的参数说明： 创建容器命令：docker run -i：表示运行容器 -t：表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即分配一个伪终端。 –name :为创建的容器命名。 -v：表示目录映射关系（前者是宿主机目录，后者是映射到宿主机上的目录），可以使用多个－v做多个目录或文件映射。注意：最好做目录映射，在宿主机上做修改，然后共享到容器上。 -d：在run后面加上-d参数,则会创建一个守护式容器在后台运行（这样创建容器后不会自动登录容器，如果只加-i -t两个参数，创建后就会自动进去容器）。 -p：表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个-p做多个端口映射 （1）交互式方式创建容器 1docker run -it --name=容器名称 镜像名称:标签 /bin/bash 这时我们通过ps命令查看，发现可以看到启动的容器，状态为启动状态 退出当前容器 1exit （2）守护式方式创建容器： 1docker run -di --name=容器名称 镜像名称:标签 登录守护式容器方式： 1docker exec -it 容器名称 (或者容器ID) /bin/bash 3.2.3 停止与启动容器 停止容器： 1docker stop 容器名称（或者容器ID） 启动容器： 1docker start 容器名称（或者容器ID） 3.2.4 文件拷贝 如果我们需要将文件拷贝到容器内可以使用cp命令 1docker cp 需要拷贝的文件或目录 容器名称:容器目录 也可以将文件从容器内拷贝出来 1docker cp 容器名称:容器目录 需要拷贝的文件或目录 3.2.5 目录挂载 我们可以在创建容器的时候，将宿主机的目录与容器内的目录进行映射，这样我们就可以通过修改宿主机某个目录的文件从而去影响容器。 创建容器 添加-v参数 后边为 宿主机目录:容器目录，例如： 1docker run -di -v /usr/local/myhtml:/usr/local/myhtml --name=mycentos3 centos:7 如果你共享的是多级的目录，可能会出现权限不足的提示。 这是因为CentOS7中的安全模块selinux把权限禁掉了，我们需要添加参数 --privileged=true 来解决挂载的目录没有权限的问题 3.2.6 查看容器IP地址 我们可以通过以下命令查看容器运行的各种数据 1docker inspect 容器名称（容器ID） 也可以直接执行下面的命令直接输出IP地址 1docker inspect --format=&#x27;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&#x27; 容器名称（容器ID） 3.2.7 删除容器 删除指定的容器： 1docker rm 容器名称（容器ID） 4 应用部署 4.1 MySQL部署 （1）拉取mysql镜像 1docker pull centos/mysql-57-centos7 （2）创建容器 1docker run -di --name=tensquare_mysql -p 33306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql -p 代表端口映射，格式为 宿主机映射端口:容器运行端口 -e 代表添加环境变量 MYSQL_ROOT_PASSWORD 是root用户的登陆密码 （3）远程登录mysql 连接宿主机的IP ,指定端口为33306 4.2 tomcat部署 （1）拉取镜像 1docker pull tomcat:7-jre7 （2）创建容器 创建容器 -p表示地址映射 12docker run -di --name=mytomcat -p 9000:8080 -v /usr/local/webapps:/usr/local/tomcat/webapps tomcat:7-jre7 4.3 Nginx部署 （1）拉取镜像 1docker pull nginx （2）创建Nginx容器 1docker run -di --name=mynginx -p 80:80 nginx 4.4 Redis部署 （1）拉取镜像 1docker pull redis （2）创建容器 1docker run -di --name=myredis -p 6379:6379 redis 5 迁移与备份 5.1 容器保存为镜像 我们可以通过以下命令将容器保存为镜像 1docker commit mynginx mynginx_i 5.2 镜像备份 我们可以通过以下命令将镜像保存为tar 文件 1docker save -o mynginx.tar mynginx_i 5.3 镜像恢复与迁移 首先我们先删除掉mynginx_img镜像 然后执行此命令进行恢复 1docker load -i mynginx.tar -i 输入的文件 执行后再次查看镜像，可以看到镜像已经恢复 6 Dockerfile 6.1 什么是Dockerfile Dockerfile是由一系列命令和参数构成的脚本，这些命令应用于基础镜像并最终创建一个新的镜像。 1、对于开发人员：可以为开发团队提供一个完全一致的开发环境； 2、对于测试人员：可以直接拿开发时所构建的镜像或者通过Dockerfile文件构建一个新的镜像开始工作了； 3、对于运维人员：在部署时，可以实现应用的无缝移植。 6.2 常用命令 命令 作用 FROM https://threadv.github.io/docker_image_name:tag 定义了使用哪个基础镜像启动构建流程 MAINTAINER user_name 声明镜像的创建者 ENV key value 设置环境变量 (可以写多条) RUN command 是Dockerfile的核心部分(可以写多条) ADD source_dir/file dest_dir/file 将宿主机的文件复制到容器内，如果是一个压缩文件，将会在复制后自动解压 COPY source_dir/file dest_dir/file 和ADD相似，但是如果有压缩文件并不能解压 WORKDIR path_dir 设置工作目录 6.3 使用脚本创建镜像 步骤： （1）创建目录 1mkdir –p /usr/local/dockerjdk8 （2）下载jdk-8u171-linux-x64.tar.gz并上传到服务器（虚拟机）中的/usr/local/dockerjdk8目录 （3）创建文件Dockerfile vi Dockerfile 123456789101112131415#依赖镜像名称和IDFROM centos:7#指定镜像创建者信息MAINTAINER ITCAST#切换工作目录WORKDIR /usrRUN mkdir /usr/local/java#ADD 是相对路径jar,把java添加到容器中ADD jdk-8u171-linux-x64.tar.gz /usr/local/java/#配置java环境变量ENV JAVA_HOME /usr/local/java/jdk1.8.0_171ENV JRE_HOME $JAVA_HOME/jreENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATHENV PATH $JAVA_HOME/bin:$PATH （4）执行命令构建镜像 1docker build -t=&#x27;jdk1.8&#x27; . 注意后边的空格和点，不要省略 （5）查看镜像是否建立完成 1docker https://threadv.github.io/docker_images 7 Docker私有仓库 7.1 私有仓库搭建与配置 （1）拉取私有仓库镜像（此步省略） 1docker pull registry （2）启动私有仓库容器 1docker run -di --name=registry -p 5000:5000 registry （3）打开浏览器 输入地址http://192.168.184.141:5000/v2/_catalog看到&#123;&quot;repositories&quot;:[]&#125; 表示私有仓库搭建成功并且内容为空 （4）修改daemon.json 1vi /etc/docker/daemon.json 添加以下内容，保存退出。 1&#123;&quot;insecure-registries&quot;:[&quot;192.168.184.141:5000&quot;]&#125; 此步用于让 docker信任私有仓库地址 （5）重启docker 服务 1systemctl restart docker 7.2 镜像上传至私有仓库 （1）标记此镜像为私有仓库的镜像 1docker tag jdk1.8 192.168.184.141:5000/jdk1.8 （2）再次启动私服容器 1docker start registry （3）上传标记的镜像 1docker push 192.168.184.141:5000/jdk1.8","categories":[],"tags":[{"name":"docker","slug":"docker","permalink":"http://example.com/tags/docker/"}]},{"title":"JVM-优化","slug":"JVM-优化","date":"2018-12-28T02:50:35.000Z","updated":"2021-09-22T11:19:04.605Z","comments":true,"path":"2018/12/28/JVM-优化/","link":"","permalink":"http://example.com/2018/12/28/JVM-%E4%BC%98%E5%8C%96/","excerpt":"","text":"JVM-优化 1、Tomcat8优化 tomcat服务器在JavaEE项目中使用率非常高，所以在生产环境对tomcat的优化也变得非常重要了。 对于tomcat的优化，主要是从2个方面入手，一是，tomcat自身的配置，另一个是tomcat所运行的jvm虚拟机的调优。 下面我们将从这2个方面进行讲解。 1.1、Tomcat配置优化 1.1.1、部署安装tomcat8 下载并安装： https://tomcat.apache.org/download-80.cgi 123456789101112131415161718192021222324252627282930313233cd /tmpwget http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.34/bin/apache-tomcat-8.5.34.tar.gztar -xvf apache-tomcat-8.5.34.tar.gzcd apache-tomcat-8.5.34/conf#修改配置文件，配置tomcat的管理用户vim tomcat-users.xml#写入如下内容：&lt;role rolename=&quot;manager&quot;/&gt;&lt;role rolename=&quot;manager-gui&quot;/&gt;&lt;role rolename=&quot;admin&quot;/&gt;&lt;role rolename=&quot;admin-gui&quot;/&gt;&lt;user username=&quot;tomcat&quot; password=&quot;tomcat&quot; roles=&quot;admin-gui,admin,manager-gui,manager&quot;/&gt;#保存退出#如果是tomcat7，配置了tomcat用户就可以登录系统了，但是tomcat8中不行，还需要修改另一个配置文件，否则访问不了，提示403vim webapps/manager/META-INF/context.xml#将&lt;Valve的内容注释掉&lt;Context antiResourceLocking=&quot;false&quot; privileged=&quot;true&quot; &gt; &lt;!-- &lt;Valve className=&quot;org.apache.catalina.valves.RemoteAddrValve&quot; allow=&quot;127\\.\\d+\\.\\d+\\.\\d+|::1|0:0:0:0:0:0:0:1&quot; /&gt; --&gt; &lt;Manager sessionAttributeValueClassNameFilter=&quot;java\\.lang\\.(?:Boolean|Integer|Long|Number|String)|org\\.apache\\.catalina\\.filters\\.CsrfPreventionFilter\\$LruCache(?:\\$1)?|java\\.util\\.(?:Linked)?HashMap&quot;/&gt;&lt;/Context&gt;#保存退出即可#启动tomcatcd /tmp/apache-tomcat-8.5.34/bin/./startup.sh &amp;&amp; tail -f ../logs/catalina.out#打开浏览器进行测试访问http://192.168.40.133:8080/ 点击“Server Status”，输入用户名、密码进行登录，tomcat/tomcat 进入之后即可看到服务的信息。 1.1.2、禁用AJP连接 在服务状态页面中可以看到，默认状态下会启用AJP服务，并且占用8009端口。 什么是AJP呢？ AJP（Apache JServer Protocol） AJPv13协议是面向包的。WEB服务器和Servlet容器通过TCP连接来交互；为了节省SOCKET创建的昂贵代价，WEB服务器会尝试维护一个永久TCP连接到servlet容器，并且在多个请求和响应周期过程会重用连接。 我们一般是使用Nginx+tomcat的架构，所以用不着AJP协议，所以把AJP连接器禁用。 修改conf下的server.xml文件，将AJP服务禁用掉即可。 1&lt;Connector port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot; /&gt; 重启tomcat，查看效果。 可以看到AJP服务以及不存在了。 1.1.3、执行器（线程池） 在tomcat中每一个用户请求都是一个线程，所以可以使用线程池提高性能。 修改server.xml文件： 12345678910111213141516&lt;!--将注释打开--&gt;&lt;Executor name=&quot;tomcatThreadPool&quot; namePrefix=&quot;catalina-exec-&quot; maxThreads=&quot;500&quot; minSpareThreads=&quot;50&quot; prestartminSpareThreads=&quot;true&quot; maxQueueSize=&quot;100&quot;/&gt;&lt;!--参数说明：maxThreads：最大并发数，默认设置 200，一般建议在 500 ~ 1000，根据硬件设施和业务来判断minSpareThreads：Tomcat 初始化时创建的线程数，默认设置 25prestartminSpareThreads： 在 Tomcat 初始化的时候就初始化 minSpareThreads 的参数值，如果不等于 true，minSpareThreads 的值就没啥效果了maxQueueSize，最大的等待队列数，超过则拒绝请求--&gt;&lt;!--在Connector中设置executor属性指向上面的执行器--&gt;&lt;Connector executor=&quot;tomcatThreadPool&quot; port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; connectionTimeout=&quot;20000&quot; redirectPort=&quot;8443&quot; /&gt; 保存退出，重启tomcat，查看效果。 在页面中显示最大线程数为-1，这个是正常的，仅仅是显示的问题，实际使用的指定的值。 也有人遇到这样的问题：https://blog.csdn.net/weixin_38278878/article/details/80144397 1.1.4、3种运行模式 tomcat的运行模式有3种： bio 默认的模式,性能非常低下,没有经过任何优化处理和支持. nio nio(new I/O)，是Java SE 1.4及后续版本提供的一种新的I/O操作方式(即java.nio包及其子包)。Java nio是一个基于缓冲区、并能提供非阻塞I/O操作的Java API，因此nio也被看成是non-blocking I/O的缩写。它拥有比传统I/O操作(bio)更好的并发运行性能。 apr 安装起来最困难,但是从操作系统级别来解决异步的IO问题,大幅度的提高性能. 推荐使用nio，不过，在tomcat8中有最新的nio2，速度更快，建议使用nio2. 设置nio2： 123&lt;Connector executor=&quot;tomcatThreadPool&quot; port=&quot;8080&quot; protocol=&quot;org.apache.coyote.http11.Http11Nio2Protocol&quot; connectionTimeout=&quot;20000&quot; redirectPort=&quot;8443&quot; /&gt; 可以看到已经设置为nio2了。 1.2、部署测试用的java web项目 为了方便测试性能，我们将部署一个java web项目，这个项目本身和本套课程没有什么关系，仅仅用于测试。 注意：这里在测试时，我们使用一个新的tomcat，进行测试，后面再对其进行优化调整，再测试。 1.2.1、创建dashboard数据库 在资料中找到sql脚本文件dashboard.sql，在linux服务器上执行。 1cat dashboard.sql | mysql -uroot -proot 创建完成后，可以看到有3张表。 1.2.2、部署web应用 在资料中找到itcat-dashboard-web.war，上传到linux服务器，进行部署安装。 1234567891011121314151617181920cd /tmp/apache-tomcat-8.5.34/webappsrm -rf *mkdir ROOTcd ROOT/rz上传war包jar -xvf itcat-dashboard-web.warrm -rf itcat-dashboard-web.war#修改数据库配置文件cd /tmp/apache-tomcat-8.5.34/webapps/ROOT/WEB-INF/classesvim jdbc.properties#这里根据自己的实际情况进行配置jdbc.driverClassName=com.mysql.jdbc.Driverjdbc.url=jdbc:mysql://node01:3306/dashboard?useUnicode=true&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;allowMultiQueries=truejdbc.username=rootjdbc.password=root 重新启动tomcat。 访问首页，查看是否已经启动成功：http://192.168.40.133:8080/index 1.3、使用Apache JMeter进行测试 Apache Jmeter是开源的压力测试工具，我们借助于此工具进行测试，将测试出tomcat的吞吐量等信息。 1.3.1、下载安装 下载地址：http://jmeter.apache.org/download_jmeter.cgi 安装：直接将下载好的zip压缩包进行解压即可。 进入bin目录，找到jmeter.bat文件，双机打开即可启动。 1.3.2、修改主题和语言 默认的主题是黑色风格的主题并且语言是英语，这样不太方便使用，所以需要修改下主题和中文语言。 主题修改完成。 接下来设置语言为简体中文。 语言修改完成。 1.3.3、创建首页的测试用例 第一步：保存测试用例 第二步：添加线程组，使用线程模拟用户的并发 1000个线程，每个线程循环10次，也就是tomcat会接收到10000个请求。 第三步：添加http请求 第四步：添加请求监控 1.3.4、启动、进行测试 1.3.5、聚合报告 在聚合报告中，重点看吞吐量。 1.4、调整tomcat参数进行优化 通过上面测试可以看出，tomcat在不做任何调整时，吞吐量为73次/秒。 1.4.1、禁用AJP服务 可以看到，禁用AJP服务后，吞吐量会有所提升。 当然了，测试不一定准确，需要多测试几次才能看出是否有提升。 1.4.2、设置线程池 通过设置线程池，调整线程池相关的参数进行测试tomcat的性能。 1.4.2.1、最大线程数为500，初始为50 12&lt;Executor name=&quot;tomcatThreadPool&quot; namePrefix=&quot;catalina-exec-&quot; maxThreads=&quot;500&quot; minSpareThreads=&quot;50&quot; prestartminSpareThreads=&quot;true&quot;/&gt; 测试结果： 吞吐量为128次/秒，性能有所提升。 1.4.2.2、最大线程数为1000，初始为200 12&lt;Executor name=&quot;tomcatThreadPool&quot; namePrefix=&quot;catalina-exec-&quot; maxThreads=&quot;1000&quot; minSpareThreads=&quot;200&quot; prestartminSpareThreads=&quot;true&quot;/&gt; 吞吐量为151，性能有所提升。 1.4.2.3、最大线程数为5000，初始为1000 是否是线程数最多，速度越快呢？ 我们来测试下。 12&lt;Executor name=&quot;tomcatThreadPool&quot; namePrefix=&quot;catalina-exec-&quot; maxThreads=&quot;5000&quot; minSpareThreads=&quot;1000&quot; prestartminSpareThreads=&quot;true&quot;/&gt; 可以看到，虽然最大线程已经设置到5000，但是实际测试效果并不理想，并且平均的响应时间也边长了，所以单纯靠提升线程数量是不能一直得到性能提升的。 1.4.2.4、设置最大等待队列数 默认情况下，请求发送到tomcat，如果tomcat正忙，那么该请求会一直等待。这样虽然可以保证每个请求都能请求到，但是请求时间就会边长。 有些时候，我们也不一定要求请求一定等待，可以设置最大等待队列大小，如果超过就不等待了。这样虽然有些请求是失败的，但是请求时间会虽短。典型的应用：12306。 123&lt;!--最大等待数为100--&gt;&lt;Executor name=&quot;tomcatThreadPool&quot; namePrefix=&quot;catalina-exec-&quot; maxThreads=&quot;500&quot; minSpareThreads=&quot;100&quot; prestartminSpareThreads=&quot;true&quot; maxQueueSize=&quot;100&quot;/&gt; 测试结果： 平均响应时间：3.1秒 响应时间明显缩短 错误率：49.88% 错误率提升到一半，也可以理解，最大线程为500，测试的并发为1000 吞吐量：238次/秒 吞吐量明显提升 结论：响应时间、吞吐量这2个指标需要找到平衡才能达到更好的性能。 1.4.3、设置nio2的运行模式 将最大线程设置为500进行测试： 12345678&lt;Executor name=&quot;tomcatThreadPool&quot; namePrefix=&quot;catalina-exec-&quot; maxThreads=&quot;500&quot; minSpareThreads=&quot;50&quot; prestartminSpareThreads=&quot;true&quot;/&gt;&lt;!-- 设置nio2 --&gt;&lt;Connector executor=&quot;tomcatThreadPool&quot; port=&quot;8080&quot; protocol=&quot;org.apache.coyote.http11.Http11Nio2Protocol&quot; connectionTimeout=&quot;20000&quot; redirectPort=&quot;8443&quot; /&gt; 可以看到，平均响应时间有缩短，吞吐量有提升，可以得出结论：nio2的性能要高于nio。 1.5、调整JVM参数进行优化 接下来，测试通过jvm参数进行优化，为了测试一致性，依然将最大线程数设置为500，启用nio2运行模式。 1.5.1、设置并行垃圾回收器 12#年轻代、老年代均使用并行收集器，初始堆内存64M，最大堆内存512MJAVA_OPTS=&quot;-XX:+UseParallelGC -XX:+UseParallelOldGC -Xms64m -Xmx512m -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:+PrintHeapAtGC -Xloggc:../logs/gc.log&quot; 测试结果与默认的JVM参数结果接近。（执行了2次测试，结果是第二次测试的结果） 1.5.2、查看gc日志文件 将gc.log文件上传到gceasy.io查看gc中是否存在问题。 问题一： 在报告中显示，在5次GC时，系统所消耗的时间大于用户时间，这反应出的服务器的性能存在瓶颈，调度CPU等资源所消耗的时间要长一些。 问题二： 可以关键指标中可以看出，吞吐量表现不错，但是gc时，线程的暂停时间稍有点长。 问题三： 通过GC的统计可以看出： 年轻代的gc有74次，次数稍有多，说明年轻代设置的大小不合适需要调整 FullGC有8次，说明堆内存的大小不合适，需要调整 问题四： 从GC原因的可以看出，年轻代大小设置不合理，导致了多次GC。 1.5.3、调整年轻代大小 1JAVA_OPTS=&quot;-XX:+UseParallelGC -XX:+UseParallelOldGC -Xms128m -Xmx1024m -XX:NewSize=64m -XX:MaxNewSize=256m -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:+PrintHeapAtGC -Xloggc:../logs/gc.log&quot; 将初始堆大小设置为128m，最大为1024m 初始年轻代大小64m，年轻代最大256m 从测试结果来看，吞吐量以及响应时间均有提升。 查看gc日志： 可以看到GC次数要明显减少，说明调整是有效的。 1.5.4、设置G1垃圾回收器 12#设置了最大停顿时间100毫秒，初始堆内存128m，最大堆内存1024mJAVA_OPTS=&quot;-XX:+UseG1GC -XX:MaxGCPauseMillis=100 -Xms128m -Xmx1024m -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:+PrintHeapAtGC -Xloggc:../logs/gc.log&quot; 测试结果： 可以看到，吞吐量有所提升，评价响应时间也有所缩短。 1.5.5、小结 通过上述的测试，可以总结出，对tomcat性能优化就是需要不断的进行调整参数，然后测试结果，可能会调优也可能会调差，这时就需要借助于gc的可视化工具来看gc的情况。再帮我我们做出决策应该调整哪些参数。 2、JVM字节码 前面我们通过tomcat本身的参数以及jvm的参数对tomcat做了优化，其实要想将应用程序跑的更快、效率更高，除了对tomcat容器以及jvm优化外，应用程序代码本身如果写的效率不高的，那么也是不行的，所以，对于程序本身的优化也就很重要了。 对于程序本身的优化，可以借鉴很多前辈们的经验，但是有些时候，在从源码角度方面分析的话，不好鉴别出哪个效率高，如对字符串拼接的操作，是直接“+”号拼接效率高还是使用StringBuilder效率高？ 这个时候，就需要通过查看编译好的class文件中字节码，就可以找到答案。 我们都知道，java编写应用，需要先通过javac命令编译成class文件，再通过jvm执行，jvm执行时是需要将class文件中的字节码载入到jvm进行运行的。 2.1、通过javap命令查看class文件的字节码内容 首先，看一个简单的Test1类的代码： 12345678910111213package cn.test.jvm;public class Test1 &#123; public static void main(String[] args) &#123; int a = 2; int b = 5; int c = b - a; System.out.println(c); &#125;&#125; 通过javap命令查看class文件中的字节码内容： 123456789101112131415161718192021javap -v Test1.class &gt; Test1.txtjavap用法: javap &lt;options&gt; &lt;classes&gt;其中, 可能的选项包括: -help --help -? 输出此用法消息 -version 版本信息 -v -verbose 输出附加信息 -l 输出行号和本地变量表 -public 仅显示公共类和成员 -protected 显示受保护的/公共类和成员 -package 显示程序包/受保护的/公共类 和成员 (默认) -p -private 显示所有类和成员 -c 对代码进行反汇编 -s 输出内部类型签名 -sysinfo 显示正在处理的类的 系统信息 (路径, 大小, 日期, MD5 散列) -constants 显示最终常量 -classpath &lt;path&gt; 指定查找用户类文件的位置 -cp &lt;path&gt; 指定查找用户类文件的位置 -bootclasspath &lt;path&gt; 覆盖引导类文件的位置 查看Test1.txt文件，内容如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091Classfile /F:/code/test-jvm/test-jvm-test/target/classes/cn/test/jvm/Test1.class Last modified 2018-9-27; size 577 bytes MD5 checksum 4214859db3543c0c783ec8a216a4795f Compiled from &quot;Test1.java&quot;public class cn.test.jvm.Test1 minor version: 0 major version: 52 flags: ACC_PUBLIC, ACC_SUPERConstant pool: #1 = Methodref #5.#23 // java/lang/Object.&quot;&lt;init&gt;&quot;:()V #2 = Fieldref #24.#25 // java/lang/System.out:Ljava/io/PrintStream; #3 = Methodref #26.#27 // java/io/PrintStream.println:(I)V #4 = Class #28 // cn/test/jvm/Test1 #5 = Class #29 // java/lang/Object #6 = Utf8 &lt;init&gt; #7 = Utf8 ()V #8 = Utf8 Code #9 = Utf8 LineNumberTable #10 = Utf8 LocalVariableTable #11 = Utf8 this #12 = Utf8 Lcn/test/jvm/Test1; #13 = Utf8 main #14 = Utf8 ([Ljava/lang/String;)V #15 = Utf8 args #16 = Utf8 [Ljava/lang/String; #17 = Utf8 a #18 = Utf8 I #19 = Utf8 b #20 = Utf8 c #21 = Utf8 SourceFile #22 = Utf8 Test1.java #23 = NameAndType #6:#7 // &quot;&lt;init&gt;&quot;:()V #24 = Class #30 // java/lang/System #25 = NameAndType #31:#32 // out:Ljava/io/PrintStream; #26 = Class #33 // java/io/PrintStream #27 = NameAndType #34:#35 // println:(I)V #28 = Utf8 cn/test/jvm/Test1 #29 = Utf8 java/lang/Object #30 = Utf8 java/lang/System #31 = Utf8 out #32 = Utf8 Ljava/io/PrintStream; #33 = Utf8 java/io/PrintStream #34 = Utf8 println #35 = Utf8 (I)V&#123; public cn.test.jvm.Test1(); descriptor: ()V flags: ACC_PUBLIC Code: stack=1, locals=1, args_size=1 0: aload_0 1: invokespecial #1 // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V 4: return LineNumberTable: line 3: 0 LocalVariableTable: Start Length Slot Name Signature 0 5 0 this Lcn/test/jvm/Test1; public static void main(java.lang.String[]); descriptor: ([Ljava/lang/String;)V flags: ACC_PUBLIC, ACC_STATIC Code: stack=2, locals=4, args_size=1 0: iconst_2 1: istore_1 2: iconst_5 3: istore_2 4: iload_2 5: iload_1 6: isub 7: istore_3 8: getstatic #2 // Field java/lang/System.out:Ljava/io/PrintStream; 11: iload_3 12: invokevirtual #3 // Method java/io/PrintStream.println:(I)V 15: return LineNumberTable: line 6: 0 line 7: 2 line 8: 4 line 9: 8 line 10: 15 LocalVariableTable: Start Length Slot Name Signature 0 16 0 args [Ljava/lang/String; 2 14 1 a I 4 12 2 b I 8 8 3 c I&#125;SourceFile: &quot;Test1.java&quot; 内容大致分为4个部分： 第一部分：显示了生成这个class的java源文件、版本信息、生成时间等。 第二部分：显示了该类中所涉及到常量池，共35个常量。 第三部分：显示该类的构造器，编译器自动插入的。 第四部分：显示了main方的信息。（这个是需要我们重点关注的） 2.2、常量池 官网文档： https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.4-140 Constant Type Value 说明 CONSTANT_Class 7 类或接口的符号引用 CONSTANT_Fieldref 9 字段的符号引用 CONSTANT_Methodref 10 类中方法的符号引用 CONSTANT_InterfaceMethodref 11 接口中方法的符号引用 CONSTANT_String 8 字符串类型常量 CONSTANT_Integer 3 整形常量 CONSTANT_Float 4 浮点型常量 CONSTANT_Long 5 长整型常量 CONSTANT_Double 6 双精度浮点型常量 CONSTANT_NameAndType 12 字段或方法的符号引用 CONSTANT_Utf8 1 UTF-8编码的字符串 CONSTANT_MethodHandle 15 表示方法句柄 CONSTANT_MethodType 16 标志方法类型 CONSTANT_InvokeDynamic 18 表示一个动态方法调用点 2.3、描述符 2.3.1、字段描述符 官网：https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.3.2 FieldType term Type Interpretation B byte signed byte C char Unicode character code point in the Basic Multilingual Plane, encoded with UTF-16 D double double-precision floating-point value F float single-precision floating-point value I int integer J long long integer LClassName; reference an instance of class ClassName S short signed short Z boolean true or false [ reference one array dimension 2.3.2、方法描述符 官网：https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.3.3 示例： The method descriptor for the method: 1Object m(int i, double d, Thread t) &#123;...&#125; is: 1(IDLjava/lang/Thread;)Ljava/lang/Object; 2.4、解读方法字节码 12345678910111213141516171819202122232425262728293031323334 public static void main(java.lang.String[]); descriptor: ([Ljava/lang/String;)V //方法描述，V表示该方法的放回值为void flags: ACC_PUBLIC, ACC_STATIC // 方法修饰符，public、static的 Code: // stack=2,操作栈的大小为2、locals=4，本地变量表大小，args_size=1, 参数的个数 stack=2, locals=4, args_size=1 0: iconst_2 //将数字2值压入操作栈，位于栈的最上面 1: istore_1 //从操作栈中弹出一个元素(数字2)，放入到本地变量表中，位于下标为1的位置（下标为0的是this） 2: iconst_5 //将数字5值压入操作栈，位于栈的最上面 3: istore_2 //从操作栈中弹出一个元素(5)，放入到本地变量表中，位于第下标为2个位置 4: iload_2 //将本地变量表中下标为2的位置元素压入操作栈（5） 5: iload_1 //将本地变量表中下标为1的位置元素压入操作栈（2） 6: isub //操作栈中的2个数字相减 7: istore_3 // 将相减的结果压入到本地本地变量表中，位于下标为3的位置 // 通过#2号找到对应的常量，即可找到对应的引用 8: getstatic #2 // Field java/lang/System.out:Ljava/io/PrintStream; 11: iload_3 //将本地变量表中下标为3的位置元素压入操作栈（3） // 通过#3号找到对应的常量，即可找到对应的引用，进行方法调用 12: invokevirtual #3 // Method java/io/PrintStream.println:(I)V 15: return //返回 LineNumberTable: //行号的列表 line 6: 0 line 7: 2 line 8: 4 line 9: 8 line 10: 15 LocalVariableTable: // 本地变量表 Start Length Slot Name Signature 0 16 0 args [Ljava/lang/String; 2 14 1 a I 4 12 2 b I 8 8 3 c I&#125;SourceFile: &quot;Test1.java&quot; 2.4.1、图解 2.5、研究 i++ 与 ++i 的不同 我们都知道，i++表示，先返回再+1，++i表示，先+1再返回。它的底层是怎么样的呢? 我们一起探究下。 编写测试代码： 1234567891011121314151617181920public class Test2 &#123; public static void main(String[] args) &#123; new Test2().method1(); new Test2().method2(); &#125; public void method1()&#123; int i = 1; int a = i++; System.out.println(a); //打印1 &#125; public void method2()&#123; int i = 1; int a = ++i; System.out.println(a);//打印2 &#125;&#125; 2.5.1、查看class字节码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138Classfile /F:/code/test-jvm/test-jvm-test/target/classes/cn/test/jvm/Test2.class MD5 checksum 901660fc11c43b6daadd0942150960ed Compiled from &quot;Test2.java&quot;public class cn.test.jvm.Test2 minor version: 0 major version: 52 flags: ACC_PUBLIC, ACC_SUPERConstant pool: #1 = Methodref #8.#27 // java/lang/Object.&quot;&lt;init&gt;&quot;:()V #2 = Class #28 // cn/test/jvm/Test2 #3 = Methodref #2.#27 // cn/test/jvm/Test2.&quot;&lt;init&gt;&quot;:()V #4 = Methodref #2.#29 // cn/test/jvm/Test2.method1:()V #5 = Methodref #2.#30 // cn/test/jvm/Test2.method2:()V #6 = Fieldref #31.#32 // java/lang/System.out:Ljava/io/PrintStream; #7 = Methodref #33.#34 // java/io/PrintStream.println:(I)V #8 = Class #35 // java/lang/Object #9 = Utf8 &lt;init&gt; #10 = Utf8 ()V #11 = Utf8 Code #12 = Utf8 LineNumberTable #13 = Utf8 LocalVariableTable #14 = Utf8 this #15 = Utf8 Lcn/test/jvm/Test2; #16 = Utf8 main #17 = Utf8 ([Ljava/lang/String;)V #18 = Utf8 args #19 = Utf8 [Ljava/lang/String; #20 = Utf8 method1 #21 = Utf8 i #22 = Utf8 I #23 = Utf8 a #24 = Utf8 method2 #25 = Utf8 SourceFile #26 = Utf8 Test2.java #27 = NameAndType #9:#10 // &quot;&lt;init&gt;&quot;:()V #28 = Utf8 cn/test/jvm/Test2 #29 = NameAndType #20:#10 // method1:()V #30 = NameAndType #24:#10 // method2:()V #31 = Class #36 // java/lang/System #32 = NameAndType #37:#38 // out:Ljava/io/PrintStream; #33 = Class #39 // java/io/PrintStream #34 = NameAndType #40:#41 // println:(I)V #35 = Utf8 java/lang/Object #36 = Utf8 java/lang/System #37 = Utf8 out #38 = Utf8 Ljava/io/PrintStream; #39 = Utf8 java/io/PrintStream #40 = Utf8 println #41 = Utf8 (I)V&#123; public cn.test.jvm.Test2(); descriptor: ()V flags: ACC_PUBLIC Code: stack=1, locals=1, args_size=1 0: aload_0 1: invokespecial #1 // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V 4: return LineNumberTable: line 3: 0 LocalVariableTable: Start Length Slot Name Signature 0 5 0 this Lcn/test/jvm/Test2; public static void main(java.lang.String[]); descriptor: ([Ljava/lang/String;)V flags: ACC_PUBLIC, ACC_STATIC Code: stack=2, locals=1, args_size=1 0: new #2 // class cn/test/jvm/Test2 3: dup 4: invokespecial #3 // Method &quot;&lt;init&gt;&quot;:()V 7: invokevirtual #4 // Method method1:()V 10: new #2 // class cn/test/jvm/Test2 13: dup 14: invokespecial #3 // Method &quot;&lt;init&gt;&quot;:()V 17: invokevirtual #5 // Method method2:()V 20: return LineNumberTable: line 6: 0 line 7: 10 line 8: 20 LocalVariableTable: Start Length Slot Name Signature 0 21 0 args [Ljava/lang/String; public void method1(); descriptor: ()V flags: ACC_PUBLIC Code: stack=2, locals=3, args_size=1 0: iconst_1 1: istore_1 2: iload_1 3: iinc 1, 1 6: istore_2 7: getstatic #6 // Field java/lang/System.out:Ljava/io/PrintStream; 10: iload_2 11: invokevirtual #7 // Method java/io/PrintStream.println:(I)V 14: return LineNumberTable: line 11: 0 line 12: 2 line 13: 7 line 14: 14 LocalVariableTable: Start Length Slot Name Signature 0 15 0 this Lcn/test/jvm/Test2; 2 13 1 i I 7 8 2 a I public void method2(); descriptor: ()V flags: ACC_PUBLIC Code: stack=2, locals=3, args_size=1 0: iconst_1 1: istore_1 2: iinc 1, 1 5: iload_1 6: istore_2 7: getstatic #6 // Field java/lang/System.out:Ljava/io/PrintStream; 10: iload_2 11: invokevirtual #7 // Method java/io/PrintStream.println:(I)V 14: return LineNumberTable: line 17: 0 line 18: 2 line 19: 7 line 20: 14 LocalVariableTable: Start Length Slot Name Signature 0 15 0 this Lcn/test/jvm/Test2; 2 13 1 i I 7 8 2 a I&#125;SourceFile: &quot;Test2.java&quot; 2.5.2、对比 i++： 123456789 0: iconst_1 //将数字1压入到操作栈 1: istore_1 //将数字1从操作栈弹出，压入到本地变量表中，下标为1 2: iload_1 //从本地变量表中获取下标为1的数据，压入到操作栈中 3: iinc 1, 1 // 将本地变量中的1，再+1 6: istore_2 // 将数字1从操作栈弹出，压入到本地变量表中，下标为2 7: getstatic #6 // Field java/lang/System.out:Ljava/io/PrintStream;10: iload_2 //从本地变量表中获取下标为2的数据，压入到操作栈中11: invokevirtual #7 // Method java/io/PrintStream.println:(I)V14: return ++i： 123456789 0: iconst_1 //将数字1压入到操作栈 1: istore_1 //将数字1从操作栈弹出，压入到本地变量表中，下标为1 2: iinc 1, 1// 将本地变量中的1，再+1 5: iload_1 //从本地变量表中获取下标为1的数据（2），压入到操作栈中 6: istore_2 //将数字2从操作栈弹出，压入到本地变量表中，下标为2 7: getstatic #6 // Field java/lang/System.out:Ljava/io/PrintStream;10: iload_2 //从本地变量表中获取下标为2的数据（2），压入到操作栈中11: invokevirtual #7 // Method java/io/PrintStream.println:(I)V14: return 区别： i++ 只是在本地变量中对数字做了相加，并没有将数据压入到操作栈 将前面拿到的数字1，再次从操作栈中拿到，压入到本地变量中 ++i 将本地变量中的数字做了相加，并且将数据压入到操作栈 将操作栈中的数据，再次压入到本地变量中 小结：可以通过查看字节码的方式对代码的底层做研究，探究其原理。 2.6、字符串拼接 字符串的拼接在开发过程中使用是非常频繁的，常用的方式有三种： +号拼接： str+“456” StringBuilder拼接 StringBuffer拼接 StringBuffer是保证线程安全的，效率是比较低的，我们更多的是使用场景是不会涉及到线程安全的问题的，所以更多的时候会选择StringBuilder，效率会高一些。 那么，问题来了，StringBuilder和“+”号拼接，哪个效率高呢？接下来我们通过字节码的方式进行探究。 首先，编写个示例： 123456789101112131415161718192021222324252627package cn.test.jvm;public class Test3 &#123; public static void main(String[] args) &#123; new Test3().m1(); new Test3().m2(); &#125; public void m1()&#123; String s1 = &quot;123&quot;; String s2 = &quot;456&quot;; String s3 = s1 + s2; System.out.println(s3); &#125; public void m2()&#123; String s1 = &quot;123&quot;; String s2 = &quot;456&quot;; StringBuilder sb = new StringBuilder(); sb.append(s1); sb.append(s2); String s3 = sb.toString(); System.out.println(s3); &#125;&#125; 查看Test3.class的字节码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186Classfile /F:/code/test-jvm/test-jvm-test/target/classes/cn/test/jvm/Test3.class MD5 checksum b3f7629e7e37768b9b5581be01df40d6 Compiled from &quot;Test3.java&quot;public class cn.test.jvm.Test3 minor version: 0 major version: 52 flags: ACC_PUBLIC, ACC_SUPERConstant pool: #1 = Methodref #14.#36 // java/lang/Object.&quot;&lt;init&gt;&quot;:()V #2 = Class #37 // cn/test/jvm/Test3 #3 = Methodref #2.#36 // cn/test/jvm/Test3.&quot;&lt;init&gt;&quot;:()V #4 = Methodref #2.#38 // cn/test/jvm/Test3.m1:()V #5 = Methodref #2.#39 // cn/test/jvm/Test3.m2:()V #6 = String #40 // 123 #7 = String #41 // 456 #8 = Class #42 // java/lang/StringBuilder #9 = Methodref #8.#36 // java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V #10 = Methodref #8.#43 // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder; #11 = Methodref #8.#44 // java/lang/StringBuilder.toString:()Ljava/lang/String; #12 = Fieldref #45.#46 // java/lang/System.out:Ljava/io/PrintStream; #13 = Methodref #47.#48 // java/io/PrintStream.println:(Ljava/lang/String;)V #14 = Class #49 // java/lang/Object #15 = Utf8 &lt;init&gt; #16 = Utf8 ()V #17 = Utf8 Code #18 = Utf8 LineNumberTable #19 = Utf8 LocalVariableTable #20 = Utf8 this #21 = Utf8 Lcn/test/jvm/Test3; #22 = Utf8 main #23 = Utf8 ([Ljava/lang/String;)V #24 = Utf8 args #25 = Utf8 [Ljava/lang/String; #26 = Utf8 m1 #27 = Utf8 s1 #28 = Utf8 Ljava/lang/String; #29 = Utf8 s2 #30 = Utf8 s3 #31 = Utf8 m2 #32 = Utf8 sb #33 = Utf8 Ljava/lang/StringBuilder; #34 = Utf8 SourceFile #35 = Utf8 Test3.java #36 = NameAndType #15:#16 // &quot;&lt;init&gt;&quot;:()V #37 = Utf8 cn/test/jvm/Test3 #38 = NameAndType #26:#16 // m1:()V #39 = NameAndType #31:#16 // m2:()V #40 = Utf8 123 #41 = Utf8 456 #42 = Utf8 java/lang/StringBuilder #43 = NameAndType #50:#51 // append:(Ljava/lang/String;)Ljava/lang/StringBuilder; #44 = NameAndType #52:#53 // toString:()Ljava/lang/String; #45 = Class #54 // java/lang/System #46 = NameAndType #55:#56 // out:Ljava/io/PrintStream; #47 = Class #57 // java/io/PrintStream #48 = NameAndType #58:#59 // println:(Ljava/lang/String;)V #49 = Utf8 java/lang/Object #50 = Utf8 append #51 = Utf8 (Ljava/lang/String;)Ljava/lang/StringBuilder; #52 = Utf8 toString #53 = Utf8 ()Ljava/lang/String; #54 = Utf8 java/lang/System #55 = Utf8 out #56 = Utf8 Ljava/io/PrintStream; #57 = Utf8 java/io/PrintStream #58 = Utf8 println #59 = Utf8 (Ljava/lang/String;)V&#123; public cn.test.jvm.Test3(); descriptor: ()V flags: ACC_PUBLIC Code: stack=1, locals=1, args_size=1 0: aload_0 1: invokespecial #1 // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V 4: return LineNumberTable: line 3: 0 LocalVariableTable: Start Length Slot Name Signature 0 5 0 this Lcn/test/jvm/Test3; public static void main(java.lang.String[]); descriptor: ([Ljava/lang/String;)V flags: ACC_PUBLIC, ACC_STATIC Code: stack=2, locals=1, args_size=1 0: new #2 // class cn/test/jvm/Test3 3: dup 4: invokespecial #3 // Method &quot;&lt;init&gt;&quot;:()V 7: invokevirtual #4 // Method m1:()V 10: new #2 // class cn/test/jvm/Test3 13: dup 14: invokespecial #3 // Method &quot;&lt;init&gt;&quot;:()V 17: invokevirtual #5 // Method m2:()V 20: return LineNumberTable: line 6: 0 line 7: 10 line 8: 20 LocalVariableTable: Start Length Slot Name Signature 0 21 0 args [Ljava/lang/String; public void m1(); descriptor: ()V flags: ACC_PUBLIC Code: stack=2, locals=4, args_size=1 0: ldc #6 // String 123 2: astore_1 3: ldc #7 // String 456 5: astore_2 6: new #8 // class java/lang/StringBuilder 9: dup 10: invokespecial #9 // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V 13: aload_1 14: invokevirtual #10 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder; 17: aload_2 18: invokevirtual #10 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder; 21: invokevirtual #11 // Method java/lang/StringBuilder.toString:()Ljava/lang/String; 24: astore_3 25: getstatic #12 // Field java/lang/System.out:Ljava/io/PrintStream; 28: aload_3 29: invokevirtual #13 // Method java/io/PrintStream.println:(Ljava/lang/String;)V 32: return LineNumberTable: line 11: 0 line 12: 3 line 13: 6 line 14: 25 line 15: 32 LocalVariableTable: Start Length Slot Name Signature 0 33 0 this Lcn/test/jvm/Test3; 3 30 1 s1 Ljava/lang/String; 6 27 2 s2 Ljava/lang/String; 25 8 3 s3 Ljava/lang/String; public void m2(); descriptor: ()V flags: ACC_PUBLIC Code: stack=2, locals=5, args_size=1 0: ldc #6 // String 123 2: astore_1 3: ldc #7 // String 456 5: astore_2 6: new #8 // class java/lang/StringBuilder 9: dup 10: invokespecial #9 // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V 13: astore_3 14: aload_3 15: aload_1 16: invokevirtual #10 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder; 19: pop 20: aload_3 21: aload_2 22: invokevirtual #10 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder; 25: pop 26: aload_3 27: invokevirtual #11 // Method java/lang/StringBuilder.toString:()Ljava/lang/String; 30: astore 4 32: getstatic #12 // Field java/lang/System.out:Ljava/io/PrintStream; 35: aload 4 37: invokevirtual #13 // Method java/io/PrintStream.println:(Ljava/lang/String;)V 40: return LineNumberTable: line 18: 0 line 19: 3 line 20: 6 line 21: 14 line 22: 20 line 23: 26 line 24: 32 line 25: 40 LocalVariableTable: Start Length Slot Name Signature 0 41 0 this Lcn/test/jvm/Test3; 3 38 1 s1 Ljava/lang/String; 6 35 2 s2 Ljava/lang/String; 14 27 3 sb Ljava/lang/StringBuilder; 32 9 4 s3 Ljava/lang/String;&#125;SourceFile: &quot;Test3.java&quot; 从解字节码中可以看出，m1()方法源码中是使用+号拼接，但是在字节码中也被编译成了StringBuilder方式。 所以，可以得出结论，字符串拼接，+号和StringBuilder是相等的，效率一样。 接下来，我们再看一个案例： 1234567891011121314151617181920212223242526package cn.test.jvm;public class Test4 &#123; public static void main(String[] args) &#123; new Test4().m1(); new Test4().m2(); &#125; public void m1()&#123; String str = &quot;&quot;; for (int i = 0; i &lt; 5; i++) &#123; str = str + i; &#125; System.out.println(str); &#125; public void m2()&#123; StringBuilder sb = new StringBuilder(); for (int i = 0; i &lt; 5; i++) &#123; sb.append(i); &#125; System.out.println(sb.toString()); &#125;&#125; m1() 与 m2() 哪个方法的效率高？ 依然是通过字节码的方式进行探究。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201Classfile /F:/code/test-jvm/test-jvm-test/target/classes/cn/test/jvm/Test4.class MD5 checksum f87a55446b8b6cd88b6e54bd5edcc9dc Compiled from &quot;Test4.java&quot;public class cn.test.jvm.Test4 minor version: 0 major version: 52 flags: ACC_PUBLIC, ACC_SUPERConstant pool: #1 = Methodref #14.#39 // java/lang/Object.&quot;&lt;init&gt;&quot;:()V #2 = Class #40 // cn/test/jvm/Test4 #3 = Methodref #2.#39 // cn/test/jvm/Test4.&quot;&lt;init&gt;&quot;:()V #4 = Methodref #2.#41 // cn/test/jvm/Test4.m1:()V #5 = Methodref #2.#42 // cn/test/jvm/Test4.m2:()V #6 = String #43 // #7 = Class #44 // java/lang/StringBuilder #8 = Methodref #7.#39 // java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V #9 = Methodref #7.#45 // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder; #10 = Methodref #7.#46 // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder; #11 = Methodref #7.#47 // java/lang/StringBuilder.toString:()Ljava/lang/String; #12 = Fieldref #48.#49 // java/lang/System.out:Ljava/io/PrintStream; #13 = Methodref #50.#51 // java/io/PrintStream.println:(Ljava/lang/String;)V #14 = Class #52 // java/lang/Object #15 = Utf8 &lt;init&gt; #16 = Utf8 ()V #17 = Utf8 Code #18 = Utf8 LineNumberTable #19 = Utf8 LocalVariableTable #20 = Utf8 this #21 = Utf8 Lcn/test/jvm/Test4; #22 = Utf8 main #23 = Utf8 ([Ljava/lang/String;)V #24 = Utf8 args #25 = Utf8 [Ljava/lang/String; #26 = Utf8 m1 #27 = Utf8 i #28 = Utf8 I #29 = Utf8 str #30 = Utf8 Ljava/lang/String; #31 = Utf8 StackMapTable #32 = Class #53 // java/lang/String #33 = Utf8 m2 #34 = Utf8 sb #35 = Utf8 Ljava/lang/StringBuilder; #36 = Class #44 // java/lang/StringBuilder #37 = Utf8 SourceFile #38 = Utf8 Test4.java #39 = NameAndType #15:#16 // &quot;&lt;init&gt;&quot;:()V #40 = Utf8 cn/test/jvm/Test4 #41 = NameAndType #26:#16 // m1:()V #42 = NameAndType #33:#16 // m2:()V #43 = Utf8 #44 = Utf8 java/lang/StringBuilder #45 = NameAndType #54:#55 // append:(Ljava/lang/String;)Ljava/lang/StringBuilder; #46 = NameAndType #54:#56 // append:(I)Ljava/lang/StringBuilder; #47 = NameAndType #57:#58 // toString:()Ljava/lang/String; #48 = Class #59 // java/lang/System #49 = NameAndType #60:#61 // out:Ljava/io/PrintStream; #50 = Class #62 // java/io/PrintStream #51 = NameAndType #63:#64 // println:(Ljava/lang/String;)V #52 = Utf8 java/lang/Object #53 = Utf8 java/lang/String #54 = Utf8 append #55 = Utf8 (Ljava/lang/String;)Ljava/lang/StringBuilder; #56 = Utf8 (I)Ljava/lang/StringBuilder; #57 = Utf8 toString #58 = Utf8 ()Ljava/lang/String; #59 = Utf8 java/lang/System #60 = Utf8 out #61 = Utf8 Ljava/io/PrintStream; #62 = Utf8 java/io/PrintStream #63 = Utf8 println #64 = Utf8 (Ljava/lang/String;)V&#123; public cn.test.jvm.Test4(); descriptor: ()V flags: ACC_PUBLIC Code: stack=1, locals=1, args_size=1 0: aload_0 1: invokespecial #1 // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V 4: return LineNumberTable: line 3: 0 LocalVariableTable: Start Length Slot Name Signature 0 5 0 this Lcn/test/jvm/Test4; public static void main(java.lang.String[]); descriptor: ([Ljava/lang/String;)V flags: ACC_PUBLIC, ACC_STATIC Code: stack=2, locals=1, args_size=1 0: new #2 // class cn/test/jvm/Test4 3: dup 4: invokespecial #3 // Method &quot;&lt;init&gt;&quot;:()V 7: invokevirtual #4 // Method m1:()V 10: new #2 // class cn/test/jvm/Test4 13: dup 14: invokespecial #3 // Method &quot;&lt;init&gt;&quot;:()V 17: invokevirtual #5 // Method m2:()V 20: return LineNumberTable: line 6: 0 line 7: 10 line 8: 20 LocalVariableTable: Start Length Slot Name Signature 0 21 0 args [Ljava/lang/String; public void m1(); descriptor: ()V flags: ACC_PUBLIC Code: stack=2, locals=3, args_size=1 0: ldc #6 // String 2: astore_1 // 将空字符串压入到本地变量表中的下标为1的位置 3: iconst_0 // 将数字0压入操作栈顶 4: istore_2 // 将栈顶数字0压入到本地变量表中的下标为2的位置 5: iload_2 // 将本地变量中下标为2的数字0压入操作栈顶 6: iconst_5 // 将数字5压入操作栈顶 7: if_icmpge 35 //比较栈顶两int型数值大小，当结果大于等于0时跳转到35 10: new #7 // class java/lang/StringBuilder 13: dup //复制栈顶数值并将复制值压入栈顶(数字5) 14: invokespecial #8 // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V 17: aload_1 18: invokevirtual #9 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder; 21: iload_2 //将本地变量中下标为2的数字0压入操作栈顶 22: invokevirtual #10 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder; 25: invokevirtual #11 // Method java/lang/StringBuilder.toString:()Ljava/lang/String; 28: astore_1 29: iinc 2, 1 32: goto 5 35: getstatic #12 // Field java/lang/System.out:Ljava/io/PrintStream; 38: aload_1 39: invokevirtual #13 // Method java/io/PrintStream.println:(Ljava/lang/String;)V 42: return LineNumberTable: line 11: 0 line 12: 3 line 13: 10 line 12: 29 line 15: 35 line 16: 42 LocalVariableTable: Start Length Slot Name Signature 5 30 2 i I 0 43 0 this Lcn/test/jvm/Test4; 3 40 1 str Ljava/lang/String; StackMapTable: number_of_entries = 2 frame_type = 253 /* append */ offset_delta = 5 locals = [ class java/lang/String, int ] frame_type = 250 /* chop */ offset_delta = 29 public void m2(); descriptor: ()V flags: ACC_PUBLIC Code: stack=2, locals=3, args_size=1 0: new #7 // class java/lang/StringBuilder 3: dup 4: invokespecial #8 // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V 7: astore_1 8: iconst_0 9: istore_2 10: iload_2 11: iconst_5 12: if_icmpge 27 15: aload_1 16: iload_2 17: invokevirtual #10 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder; 20: pop 21: iinc 2, 1 24: goto 10 27: getstatic #12 // Field java/lang/System.out:Ljava/io/PrintStream; 30: aload_1 31: invokevirtual #11 // Method java/lang/StringBuilder.toString:()Ljava/lang/String; 34: invokevirtual #13 // Method java/io/PrintStream.println:(Ljava/lang/String;)V 37: return LineNumberTable: line 19: 0 line 20: 8 line 21: 15 line 20: 21 line 23: 27 line 24: 37 LocalVariableTable: Start Length Slot Name Signature 10 17 2 i I 0 38 0 this Lcn/test/jvm/Test4; 8 30 1 sb Ljava/lang/StringBuilder; StackMapTable: number_of_entries = 2 frame_type = 253 /* append */ offset_delta = 10 locals = [ class java/lang/StringBuilder, int ] frame_type = 250 /* chop */ offset_delta = 16&#125;SourceFile: &quot;Test4.java&quot; 可以看到，m1()方法中的循环体内，每一次循环都会创建StringBuilder对象，效率低于m2()方法。 2.7、小结 使用字节码的方式可以很好查看代码底层的执行，从而可以看出哪些实现效率高，哪些实现效率低。可以更好的对我们的代码做优化。让程序执行效率更高。 3、代码优化 优化，不仅仅是在运行环境进行优化，还需要在代码本身做优化，如果代码本身存在性能问题，那么在其他方面再怎么优化也不可能达到效果最优的。 3.1、尽可能使用局部变量 调用方法时传递的参数以及在调用中创建的临时变量都保存在栈中速度较快，其他变量，如静态变量、实例变量等，都在堆中创建，速度较慢。另外，栈中创建的变量，随着方法的运行结束，这些内容就没了，不需要额外的垃圾回收。 3.2、尽量减少对变量的重复计算 明确一个概念，对方法的调用，即使方法中只有一句语句，也是有消耗的。所以例如下面的操作： 12for (int i = 0; i &lt; list.size(); i++)&#123;...&#125; 建议替换为： 1234int length = list.size();for (int i = 0, i &lt; length; i++)&#123;...&#125; 这样，在list.size()很大的时候，就减少了很多的消耗。 3.3、尽量采用懒加载的策略，即在需要的时候才创建 1234567891011String str = &quot;aaa&quot;;if (i == 1)&#123; list.add(str);&#125;//建议替换成if (i == 1)&#123; String str = &quot;aaa&quot;; list.add(str);&#125; 3.4、异常不应该用来控制程序流程 异常对性能不利。抛出异常首先要创建一个新的对象，Throwable接口的构造函数调用名为fillInStackTrace()的本地同步方 法，fillInStackTrace()方法检查堆栈，收集调用跟踪信息。只要有异常被抛出，Java虚拟机就必须调整调用堆栈，因为在处理过程中创建 了一个新的对象。异常只能用于错误处理，不应该用来控制程序流程。 3.5、不要将数组声明为public static final 因为这毫无意义，这样只是定义了引用为static final，数组的内容还是可以随意改变的，将数组声明为public更是一个安全漏洞，这意味着这个数组可以被外部类所改变。 3.6、不要创建一些不使用的对象，不要导入一些不使用的类 这毫无意义，如果代码中出现&quot;The value of the local variable i is not used&quot;、“The import java.util is never used”，那么请删除这些无用的内容 3.7、程序运行过程中避免使用反射 反射是Java提供给用户一个很强大的功能，功能强大往往意味着效率不高。不建议在程序运行过程中使用尤其是频繁使用反射机制，特别是 Method的invoke方法。 如果确实有必要，一种建议性的做法是将那些需要通过反射加载的类在项目启动的时候通过反射实例化出一个对象并放入内存。 3.8、使用数据库连接池和线程池 这两个池都是用于重用对象的，前者可以避免频繁地打开和关闭连接，后者可以避免频繁地创建和销毁线程。 3.9、容器初始化时尽可能指定长度 容器初始化时尽可能指定长度，如：new ArrayList&lt;&gt;(10); new HashMap&lt;&gt;(32); 避免容器长度不足时，扩容带来的性能损耗。 3.10、ArrayList随机遍历快，LinkedList添加删除快 3.11、使用Entry遍历Map 12345Map&lt;String,String&gt; map = new HashMap&lt;&gt;();for (Map.Entry&lt;String,String&gt; entry : map.entrySet()) &#123; String key = entry.getKey(); String value = entry.getValue();&#125; 避免使用这种方式： 1234Map&lt;String,String&gt; map = new HashMap&lt;&gt;();for (String key : map.keySet()) &#123; String value = map.get(key);&#125; 3.12、不要手动调用System.gc(); 3.13、String尽量少用正则表达式 正则表达式虽然功能强大，但是其效率较低，除非是有需要，否则尽可能少用。 replace() 不支持正则 replaceAll() 支持正则 如果仅仅是字符的替换建议使用replace()。 3.14、日志的输出要注意级别 12// 当前的日志级别是errorLOGGER.info(&quot;保存出错！&quot; + user); 3.15、对资源的close()建议分开操作 1234567891011121314151617181920212223try&#123; XXX.close(); YYY.close();&#125;catch (Exception e)&#123; ...&#125;// 建议改为try&#123; XXX.close();&#125;catch (Exception e)&#123; ...&#125;try&#123; YYY.close();&#125;catch (Exception e)&#123; ...&#125;","categories":[],"tags":[{"name":"jvm","slug":"jvm","permalink":"http://example.com/tags/jvm/"}]},{"title":"JVM-GC","slug":"Jvm-GC","date":"2018-12-28T02:49:26.000Z","updated":"2021-09-22T11:19:04.606Z","comments":true,"path":"2018/12/28/Jvm-GC/","link":"","permalink":"http://example.com/2018/12/28/Jvm-GC/","excerpt":"","text":"JVM - GC 1、垃圾回收 程序的运行必然需要申请内存资源，无效的对象资源如果不及时处理就会一直占有内存资源，最终将导致内存溢出，所以对内存资源的管理是非常重要了。 1.1、C/C++语言的垃圾回收 在C/C++语言中，没有自动垃圾回收机制，是通过new关键字申请内存资源，通过delete关键字释放内存资源。 如果，程序员在某些位置没有写delete进行释放，那么申请的对象将一直占用内存资源，最终可能会导致内存溢出。 1.2、Java语言的垃圾回收 为了让程序员更专注于代码的实现，而不用过多的考虑内存释放的问题，所以，在Java语言中，有了自动的垃圾回收机制，也就是我们熟悉的GC。 有了垃圾回收机制后，程序员只需要关心内存的申请即可，内存的释放由系统自动识别完成。 换句话说，自动的垃圾回收的算法就会变得非常重要了，如果因为算法的不合理，导致内存资源一直没有释放，同样也可能会导致内存溢出的。 当然，除了Java语言，C#、Python等语言也都有自动的垃圾回收机制。 2、垃圾回收的常见算法 自动化的管理内存资源，垃圾回收机制必须要有一套算法来进行计算，哪些是有效的对象，哪些是无效的对象，对于无效的对象就要进行回收处理。 常见的垃圾回收算法有：引用计数法、标记清除法、标记压缩法、复制算法、分代算法等。 2.1、引用计数法 引用计数是历史最悠久的一种算法，最早George E. Collins在1960的时候首次提出，50年后的今天，该算法依然被很多编程语言使用。 2.1.1、原理 假设有一个对象A，任何一个对象对A的引用，那么对象A的引用计数器+1，当引用失败时，对象A的引用计数器就-1，如果对象A的计数器的值为0，就说明对象A没有引用了，可以被回收。 2.1.2、优缺点 优点： 实时性较高，无需等到内存不够的时候，才开始回收，运行时根据对象的计数器是否为0，就可以直接回收。 在垃圾回收过程中，应用无需挂起。如果申请内存时，内存不足，则立刻报outofmember 错误。 区域性，更新对象的计数器时，只是影响到该对象，不会扫描全部对象。 缺点： 每次对象被引用时，都需要去更新计数器，有一点时间开销。 浪费CPU资源，即使内存够用，仍然在运行时进行计数器的统计。 无法解决循环引用问题。（最大的缺点） 什么是循环引用？ 1234567891011121314151617class TestA&#123; public TestB b;&#125;class TestB&#123; public TestA a;&#125;public class Main&#123; public static void main(String[] args)&#123; A a = new A(); B b = new B(); a.b=b; b.a=a; a = null; b = null; &#125;&#125; 虽然a和b都为null，但是由于a和b存在循环引用，这样a和b永远都不会被回收。 2.2、标记清除法 标记清除算法，是将垃圾回收分为2个阶段，分别是标记和清除。 标记：从根节点开始标记引用的对象。 清除：未被标记引用的对象就是垃圾对象，可以被清理。 2.2.1、原理 这张图代表的是程序运行期间所有对象的状态，它们的标志位全部是0（也就是未标记，以下默认0就是未标记，1为已标记），假设这会儿有效内存空间耗尽了，JVM将会停止应用程序的运行并开启GC线程，然后开始进行标记工作，按照根搜索算法，标记完以后，对象的状态如下图。 可以看到，按照根搜索算法，所有从root对象可达的对象就被标记为了存活的对象，此时已经完成了第一阶段标记。接下来，就要执行第二阶段清除了，那么清除完以后，剩下的对象以及对象的状态如下图所示。 可以看到，没有被标记的对象将会回收清除掉，而被标记的对象将会留下，并且会将标记位重新归0。接下来就不用说了，唤醒停止的程序线程，让程序继续运行即可。 2.2.2、优缺点 可以看到，标记清除算法解决了引用计数算法中的循环引用的问题，没有从root节点引用的对象都会被回收。 同样，标记清除算法也是有缺点的： 效率较低，标记和清除两个动作都需要遍历所有的对象，并且在GC时，需要停止应用程序，对于交互性要求比较高的应用而言这个体验是非常差的。 通过标记清除算法清理出来的内存，碎片化较为严重，因为被回收的对象可能存在于内存的各个角落，所以清理出来的内存是不连贯的。 2.3、标记压缩算法 标记压缩算法是在标记清除算法的基础之上，做了优化改进的算法。和标记清除算法一样，也是从根节点开始，对对象的引用进行标记，在清理阶段，并不是简单的清理未标记的对象，而是将存活的对象压缩到内存的一端，然后清理边界以外的垃圾，从而解决了碎片化的问题。 2.3.1、原理 2.3.2、优缺点 优缺点同标记清除算法，解决了标记清除算法的碎片化的问题，同时，标记压缩算法多了一步，对象移动内存位置的步骤，其效率也有有一定的影响。 2.4、复制算法 复制算法的核心就是，将原有的内存空间一分为二，每次只用其中的一块，在垃圾回收时，将正在使用的对象复制到另一个内存空间中，然后将该内存空间清空，交换两个内存的角色，完成垃圾的回收。 如果内存中的垃圾对象较多，需要复制的对象就较少，这种情况下适合使用该方式并且效率比较高，反之，则不适合。 2.4.1、JVM中年轻代内存空间 在GC开始的时候，对象只会存在于Eden区和名为“From”的Survivor区，Survivor区“To”是空的。 紧接着进行GC，Eden区中所有存活的对象都会被复制到“To”，而在“From”区中，仍存活的对象会根据他们的年龄值来决定去向。年龄达到一定值(年龄阈值，可以通过-XX:MaxTenuringThreshold来设置)的对象会被移动到年老代中，没有达到阈值的对象会被复制到“To”区域。 经过这次GC后，Eden区和From区已经被清空。这个时候，“From”和“To”会交换他们的角色，也就是新的“To”就是上次GC前的“From”，新的“From”就是上次GC前的“To”。不管怎样，都会保证名为To的Survivor区域是空的。 GC会一直重复这样的过程，直到“To”区被填满，“To”区被填满之后，会将所有对象移动到年老代中。 2.4.2、优缺点 优点： 在垃圾对象多的情况下，效率较高 清理后，内存无碎片 缺点： 在垃圾对象少的情况下，不适用，如：老年代内存 分配的2块内存空间，在同一个时刻，只能使用一半，内存使用率较低 2.5、分代算法 前面介绍了多种回收算法，每一种算法都有自己的优点也有缺点，谁都不能替代谁，所以根据垃圾回收对象的特点进行选择，才是明智的选择。 分代算法其实就是这样的，根据回收对象的特点进行选择，在jvm中，年轻代适合使用复制算法，老年代适合使用标记清除或标记压缩算法。 3、垃圾收集器以及内存分配 前面我们讲了垃圾回收的算法，还需要有具体的实现，在jvm中，实现了多种垃圾收集器，包括：串行垃圾收集器、并行垃圾收集器、CMS（并发）垃圾收集器、G1垃圾收集器，接下来，我们一个个的了解学习。 3.1、串行垃圾收集器 串行垃圾收集器，是指使用单线程进行垃圾回收，垃圾回收时，只有一个线程在工作，并且java应用中的所有线程都要暂停，等待垃圾回收的完成。这种现象称之为STW（Stop-The-World）。 对于交互性较强的应用而言，这种垃圾收集器是不能够接受的。 一般在Javaweb应用中是不会采用该收集器的。 3.1.1、编写测试代码 123456789101112131415161718192021222324252627282930package cn.test.jvm;import java.util.ArrayList;import java.util.List;import java.util.Properties;import java.util.Random;public class TestGC &#123; public static void main(String[] args) throws Exception &#123; List&lt;Object&gt; list = new ArrayList&lt;Object&gt;(); while (true)&#123; int sleep = new Random().nextInt(100); if(System.currentTimeMillis() % 2 ==0)&#123; list.clear(); &#125;else&#123; for (int i = 0; i &lt; 10000; i++) &#123; Properties properties = new Properties(); properties.put(&quot;key_&quot;+i, &quot;value_&quot; + System.currentTimeMillis() + i); list.add(properties); &#125; &#125; // System.out.println(&quot;list大小为：&quot; + list.size()); Thread.sleep(sleep); &#125; &#125;&#125; 3.1.2、设置垃圾回收为串行收集器 在程序运行参数中添加2个参数，如下： -XX:+UseSerialGC 指定年轻代和老年代都使用串行垃圾收集器 -XX:+PrintGCDetails 打印垃圾回收的详细信息 12# 为了测试GC，将堆的初始和最大内存都设置为16M-XX:+UseSerialGC -XX:+PrintGCDetails -Xms16m -Xmx16m 启动程序，可以看到下面信息： 123[GC (Allocation Failure) [DefNew: 4416K-&gt;512K(4928K), 0.0046102 secs] 4416K-&gt;1973K(15872K), 0.0046533 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] [Full GC (Allocation Failure) [Tenured: 10944K-&gt;3107K(10944K), 0.0085637 secs] 15871K-&gt;3107K(15872K), [Metaspace: 3496K-&gt;3496K(1056768K)], 0.0085974 secs] [Times: user=0.02 sys=0.00, real=0.01 secs] GC日志信息解读： 年轻代的内存GC前后的大小： DefNew 表示使用的是串行垃圾收集器。 4416K-&gt;512K(4928K) 表示，年轻代GC前，占有4416K内存，GC后，占有512K内存，总大小4928K 0.0046102 secs 表示，GC所用的时间，单位为毫秒。 4416K-&gt;1973K(15872K) 表示，GC前，堆内存占有4416K，GC后，占有1973K，总大小为15872K Full GC 表示，内存空间全部进行GC 3.2、并行垃圾收集器 并行垃圾收集器在串行垃圾收集器的基础之上做了改进，将单线程改为了多线程进行垃圾回收，这样可以缩短垃圾回收的时间。（这里是指，并行能力较强的机器） 当然了，并行垃圾收集器在收集的过程中也会暂停应用程序，这个和串行垃圾回收器是一样的，只是并行执行，速度更快些，暂停的时间更短一些。 3.2.1、ParNew垃圾收集器 ParNew垃圾收集器是工作在年轻代上的，只是将串行的垃圾收集器改为了并行。 通过-XX:+UseParNewGC参数设置年轻代使用ParNew回收器，老年代使用的依然是串行收集器。 测试： 12345#参数-XX:+UseParNewGC -XX:+PrintGCDetails -Xms16m -Xmx16m#打印出的信息[GC (Allocation Failure) [ParNew: 4416K-&gt;512K(4928K), 0.0032106 secs] 4416K-&gt;1988K(15872K), 0.0032697 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 由以上信息可以看出，ParNew: 使用的是ParNew收集器。其他信息和串行收集器一致。 3.2.2、ParallelGC垃圾收集器 ParallelGC收集器工作机制和ParNewGC收集器一样，只是在此基础之上，新增了两个和系统吞吐量相关的参数，使得其使用起来更加的灵活和高效。 相关参数如下： -XX:+UseParallelGC 年轻代使用ParallelGC垃圾回收器，老年代使用串行回收器。 -XX:+UseParallelOldGC 年轻代使用ParallelGC垃圾回收器，老年代使用ParallelOldGC垃圾回收器。 -XX:MaxGCPauseMillis 设置最大的垃圾收集时的停顿时间，单位为毫秒 需要注意的时，ParallelGC为了达到设置的停顿时间，可能会调整堆大小或其他的参数，如果堆的大小设置的较小，就会导致GC工作变得很频繁，反而可能会影响到性能。 该参数使用需谨慎。 -XX:GCTimeRatio 设置垃圾回收时间占程序运行时间的百分比，公式为1/(1+n)。 它的值为0~100之间的数字，默认值为99，也就是垃圾回收时间不能超过1% -XX:UseAdaptiveSizePolicy 自适应GC模式，垃圾回收器将自动调整年轻代、老年代等参数，达到吞吐量、堆大小、停顿时间之间的平衡。 一般用于，手动调整参数比较困难的场景，让收集器自动进行调整。 测试： 12345678#参数-XX:+UseParallelGC -XX:+UseParallelOldGC -XX:MaxGCPauseMillis=100 -XX:+PrintGCDetails -Xms16m -Xmx16m#打印的信息[GC (Allocation Failure) [PSYoungGen: 4096K-&gt;480K(4608K)] 4096K-&gt;1840K(15872K), 0.0034307 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] [Full GC (Ergonomics) [PSYoungGen: 505K-&gt;0K(4608K)] [ParOldGen: 10332K-&gt;10751K(11264K)] 10837K-&gt;10751K(15872K), [Metaspace: 3491K-&gt;3491K(1056768K)], 0.0793622 secs] [Times: user=0.13 sys=0.00, real=0.08 secs] 有以上信息可以看出，年轻代和老年代都使用了ParallelGC垃圾回收器。 3.3、CMS垃圾收集器 CMS全称 Concurrent Mark Sweep，是一款并发的、使用标记-清除算法的垃圾回收器，该回收器是针对老年代垃圾回收的，通过参数-XX:+UseConcMarkSweepGC进行设置。 CMS垃圾回收器的执行过程如下： 初始化标记(CMS-initial-mark) ,标记root，会导致stw； 并发标记(CMS-concurrent-mark)，与用户线程同时运行； 预清理（CMS-concurrent-preclean），与用户线程同时运行； 重新标记(CMS-remark) ，会导致stw； 并发清除(CMS-concurrent-sweep)，与用户线程同时运行； 调整堆大小，设置CMS在清理之后进行内存压缩，目的是清理内存中的碎片； 并发重置状态等待下次CMS的触发(CMS-concurrent-reset)，与用户线程同时运行； 3.3.1、测试 1234567891011121314151617181920212223#设置启动参数-XX:+UseConcMarkSweepGC -XX:+PrintGCDetails -Xms16m -Xmx16m#运行日志[GC (Allocation Failure) [ParNew: 4926K-&gt;512K(4928K), 0.0041843 secs] 9424K-&gt;6736K(15872K), 0.0042168 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] #第一步，初始标记[GC (CMS Initial Mark) [1 CMS-initial-mark: 6224K(10944K)] 6824K(15872K), 0.0004209 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] #第二步，并发标记[CMS-concurrent-mark-start][CMS-concurrent-mark: 0.002/0.002 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] #第三步，预处理[CMS-concurrent-preclean-start][CMS-concurrent-preclean: 0.000/0.000 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] #第四步，重新标记[GC (CMS Final Remark) [YG occupancy: 1657 K (4928 K)][Rescan (parallel) , 0.0005811 secs][weak refs processing, 0.0000136 secs][class unloading, 0.0003671 secs][scrub symbol table, 0.0006813 secs][scrub string table, 0.0001216 secs][1 CMS-remark: 6224K(10944K)] 7881K(15872K), 0.0018324 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] #第五步，并发清理[CMS-concurrent-sweep-start][CMS-concurrent-sweep: 0.004/0.004 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] #第六步，重置[CMS-concurrent-reset-start][CMS-concurrent-reset: 0.000/0.000 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 由以上日志信息，可以看出CMS执行的过程。 3.4、G1垃圾收集器（重点） G1垃圾收集器是在jdk1.7中正式使用的全新的垃圾收集器，oracle官方计划在jdk9中将G1变成默认的垃圾收集器，以替代CMS。 G1的设计原则就是简化JVM性能调优，开发人员只需要简单的三步即可完成调优： 第一步，开启G1垃圾收集器 第二步，设置堆的最大内存 第三步，设置最大的停顿时间 G1中提供了三种模式垃圾回收模式，Young GC、Mixed GC 和 Full GC，在不同的条件下被触发。 3.4.1、原理 G1垃圾收集器相对比其他收集器而言，最大的区别在于它取消了年轻代、老年代的物理划分，取而代之的是将堆划分为若干个区域（Region），这些区域中包含了有逻辑上的年轻代、老年代区域。 这样做的好处就是，我们再也不用单独的空间对每个代进行设置了，不用担心每个代内存是否足够。 在G1划分的区域中，年轻代的垃圾收集依然采用暂停所有应用线程的方式，将存活对象拷贝到老年代或者Survivor空间，G1收集器通过将对象从一个区域复制到另外一个区域，完成了清理工作。 这就意味着，在正常的处理过程中，G1完成了堆的压缩（至少是部分堆的压缩），这样也就不会有cms内存碎片问题的存在了。 在G1中，有一种特殊的区域，叫Humongous区域。 如果一个对象占用的空间超过了分区容量50%以上，G1收集器就认为这是一个巨型对象。 这些巨型对象，默认直接会被分配在老年代，但是如果它是一个短期存在的巨型对象，就会对垃圾收集器造成负面影响。 为了解决这个问题，G1划分了一个Humongous区，它用来专门存放巨型对象。如果一个H区装不下一个巨型对象，那么G1会寻找连续的H分区来存储。为了能找到连续的H区，有时候不得不启动Full GC。 3.4.2、Young GC Young GC主要是对Eden区进行GC，它在Eden空间耗尽时会被触发。 Eden空间的数据移动到Survivor空间中，如果Survivor空间不够，Eden空间的部分数据会直接晋升到年老代空间。 Survivor区的数据移动到新的Survivor区中，也有部分数据晋升到老年代空间中。 最终Eden空间的数据为空，GC停止工作，应用线程继续执行。 3.4.2.1、Remembered Set（已记忆集合） 在GC年轻代的对象时，我们如何找到年轻代中对象的根对象呢？ 根对象可能是在年轻代中，也可以在老年代中，那么老年代中的所有对象都是根么？ 如果全量扫描老年代，那么这样扫描下来会耗费大量的时间。 于是，G1引进了RSet的概念。它的全称是Remembered Set，其作用是跟踪指向某个堆内的对象引用。 每个Region初始化时，会初始化一个RSet，该集合用来记录并跟踪其它Region指向该Region中对象的引用，每个Region默认按照512Kb划分成多个Card，所以RSet需要记录的东西应该是 xx Region的 xx Card。 3.4.3、Mixed GC 当越来越多的对象晋升到老年代old region时，为了避免堆内存被耗尽，虚拟机会触发一个混合的垃圾收集器，即Mixed GC，该算法并不是一个Old GC，除了回收整个Young Region，还会回收一部分的Old Region，这里需要注意：是一部分老年代，而不是全部老年代，可以选择哪些old region进行收集，从而可以对垃圾回收的耗时时间进行控制。也要注意的是Mixed GC 并不是 Full GC。 MixedGC什么时候触发？ 由参数 -XX:InitiatingHeapOccupancyPercent=n 决定。默认：45%，该参数的意思是：当老年代大小占整个堆大小百分比达到该阀值时触发。 它的GC步骤分2步： 全局并发标记（global concurrent marking） 拷贝存活对象（evacuation） 3.4.3.1、全局并发标记 全局并发标记，执行过程分为五个步骤： 初始标记（initial mark，STW） 标记从根节点直接可达的对象，这个阶段会执行一次年轻代GC，会产生全局停顿。 根区域扫描（root region scan） G1 GC 在初始标记的存活区扫描对老年代的引用，并标记被引用的对象。 该阶段与应用程序（非 STW）同时运行，并且只有完成该阶段后，才能开始下一次 STW 年轻代垃圾回收。 并发标记（Concurrent Marking） G1 GC 在整个堆中查找可访问的（存活的）对象。该阶段与应用程序同时运行，可以被 STW 年轻代垃圾回收中断。 重新标记（Remark，STW） 该阶段是 STW 回收，因为程序在运行，针对上一次的标记进行修正。 清除垃圾（Cleanup，STW） 清点和重置标记状态，该阶段会STW，这个阶段并不会实际上去做垃圾的收集，等待evacuation阶段来回收。 3.4.3.2、拷贝存活对象 Evacuation阶段是全暂停的。该阶段把一部分Region里的活对象拷贝到另一部分Region中，从而实现垃圾的回收清理。 3.4.4、G1收集器相关参数 -XX:+UseG1GC 使用 G1 垃圾收集器 -XX:MaxGCPauseMillis 设置期望达到的最大GC停顿时间指标（JVM会尽力实现，但不保证达到），默认值是 200 毫秒。 -XX:G1HeapRegionSize=n 设置的 G1 区域的大小。值是 2 的幂，范围是 1 MB 到 32 MB 之间。目标是根据最小的 Java 堆大小划分出约 2048 个区域。 默认是堆内存的1/2000。 -XX:ParallelGCThreads=n 设置 STW 工作线程数的值。将 n 的值设置为逻辑处理器的数量。n 的值与逻辑处理器的数量相同，最多为 8。 -XX:ConcGCThreads=n 设置并行标记的线程数。将 n 设置为并行垃圾回收线程数 (ParallelGCThreads) 的 1/4 左右。 -XX:InitiatingHeapOccupancyPercent=n 设置触发标记周期的 Java 堆占用率阈值。默认占用率是整个 Java 堆的 45%。 3.4.5、测试 123456789101112131415161718192021222324252627282930313233-XX:+UseG1GC -XX:MaxGCPauseMillis=100 -XX:+PrintGCDetails -Xmx256m#日志[GC pause (G1 Evacuation Pause) (young), 0.0044882 secs] [Parallel Time: 3.7 ms, GC Workers: 3] [GC Worker Start (ms): Min: 14763.7, Avg: 14763.8, Max: 14763.8, Diff: 0.1] #扫描根节点 [Ext Root Scanning (ms): Min: 0.2, Avg: 0.3, Max: 0.3, Diff: 0.1, Sum: 0.8] #更新RS区域所消耗的时间 [Update RS (ms): Min: 1.8, Avg: 1.9, Max: 1.9, Diff: 0.2, Sum: 5.6] [Processed Buffers: Min: 1, Avg: 1.7, Max: 3, Diff: 2, Sum: 5] [Scan RS (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0] [Code Root Scanning (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0] #对象拷贝 [Object Copy (ms): Min: 1.1, Avg: 1.2, Max: 1.3, Diff: 0.2, Sum: 3.6] [Termination (ms): Min: 0.0, Avg: 0.1, Max: 0.2, Diff: 0.2, Sum: 0.2] [Termination Attempts: Min: 1, Avg: 1.0, Max: 1, Diff: 0, Sum: 3] [GC Worker Other (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0] [GC Worker Total (ms): Min: 3.4, Avg: 3.4, Max: 3.5, Diff: 0.1, Sum: 10.3] [GC Worker End (ms): Min: 14767.2, Avg: 14767.2, Max: 14767.3, Diff: 0.1] [Code Root Fixup: 0.0 ms] [Code Root Purge: 0.0 ms] [Clear CT: 0.0 ms] #清空CardTable [Other: 0.7 ms] [Choose CSet: 0.0 ms] #选取CSet [Ref Proc: 0.5 ms] #弱引用、软引用的处理耗时 [Ref Enq: 0.0 ms] #弱引用、软引用的入队耗时 [Redirty Cards: 0.0 ms] [Humongous Register: 0.0 ms] #大对象区域注册耗时 [Humongous Reclaim: 0.0 ms] #大对象区域回收耗时 [Free CSet: 0.0 ms] [Eden: 7168.0K(7168.0K)-&gt;0.0B(13.0M) Survivors: 2048.0K-&gt;2048.0K Heap: 55.5M(192.0M)-&gt;48.5M(192.0M)] #年轻代的大小统计 [Times: user=0.00 sys=0.00, real=0.00 secs] 3.4.6、对于G1垃圾收集器优化建议 年轻代大小 避免使用 -Xmn 选项或 -XX:NewRatio 等其他相关选项显式设置年轻代大小。 固定年轻代的大小会覆盖暂停时间目标。 暂停时间目标不要太过严苛 G1 GC 的吞吐量目标是 90% 的应用程序时间和 10%的垃圾回收时间。 评估 G1 GC 的吞吐量时，暂停时间目标不要太严苛。目标太过严苛表示您愿意承受更多的垃圾回收开销，而这会直接影响到吞吐量。 4、可视化GC日志分析工具 4.1、GC日志输出参数 前面通过-XX:+PrintGCDetails可以对GC日志进行打印，我们就可以在控制台查看，这样虽然可以查看GC的信息，但是并不直观，可以借助于第三方的GC日志分析工具进行查看。 在日志打印输出涉及到的参数如下： 123456-XX:+PrintGC 输出GC日志-XX:+PrintGCDetails 输出GC的详细日志-XX:+PrintGCTimeStamps 输出GC的时间戳（以基准时间的形式）-XX:+PrintGCDateStamps 输出GC的时间戳（以日期的形式，如 2013-05-04T21:53:59.234+0800）-XX:+PrintHeapAtGC 在进行GC的前后打印出堆的信息-Xloggc:../logs/gc.log 日志文件的输出路径 测试： 1-XX:+UseG1GC -XX:MaxGCPauseMillis=100 -Xmx256m -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:+PrintHeapAtGC -Xloggc:F://test//gc.log 运行后就可以在E盘下生成gc.log文件。 如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849Java HotSpot(TM) 64-Bit Server VM (25.144-b01) for windows-amd64 JRE (1.8.0_144-b01), built on Jul 21 2017 21:57:33 by &quot;java_re&quot; with MS VC++ 10.0 (VS2010)Memory: 4k page, physical 12582392k(1939600k free), swap 17300984k(5567740k free)CommandLine flags: -XX:InitialHeapSize=201318272 -XX:MaxGCPauseMillis=100 -XX:MaxHeapSize=268435456 -XX:+PrintGC -XX:+PrintGCDateStamps -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintHeapAtGC -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseG1GC -XX:-UseLargePagesIndividualAllocation &#123;Heap before GC invocations=0 (full 0): garbage-first heap total 196608K, used 9216K [0x00000000f0000000, 0x00000000f0100600, 0x0000000100000000) region size 1024K, 9 young (9216K), 0 survivors (0K) Metaspace used 3491K, capacity 4500K, committed 4864K, reserved 1056768K class space used 381K, capacity 388K, committed 512K, reserved 1048576K2018-09-24T23:06:02.230+0800: 0.379: [GC pause (G1 Evacuation Pause) (young), 0.0031038 secs] [Parallel Time: 2.8 ms, GC Workers: 3] [GC Worker Start (ms): Min: 378.6, Avg: 378.8, Max: 379.0, Diff: 0.3] [Ext Root Scanning (ms): Min: 0.0, Avg: 0.4, Max: 0.8, Diff: 0.8, Sum: 1.3] [Update RS (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0] [Processed Buffers: Min: 0, Avg: 0.0, Max: 0, Diff: 0, Sum: 0] [Scan RS (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0] [Code Root Scanning (ms): Min: 0.0, Avg: 0.0, Max: 0.1, Diff: 0.1, Sum: 0.1] [Object Copy (ms): Min: 1.8, Avg: 1.9, Max: 1.9, Diff: 0.1, Sum: 5.6] [Termination (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0] [Termination Attempts: Min: 1, Avg: 1.0, Max: 1, Diff: 0, Sum: 3] [GC Worker Other (ms): Min: 0.0, Avg: 0.2, Max: 0.6, Diff: 0.6, Sum: 0.6] [GC Worker Total (ms): Min: 2.4, Avg: 2.5, Max: 2.7, Diff: 0.3, Sum: 7.6] [GC Worker End (ms): Min: 381.4, Avg: 381.4, Max: 381.4, Diff: 0.0] [Code Root Fixup: 0.0 ms] [Code Root Purge: 0.0 ms] [Clear CT: 0.0 ms] [Other: 0.2 ms] [Choose CSet: 0.0 ms] [Ref Proc: 0.1 ms] [Ref Enq: 0.0 ms] [Redirty Cards: 0.0 ms] [Humongous Register: 0.0 ms] [Humongous Reclaim: 0.0 ms] [Free CSet: 0.0 ms] [Eden: 9216.0K(9216.0K)-&gt;0.0B(7168.0K) Survivors: 0.0B-&gt;2048.0K Heap: 9216.0K(192.0M)-&gt;1888.0K(192.0M)]Heap after GC invocations=1 (full 0): garbage-first heap total 196608K, used 1888K [0x00000000f0000000, 0x00000000f0100600, 0x0000000100000000) region size 1024K, 2 young (2048K), 2 survivors (2048K) Metaspace used 3491K, capacity 4500K, committed 4864K, reserved 1056768K class space used 381K, capacity 388K, committed 512K, reserved 1048576K&#125; [Times: user=0.00 sys=0.00, real=0.00 secs] &#123;Heap before GC invocations=1 (full 0): garbage-first heap total 196608K, used 9056K [0x00000000f0000000, 0x00000000f0100600, 0x0000000100000000) region size 1024K, 9 young (9216K), 2 survivors (2048K) Metaspace used 3492K, capacity 4500K, committed 4864K, reserved 1056768K class space used 381K, capacity 388K, committed 512K, reserved 1048576K2018-09-24T23:06:02.310+0800: 0.458: [GC pause (G1 Evacuation Pause) (young), 0.0070126 secs]。。。。。。。。。。。。。。。。。。。 4.2、GC Easy 可视化工具 GC Easy是一款在线的可视化工具，易用、功能强大，网站： http://gceasy.io/ 上传后，点击“Analyze”按钮，即可查看报告。","categories":[],"tags":[{"name":"jvm","slug":"jvm","permalink":"http://example.com/tags/jvm/"}]},{"title":"test.build","slug":"test_build_sh","date":"2018-12-26T03:37:26.000Z","updated":"2021-09-22T11:19:04.649Z","comments":true,"path":"2018/12/26/test_build_sh/","link":"","permalink":"http://example.com/2018/12/26/test_build_sh/","excerpt":"","text":"test.build 1234567svn up /data/storybookapi2_srccd /data/storybookapi2_src#mvn tomcat7:deploy -emvn cleanmvn package -Dmaven.test.skip=true","categories":[],"tags":[{"name":"docker","slug":"docker","permalink":"http://example.com/tags/docker/"}]},{"title":"test_run","slug":"test_run","date":"2018-12-26T03:37:26.000Z","updated":"2021-09-22T11:19:04.649Z","comments":true,"path":"2018/12/26/test_run/","link":"","permalink":"http://example.com/2018/12/26/test_run/","excerpt":"","text":"test_run 12345678910#svn up /data/storybookapi_src#cd /data/storybookapi_src#mvn tomcat7:deploy -e#mvn clean#mvn packageps -ef | grep storybookapi2 | grep -v grep | cut -c 9-15 | xargs kill -s 9 java -Xmx256m -jar /data/storybookapi2_src/target/storybookapi-1.0-SNAPSHOT.jar -Xmx256m --spring.profiles.active=test &amp;","categories":[],"tags":[{"name":"docker","slug":"docker","permalink":"http://example.com/tags/docker/"}]},{"title":"Dockerfile","slug":"Dockerfile","date":"2018-12-24T07:01:26.000Z","updated":"2021-09-22T11:19:04.604Z","comments":true,"path":"2018/12/24/Dockerfile/","link":"","permalink":"http://example.com/2018/12/24/Dockerfile/","excerpt":"","text":"Dockerfile 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778# version 0.0.1-snapshot# 从一个基础镜像centos:6.8开始构建#FROM centos:6.8FROM java:openjdk-8u111-jdk# 维护者信息MAINTAINER storybook &quot;weisiliang@ifenghui.com&quot;# 将Dockerfile上下文中的nginx.repo复制到容器中的yum源位置#COPY ./nginx.repo /etc/yum.repos.d/nginx.repo#RUN yum makecacheENV TIME_ZONE Asia/ShanghaiRUN cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \\&amp;&amp; echo &quot;$&#123;TIME_ZONE&#125;&quot; &gt; /etc/timezone #安装java8#RUN yum install -y java-1.8.0-openjdk#安装svn#RUN yum install -y svn#安装maven#RUN yum install -y maven#RUN yum -y install fontconfigADD simhei.ttf /usr/share/fonts/hei/simhei.ttfWORKDIR /usr/share/fonts/hei#RUN mkfontscale RUN fc-cache -fv#RUN source /etc/profile#创建目录：/opt/storybookfenxiao#复制 jar到目录下RUN mkdir -p /opt/storybookfenxiaoRUN mkdir -p /data/fenxiao1808ADD fenxiao.jpg /data/fenxiao1808/fenxiao.jpgADD fenxiao2.jpg /data/fenxiao1808/fenxiao2.jpgADD fenxiao3.jpg /data/fenxiao1808/fenxiao3.jpgADD fenxiao5.jpg /data/fenxiao1808/fenxiao5.jpgRUN chmod -R 777 /data#复制正式和测试运行脚本到目录中ADD start-product.sh /opt/storybookfenxiao/start-product.sh#完成ADD start-test.sh /opt/storybookfenxiao/start-test.sh#完成ADD start-beta.sh /opt/storybookfenxiao/start-beta.sh#添加证书ADD apiclient_cert.p12 /data/apiclient_cert/apiclient_cert.p12#copy项目COPY fenxiao.jar /opt/storybookfenxiao/fenxiao.jar#创建镜像# 安装wget#RUN yum install -y wget# 安装aliyun yum 源头 #RUN wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo#RUN yum clean all#RUN yum makecache# 安装nginx#RUN yum install -y nginx# 修改nginx首页信息#RUN echo &quot;home page of container niginx server&quot; &gt; /usr/share/nginx/html/index.html# 暴露80端口EXPOSE 8080#运行#RUN nginx#CMD docker run -t -i -p 80:80 nginx/nginx-1#sudo docker run -it -p 80:80 -v `pwd`/logs:/var/log/nginx dockerfile/nginx#CMD docker run -t -i storybook/java8#CMD [&quot;java&quot;, &quot;-jar&quot;, &quot;/usr/local/storybookapi-1.0-SNAPSHOT.jar&quot;]","categories":[],"tags":[{"name":"docker","slug":"docker","permalink":"http://example.com/tags/docker/"}]},{"title":"build.bat","slug":"build.bat","date":"2018-12-24T07:01:26.000Z","updated":"2021-09-22T11:19:04.612Z","comments":true,"path":"2018/12/24/build.bat/","link":"","permalink":"http://example.com/2018/12/24/build.bat/","excerpt":"","text":"build.bat 1234567891011121314151617181920212223242526272829303132333435363738394041::1 本地已经安装maven，svnset project_name=&quot;storybookfenxiao&quot;set ver=&quot;1.0.0&quot;set project_path=f:\\tmp\\storybook_fenxiao::第一次需要运行cosvn co svn://121.xx.xx.xxx/xxx/storybook/fenxiao/fenxiao %project_path%::以后每次运行updatesvn update %project_path%rd /S /Q %project_name%mkdir %project_name%xcopy %project_path% %project_name% /s /excopy /y %project_name%\\src\\main\\resources\\prod %project_name%\\src\\main\\resources /s /eecho &quot;请确认svn更新是否完成&quot;pause::maven package call mvn clean -f %project_name%call mvn package -f %project_name% -Dmaven.test.skip=true::del sale.jarecho &quot;try copy jar&quot;copy /y %project_name%\\target\\fenxiao-0.0.1-SNAPSHOT.jar %cd%\\fenxiao.jarecho &quot;请确认build是否完成&quot;pause::builddocker build . -t %project_name%:%ver%echo &quot;请确认docker是否完成&quot;pause::4 提交镜像docker tag %project_name%:%ver% registry.cn-hangzhou.aliyuncs.com/com_ifenghui/%project_name%:%ver%docker push registry.cn-hangzhou.aliyuncs.com/com_ifenghui/%project_name%:%ver%pauseecho &quot;success!&quot;pause","categories":[],"tags":[{"name":"docker","slug":"docker","permalink":"http://example.com/tags/docker/"}]},{"title":"start-product.sh","slug":"start-product.sh","date":"2018-12-24T07:01:26.000Z","updated":"2021-09-22T11:19:04.647Z","comments":true,"path":"2018/12/24/start-product.sh/","link":"","permalink":"http://example.com/2018/12/24/start-product.sh/","excerpt":"","text":"start-product.sh 12java -jar /opt/storybookfenxiao/fenxiao.jar --spring.profiles.active=prod","categories":[],"tags":[{"name":"docker","slug":"docker","permalink":"http://example.com/tags/docker/"}]},{"title":"start-test.sh","slug":"start-test.sh","date":"2018-12-24T07:01:26.000Z","updated":"2021-09-22T11:19:04.648Z","comments":true,"path":"2018/12/24/start-test.sh/","link":"","permalink":"http://example.com/2018/12/24/start-test.sh/","excerpt":"","text":"start-test.sh 12java -jar /opt/storybookfenxiao/fenxiao.jar --spring.profiles.active=test","categories":[],"tags":[{"name":"docker","slug":"docker","permalink":"http://example.com/tags/docker/"}]},{"title":"start-beta.sh","slug":"start-beta.sh","date":"2018-12-24T07:01:26.000Z","updated":"2021-09-22T11:19:04.647Z","comments":true,"path":"2018/12/24/start-beta.sh/","link":"","permalink":"http://example.com/2018/12/24/start-beta.sh/","excerpt":"","text":"start-beta.sh 1java -jar /opt/storybookfenxiao/fenxiao.jar --spring.profiles.active=beta","categories":[],"tags":[{"name":"docker","slug":"docker","permalink":"http://example.com/tags/docker/"}]},{"title":"容器模板","slug":"容器模板","date":"2018-12-24T07:01:26.000Z","updated":"2021-09-22T11:19:04.651Z","comments":true,"path":"2018/12/24/容器模板/","link":"","permalink":"http://example.com/2018/12/24/%E5%AE%B9%E5%99%A8%E6%A8%A1%E6%9D%BF/","excerpt":"","text":"容器模板 1234567891011121314storybookxxx: restart: always ports: - &#x27;8077:8080&#x27; command: - /bin/bash - &#x27;-c&#x27; - java -Xmx256m -jar /opt/storybooksale/sale.jar --spring.profiles.active=prod --config.profile=prod image: &#x27;registry-internal.cn-hangzhou.aliyuncs.com/com_ifenghui/storybookfenxiao:1.0.0&#x27; labels: aliyun.scale: &#x27;1&#x27; aliyun.lb.port_8080: http://lb-bp1uq3efysyrvt7eqa36n:8080 environment: - constraint:aliyun.node_index==(7|8|10)","categories":[],"tags":[{"name":"docker","slug":"docker","permalink":"http://example.com/tags/docker/"}]},{"title":"微信模板消息","slug":"微信模板消息","date":"2018-12-11T11:20:26.000Z","updated":"2021-09-22T11:19:04.652Z","comments":true,"path":"2018/12/11/微信模板消息/","link":"","permalink":"http://example.com/2018/12/11/%E5%BE%AE%E4%BF%A1%E6%A8%A1%E6%9D%BF%E6%B6%88%E6%81%AF/","excerpt":"","text":"微信模板消息 123456789101112131415161718User user = userDao.findOne(userId);String openid = user.getOpenId();List&lt;String&gt; stringList = new ArrayList&lt;&gt;();stringList.add(&quot;&quot;);stringList.add(&quot;第&quot;+lastSchedule.getId()+&quot;期&quot;);stringList.add(lastSchedule.getCardId().toString());String color = &quot;#173177&quot;;String emphasisKeyword = null;String pageStr = &quot;pages/home/home&quot;;sendWxMsg.sendMsg( openid, &quot;xxxxxxxxxxxxx&quot;, color, emphasisKeyword, stringList, pageStr); 123456789101112131415161718192021222324public void sendMsg(String open_id, String templateId, String color, String emphasisKeyword, List&lt;String&gt; stringList, String pageStr) &#123; //每次手动保存一个formid针对各个用户 FormId formId = formIdService.getHasNotUseFormId(open_id); if(formId == null) &#123; return; &#125; WxTemplate wxTemplate = new WxTemplate(); wxTemplate.setTouser(open_id); wxTemplate.setColor(color); if(emphasisKeyword != null) &#123; wxTemplate.setEmphasis_keyword(emphasisKeyword); &#125; wxTemplate.setForm_id(formId.getFormId()); wxTemplate.setPage(pageStr); wxTemplate.setTemplate_id(templateId); Map&lt;String, TemplateData&gt; dataMap = this.getTemplateDataByStringList(stringList); wxTemplate.setData(dataMap); String s = JSONObject.fromObject(wxTemplate).toString(); String accessToken = JsTicketUtil.get_acctssToken(); String url = &quot;https://api.weixin.qq.com/cgi-bin/message/wxopen/template/send?access_token=&quot;+accessToken; JSONObject jsonObject = httpRequest(url, &quot;POST&quot;, s); System.out.println(jsonObject); &#125; 1234567891011public Map&lt;String,TemplateData&gt; getTemplateDataByStringList(List&lt;String&gt; stringList) &#123; Map&lt;String, TemplateData&gt; dataMap = new HashMap&lt;String, TemplateData&gt;(); for(int index = 0; index &lt; stringList.size(); index++ ) &#123; TemplateData keyword = new TemplateData(); String item = stringList.get(index); int name = index + 1; keyword.setValue(item); dataMap.put(&quot;keyword&quot; + name, keyword); &#125; return dataMap;&#125; 12345678910111213141516public class JsTicketUtil &#123; private static String appid = &quot;zzzzzz&quot;; private static String appsecret = &quot;zzzzzzzzzzzz&quot;; private static String server_token_url = &quot;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&quot;; public static String get_acctssToken() &#123; String url = server_token_url + &quot;&amp;appid=&quot; + appid + &quot;&amp;secret=&quot; + appsecret; String wxjson = LoadJsonUtil.getJSON(url); JSONObject json = JSONObject.fromObject(wxjson); String access_token = json.getString(&quot;access_token&quot;); return access_token; &#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152public static JSONObject httpRequest(String requestUrl, String requestMethod, String outputStr) &#123; JSONObject jsonObject = null; StringBuffer buffer = new StringBuffer(); try &#123; // 创建SSLContext对象，并使用我们指定的信任管理器初始化 TrustManager[] tm = &#123;new MyX509TrustManager()&#125;; SSLContext sslContext = SSLContext.getInstance(&quot;SSL&quot;, &quot;SunJSSE&quot;); sslContext.init(null, tm, new java.security.SecureRandom()); // 从上述SSLContext对象中得到SSLSocketFactory对象 SSLSocketFactory ssf = sslContext.getSocketFactory(); URL url = new URL(requestUrl); HttpsURLConnection httpUrlConn = (HttpsURLConnection) url.openConnection(); httpUrlConn.setSSLSocketFactory(ssf); httpUrlConn.setDoOutput(true); httpUrlConn.setDoInput(true); httpUrlConn.setUseCaches(false); // 设置请求方式（GET/POST） httpUrlConn.setRequestMethod(requestMethod); if (&quot;GET&quot;.equalsIgnoreCase(requestMethod)) &#123; httpUrlConn.connect(); &#125; // 当有数据需要提交时 if (null != outputStr) &#123; OutputStream outputStream = httpUrlConn.getOutputStream(); // 注意编码格式，防止中文乱码 outputStream.write(outputStr.getBytes(&quot;UTF-8&quot;)); outputStream.close(); &#125; // 将返回的输入流转换成字符串 InputStream inputStream = httpUrlConn.getInputStream(); InputStreamReader inputStreamReader = new InputStreamReader(inputStream, &quot;utf-8&quot;); BufferedReader bufferedReader = new BufferedReader(inputStreamReader); String str = null; while ((str = bufferedReader.readLine()) != null) &#123; buffer.append(str); &#125; bufferedReader.close(); inputStreamReader.close(); // 释放资源 inputStream.close(); inputStream = null; httpUrlConn.disconnect(); jsonObject = JSONObject.fromObject(buffer.toString()); &#125; catch (ConnectException ce) &#123; ce.printStackTrace(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return jsonObject;&#125; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374 public class WxTemplate &#123; private String template_id; private String touser; private String color; private String page; private Map&lt;String,TemplateData&gt; data; private String form_id; private String emphasis_keyword; public String getTemplate_id() &#123; return template_id; &#125; public void setTemplate_id(String template_id) &#123; this.template_id = template_id; &#125; public String getTouser() &#123; return touser; &#125; public void setTouser(String touser) &#123; this.touser = touser; &#125; public String getColor() &#123; return color; &#125; public void setColor(String color) &#123; this.color = color; &#125; public String getPage() &#123; return page; &#125; public void setPage(String page) &#123; this.page = page; &#125; public Map&lt;String, TemplateData&gt; getData() &#123; return data; &#125; public void setData(Map&lt;String, TemplateData&gt; data) &#123; this.data = data; &#125; public String getForm_id() &#123; return form_id; &#125; public void setForm_id(String form_id) &#123; this.form_id = form_id; &#125; public String getEmphasis_keyword() &#123; return emphasis_keyword; &#125; public void setEmphasis_keyword(String emphasis_keyword) &#123; this.emphasis_keyword = emphasis_keyword; &#125;&#125;","categories":[],"tags":[{"name":"wechat","slug":"wechat","permalink":"http://example.com/tags/wechat/"}]},{"title":"JVM基本操作","slug":"jvm基本操作","date":"2018-12-11T11:20:26.000Z","updated":"2021-09-22T11:19:04.631Z","comments":true,"path":"2018/12/11/jvm基本操作/","link":"","permalink":"http://example.com/2018/12/11/jvm%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/","excerpt":"","text":"JVM基本操作 1、为什么要对jvm做优化 在本地开发环境中我们很少会遇到需要对jvm进行优化的需求，但是到了生产环境，我们可能将有下面的需求： 运行的应用“卡住了”，日志不输出，程序没有反应 服务器的CPU负载突然升高 在多线程应用下，如何分配线程的数量？ …… 在本次课程中，我们将对jvm有更深入的学习，我们不仅要让程序能跑起来，而且是可以跑的更快！可以分析解决在生产环境中所遇到的各种“棘手”的问题。 2、jvm的运行参数 在jvm中有很多的参数可以进行设置，这样可以让jvm在各种环境中都能够高效的运行。绝大部分的参数保持默认即可。 2.1、三种参数类型 jvm的参数类型分为三类，分别是： 标准参数 -help -version -X参数 （非标准参数） -Xint -Xcomp -XX参数（使用率较高） -XX:newSize -XX:+UseSerialGC 2.2、标准参数 jvm的标准参数，一般都是很稳定的，在未来的JVM版本中不会改变，可以使用java -help检索出所有的标准参数。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152[root@node01 ~]# java -help用法: java [-options] class [args...] (执行类) 或 java [-options] -jar jarfile [args...] (执行 jar 文件)其中选项包括: -d32 使用 32 位数据模型 (如果可用) -d64 使用 64 位数据模型 (如果可用) -server 选择 &quot;server&quot; VM 默认 VM 是 server, 因为您是在服务器类计算机上运行。 -cp &lt;目录和 zip/jar 文件的类搜索路径&gt; -classpath &lt;目录和 zip/jar 文件的类搜索路径&gt; 用 : 分隔的目录, JAR 档案 和 ZIP 档案列表, 用于搜索类文件。 -D&lt;名称&gt;=&lt;值&gt; 设置系统属性 -verbose:[class|gc|jni] 启用详细输出 -version 输出产品版本并退出 -version:&lt;值&gt; 警告: 此功能已过时, 将在 未来发行版中删除。 需要指定的版本才能运行 -showversion 输出产品版本并继续 -jre-restrict-search | -no-jre-restrict-search 警告: 此功能已过时, 将在 未来发行版中删除。 在版本搜索中包括/排除用户专用 JRE -? -help 输出此帮助消息 -X 输出非标准选项的帮助 -ea[:&lt;packagename&gt;...|:&lt;classname&gt;] -enableassertions[:&lt;packagename&gt;...|:&lt;classname&gt;] 按指定的粒度启用断言 -da[:&lt;packagename&gt;...|:&lt;classname&gt;] -disableassertions[:&lt;packagename&gt;...|:&lt;classname&gt;] 禁用具有指定粒度的断言 -esa | -enablesystemassertions 启用系统断言 -dsa | -disablesystemassertions 禁用系统断言 -agentlib:&lt;libname&gt;[=&lt;选项&gt;] 加载本机代理库 &lt;libname&gt;, 例如 -agentlib:hprof 另请参阅 -agentlib:jdwp=help 和 -agentlib:hprof=help -agentpath:&lt;pathname&gt;[=&lt;选项&gt;] 按完整路径名加载本机代理库 -javaagent:&lt;jarpath&gt;[=&lt;选项&gt;] 加载 Java 编程语言代理, 请参阅 java.lang.instrument -splash:&lt;imagepath&gt; 使用指定的图像显示启动屏幕 2.2.1、实战 实战1：查看jvm版本 123456[root@node01 ~]# java -versionjava version &quot;1.8.0_141&quot;Java(TM) SE Runtime Environment (build 1.8.0_141-b15)Java HotSpot(TM) 64-Bit Server VM (build 25.141-b15, mixed mode)# -showversion参数是表示，先打印版本信息，再执行后面的命令，在调试时非常有用，后面会使用到。 实战2：通过-D设置系统属性参数 12345678910111213public class TestJVM &#123; public static void main(String[] args) &#123; String str = System.getProperty(&quot;str&quot;); if (str == null) &#123; System.out.println(&quot;test&quot;); &#125; else &#123; System.out.println(str); &#125; &#125;&#125; 进行编译、测试： 12345678#编译[root@node01 test]# javac TestJVM.java#测试[root@node01 test]# java TestJVMtest[root@node01 test]# java -Dstr=123 TestJVM123 2.2.2、-server与-client参数 可以通过-server或-client设置jvm的运行参数。 它们的区别是Server VM的初始堆空间会大一些，默认使用的是并行垃圾回收器，启动慢运行快。 Client VM相对来讲会保守一些，初始堆空间会小一些，使用串行的垃圾回收器，它的目标是为了让JVM的启动速度更快，但运行速度会比Serverm模式慢些。 JVM在启动的时候会根据硬件和操作系统自动选择使用Server还是Client类型的JVM。 32位操作系统 如果是Windows系统，不论硬件配置如何，都默认使用Client类型的JVM。 如果是其他操作系统上，机器配置有2GB以上的内存同时有2个以上CPU的话默认使用server模式，否则使用client模式。 64位操作系统 只有server类型，不支持client类型。 测试： 123456789101112131415[root@node01 test]# java -client -showversion TestJVMjava version &quot;1.8.0_141&quot;Java(TM) SE Runtime Environment (build 1.8.0_141-b15)Java HotSpot(TM) 64-Bit Server VM (build 25.141-b15, mixed mode)test[root@node01 test]# java -server -showversion TestJVMjava version &quot;1.8.0_141&quot;Java(TM) SE Runtime Environment (build 1.8.0_141-b15)Java HotSpot(TM) 64-Bit Server VM (build 25.141-b15, mixed mode)test#由于机器是64位系统，所以不支持client模式 2.3、-X参数 jvm的-X参数是非标准参数，在不同版本的jvm中，参数可能会有所不同，可以通过java -X查看非标准参数。 12345678910111213141516171819202122232425262728293031323334[root@node01 test]# java -X -Xmixed 混合模式执行 (默认) -Xint 仅解释模式执行 -Xbootclasspath:&lt;用 : 分隔的目录和 zip/jar 文件&gt; 设置搜索路径以引导类和资源 -Xbootclasspath/a:&lt;用 : 分隔的目录和 zip/jar 文件&gt; 附加在引导类路径末尾 -Xbootclasspath/p:&lt;用 : 分隔的目录和 zip/jar 文件&gt; 置于引导类路径之前 -Xdiag 显示附加诊断消息 -Xnoclassgc 禁用类垃圾收集 -Xincgc 启用增量垃圾收集 -Xloggc:&lt;file&gt; 将 GC 状态记录在文件中 (带时间戳) -Xbatch 禁用后台编译 -Xms&lt;size&gt; 设置初始 Java 堆大小 -Xmx&lt;size&gt; 设置最大 Java 堆大小 -Xss&lt;size&gt; 设置 Java 线程堆栈大小 -Xprof 输出 cpu 配置文件数据 -Xfuture 启用最严格的检查, 预期将来的默认值 -Xrs 减少 Java/VM 对操作系统信号的使用 (请参阅文档) -Xcheck:jni 对 JNI 函数执行其他检查 -Xshare:off 不尝试使用共享类数据 -Xshare:auto 在可能的情况下使用共享类数据 (默认) -Xshare:on 要求使用共享类数据, 否则将失败。 -XshowSettings 显示所有设置并继续 -XshowSettings:all 显示所有设置并继续 -XshowSettings:vm 显示所有与 vm 相关的设置并继续 -XshowSettings:properties 显示所有属性设置并继续 -XshowSettings:locale 显示所有与区域设置相关的设置并继续-X 选项是非标准选项, 如有更改, 恕不另行通知。 2.3.1、-Xint、-Xcomp、-Xmixed 在解释模式(interpreted mode)下，-Xint标记会强制JVM执行所有的字节码，当然这会降低运行速度，通常低10倍或更多。 -Xcomp参数与它（-Xint）正好相反，JVM在第一次使用时会把所有的字节码编译成本地代码，从而带来最大程度的优化。 然而，很多应用在使用-Xcomp也会有一些性能损失，当然这比使用-Xint损失的少，原因是-xcomp没有让JVM启用JIT编译器的全部功能。JIT编译器可以对是否需要编译做判断，如果所有代码都进行编译的话，对于一些只执行一次的代码就没有意义了。 -Xmixed是混合模式，将解释模式与编译模式进行混合使用，由jvm自己决定，这是jvm默认的模式，也是推荐使用的模式。 示例：强制设置运行模式 1234567891011121314151617181920212223242526#强制设置为解释模式[root@node01 test]# java -showversion -Xint TestJVMjava version &quot;1.8.0_141&quot;Java(TM) SE Runtime Environment (build 1.8.0_141-b15)Java HotSpot(TM) 64-Bit Server VM (build 25.141-b15, interpreted mode)test#强制设置为编译模式[root@node01 test]# java -showversion -Xcomp TestJVMjava version &quot;1.8.0_141&quot;Java(TM) SE Runtime Environment (build 1.8.0_141-b15)Java HotSpot(TM) 64-Bit Server VM (build 25.141-b15, compiled mode)test#注意：编译模式下，第一次执行会比解释模式下执行慢一些，注意观察。#默认的混合模式[root@node01 test]# java -showversion TestJVMjava version &quot;1.8.0_141&quot;Java(TM) SE Runtime Environment (build 1.8.0_141-b15)Java HotSpot(TM) 64-Bit Server VM (build 25.141-b15, mixed mode)test 2.4、-XX参数 -XX参数也是非标准参数，主要用于jvm的调优和debug操作。 -XX参数的使用有2种方式，一种是boolean类型，一种是非boolean类型： boolean类型 格式：-XX:[±]&lt;name&gt; 表示启用或禁用&lt;name&gt;属性 如：-XX:+DisableExplicitGC 表示禁用手动调用gc操作，也就是说调用System.gc()无效 非boolean类型 格式：-XX:&lt;name&gt;=&lt;value&gt; 表示&lt;name&gt;属性的值为&lt;value&gt; 如：-XX:NewRatio=1 表示新生代和老年代的比值 用法： 123456[root@node01 test]# java -showversion -XX:+DisableExplicitGC TestJVMjava version &quot;1.8.0_141&quot;Java(TM) SE Runtime Environment (build 1.8.0_141-b15)Java HotSpot(TM) 64-Bit Server VM (build 25.141-b15, mixed mode)test 2.5、-Xms与-Xmx参数 -Xms与-Xmx分别是设置jvm的堆内存的初始大小和最大大小。 -Xmx2048m：等价于-XX:MaxHeapSize，设置JVM最大堆内存为2048M。 -Xms512m：等价于-XX:InitialHeapSize，设置JVM初始堆内存为512M。 适当的调整jvm的内存大小，可以充分利用服务器资源，让程序跑的更快。 示例： 12[root@node01 test]# java -Xms512m -Xmx2048m TestJVMtest 2.6、查看jvm的运行参数 有些时候我们需要查看jvm的运行参数，这个需求可能会存在2种情况： 第一，运行java命令时打印出运行参数； 第二，查看正在运行的java进程的参数； 2.6.1、运行java命令时打印参数 运行java命令时打印参数，需要添加-XX:+PrintFlagsFinal参数即可。 1234567891011121314151617181920212223242526272829303132333435363738394041424344[root@node01 test]# java -XX:+PrintFlagsFinal -version[Global flags] uintx AdaptiveSizeDecrementScaleFactor = 4 &#123;product&#125; uintx AdaptiveSizeMajorGCDecayTimeScale = 10 &#123;product&#125; uintx AdaptiveSizePausePolicy = 0 &#123;product&#125; uintx AdaptiveSizePolicyCollectionCostMargin = 50 &#123;product&#125; uintx AdaptiveSizePolicyInitializingSteps = 20 &#123;product&#125; uintx AdaptiveSizePolicyOutputInterval = 0 &#123;product&#125; uintx AdaptiveSizePolicyWeight = 10 &#123;product&#125; uintx AdaptiveSizeThroughPutPolicy = 0 &#123;product&#125; uintx AdaptiveTimeWeight = 25 &#123;product&#125; bool AdjustConcurrency = false &#123;product&#125; bool AggressiveOpts = false &#123;product&#125; intx AliasLevel = 3 &#123;C2 product&#125; bool AlignVector = true &#123;C2 product&#125; intx AllocateInstancePrefetchLines = 1 &#123;product&#125; intx AllocatePrefetchDistance = 256 &#123;product&#125; intx AllocatePrefetchInstr = 0 &#123;product&#125; …………………………略………………………………………… bool UseXmmI2D = false &#123;ARCH product&#125; bool UseXmmI2F = false &#123;ARCH product&#125; bool UseXmmLoadAndClearUpper = true &#123;ARCH product&#125; bool UseXmmRegToRegMoveAll = true &#123;ARCH product&#125; bool VMThreadHintNoPreempt = false &#123;product&#125; intx VMThreadPriority = -1 &#123;product&#125; intx VMThreadStackSize = 1024 &#123;pd product&#125; intx ValueMapInitialSize = 11 &#123;C1 product&#125; intx ValueMapMaxLoopSize = 8 &#123;C1 product&#125; intx ValueSearchLimit = 1000 &#123;C2 product&#125; bool VerifyMergedCPBytecodes = true &#123;product&#125; bool VerifySharedSpaces = false &#123;product&#125; intx WorkAroundNPTLTimedWaitHang = 1 &#123;product&#125; uintx YoungGenerationSizeIncrement = 20 &#123;product&#125; uintx YoungGenerationSizeSupplement = 80 &#123;product&#125; uintx YoungGenerationSizeSupplementDecay = 8 &#123;product&#125; uintx YoungPLABSize = 4096 &#123;product&#125; bool ZeroTLAB = false &#123;product&#125; intx hashCode = 5 &#123;product&#125;java version &quot;1.8.0_141&quot;Java(TM) SE Runtime Environment (build 1.8.0_141-b15)Java HotSpot(TM) 64-Bit Server VM (build 25.141-b15, mixed mode) 由上述的信息可以看出，参数有boolean类型和数字类型，值的操作符是=或:=，分别代表默认值和被修改的值。 示例： 12345678910111213141516171819java -XX:+PrintFlagsFinal -XX:+VerifySharedSpaces -version intx ValueMapInitialSize = 11 &#123;C1 product&#125; intx ValueMapMaxLoopSize = 8 &#123;C1 product&#125; intx ValueSearchLimit = 1000 &#123;C2 product&#125; bool VerifyMergedCPBytecodes = true &#123;product&#125; bool VerifySharedSpaces := true &#123;product&#125; intx WorkAroundNPTLTimedWaitHang = 1 &#123;product&#125; uintx YoungGenerationSizeIncrement = 20 &#123;product&#125; uintx YoungGenerationSizeSupplement = 80 &#123;product&#125; uintx YoungGenerationSizeSupplementDecay = 8 &#123;product&#125; uintx YoungPLABSize = 4096 &#123;product&#125; bool ZeroTLAB = false &#123;product&#125; intx hashCode = 5 &#123;product&#125;java version &quot;1.8.0_141&quot;Java(TM) SE Runtime Environment (build 1.8.0_141-b15)Java HotSpot(TM) 64-Bit Server VM (build 25.141-b15, mixed mode)#可以看到VerifySharedSpaces这个参数已经被修改了。 2.6.2、查看正在运行的jvm参数 如果想要查看正在运行的jvm就需要借助于jinfo命令查看。 首先，启动一个tomcat用于测试，来观察下运行的jvm参数。 12345678cd /tmp/rz 上传tar -xvf apache-tomcat-7.0.57.tar.gz cd apache-tomcat-7.0.57cd bin/./startup.sh#http://192.168.40.133:8080/ 进行访问 访问成功： 1234567891011121314151617181920212223#查看所有的参数，用法：jinfo -flags &lt;进程id&gt;#通过jps 或者 jps -l 查看java进程[root@node01 bin]# jps6346 Jps6219 Bootstrap[root@node01 bin]# jps -l6358 sun.tools.jps.Jps6219 org.apache.catalina.startup.Bootstrap[root@node01 bin]#[root@node01 bin]# jinfo -flags 6219Attaching to process ID 6219, please wait...Debugger attached successfully.Server compiler detected.JVM version is 25.141-b15Non-default VM flags: -XX:CICompilerCount=2 -XX:InitialHeapSize=31457280 -XX:MaxHeapSize=488636416 -XX:MaxNewSize=162529280 -XX:MinHeapDeltaBytes=524288 -XX:NewSize=10485760 -XX:OldSize=20971520 -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseFastUnorderedTimeStamps -XX:+UseParallelGC Command line: -Djava.util.logging.config.file=/tmp/apache-tomcat-7.0.57/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djava.endorsed.dirs=/tmp/apache-tomcat-7.0.57/endorsed -Dcatalina.base=/tmp/apache-tomcat-7.0.57 -Dcatalina.home=/tmp/apache-tomcat-7.0.57 -Djava.io.tmpdir=/tmp/apache-tomcat-7.0.57/temp#查看某一参数的值，用法：jinfo -flag &lt;参数名&gt; &lt;进程id&gt;[root@node01 bin]# jinfo -flag MaxHeapSize 6219-XX:MaxHeapSize=488636416 3、jvm的内存模型 jvm的内存模型在1.7和1.8有较大的区别，虽然本套课程是以1.8为例进行讲解，但是我们也是需要对1.7的内存模型有所了解，所以接下里，我们将先学习1.7再学习1.8的内存模型。 3.1、jdk1.7的堆内存模型 Young 年轻区（代） Young区被划分为三部分，Eden区和两个大小严格相同的Survivor区，其中，Survivor区间中，某一时刻只有其中一个是被使用的，另外一个留做垃圾收集时复制对象用，在Eden区间变满的时候， GC就会将存活的对象移到空闲的Survivor区间中，根据JVM的策略，在经过几次垃圾收集后，任然存活于Survivor的对象将被移动到Tenured区间。 Tenured 年老区 Tenured区主要保存生命周期长的对象，一般是一些老的对象，当一些对象在Young复制转移一定的次数以后，对象就会被转移到Tenured区，一般如果系统中用了application级别的缓存，缓存中的对象往往会被转移到这一区间。 Perm 永久区 Perm代主要保存class,method,filed对象，这部份的空间一般不会溢出，除非一次性加载了很多的类，不过在涉及到热部署的应用服务器的时候，有时候会遇到java.lang.OutOfMemoryError : PermGen space 的错误，造成这个错误的很大原因就有可能是每次都重新部署，但是重新部署后，类的class没有被卸载掉，这样就造成了大量的class对象保存在了perm中，这种情况下，一般重新启动应用服务器可以解决问题。 Virtual区： 最大内存和初始内存的差值，就是Virtual区。 3.2、jdk1.8的堆内存模型 由上图可以看出，jdk1.8的内存模型是由2部分组成，年轻代 + 年老代。 年轻代：Eden + 2*Survivor 年老代：OldGen 在jdk1.8中变化最大的Perm区，用Metaspace（元数据空间）进行了替换。 需要特别说明的是：Metaspace所占用的内存空间不是在虚拟机内部，而是在本地内存空间中，这也是与1.7的永久代最大的区别所在。 3.3、为什么要废弃1.7中的永久区？ 官网给出了解释：http://openjdk.java.net/jeps/122 123This is part of the JRockit and Hotspot convergence effort. JRockit customers do not need to configure the permanent generation (since JRockit does not have a permanent generation) and are accustomed to not configuring the permanent generation.移除永久代是为融合HotSpot JVM与 JRockit VM而做出的努力，因为JRockit没有永久代，不需要配置永久代。 现实使用中，由于永久代内存经常不够用或发生内存泄露，爆出异常java.lang.OutOfMemoryError: PermGen。 基于此，将永久区废弃，而改用元空间，改为了使用本地内存空间。 3.4、通过jstat命令进行查看堆内存使用情况 jstat命令可以查看堆内存各部分的使用量，以及加载类的数量。命令的格式如下： jstat [-命令选项] [vmid] [间隔时间/毫秒] [查询次数] 3.4.1、查看class加载统计 1234567[root@node01 ~]# jps7080 Jps6219 Bootstrap[root@node01 ~]# jstat -class 6219Loaded Bytes Unloaded Bytes Time 3273 7122.3 0 0.0 3.98 说明： Loaded：加载class的数量 Bytes：所占用空间大小 Unloaded：未加载数量 Bytes：未加载占用空间 Time：时间 3.4.2、查看编译统计 123[root@node01 ~]# jstat -compiler 6219Compiled Failed Invalid Time FailedType FailedMethod 2376 1 0 8.04 1 org/apache/tomcat/util/IntrospectionUtils setProperty 说明： Compiled：编译数量。 Failed：失败数量 Invalid：不可用数量 Time：时间 FailedType：失败类型 FailedMethod：失败的方法 3.4.3、垃圾回收统计 123456789101112[root@node01 ~]# jstat -gc 6219 S0C S1C S0U S1U EC EU OC OU MC MU CCSC CCSU YGC YGCT FGC FGCT GCT 9216.0 8704.0 0.0 6127.3 62976.0 3560.4 33792.0 20434.9 23808.0 23196.1 2560.0 2361.6 7 1.078 1 0.244 1.323#也可以指定打印的间隔和次数，每1秒中打印一次，共打印5次[root@node01 ~]# jstat -gc 6219 1000 5 S0C S1C S0U S1U EC EU OC OU MC MU CCSC CCSU YGC YGCT FGC FGCT GCT 9216.0 8704.0 0.0 6127.3 62976.0 3917.3 33792.0 20434.9 23808.0 23196.1 2560.0 2361.6 7 1.078 1 0.244 1.3239216.0 8704.0 0.0 6127.3 62976.0 3917.3 33792.0 20434.9 23808.0 23196.1 2560.0 2361.6 7 1.078 1 0.244 1.3239216.0 8704.0 0.0 6127.3 62976.0 3917.3 33792.0 20434.9 23808.0 23196.1 2560.0 2361.6 7 1.078 1 0.244 1.3239216.0 8704.0 0.0 6127.3 62976.0 3917.3 33792.0 20434.9 23808.0 23196.1 2560.0 2361.6 7 1.078 1 0.244 1.3239216.0 8704.0 0.0 6127.3 62976.0 3917.3 33792.0 20434.9 23808.0 23196.1 2560.0 2361.6 7 1.078 1 0.244 1.323 说明： S0C：第一个Survivor区的大小（KB） S1C：第二个Survivor区的大小（KB） S0U：第一个Survivor区的使用大小（KB） S1U：第二个Survivor区的使用大小（KB） EC：Eden区的大小（KB） EU：Eden区的使用大小（KB） OC：Old区大小（KB） OU：Old使用大小（KB） MC：方法区大小（KB） MU：方法区使用大小（KB） CCSC：压缩类空间大小（KB） CCSU：压缩类空间使用大小（KB） YGC：年轻代垃圾回收次数 YGCT：年轻代垃圾回收消耗时间 FGC：老年代垃圾回收次数 FGCT：老年代垃圾回收消耗时间 GCT：垃圾回收消耗总时间 4、jmap的使用以及内存溢出分析 前面通过jstat可以对jvm堆的内存进行统计分析，而jmap可以获取到更加详细的内容，如：内存使用情况的汇总、对内存溢出的定位与分析。 4.1、查看内存使用情况 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647[root@node01 ~]# jmap -heap 6219Attaching to process ID 6219, please wait...Debugger attached successfully.Server compiler detected.JVM version is 25.141-b15using thread-local object allocation.Parallel GC with 2 thread(s)Heap Configuration: #堆内存配置信息 MinHeapFreeRatio = 0 MaxHeapFreeRatio = 100 MaxHeapSize = 488636416 (466.0MB) NewSize = 10485760 (10.0MB) MaxNewSize = 162529280 (155.0MB) OldSize = 20971520 (20.0MB) NewRatio = 2 SurvivorRatio = 8 MetaspaceSize = 21807104 (20.796875MB) CompressedClassSpaceSize = 1073741824 (1024.0MB) MaxMetaspaceSize = 17592186044415 MB G1HeapRegionSize = 0 (0.0MB)Heap Usage: # 堆内存的使用情况PS Young Generation #年轻代Eden Space: capacity = 123731968 (118.0MB) used = 1384736 (1.320587158203125MB) free = 122347232 (116.67941284179688MB) 1.1191416594941737% usedFrom Space: capacity = 9437184 (9.0MB) used = 0 (0.0MB) free = 9437184 (9.0MB) 0.0% usedTo Space: capacity = 9437184 (9.0MB) used = 0 (0.0MB) free = 9437184 (9.0MB) 0.0% usedPS Old Generation #年老代 capacity = 28311552 (27.0MB) used = 13698672 (13.064071655273438MB) free = 14612880 (13.935928344726562MB) 48.38545057508681% used13648 interned Strings occupying 1866368 bytes. 4.2、查看内存中对象数量及大小 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#查看所有对象，包括活跃以及非活跃的jmap -histo &lt;pid&gt; | more#查看活跃对象jmap -histo:live &lt;pid&gt; | more[root@node01 ~]# jmap -histo:live 6219 | more num #instances #bytes class name---------------------------------------------- 1: 37437 7914608 [C 2: 34916 837984 java.lang.String 3: 884 654848 [B 4: 17188 550016 java.util.HashMap$Node 5: 3674 424968 java.lang.Class 6: 6322 395512 [Ljava.lang.Object; 7: 3738 328944 java.lang.reflect.Method 8: 1028 208048 [Ljava.util.HashMap$Node; 9: 2247 144264 [I 10: 4305 137760 java.util.concurrent.ConcurrentHashMap$Node 11: 1270 109080 [Ljava.lang.String; 12: 64 84128 [Ljava.util.concurrent.ConcurrentHashMap$Node; 13: 1714 82272 java.util.HashMap 14: 3285 70072 [Ljava.lang.Class; 15: 2888 69312 java.util.ArrayList 16: 3983 63728 java.lang.Object 17: 1271 61008 org.apache.tomcat.util.digester.CallMethodRule 18: 1518 60720 java.util.LinkedHashMap$Entry 19: 1671 53472 com.sun.org.apache.xerces.internal.xni.QName 20: 88 50880 [Ljava.util.WeakHashMap$Entry; 21: 618 49440 java.lang.reflect.Constructor 22: 1545 49440 java.util.Hashtable$Entry 23: 1027 41080 java.util.TreeMap$Entry 24: 846 40608 org.apache.tomcat.util.modeler.AttributeInfo 25: 142 38032 [S 26: 946 37840 java.lang.ref.SoftReference 27: 226 36816 [[C 。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。 #对象说明B byteC charD doubleF floatI intJ longZ boolean[ 数组，如[I表示int[][L+类名 其他对象 4.3、将内存使用情况dump到文件中 有些时候我们需要将jvm当前内存中的情况dump到文件中，然后对它进行分析，jmap也是支持dump到文件中的。 123456#用法：jmap -dump:format=b,file=dumpFileName &lt;pid&gt;#示例jmap -dump:format=b,file=/tmp/dump.dat 6219 可以看到已经在/tmp下生成了dump.dat的文件。 4.4、通过jhat对dump文件进行分析 在上一小节中，我们将jvm的内存dump到文件中，这个文件是一个二进制的文件，不方便查看，这时我们可以借助于jhat工具进行查看。 1234567891011121314#用法：jhat -port &lt;port&gt; &lt;file&gt;#示例：[root@node01 tmp]# jhat -port 9999 /tmp/dump.dat Reading from /tmp/dump.dat...Dump file created Mon Sep 10 01:04:21 CST 2018Snapshot read, resolving...Resolving 204094 objects...Chasing references, expect 40 dots........................................Eliminating duplicate references........................................Snapshot resolved.Started HTTP server on port 9999Server is ready. 打开浏览器进行访问：http://192.168.40.133:9999/ 在最后面有OQL查询功能。 4.5、通过MAT工具对dump文件进行分析 4.5.1、MAT工具介绍 MAT(Memory Analyzer Tool)，一个基于Eclipse的内存分析工具，是一个快速、功能丰富的JAVA heap分析工具，它可以帮助我们查找内存泄漏和减少内存消耗。使用内存分析工具从众多的对象中进行分析，快速的计算出在内存中对象的占用大小，看看是谁阻止了垃圾收集器的回收工作，并可以通过报表直观的查看到可能造成这种结果的对象。 官网地址：https://www.eclipse.org/mat/ 4.5.2、下载安装 下载地址：https://www.eclipse.org/mat/downloads.php 将下载得到的MemoryAnalyzer-1.8.0.20180604-win32.win32.x86_64.zip进行解压： 4.5.3、使用 查看对象以及它的依赖： 查看可能存在内存泄露的分析： 5、实战：内存溢出的定位与分析 内存溢出在实际的生产环境中经常会遇到，比如，不断的将数据写入到一个集合中，出现了死循环，读取超大的文件等等，都可能会造成内存溢出。 如果出现了内存溢出，首先我们需要定位到发生内存溢出的环节，并且进行分析，是正常还是非正常情况，如果是正常的需求，就应该考虑加大内存的设置，如果是非正常需求，那么就要对代码进行修改，修复这个bug。 首先，我们得先学会如何定位问题，然后再进行分析。如何定位问题呢，我们需要借助于jmap与MAT工具进行定位分析。 接下来，我们模拟内存溢出的场景。 5.1、模拟内存溢出 编写代码，向List集合中添加100万个字符串，每个字符串由1000个UUID组成。如果程序能够正常执行，最后打印ok。 123456789101112131415161718192021package cn.test.jvm;import java.util.ArrayList;import java.util.List;import java.util.UUID;public class TestJvmOutOfMemory &#123; public static void main(String[] args) &#123; List&lt;Object&gt; list = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; 10000000; i++) &#123; String str = &quot;&quot;; for (int j = 0; j &lt; 1000; j++) &#123; str += UUID.randomUUID().toString(); &#125; list.add(str); &#125; System.out.println(&quot;ok&quot;); &#125;&#125; 为了演示效果，我们将设置执行的参数，这里使用的是Idea编辑器。 12#参数如下：-Xms8m -Xmx8m -XX:+HeapDumpOnOutOfMemoryError 5.2、运行测试 测试结果如下： 1234567891011java.lang.OutOfMemoryError: Java heap spaceDumping heap to java_pid5348.hprof ...Heap dump file created [8137186 bytes in 0.032 secs]Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: Java heap space at java.util.Arrays.copyOf(Arrays.java:3332) at java.lang.AbstractStringBuilder.ensureCapacityInternal(AbstractStringBuilder.java:124) at java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:448) at java.lang.StringBuilder.append(StringBuilder.java:136) at cn.test.jvm.TestJvmOutOfMemory.main(TestJvmOutOfMemory.java:14)Process finished with exit code 1 可以看到，当发生内存溢出时，会dump文件到java_pid5348.hprof。 5.3、导入到MAT工具中进行分析 可以看到，有91.03%的内存由Object[]数组占有，所以比较可疑。 分析：这个可疑是正确的，因为已经有超过90%的内存都被它占有，这是非常有可能出现内存溢出的。 查看详情： 可以看到集合中存储了大量的uuid字符串。 6、jstack的使用 有些时候我们需要查看下jvm中的线程执行情况，比如，发现服务器的CPU的负载突然增高了、出现了死锁、死循环等，我们该如何分析呢？ 由于程序是正常运行的，没有任何的输出，从日志方面也看不出什么问题，所以就需要看下jvm的内部线程的执行情况，然后再进行分析查找出原因。 这个时候，就需要借助于jstack命令了，jstack的作用是将正在运行的jvm的线程情况进行快照，并且打印出来： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183#用法：jstack &lt;pid&gt;[root@node01 bin]# jstack 2203Full thread dump Java HotSpot(TM) 64-Bit Server VM (25.141-b15 mixed mode):&quot;Attach Listener&quot; #24 daemon prio=9 os_prio=0 tid=0x00007fabb4001000 nid=0x906 waiting on condition [0x0000000000000000] java.lang.Thread.State: RUNNABLE&quot;http-bio-8080-exec-5&quot; #23 daemon prio=5 os_prio=0 tid=0x00007fabb057c000 nid=0x8e1 waiting on condition [0x00007fabd05b8000] java.lang.Thread.State: WAITING (parking) at sun.misc.Unsafe.park(Native Method) - parking to wait for &lt;0x00000000f8508360&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject) at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175) at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2039) at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442) at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:104) at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:32) at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1074) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1134) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) at java.lang.Thread.run(Thread.java:748)&quot;http-bio-8080-exec-4&quot; #22 daemon prio=5 os_prio=0 tid=0x00007fab9c113800 nid=0x8e0 waiting on condition [0x00007fabd06b9000] java.lang.Thread.State: WAITING (parking) at sun.misc.Unsafe.park(Native Method) - parking to wait for &lt;0x00000000f8508360&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject) at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175) at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2039) at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442) at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:104) at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:32) at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1074) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1134) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) at java.lang.Thread.run(Thread.java:748)&quot;http-bio-8080-exec-3&quot; #21 daemon prio=5 os_prio=0 tid=0x0000000001aeb800 nid=0x8df waiting on condition [0x00007fabd09ba000] java.lang.Thread.State: WAITING (parking) at sun.misc.Unsafe.park(Native Method) - parking to wait for &lt;0x00000000f8508360&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject) at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175) at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2039) at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442) at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:104) at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:32) at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1074) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1134) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) at java.lang.Thread.run(Thread.java:748)&quot;http-bio-8080-exec-2&quot; #20 daemon prio=5 os_prio=0 tid=0x0000000001aea000 nid=0x8de waiting on condition [0x00007fabd0abb000] java.lang.Thread.State: WAITING (parking) at sun.misc.Unsafe.park(Native Method) - parking to wait for &lt;0x00000000f8508360&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject) at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175) at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2039) at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442) at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:104) at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:32) at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1074) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1134) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) at java.lang.Thread.run(Thread.java:748)&quot;http-bio-8080-exec-1&quot; #19 daemon prio=5 os_prio=0 tid=0x0000000001ae8800 nid=0x8dd waiting on condition [0x00007fabd0bbc000] java.lang.Thread.State: WAITING (parking) at sun.misc.Unsafe.park(Native Method) - parking to wait for &lt;0x00000000f8508360&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject) at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175) at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2039) at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442) at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:104) at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:32) at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1074) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1134) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) at java.lang.Thread.run(Thread.java:748)&quot;ajp-bio-8009-AsyncTimeout&quot; #17 daemon prio=5 os_prio=0 tid=0x00007fabe8128000 nid=0x8d0 waiting on condition [0x00007fabd0ece000] java.lang.Thread.State: TIMED_WAITING (sleeping) at java.lang.Thread.sleep(Native Method) at org.apache.tomcat.util.net.JIoEndpoint$AsyncTimeout.run(JIoEndpoint.java:152) at java.lang.Thread.run(Thread.java:748)&quot;ajp-bio-8009-Acceptor-0&quot; #16 daemon prio=5 os_prio=0 tid=0x00007fabe82d4000 nid=0x8cf runnable [0x00007fabd0fcf000] java.lang.Thread.State: RUNNABLE at java.net.PlainSocketImpl.socketAccept(Native Method) at java.net.AbstractPlainSocketImpl.accept(AbstractPlainSocketImpl.java:409) at java.net.ServerSocket.implAccept(ServerSocket.java:545) at java.net.ServerSocket.accept(ServerSocket.java:513) at org.apache.tomcat.util.net.DefaultServerSocketFactory.acceptSocket(DefaultServerSocketFactory.java:60) at org.apache.tomcat.util.net.JIoEndpoint$Acceptor.run(JIoEndpoint.java:220) at java.lang.Thread.run(Thread.java:748)&quot;http-bio-8080-AsyncTimeout&quot; #15 daemon prio=5 os_prio=0 tid=0x00007fabe82d1800 nid=0x8ce waiting on condition [0x00007fabd10d0000] java.lang.Thread.State: TIMED_WAITING (sleeping) at java.lang.Thread.sleep(Native Method) at org.apache.tomcat.util.net.JIoEndpoint$AsyncTimeout.run(JIoEndpoint.java:152) at java.lang.Thread.run(Thread.java:748)&quot;http-bio-8080-Acceptor-0&quot; #14 daemon prio=5 os_prio=0 tid=0x00007fabe82d0000 nid=0x8cd runnable [0x00007fabd11d1000] java.lang.Thread.State: RUNNABLE at java.net.PlainSocketImpl.socketAccept(Native Method) at java.net.AbstractPlainSocketImpl.accept(AbstractPlainSocketImpl.java:409) at java.net.ServerSocket.implAccept(ServerSocket.java:545) at java.net.ServerSocket.accept(ServerSocket.java:513) at org.apache.tomcat.util.net.DefaultServerSocketFactory.acceptSocket(DefaultServerSocketFactory.java:60) at org.apache.tomcat.util.net.JIoEndpoint$Acceptor.run(JIoEndpoint.java:220) at java.lang.Thread.run(Thread.java:748)&quot;ContainerBackgroundProcessor[StandardEngine[Catalina]]&quot; #13 daemon prio=5 os_prio=0 tid=0x00007fabe82ce000 nid=0x8cc waiting on condition [0x00007fabd12d2000] java.lang.Thread.State: TIMED_WAITING (sleeping) at java.lang.Thread.sleep(Native Method) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1513) at java.lang.Thread.run(Thread.java:748)&quot;GC Daemon&quot; #10 daemon prio=2 os_prio=0 tid=0x00007fabe83b4000 nid=0x8b3 in Object.wait() [0x00007fabd1c2f000] java.lang.Thread.State: TIMED_WAITING (on object monitor) at java.lang.Object.wait(Native Method) - waiting on &lt;0x00000000e315c2d0&gt; (a sun.misc.GC$LatencyLock) at sun.misc.GC$Daemon.run(GC.java:117) - locked &lt;0x00000000e315c2d0&gt; (a sun.misc.GC$LatencyLock)&quot;Service Thread&quot; #7 daemon prio=9 os_prio=0 tid=0x00007fabe80c3800 nid=0x8a5 runnable [0x0000000000000000] java.lang.Thread.State: RUNNABLE&quot;C1 CompilerThread1&quot; #6 daemon prio=9 os_prio=0 tid=0x00007fabe80b6800 nid=0x8a4 waiting on condition [0x0000000000000000] java.lang.Thread.State: RUNNABLE&quot;C2 CompilerThread0&quot; #5 daemon prio=9 os_prio=0 tid=0x00007fabe80b3800 nid=0x8a3 waiting on condition [0x0000000000000000] java.lang.Thread.State: RUNNABLE&quot;Signal Dispatcher&quot; #4 daemon prio=9 os_prio=0 tid=0x00007fabe80b2000 nid=0x8a2 runnable [0x0000000000000000] java.lang.Thread.State: RUNNABLE&quot;Finalizer&quot; #3 daemon prio=8 os_prio=0 tid=0x00007fabe807f000 nid=0x8a1 in Object.wait() [0x00007fabd2a67000] java.lang.Thread.State: WAITING (on object monitor) at java.lang.Object.wait(Native Method) - waiting on &lt;0x00000000e3162918&gt; (a java.lang.ref.ReferenceQueue$Lock) at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:143) - locked &lt;0x00000000e3162918&gt; (a java.lang.ref.ReferenceQueue$Lock) at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:164) at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:209)&quot;Reference Handler&quot; #2 daemon prio=10 os_prio=0 tid=0x00007fabe807a800 nid=0x8a0 in Object.wait() [0x00007fabd2b68000] java.lang.Thread.State: WAITING (on object monitor) at java.lang.Object.wait(Native Method) - waiting on &lt;0x00000000e3162958&gt; (a java.lang.ref.Reference$Lock) at java.lang.Object.wait(Object.java:502) at java.lang.ref.Reference.tryHandlePending(Reference.java:191) - locked &lt;0x00000000e3162958&gt; (a java.lang.ref.Reference$Lock) at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:153)&quot;main&quot; #1 prio=5 os_prio=0 tid=0x00007fabe8009000 nid=0x89c runnable [0x00007fabed210000] java.lang.Thread.State: RUNNABLE at java.net.PlainSocketImpl.socketAccept(Native Method) at java.net.AbstractPlainSocketImpl.accept(AbstractPlainSocketImpl.java:409) at java.net.ServerSocket.implAccept(ServerSocket.java:545) at java.net.ServerSocket.accept(ServerSocket.java:513) at org.apache.catalina.core.StandardServer.await(StandardServer.java:453) at org.apache.catalina.startup.Catalina.await(Catalina.java:777) at org.apache.catalina.startup.Catalina.start(Catalina.java:723) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:321) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:455)&quot;VM Thread&quot; os_prio=0 tid=0x00007fabe8073000 nid=0x89f runnable &quot;GC task thread#0 (ParallelGC)&quot; os_prio=0 tid=0x00007fabe801e000 nid=0x89d runnable &quot;GC task thread#1 (ParallelGC)&quot; os_prio=0 tid=0x00007fabe8020000 nid=0x89e runnable &quot;VM Periodic Task Thread&quot; os_prio=0 tid=0x00007fabe80d6800 nid=0x8a6 waiting on condition JNI global references: 43 6.1、线程的状态 在Java中线程的状态一共被分成6种： 初始态（NEW） 创建一个Thread对象，但还未调用start()启动线程时，线程处于初始态。 运行态（RUNNABLE），在Java中，运行态包括 就绪态 和 运行态。 就绪态 该状态下的线程已经获得执行所需的所有资源，只要CPU分配执行权就能运行。 所有就绪态的线程存放在就绪队列中。 运行态 获得CPU执行权，正在执行的线程。 由于一个CPU同一时刻只能执行一条线程，因此每个CPU每个时刻只有一条运行态的线程。 阻塞态（BLOCKED） 当一条正在执行的线程请求某一资源失败时，就会进入阻塞态。 而在Java中，阻塞态专指请求锁失败时进入的状态。 由一个阻塞队列存放所有阻塞态的线程。 处于阻塞态的线程会不断请求资源，一旦请求成功，就会进入就绪队列，等待执行。 等待态（WAITING） 当前线程中调用wait、join、park函数时，当前线程就会进入等待态。 也有一个等待队列存放所有等待态的线程。 线程处于等待态表示它需要等待其他线程的指示才能继续运行。 进入等待态的线程会释放CPU执行权，并释放资源（如：锁） 超时等待态（TIMED_WAITING） 当运行中的线程调用sleep(time)、wait、join、parkNanos、parkUntil时，就会进入该状态； 它和等待态一样，并不是因为请求不到资源，而是主动进入，并且进入后需要其他线程唤醒； 进入该状态后释放CPU执行权 和 占有的资源。 与等待态的区别：到了超时时间后自动进入阻塞队列，开始竞争锁。 终止态（TERMINATED） 线程执行结束后的状态。 6.2、实战：死锁问题 如果在生产环境发生了死锁，我们将看到的是部署的程序没有任何反应了，这个时候我们可以借助jstack进行分析，下面我们实战下查找死锁的原因。 6.2.1、构造死锁 编写代码，启动2个线程，Thread1拿到了obj1锁，准备去拿obj2锁时，obj2已经被Thread2锁定，所以发送了死锁。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354public class TestDeadLock &#123; private static Object obj1 = new Object(); private static Object obj2 = new Object(); public static void main(String[] args) &#123; new Thread(new Thread1()).start(); new Thread(new Thread2()).start(); &#125; private static class Thread1 implements Runnable&#123; @Override public void run() &#123; synchronized (obj1)&#123; System.out.println(&quot;Thread1 拿到了 obj1 的锁！&quot;); try &#123; // 停顿2秒的意义在于，让Thread2线程拿到obj2的锁 Thread.sleep(2000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; synchronized (obj2)&#123; System.out.println(&quot;Thread1 拿到了 obj2 的锁！&quot;); &#125; &#125; &#125; &#125; private static class Thread2 implements Runnable&#123; @Override public void run() &#123; synchronized (obj2)&#123; System.out.println(&quot;Thread2 拿到了 obj2 的锁！&quot;); try &#123; // 停顿2秒的意义在于，让Thread1线程拿到obj1的锁 Thread.sleep(2000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; synchronized (obj1)&#123; System.out.println(&quot;Thread2 拿到了 obj1 的锁！&quot;); &#125; &#125; &#125; &#125;&#125; 6.2.2、在linux上运行 123456789101112131415[root@node01 test]# javac TestDeadLock.java [root@node01 test]# ll总用量 28-rw-r--r--. 1 root root 184 9月 11 10:39 TestDeadLock$1.class-rw-r--r--. 1 root root 843 9月 11 10:39 TestDeadLock.class-rw-r--r--. 1 root root 1567 9月 11 10:39 TestDeadLock.java-rw-r--r--. 1 root root 1078 9月 11 10:39 TestDeadLock$Thread1.class-rw-r--r--. 1 root root 1078 9月 11 10:39 TestDeadLock$Thread2.class-rw-r--r--. 1 root root 573 9月 9 10:21 TestJVM.class-rw-r--r--. 1 root root 261 9月 9 10:21 TestJVM.java[root@node01 test]# java TestDeadLockThread1 拿到了 obj1 的锁！Thread2 拿到了 obj2 的锁！#这里发生了死锁，程序一直将等待下去 6.2.3、使用jstack进行分析 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687[root@node01 ~]# jstack 3256Full thread dump Java HotSpot(TM) 64-Bit Server VM (25.141-b15 mixed mode):&quot;Attach Listener&quot; #11 daemon prio=9 os_prio=0 tid=0x00007f5bfc001000 nid=0xcff waiting on condition [0x0000000000000000] java.lang.Thread.State: RUNNABLE&quot;DestroyJavaVM&quot; #10 prio=5 os_prio=0 tid=0x00007f5c2c008800 nid=0xcb9 waiting on condition [0x0000000000000000] java.lang.Thread.State: RUNNABLE&quot;Thread-1&quot; #9 prio=5 os_prio=0 tid=0x00007f5c2c0e9000 nid=0xcc5 waiting for monitor entry [0x00007f5c1c7f6000] java.lang.Thread.State: BLOCKED (on object monitor) at TestDeadLock$Thread2.run(TestDeadLock.java:47) - waiting to lock &lt;0x00000000f655dc40&gt; (a java.lang.Object) - locked &lt;0x00000000f655dc50&gt; (a java.lang.Object) at java.lang.Thread.run(Thread.java:748)&quot;Thread-0&quot; #8 prio=5 os_prio=0 tid=0x00007f5c2c0e7000 nid=0xcc4 waiting for monitor entry [0x00007f5c1c8f7000] java.lang.Thread.State: BLOCKED (on object monitor) at TestDeadLock$Thread1.run(TestDeadLock.java:27) - waiting to lock &lt;0x00000000f655dc50&gt; (a java.lang.Object) - locked &lt;0x00000000f655dc40&gt; (a java.lang.Object) at java.lang.Thread.run(Thread.java:748)&quot;Service Thread&quot; #7 daemon prio=9 os_prio=0 tid=0x00007f5c2c0d3000 nid=0xcc2 runnable [0x0000000000000000] java.lang.Thread.State: RUNNABLE&quot;C1 CompilerThread1&quot; #6 daemon prio=9 os_prio=0 tid=0x00007f5c2c0b6000 nid=0xcc1 waiting on condition [0x0000000000000000] java.lang.Thread.State: RUNNABLE&quot;C2 CompilerThread0&quot; #5 daemon prio=9 os_prio=0 tid=0x00007f5c2c0b3000 nid=0xcc0 waiting on condition [0x0000000000000000] java.lang.Thread.State: RUNNABLE&quot;Signal Dispatcher&quot; #4 daemon prio=9 os_prio=0 tid=0x00007f5c2c0b1800 nid=0xcbf runnable [0x0000000000000000] java.lang.Thread.State: RUNNABLE&quot;Finalizer&quot; #3 daemon prio=8 os_prio=0 tid=0x00007f5c2c07e800 nid=0xcbe in Object.wait() [0x00007f5c1cdfc000] java.lang.Thread.State: WAITING (on object monitor) at java.lang.Object.wait(Native Method) - waiting on &lt;0x00000000f6508ec8&gt; (a java.lang.ref.ReferenceQueue$Lock) at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:143) - locked &lt;0x00000000f6508ec8&gt; (a java.lang.ref.ReferenceQueue$Lock) at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:164) at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:209)&quot;Reference Handler&quot; #2 daemon prio=10 os_prio=0 tid=0x00007f5c2c07a000 nid=0xcbd in Object.wait() [0x00007f5c1cefd000] java.lang.Thread.State: WAITING (on object monitor) at java.lang.Object.wait(Native Method) - waiting on &lt;0x00000000f6506b68&gt; (a java.lang.ref.Reference$Lock) at java.lang.Object.wait(Object.java:502) at java.lang.ref.Reference.tryHandlePending(Reference.java:191) - locked &lt;0x00000000f6506b68&gt; (a java.lang.ref.Reference$Lock) at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:153)&quot;VM Thread&quot; os_prio=0 tid=0x00007f5c2c072800 nid=0xcbc runnable &quot;GC task thread#0 (ParallelGC)&quot; os_prio=0 tid=0x00007f5c2c01d800 nid=0xcba runnable &quot;GC task thread#1 (ParallelGC)&quot; os_prio=0 tid=0x00007f5c2c01f800 nid=0xcbb runnable &quot;VM Periodic Task Thread&quot; os_prio=0 tid=0x00007f5c2c0d6800 nid=0xcc3 waiting on condition JNI global references: 6Found one Java-level deadlock:=============================&quot;Thread-1&quot;: waiting to lock monitor 0x00007f5c080062c8 (object 0x00000000f655dc40, a java.lang.Object), which is held by &quot;Thread-0&quot;&quot;Thread-0&quot;: waiting to lock monitor 0x00007f5c08004e28 (object 0x00000000f655dc50, a java.lang.Object), which is held by &quot;Thread-1&quot;Java stack information for the threads listed above:===================================================&quot;Thread-1&quot;: at TestDeadLock$Thread2.run(TestDeadLock.java:47) - waiting to lock &lt;0x00000000f655dc40&gt; (a java.lang.Object) - locked &lt;0x00000000f655dc50&gt; (a java.lang.Object) at java.lang.Thread.run(Thread.java:748)&quot;Thread-0&quot;: at TestDeadLock$Thread1.run(TestDeadLock.java:27) - waiting to lock &lt;0x00000000f655dc50&gt; (a java.lang.Object) - locked &lt;0x00000000f655dc40&gt; (a java.lang.Object) at java.lang.Thread.run(Thread.java:748)Found 1 deadlock. 在输出的信息中，已经看到，发现了1个死锁，关键看这个： 12345678910&quot;Thread-1&quot;: at TestDeadLock$Thread2.run(TestDeadLock.java:47) - waiting to lock &lt;0x00000000f655dc40&gt; (a java.lang.Object) - locked &lt;0x00000000f655dc50&gt; (a java.lang.Object) at java.lang.Thread.run(Thread.java:748)&quot;Thread-0&quot;: at TestDeadLock$Thread1.run(TestDeadLock.java:27) - waiting to lock &lt;0x00000000f655dc50&gt; (a java.lang.Object) - locked &lt;0x00000000f655dc40&gt; (a java.lang.Object) at java.lang.Thread.run(Thread.java:748) 可以清晰的看到： Thread2获取了 &lt;0x00000000f655dc50&gt; 的锁，等待获取 &lt;0x00000000f655dc40&gt; 这个锁 Thread1获取了 &lt;0x00000000f655dc40&gt; 的锁，等待获取 &lt;0x00000000f655dc50&gt; 这个锁 由此可见，发生了死锁。 7、VisualVM工具的使用 VisualVM，能够监控线程，内存情况，查看方法的CPU时间和内存中的对 象，已被GC的对象，反向查看分配的堆栈(如100个String对象分别由哪几个对象分配出来的)。 VisualVM使用简单，几乎0配置，功能还是比较丰富的，几乎囊括了其它JDK自带命令的所有功能。 内存信息 线程信息 Dump堆（本地进程） Dump线程（本地进程） 打开堆Dump。堆Dump可以用jmap来生成。 打开线程Dump 生成应用快照（包含内存信息、线程信息等等） 性能分析。CPU分析（各个方法调用时间，检查哪些方法耗时多），内存分析（各类对象占用的内存，检查哪些类占用内存多） …… 7.1、启动 在jdk的安装目录的bin目录下，找到jvisualvm.exe，双击打开即可。 7.2、查看本地进程 7.3、查看CPU、内存、类、线程运行信息 7.4、查看线程详情 也可以点击右上角Dump按钮，将线程的信息导出，其实就是执行的jstack命令。 发现，显示的内容是一样的。 7.5、抽样器 抽样器可以对CPU、内存在一段时间内进行抽样，以供分析。 7.6、监控远程的jvm VisualJVM不仅是可以监控本地jvm进程，还可以监控远程的jvm进程，需要借助于JMX技术实现。 7.6.1、什么是JMX？ JMX（Java Management Extensions，即Java管理扩展）是一个为应用程序、设备、系统等植入管理功能的框架。JMX可以跨越一系列异构操作系统平台、系统体系结构和网络传输协议，灵活的开发无缝集成的系统、网络和服务管理应用。 7.6.2、监控远程的tomcat 想要监控远程的tomcat，就需要在远程的tomcat进行对JMX配置，方法如下： 123456789#在tomcat的bin目录下，修改catalina.sh，添加如下的参数JAVA_OPTS=&quot;-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=9999 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false&quot;#这几个参数的意思是：#-Dcom.sun.management.jmxremote ：允许使用JMX远程管理#-Dcom.sun.management.jmxremote.port=9999 ：JMX远程连接端口#-Dcom.sun.management.jmxremote.authenticate=false ：不进行身份认证，任何用户都可以连接#-Dcom.sun.management.jmxremote.ssl=false ：不使用ssl 保存退出，重启tomcat。 7.6.3、使用VisualJVM连接远程tomcat 添加远程主机： 在一个主机下可能会有很多的jvm需要监控，所以接下来要在该主机上添加需要监控的jvm： 连接成功。使用方法和前面就一样了，就可以和监控本地jvm进程一样，监控远程的tomcat进程。","categories":[],"tags":[{"name":"jvm","slug":"jvm","permalink":"http://example.com/tags/jvm/"}]},{"title":"JDK1.8 LocalDate","slug":"JDK1.8 LocalDate","date":"2018-12-11T10:53:35.000Z","updated":"2021-09-22T11:19:04.605Z","comments":true,"path":"2018/12/11/JDK1.8 LocalDate/","link":"","permalink":"http://example.com/2018/12/11/JDK1.8%20LocalDate/","excerpt":"","text":"LocalDateTime 123表示日期的LocalDate 表示时间的LocalTime 表示日期时间的LocalDateTime 123456789101112// 从默认时区的系统时钟获取当前的日期时间。不用考虑时区差LocalDateTime date = LocalDateTime.now();//2018-07-15T14:22:39.759System.out.println(date);System.out.println(date.getYear());System.out.println(date.getMonthValue());System.out.println(date.getDayOfMonth());System.out.println(date.getHour());System.out.println(date.getMinute());System.out.println(date.getSecond());System.out.println(date.getNano()); 123456789// 手动创建一个LocalDateTime实例LocalDateTime date2 = LocalDateTime.of(2017, 12, 17, 9, 31, 31, 31);System.out.println(date2);// 进行加操作，得到新的日期实例LocalDateTime date3 = date2.plusDays(12);System.out.println(date3);// 进行减操作，得到新的日期实例LocalDateTime date4 = date3.minusYears(2);System.out.println(date4); 12345678910// 时间戳 1970年1月1日00：00：00 到某一个时间点的毫秒值// 默认获取UTC时区Instant ins = Instant.now();System.out.println(ins);System.out.println(LocalDateTime.now().toInstant(ZoneOffset.of(&quot;+8&quot;)).toEpochMilli());System.out.println(System.currentTimeMillis());System.out.println(Instant.now().toEpochMilli());System.out.println(Instant.now().atOffset(ZoneOffset.ofHours(8)).toInstant().toEpochMilli()); 计算时间间隔 12345678910111213141516171819202122232425262728// Duration:计算两个时间之间的间隔// Period：计算两个日期之间的间隔Instant ins1 = Instant.now();try &#123; Thread.sleep(1000);&#125; catch (InterruptedException e) &#123; e.printStackTrace();&#125;Instant ins2 = Instant.now();Duration dura = Duration.between(ins1, ins2);System.out.println(dura);System.out.println(dura.toMillis());System.out.println(&quot;======================&quot;);LocalTime localTime = LocalTime.now();try &#123; Thread.sleep(1000);&#125; catch (InterruptedException e) &#123; e.printStackTrace();&#125;LocalTime localTime2 = LocalTime.now();Duration du2 = Duration.between(localTime, localTime2);System.out.println(du2);System.out.println(du2.toMillis()); 1234567891011121314LocalDate localDate =LocalDate.now();try &#123; Thread.sleep(1000);&#125; catch (InterruptedException e) &#123; e.printStackTrace();&#125;LocalDate localDate2 = LocalDate.of(2019,12,12);Period pe = Period.between(localDate, localDate2);System.out.println(pe.getYears());System.out.println(pe); 获取特定天数 123456789101112131415161718192021222324252627282930// temperalAdjust 时间校验器// 例如获取下周日 下一个工作日LocalDateTime ldt1 = LocalDateTime.now();System.out.println(ldt1);// 获取一年中的第一天LocalDateTime ldt2 = ldt1.withDayOfYear(1);System.out.println(ldt2);// 获取一个月中的第一天LocalDateTime ldt3 = ldt1.withDayOfMonth(1);System.out.println(ldt3);LocalDateTime ldt4 = ldt1.with(TemporalAdjusters.next(DayOfWeek.FRIDAY));System.out.println(ldt4);// 获取下一个工作日LocalDateTime ldt5 = ldt1.with((t) -&gt; &#123; LocalDateTime ldt6 = (LocalDateTime)t; DayOfWeek dayOfWeek = ldt6.getDayOfWeek(); if (DayOfWeek.FRIDAY.equals(dayOfWeek))&#123; return ldt6.plusDays(3); &#125; else if (DayOfWeek.SATURDAY.equals(dayOfWeek))&#123; return ldt6.plusDays(2); &#125; else &#123; return ldt6.plusDays(1); &#125;&#125;);System.out.println(ldt5); 格式化时间/日期 1234567891011121314151617181920212223// DateTimeFormatter: 格式化时间/日期// 自定义格式LocalDateTime ldt = LocalDateTime.now();DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;yyyy年MM月dd日&quot;);// DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd&quot;);String strDate1 = ldt.format(formatter);String strDate = formatter.format(ldt);System.out.println(strDate);System.out.println(strDate1);// 使用api提供的格式DateTimeFormatter dtf = DateTimeFormatter.ISO_DATE;LocalDateTime ldt2 = LocalDateTime.now();String strDate3 = dtf.format(ldt2);System.out.println(strDate3);// 解析字符串to时间DateTimeFormatter df = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss&quot;);LocalDateTime time = LocalDateTime.now();String localTime = df.format(time);LocalDateTime ldt4 = LocalDateTime.parse(&quot;2017-09-28 17:07:05&quot;,df);System.out.println(&quot;LocalDateTime转成String类型的时间：&quot;+localTime);System.out.println(&quot;String类型的时间转成LocalDateTime：&quot;+ldt4); 123456789101112//获取当前日期,只含年月日 固定格式 yyyy-MM-dd 2018-21-11LocalDate today = LocalDate.now();// 根据年月日取日期，6月就是6，LocalDate oldDate = LocalDate.of(2018, 6, 1);// 根据字符串取：默认格式yyyy-MM-dd，02不能写成2LocalDate yesteday = LocalDate.parse(&quot;2018-06-03&quot;);// 如果不是闰年 传入29号也会报错LocalDate.parse(&quot;2018-02-29&quot;); 1234567891011121314151617/** * 日期转换常用,第一天或者最后一天... */public static void localDateTransferTest()&#123; //2018-05-04 LocalDate today = LocalDate.now(); // 取本月第1天： 2018-05-01 LocalDate firstDayOfThisMonth = today.with(TemporalAdjusters.firstDayOfMonth()); // 取本月第2天：2018-05-02 LocalDate secondDayOfThisMonth = today.withDayOfMonth(2); // 取本月最后一天，再也不用计算是28，29，30还是31： 2018-05-31 LocalDate lastDayOfThisMonth = today.with(TemporalAdjusters.lastDayOfMonth()); // 取下一天：2018-06-01 LocalDate firstDayOf2015 = lastDayOfThisMonth.plusDays(1); // 取2018年10月第一个周三 so easy?： 2018-10-03 LocalDate thirdMondayOf2018 = LocalDate.parse(&quot;2018-10-01&quot;).with(TemporalAdjusters.firstInMonth(DayOfWeek.WEDNESDAY));&#125; 12345678public static void localTimeTest()&#123; //16:25:46.448(纳秒值) LocalTime todayTimeWithMillisTime = LocalTime.now(); //16:28:48 不带纳秒值 LocalTime todayTimeWithNoMillisTime = LocalTime.now().withNano(0); LocalTime time1 = LocalTime.parse(&quot;23:59:59&quot;);&#125; 1234567891011public static void localDateTimeTest()&#123; //转化为时间戳 毫秒值 long time1 = LocalDateTime.now().toInstant(ZoneOffset.of(&quot;+8&quot;)).toEpochMilli(); long time2 = System.currentTimeMillis(); //时间戳转化为localdatetime DateTimeFormatter df= DateTimeFormatter.ofPattern(&quot;YYYY-MM-dd HH:mm:ss.SSS&quot;); System.out.println(df.format(LocalDateTime.ofInstant(Instant.ofEpochMilli(time1),ZoneId.of(&quot;Asia/Shanghai&quot;))));&#125;","categories":[],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"nginx 重启配置","slug":"nginx配置重启","date":"2018-12-11T09:09:11.000Z","updated":"2021-09-22T11:19:04.639Z","comments":true,"path":"2018/12/11/nginx配置重启/","link":"","permalink":"http://example.com/2018/12/11/nginx%E9%85%8D%E7%BD%AE%E9%87%8D%E5%90%AF/","excerpt":"","text":"nginx 重启配置 123456 /etc/init.d/nginx configtest /etc/init.d/nginx reloadsystemctl reload nginx 查看CentOS版本方法 12lsb_release -a","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://example.com/tags/linux/"}]},{"title":"weixin4j","slug":"weixin4j","date":"2018-12-10T03:37:26.000Z","updated":"2021-09-22T11:19:04.650Z","comments":true,"path":"2018/12/10/weixin4j/","link":"","permalink":"http://example.com/2018/12/10/weixin4j/","excerpt":"","text":"weixin4j https://blog.csdn.net/yakson/article/details/82108649","categories":[],"tags":[{"name":"wechat","slug":"wechat","permalink":"http://example.com/tags/wechat/"}]},{"title":"WXPayConfig","slug":"WXPayConfig","date":"2018-12-07T02:58:35.000Z","updated":"2021-09-22T11:19:04.610Z","comments":true,"path":"2018/12/07/WXPayConfig/","link":"","permalink":"http://example.com/2018/12/07/WXPayConfig/","excerpt":"","text":"WXPayConfig 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697package com.ifenghui.storybookapi.util.weixin;import java.io.ByteArrayInputStream;import java.io.File;import java.io.FileInputStream;import java.io.InputStream;public class WXPayConfigImpl extends WXPayConfig &#123; private String appId; private String mchId; private byte[] certData; private static WXPayConfigImpl INSTANCE; private WXPayConfigImpl(String certpath, String appId, String mchId) throws Exception &#123; this.appId = appId; this.mchId = mchId;// String certPath = &quot;C:\\\\Users\\\\Administrator\\\\Desktop\\\\cert故事飞船商户号微信证书\\\\apiclient_cert.p12&quot;; String certPath = certpath; File file = new File(certPath); InputStream certStream = new FileInputStream(file); this.certData = new byte[(int) file.length()]; certStream.read(this.certData); certStream.close(); &#125; public static WXPayConfigImpl getInstance(String certpath, String appId, String mchId) throws Exception &#123; if (INSTANCE == null) &#123; synchronized (WXPayConfigImpl.class) &#123; if (INSTANCE == null) &#123; INSTANCE = new WXPayConfigImpl(certpath, appId, mchId); &#125; &#125; &#125; return INSTANCE; &#125; @Override public String getAppID() &#123; return this.appId; &#125; @Override public String getMchID() &#123; return this.mchId; &#125; @Override public String getKey() &#123; return &quot;xxxxxxxxxxxxxxxxxxxxxx&quot;; &#125; @Override public InputStream getCertStream() &#123; ByteArrayInputStream certBis; certBis = new ByteArrayInputStream(this.certData); return certBis; &#125; @Override public int getHttpConnectTimeoutMs() &#123; return 2000; &#125; @Override public int getHttpReadTimeoutMs() &#123; return 10000; &#125; @Override IWXPayDomain getWXPayDomain() &#123; return WXPayDomainSimpleImpl.instance(); &#125; public String getPrimaryDomain() &#123; return &quot;api.mch.weixin.qq.com&quot;; &#125; public String getAlternateDomain() &#123; return &quot;api2.mch.weixin.qq.com&quot;; &#125; @Override public int getReportWorkerNum() &#123; return 1; &#125; @Override public int getReportBatchSize() &#123; return 2; &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104package com.ifenghui.storybookapi.util.weixin;import java.io.InputStream;public abstract class WXPayConfig &#123; /** * 获取 App ID * * @return App ID */ abstract String getAppID(); /** * 获取 Mch ID * * @return Mch ID */ abstract String getMchID(); /** * 获取 API 密钥 * * @return API密钥 */ abstract String getKey(); /** * 获取商户证书内容 * * @return 商户证书内容 */ abstract InputStream getCertStream(); /** * HTTP(S) 连接超时时间，单位毫秒 * * @return */ public int getHttpConnectTimeoutMs() &#123; return 6*1000; &#125; /** * HTTP(S) 读数据超时时间，单位毫秒 * * @return */ public int getHttpReadTimeoutMs() &#123; return 8*1000; &#125; /** * 获取WXPayDomain, 用于多域名容灾自动切换 * @return */ abstract IWXPayDomain getWXPayDomain(); /** * 是否自动上报。 * 若要关闭自动上报，子类中实现该函数返回 false 即可。 * * @return */ public boolean shouldAutoReport() &#123; return true; &#125; /** * 进行健康上报的线程的数量 * * @return */ public int getReportWorkerNum() &#123; return 6; &#125; /** * 健康上报缓存消息的最大数量。会有线程去独立上报 * 粗略计算：加入一条消息200B，10000消息占用空间 2000 KB，约为2MB，可以接受 * * @return */ public int getReportQueueMaxSize() &#123; return 10000; &#125; /** * 批量上报，一次最多上报多个数据 * * @return */ public int getReportBatchSize() &#123; return 10; &#125;&#125;","categories":[],"tags":[{"name":"util","slug":"util","permalink":"http://example.com/tags/util/"}]},{"title":"wx 转账退款","slug":"pay_wx 转账退款","date":"2018-12-07T02:57:34.000Z","updated":"2021-09-22T11:19:04.640Z","comments":true,"path":"2018/12/07/pay_wx 转账退款/","link":"","permalink":"http://example.com/2018/12/07/pay_wx%20%E8%BD%AC%E8%B4%A6%E9%80%80%E6%AC%BE/","excerpt":"","text":"wx 转账退款 创建提现申请 1234567891011121314151617CashAccountCashApply cashAccountCashApply = new CashAccountCashApply();cashAccountCashApply.setIntro(&quot;&quot;);cashAccountCashApply.setAmount(amount);cashAccountCashApply.setStatus(1);cashAccountCashApply.setCallbackStatus(0);cashAccountCashApply.setResultStatus(0);cashAccountCashApply.setType(cashAccountApplyStyle);cashAccountCashApply.setUserId(userId);cashAccountCashApply.setOrderId(&quot;&quot;);//微信用户openidcashAccountCashApply.setAccount(account);cashAccountCashApply.setCallbackMsg(&quot;&quot;);cashAccountCashApply.setUserInfo(userInfo);cashAccountCashApply.setCreateTime(new Date());cashAccountCashApply.setSuccessTime(new Date());cashAccountCashApplyDao.save(cashAccountCashApply); 处理微信提现退款 12345678910111213141516171819202122232425262728293031323334353637public void dealWechatPayRefund(CashAccountCashApply cashAccountCashApply) throws Exception &#123; Map&lt;String, String&gt; response = this.wechatPayTransfer(cashAccountCashApply); String prefix = env.getProperty(&quot;cash.transfer.prefix&quot;); logger.info(&quot;==========微信回调数据============&quot;); logger.info(&quot;=========prefix =&quot;+prefix+&quot;============&quot;); String orderStr = prefix + cashAccountCashApply.getId(); String partnerTradeNo = response.get(&quot;partner_trade_no&quot;); ObjectMapper objectMapper = new ObjectMapper(); String resultCode = response.get(&quot;return_code&quot;); String responseString = &quot;默认转账响应（问题）！&quot;; logger.info(&quot;==========默认转账响应（问题）============&quot;); try &#123; responseString = objectMapper.writeValueAsString(response); logger.info(&quot;==========微信回调数据============&quot;); logger.info(responseString); &#125; catch (JsonProcessingException je) &#123; throw new RuntimeException(&quot;wechat pay refund json serialize error!&quot;); &#125; if (resultCode.equals(&quot;SUCCESS&quot;) &amp;&amp; orderStr.equals(partnerTradeNo)) &#123; logger.info(&quot;=========状态更改=============&quot;); logger.info(resultCode); this.changeCashAccountApplyStatus( cashAccountCashApply, responseString, CashAccountApplyStatusStyle.SUCCESS_FINISH, 1, 1); &#125; else &#123; logger.info(&quot;=========状态更改=============&quot;); logger.info(resultCode); this.changeCashAccountApplyStatus( cashAccountCashApply, responseString, CashAccountApplyStatusStyle.WAIT_PAY_CASH, 2, 0); &#125;&#125; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162 private Map&lt;String, String&gt; wechatPayTransfer(CashAccountCashApply cashAccountCashApply) throws Exception &#123; logger.info(&quot;-----微信提现---&quot;); try &#123; //证书地址 String certpath = env.getProperty(&quot;certPath&quot;); logger.info(&quot;=======&quot; + certpath + &quot;======&quot;); String appId = env.getProperty(&quot;appid&quot;); logger.info(&quot;=======&quot; + appId + &quot;======&quot;); String mchId = env.getProperty(&quot;mch_id&quot;); logger.info(&quot;=======&quot; + mchId + &quot;======&quot;); //appid不一样通过wxconfig在内部赋值 util标签 WxConfig = WXPayConfigImpl.getInstance(certpath, appId, mchId); wxpay = new WXPay(WxConfig); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; String prefix = env.getProperty(&quot;cash.transfer.prefix&quot;); logger.info(&quot;----------&quot; + prefix + &quot;---------&quot;); logger.info(&quot;---------获取ip----------&quot;); String ip = &quot;&quot;; try &#123; ip = HttpRequest.getIpAddr(request); &#125; catch (Exception e) &#123; //本地测试直接写ip ip = &quot;124.xxx.xx.xx&quot;; &#125; logger.info(&quot;-----ip : &quot; + ip + &quot;---&quot;); String orderStr = prefix + cashAccountCashApply.getId(); Integer amount = cashAccountCashApply.getAmount(); logger.info(&quot;-----amount : &quot; + amount + &quot;---&quot;); HashMap&lt;String, String&gt; data = new HashMap&lt;String, String&gt;(); data.put(&quot;mch_appid&quot;, &quot;wxxxxxxxxxx&quot;); data.put(&quot;mchid&quot;, &quot;14xxxxxx&quot;); data.put(&quot;amount&quot;, amount.toString()); data.put(&quot;check_name&quot;, &quot;NO_CHECK&quot;); data.put(&quot;desc&quot;, &quot;xxx提现(退款)&quot;); //随机字符串 util标签工具类中有 data.put(&quot;nonce_str&quot;, WXPayUtil.generateUUID()); data.put(&quot;openid&quot;, cashAccountCashApply.getAccount()); data.put(&quot;partner_trade_no&quot;, orderStr); data.put(&quot;spbill_create_ip&quot;, ip); //可直接调用返回 如下处理是因为key不一样自己处理// Map&lt;String, String&gt; response = wxpay.transfers(data); //公众号的key String sign = WXPayUtil.generateSignature(data, &quot;xxxxxxxxxxxxx&quot;); data.put(&quot;sign&quot;, sign); logger.info(&quot;-----sign : &quot; + sign + &quot;---&quot;); String res = wxpay.requestWithCert(&quot;/mmpaymkttransfers/promotion/transfers&quot;, (Map&lt;String, String&gt;) data, this.WxConfig.getHttpConnectTimeoutMs(), this.WxConfig.getHttpReadTimeoutMs()); logger.info(&quot;-----res : &quot; + res + &quot;---&quot;); //直接转map Map&lt;String, String&gt; response = WXPayUtil.xmlToMap(res); logger.info(&quot;=============response==============&quot;); return response; &#125;","categories":[],"tags":[{"name":"ali/weixin pay","slug":"ali-weixin-pay","permalink":"http://example.com/tags/ali-weixin-pay/"}]},{"title":"ali 转账退款","slug":"pay_ali 转账退款","date":"2018-12-07T02:57:33.000Z","updated":"2021-09-22T11:19:04.639Z","comments":true,"path":"2018/12/07/pay_ali 转账退款/","link":"","permalink":"http://example.com/2018/12/07/pay_ali%20%E8%BD%AC%E8%B4%A6%E9%80%80%E6%AC%BE/","excerpt":"","text":"ali 转账退款 创建提现申请 1234567891011121314151617CashAccountCashApply cashAccountCashApply = new CashAccountCashApply();cashAccountCashApply.setIntro(&quot;&quot;);cashAccountCashApply.setAmount(amount);cashAccountCashApply.setStatus(1);cashAccountCashApply.setCallbackStatus(0);cashAccountCashApply.setResultStatus(0);cashAccountCashApply.setType(cashAccountApplyStyle);cashAccountCashApply.setUserId(userId);cashAccountCashApply.setOrderId(&quot;&quot;);//支付宝账户cashAccountCashApply.setAccount(account);cashAccountCashApply.setCallbackMsg(&quot;&quot;);cashAccountCashApply.setUserInfo(userInfo);cashAccountCashApply.setCreateTime(new Date());cashAccountCashApply.setSuccessTime(new Date());cashAccountCashApplyDao.save(cashAccountCashApply); 处理ali提现退款 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273public void dealAliPayRefund(CashAccountCashApply cashAccountCashApply) &#123; String prefix = env.getProperty(&quot;cash.transfer.prefix&quot;); String orderStr = prefix + &quot;_&quot; + cashAccountCashApply.getId(); Float amount = cashAccountCashApply.getAmount().floatValue() / 100; //支付宝相关信息 String app_id = &quot;201xxxxxxxxxxx&quot;; String privateKey = env.getProperty(&quot;private_key&quot;); String publicKey = env.getProperty(&quot;alipay_public_key&quot;); AlipayClient alipayClient = new DefaultAlipayClient(&quot;https://openapi.alipay.com/gateway.do&quot;, app_id, privateKey, &quot;json&quot;, &quot;utf-8&quot;, publicKey, &quot;RSA&quot;); AlipayFundTransToaccountTransferRequest request = new AlipayFundTransToaccountTransferRequest(); request.setBizContent(&quot;&#123;&quot; + &quot;\\&quot;out_biz_no\\&quot;:\\&quot;&quot; + orderStr + &quot;\\&quot;,&quot; + &quot;\\&quot;payee_type\\&quot;:\\&quot;ALIPAY_USERID\\&quot;,&quot; + &quot;\\&quot;payee_account\\&quot;:\\&quot;&quot; + cashAccountCashApply.getAccount() + &quot;\\&quot;,&quot; + &quot;\\&quot;amount\\&quot;:\\&quot;&quot; + amount + &quot;\\&quot;,&quot; + &quot;\\&quot;remark\\&quot;:\\&quot;xxx提现（转账）\\&quot;&quot; + &quot;&#125;&quot;); try &#123; AlipayFundTransToaccountTransferResponse response = alipayClient.execute(request); ObjectMapper objectMapper = new ObjectMapper(); String responseString = &quot;默认转账响应（问题）！&quot;; try &#123; responseString = objectMapper.writeValueAsString(response); &#125; catch (JsonProcessingException je) &#123; throw new RuntimeException(&quot;ali pay refund json serialize error!&quot;); &#125; if (response.isSuccess()) &#123; String responseOutBizNo = response.getOutBizNo(); if (response.getCode().equals(&quot;10000&quot;)) &#123; //成功处理逻辑 logger.info(&quot;AliPayRefund-Success: outBizNo is &quot; + response.getOutBizNo()); Integer orderId = Integer.parseInt(responseOutBizNo.split(&quot;_&quot;)[1]); if (orderId.equals(cashAccountCashApply.getId())) &#123; this.changeCashAccountApplyStatus( cashAccountCashApply, responseString, CashAccountApplyStatusStyle.SUCCESS_FINISH, 1, 1); &#125; else &#123; this.changeCashAccountApplyStatus( cashAccountCashApply, responseString, CashAccountApplyStatusStyle.WAIT_PAY_CASH, 2, 0); &#125; &#125; else &#123; //失败处理逻辑 this.changeCashAccountApplyStatus( cashAccountCashApply, responseString, CashAccountApplyStatusStyle.WAIT_PAY_CASH, 2, 0); &#125; &#125; else &#123; throw new RuntimeException(&quot;ali pay refund error!&quot;); &#125; &#125; catch (com.alipay.api.AlipayApiException e) &#123; e.printStackTrace(); ObjectMapper objectMapper = new ObjectMapper(); try &#123; String errorString = objectMapper.writeValueAsString(e); this.changeCashAccountApplyStatus( cashAccountCashApply, errorString, CashAccountApplyStatusStyle.WAIT_PAY_CASH, 2, 0); &#125; catch (JsonProcessingException je) &#123; throw new RuntimeException(&quot;ali pay refund json serialize error!&quot;); &#125; logger.info(&quot;AliPayRefund-Error:&quot; + e.getErrMsg()); &#125;&#125;","categories":[],"tags":[{"name":"ali/weixin pay","slug":"ali-weixin-pay","permalink":"http://example.com/tags/ali-weixin-pay/"}]},{"title":"hexo 简单搭建GitHub博客","slug":"hexo","date":"2018-12-06T09:36:40.000Z","updated":"2021-09-22T11:19:04.616Z","comments":true,"path":"2018/12/06/hexo/","link":"","permalink":"http://example.com/2018/12/06/hexo/","excerpt":"","text":"HEXO简单使用 hexo文档 &gt; https://hexo.io/zh-cn/docs/ node下载 &gt; https://nodejs.org 环境安装 1234检查node安装:node -vnpm -v 123检查git安装:git --version 注册账号 &gt; https://github.com/ 全局配置设置到淘宝源： git 命令窗口打开 1npm config set registry https://registry.npm.taobao.org 1234例：Administrator@SC-201707251402 MINGW64 /g/vchen/blog/hexo (master)$ npm config set registry https://registry.npm.taobao.org 设置全局配置 user.name 和 user.email 123git config –-global user.name “your name” //(“”的账号是刚才Github里面自己注册的账号) git config –-global user.email “your email” //(&quot;&quot;的邮箱是你自己注册的邮箱) 生成ssh密钥 123ssh-keygen -t rsa -C “your email” //打自己的邮箱 设置ssh key到GitHub 默认生成ssh key在C:\\Users\\username.ssh文件夹中，复制 id_rsa.pub文件到 github-&gt;settings-&gt;SSH and GPG key-&gt;new ssh key 检测是否成功 1ssh -T git@github.com hexo 安装 1234567空文件夹hexo initnpm installhexo generate（可简写为hexo g） hexo sever（可简写为hexo s 本地测试）hexo deploy(可简写为hexo d 部署GitHub 需要提前配置) 12换端口 本地测试hexo s -p 5000 12查看版本hexo -V hexo 配置文件（_config.yml） 1234deploy: type: git repo: git@github.com:yourname/yourname.github.io.git //（改成自己的用户名和用户名加域名） branch: master 冒号后要有空格 部署 1hexo deploy 等待，打开类似:threadv.github.io 更多设置可查看 hexo 文档 可能出现的问题 12345$ hexo d ERROR Deployer not found: git没安装之前步骤解决方案：npm install --save hexo-deployer-git","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"}]},{"title":"即时到账 ali","slug":"pay_即时到账交易接口","date":"2018-11-07T05:20:26.000Z","updated":"2021-09-22T11:19:04.641Z","comments":true,"path":"2018/11/07/pay_即时到账交易接口/","link":"","permalink":"http://example.com/2018/11/07/pay_%E5%8D%B3%E6%97%B6%E5%88%B0%E8%B4%A6%E4%BA%A4%E6%98%93%E6%8E%A5%E5%8F%A3/","excerpt":"","text":"即时到账 ali https://docs.open.alipay.com/62/103566 支付获取订单和回调地址 123456789101112131415161718192021222324252627@RequestMapping(value = &quot;/getNewRechargeOrder&quot;, method = RequestMethod.POST) @ResponseBody @ApiOperation(value = &quot;即时到账交易接口-获得充值订单)&quot;, notes = &quot;支付获取订单和回调地址&quot;) public BuyStorysPayApiResponse getNewRechargeOrder( @ApiParam(value = &quot;用户token&quot;) @RequestParam String token, @ApiParam(value = &quot;订阅或购买订单号&quot;) @RequestParam Long payOrderId, @ApiParam(value = &quot;类型&quot;) @RequestParam Integer type ) throws ApiException &#123; Long userId; userId = userService.checkAndGetCurrentUserId(token); String appName = &quot;&quot;; String app_id; String private_key; String notify_url; String userAgent=request.getHeader(&quot;User-Agent&quot;); logger.info(&quot;------------new--------getNewRechargeOrder------userAgent--&quot; + userAgent); app_id = env.getProperty(&quot;app_id&quot;); private_key = env.getProperty(&quot;private_key&quot;); RechargeStyle rechargeStyle=RechargeStyle.getById(type); PayRechargeOrder payRechargeOrder = payService.addPayRechargeOrder(userId, payOrderId, rechargeStyle, priceId, channel, app_id, private_key, notify_url,appName); BuyStorysPayApiResponse buyStorysPayApiResponse = new BuyStorysPayApiResponse(); buyStorysPayApiResponse.setPayRechargeOrder(payRechargeOrder); logger.info(&quot;------------new--------getNewRechargeOrder------result--&quot; + buyStorysPayApiResponse); return buyStorysPayApiResponse; &#125; 1234567891011121314151617181920212223242526272829303132333435public PayRechargeOrder addPayRechargeOrder(Long userId, Long payOrderId, RechargeStyle type, Long priceId, String channel,String app_id,String private_key,String alipay_notify_url,String appName) throws ApiException &#123; Integer amount = payRechargeOrderService.getAmountByRechargeStyle(type, payOrderId.intValue(), priceId); String prefix =env.getProperty(&quot;order.prefix&quot;); User user = userDao.findOne(userId); /** * 生成充值订单story_pay_recharge_order */ if (channel == null) &#123; channel = &quot;&quot;; &#125; PayRechargeOrder payRechargeOrder = payRechargeOrderService.addPayRechargeOrder( userId.intValue(), amount, RechargePayStyle.DEFAULT_NULL, type, channel, appName ); String orderStr = prefix + &quot;_&quot; + payRechargeOrder.getId(); payRechargeOrder.setOrderCode(orderStr); payRechargeOrderDao.save(payRechargeOrder); payRechargeOrder.setUser(user); payRechargeOrderService.setPayRechargeOrderNotifyAddress(payRechargeOrder,alipay_notify_url); String orderString = this.getAlipayStr(amount,payRechargeOrder,app_id,private_key,alipay_notify_url); payRechargeOrder.setOrderString(orderString); payRechargeOrderDao.save(payRechargeOrder); logger.info(&quot;--------------------getPayRechargeOrder----orderString-----&quot;+orderString); return payRechargeOrder;&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758 /** * 获得alipay的支付信息。用于生成支付订单时的返回 * @return */ private String getAlipayStr(int amount,PayRechargeOrder payRechargeOrder,String app_id,String private_key,String notify_url)&#123; String prefix=env.getProperty(&quot;order.prefix&quot;); String orderStr = prefix + &quot;_&quot; + payRechargeOrder.getId(); //处理orderStr和sign String charset=&quot;utf-8&quot;; String sign_type=&quot;RSA&quot;; Date now = new Date(); SimpleDateFormat dateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);//可以方便地修改日期格式 String timestamp = dateFormat.format( now );// String notify_url = env.getProperty(&quot;iosalipay.notify&quot;);.... String method = &quot;alipay.trade.app.pay&quot;;//? String version = &quot;1.0&quot;;// String gateway = &quot;https://openapi.alipay.com/gateway.do&quot;;//支付宝网关 float size = (float)amount/100; DecimalFormat df = new DecimalFormat(&quot;0.00&quot;);//格式化小数，不足的补0 String total_amount = df.format(size);//返回的是String类型的 String out_trade_no = prefix+&quot;_&quot;+payRechargeOrder.getId(); String biz_content = &quot;&#123;\\&quot;timeout_express\\&quot;:\\&quot;30m\\&quot;,\\&quot;seller_id\\&quot;:\\&quot;\\&quot;,\\&quot;product_code\\&quot;:\\&quot;QUICK_MSECURITY_PAY\\&quot;,\\&quot;total_amount\\&quot;:&quot;+total_amount+&quot;,\\&quot;subject\\&quot;:\\&quot;支付宝支付\\&quot;,\\&quot;body\\&quot;:\\&quot;交易的具体描述信息\\&quot;,\\&quot;out_trade_no\\&quot;:&quot;+&quot;\\&quot;&quot;+out_trade_no+&quot;\\&quot;&quot;+&quot;&#125;&quot;; String formatStr = &quot;json&quot;; String originalStr;//原始字符串 originalStr = &quot;app_id=&quot;+app_id+&quot;&amp;biz_content=&quot;+biz_content+&quot;&amp;charset=&quot;+charset+&quot;&amp;format=&quot;+formatStr+&quot;&amp;method=&quot;+method+&quot;&amp;notify_url=&quot;+notify_url+&quot;&amp;sign_type=&quot;+sign_type+&quot;&amp;timestamp=&quot;+timestamp+&quot;&amp;version=&quot;+version; logger.info(&quot;--------------------getPayRechargeOrder----biz_content-----&quot;+biz_content); logger.info(&quot;--------------------getPayRechargeOrder----originalStr-----&quot;+originalStr);// AlipayClient alipayClient = new DefaultAlipayClient(gateway,app_id,private_key,&quot;json&quot;,charset,alipay_public_key,sign_type); String sign = null;//签名 try &#123; sign = AlipaySignature.rsaSign(originalStr,private_key,charset,sign_type); app_id = URLEncoder.encode(app_id,charset); biz_content = URLEncoder.encode(biz_content,charset); formatStr = URLEncoder.encode(formatStr,charset); method = URLEncoder.encode(method,charset); notify_url = URLEncoder.encode(notify_url,charset); sign_type = URLEncoder.encode(sign_type,charset); timestamp = URLEncoder.encode(timestamp,charset); version = URLEncoder.encode(version,charset); sign = URLEncoder.encode(sign,charset); charset = URLEncoder.encode(charset,charset); &#125; catch (AlipayApiException e) &#123; e.printStackTrace(); &#125; catch (UnsupportedEncodingException e) &#123; e.printStackTrace(); &#125; String orderString = &quot;app_id=&quot;+app_id+&quot;&amp;biz_content=&quot;+biz_content+&quot;&amp;charset=&quot;+charset+&quot;&amp;format=&quot;+formatStr+&quot;&amp;method=&quot;+method+&quot;&amp;notify_url=&quot;+notify_url+&quot;&amp;sign_type=&quot;+sign_type+&quot;&amp;timestamp=&quot;+timestamp+&quot;&amp;version=&quot;+version+&quot;&amp;sign=&quot;+sign; logger.info(&quot;--------------------getPayRechargeOrder----orderString-----&quot;+orderString); return orderString; &#125; 回调地址 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980/** * 新支付宝支付回调地址 * * @throws Exception */@RequestMapping(value = &quot;/alipayNotify&quot;, method = RequestMethod.POST)@ResponseBody@ApiOperation(value = &quot;新支付宝支付回调地址&quot;)@ApiResponses(&#123;@ApiResponse(code = 1, message = &quot;成功&quot;, response = GetUserResponse.class) , @ApiResponse(code = 201, message = &quot;没有找到这个用户&quot;, response = ExceptionResponse.class)&#125;)void alipayNotify() throws Exception &#123; logger.info(&quot;----------alipayNotify--top-appname-----&quot;); AlipayConfig.partner = env.getProperty(&quot;partner&quot;); AlipayConfig.private_key = env.getProperty(&quot;private_key&quot;); AlipayConfig.alipay_public_key = env.getProperty(&quot;alipay_public_key&quot;); logger.info(&quot;------------------alipayNotify--------&quot;); //获取支付宝POST过来反馈信息 Map&lt;String, String&gt; params = VersionUtil.getParams(request); logger.info(&quot;-------------alipayNotify-----params---&quot; + params); String alipaypublicKey = env.getProperty(&quot;alipay_public_key&quot;); String charset = &quot;utf-8&quot;; boolean signVerfied = AlipaySignature.rsaCheckV1(params, alipaypublicKey, charset, &quot;RSA&quot;); System.out.println(&quot;验证签名的结果是：&quot; + signVerfied); if (signVerfied == false) &#123; response.getWriter().print(&quot;fail&quot;); return; &#125; //按照支付结果异步通知中的描述，对支付结果中的业务内容进行1\\2\\3\\4二次校验，校验成功后在response中返回success，校验失败返回failure String callbackMsg = transMapToString(params); String prefix = env.getProperty(&quot;order.prefix&quot;); String orderIdstr = params.get(&quot;out_trade_no&quot;); long orderId = Long.parseLong(orderIdstr.split(&quot;_&quot;)[1]); logger.info(&quot;----------------alipayNotify----getOrderId----&quot; + orderId); PayRechargeOrder payRechargeOrder = payRechargeOrderService.getPayRechargeOrder(orderId); // 获取 payAccount buyer_id String buyer_id = params.get(&quot;buyer_id&quot;); if (buyer_id == null) &#123; buyer_id = &quot;&quot;; &#125; payRechargeOrder.setPayAccount(buyer_id);//买家支付宝账号 String ostatus = params.get(&quot;trade_status&quot;); if (ostatus.equals(&quot;TRADE_FINISHED&quot;) || ostatus.equals(&quot;TRADE_SUCCESS&quot;)) &#123; logger.info(&quot;-------------mtx-------alipayNotify-----TRADE_FINISHED--TRADE_SUCCESS-----&quot;); try&#123; String tradeNo = params.get(&quot;trade_no&quot;); //处理成功逻辑 添加回调数据，定单成功.... this.setOrderSuccess(payRechargeOrder.getId().intValue() ,buyer_id ,RechargePayStyle.ALI_PAY ,callbackMsg ,tradeNo ,&quot;支付宝支付充值&quot;); &#125;catch (ApiNotFoundException e)&#123; e.printStackTrace(); response.getWriter().print(&quot;fail&quot;); return; &#125; response.getWriter().print(&quot;success&quot;); return; &#125; return;&#125;","categories":[],"tags":[{"name":"ali/weixin pay","slug":"ali-weixin-pay","permalink":"http://example.com/tags/ali-weixin-pay/"}]},{"title":"aliPay","slug":"pay_aliPay","date":"2018-11-06T02:20:26.000Z","updated":"2021-09-22T11:19:04.640Z","comments":true,"path":"2018/11/06/pay_aliPay/","link":"","permalink":"http://example.com/2018/11/06/pay_aliPay/","excerpt":"","text":"支付宝支付 生成订单 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849@Overridepublic void addAliOrder(Integer orderId, Integer userId) throws Exception &#123; ShopOrder shopOrder = this.findOrderById(orderId); if (shopOrder.getUserId() != userId.intValue()) &#123; throw new RuntimeException(&quot;非此用户订单&quot;); &#125; ShopGoods shopGoods = shopGoodsDao.findOne(shopOrder.getGoodsId()); Float totalAmount = (float) shopOrder.getTotalAmount() / 100; String totalAmountStr = totalAmount.toString(); this.initAliWapPay(orderId, shopGoods.getGoodsName(), totalAmountStr, &quot;xxx商城订单【&quot; + shopGoods.getGoodsName() + &quot;】&quot;, httpResponse);&#125;@Overridepublic void initAliWapPay(Integer orderId, String subject, String totalAmount, String body, HttpServletResponse httpResponse) throws Exception &#123; String orderPrefix = env.getProperty(&quot;shopOrder.prefix&quot;); String out_trade_no = orderPrefix + &quot;_&quot; + orderId; String timeout_express = &quot;2m&quot;; String product_code = &quot;QUICK_WAP_WAY&quot;; AlipayClient client = userTokenService.getAlipayClient(); AlipayTradeWapPayRequest alipay_request = new AlipayTradeWapPayRequest(); AlipayTradeWapPayModel model = new AlipayTradeWapPayModel(); model.setOutTradeNo(out_trade_no); model.setSubject(subject); model.setTotalAmount(totalAmount); model.setBody(body); model.setTimeoutExpress(timeout_express); model.setProductCode(product_code); alipay_request.setBizModel(model); // 设置异步通知地址 String notifyUrl = env.getProperty(&quot;shopAliPay.notify&quot;); alipay_request.setNotifyUrl(notifyUrl); // 设置同步地址 String returnUrl = env.getProperty(&quot;shopAliPay.return&quot;); alipay_request.setReturnUrl(returnUrl); String form = &quot;&quot;; try &#123; form = client.pageExecute(alipay_request).getBody(); httpResponse.setContentType(&quot;text/html;charset=utf-8&quot;); httpResponse.getWriter().write(form); httpResponse.getWriter().flush(); httpResponse.getWriter().close(); &#125; catch (AlipayApiException e) &#123; e.printStackTrace(); &#125;&#125; getClient 12345678910@Overridepublic AlipayClient getAlipayClient() &#123; if(alipayClient == null)&#123; String app_id = &quot;xxxxxxxxxx&quot;; String privateKey = env.getProperty(&quot;private_key&quot;); String publicKey = env.getProperty(&quot;alipay_public_key&quot;); alipayClient = new DefaultAlipayClient(&quot;https://openapi.alipay.com/gateway.do&quot;,app_id, privateKey,&quot;json&quot;,&quot;utf-8&quot;,publicKey,&quot;RSA&quot;); &#125; return alipayClient;&#125; 回调 12345678910111213141516171819202122232425/** * 宝支付回调地址 * * @throws Exception */@RequestMapping(value = &quot;/aliPayNotify&quot;, method = RequestMethod.POST)@ResponseBody@ApiOperation(value = &quot;支付宝支付回调地址&quot;, notes = &quot;支付宝支付回调地址&quot;)@ApiResponses(&#123; @ApiResponse(code = 1, message = &quot;成功&quot;, response = GetUserResponse.class), @ApiResponse(code = 201, message = &quot;没有找到这个用户&quot;, response = ExceptionResponse.class)&#125;)void shopAliNotify() throws Exception &#123; String alipayPublicKey = env.getProperty(&quot;alipay_public_key&quot;); boolean verifyStatus = AlipayNotify.rsaAliPayCheckV1(alipayPublicKey, request); if (verifyStatus) &#123; String orderPrefix = env.getProperty(&quot;shopOrder.prefix&quot;); AlipayNotify alipayNotify = new AlipayNotify(request, orderPrefix); if (alipayNotify.getTradeSuccess()) &#123; String callBackMsg = alipayNotify.getCallbackMsg(); Integer orderId = alipayNotify.getOrderId().intValue(); //... &#125; &#125;&#125; AlipayNotify 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139public class AlipayNotify &#123; Map&lt;String, String&gt; m; String callbackMsg; String orderIdstr; Long orderId; String trade_no; String sign; String tradeStatus; String outTradeNo; public AlipayNotify(HttpServletRequest request, String orderPrefix) &#123; Map&lt;String, String[]&gt; params = request.getParameterMap(); sign = request.getParameter(&quot;sign&quot;); m = new HashMap&lt;&gt;(); if (params.get(&quot;body&quot;) != null) &#123; m.put(&quot;body&quot;, params.get(&quot;body&quot;)[0]); &#125; if (params.get(&quot;buyer_id&quot;) != null) &#123; m.put(&quot;buyer_id&quot;, params.get(&quot;buyer_id&quot;)[0]); &#125; if (params.get(&quot;gmt_create&quot;) != null) &#123; m.put(&quot;gmt_create&quot;, request.getParameter(&quot;gmt_create&quot;)); &#125; if (params.get(&quot;gmt_payment&quot;) != null) &#123; m.put(&quot;gmt_payment&quot;, request.getParameter(&quot;gmt_payment&quot;)); &#125; if (params.get(&quot;notify_id&quot;) != null) &#123; m.put(&quot;notify_id&quot;, params.get(&quot;notify_id&quot;)[0]); &#125; if (params.get(&quot;notify_time&quot;) != null) &#123; m.put(&quot;notify_time&quot;, params.get(&quot;notify_time&quot;)[0]); &#125; if (params.get(&quot;notify_type&quot;) != null) &#123; m.put(&quot;notify_type&quot;, params.get(&quot;notify_type&quot;)[0]); &#125; if (params.get(&quot;out_trade_no&quot;) != null) &#123; m.put(&quot;out_trade_no&quot;, params.get(&quot;out_trade_no&quot;)[0]); &#125; if (params.get(&quot;seller_email&quot;) != null) &#123; m.put(&quot;seller_email&quot;, params.get(&quot;seller_email&quot;)[0]); &#125; if (params.get(&quot;seller_id&quot;) != null) &#123; m.put(&quot;seller_id&quot;, params.get(&quot;seller_id&quot;)[0]); &#125; if (params.get(&quot;subject&quot;) != null) &#123; m.put(&quot;subject&quot;, params.get(&quot;subject&quot;)[0]); &#125; if (params.get(&quot;trade_status&quot;) != null) &#123; m.put(&quot;trade_status&quot;, params.get(&quot;trade_status&quot;)[0]); &#125; if (params.get(&quot;out_trade_no&quot;) != null) &#123; m.put(&quot;out_trade_no&quot;, params.get(&quot;out_trade_no&quot;)[0]); &#125; if (params.get(&quot;trade_no&quot;) != null) &#123; m.put(&quot;trade_no&quot;, params.get(&quot;trade_no&quot;)[0]); &#125; if (params.get(&quot;sign&quot;) != null) &#123; m.put(&quot;sign&quot;, params.get(&quot;sign&quot;)[0]); &#125; //属性参数 if (params.get(&quot;trade_no&quot;) != null) &#123; this.trade_no = params.get(&quot;trade_no&quot;)[0]; &#125; if (params.get(&quot;out_trade_no&quot;) != null) &#123; this.outTradeNo = params.get(&quot;out_trade_no&quot;)[0]; &#125; if (params.get(&quot;trade_status&quot;) != null) &#123; this.tradeStatus = params.get(&quot;trade_status&quot;)[0]; &#125; this.callbackMsg = Map2StringUtil.mapToString(m); orderIdstr = params.get(&quot;out_trade_no&quot;)[0]; if (this.orderIdstr.contains(&quot;_&quot;)) &#123; if (!this.orderIdstr.split(&quot;_&quot;)[0].equals(orderPrefix)) &#123; throw new RuntimeException(&quot;not find prefix&quot; + orderPrefix); &#125; orderId = Long.parseLong(this.orderIdstr.split(&quot;_&quot;)[1]); &#125; &#125; public String getTradeStatus() &#123; return tradeStatus; &#125; /** * 获取订单是否支付成功的状态 * * @return */ public boolean getTradeSuccess() &#123; if (this.tradeStatus.equals(&quot;TRADE_SUCCESS&quot;) || this.tradeStatus.equals(&quot;TRADE_FINISHED&quot;)) &#123; return true; &#125; else &#123; return false; &#125; &#125; public Map&lt;String, String&gt; getRequestMap() &#123; return m; &#125; public String getCallbackMsg() &#123; return callbackMsg; &#125; public String getOrderIdstr() &#123; return orderIdstr; &#125; public Long getOrderId() &#123; return orderId; &#125; public String getTrade_no() &#123; return trade_no; &#125; public String getSign() &#123; return sign; &#125; public static boolean rsaAliPayCheckV1(String alipayPublicKey, HttpServletRequest request) throws Exception &#123; /** * 获取支付宝POST过来反馈信息 */ Map&lt;String, String&gt; params = VersionUtil.getParams(request); String charset = &quot;utf-8&quot;; boolean verify_result = AlipaySignature.rsaCheckV1(params, alipayPublicKey, charset, &quot;RSA&quot;); if (!verify_result) &#123; return false; &#125; else &#123; return true; &#125; &#125;&#125;","categories":[],"tags":[{"name":"ali/weixin pay","slug":"ali-weixin-pay","permalink":"http://example.com/tags/ali-weixin-pay/"}]},{"title":"wxPay","slug":"pay_wxPay","date":"2018-11-06T02:20:26.000Z","updated":"2021-09-22T11:19:04.640Z","comments":true,"path":"2018/11/06/pay_wxPay/","link":"","permalink":"http://example.com/2018/11/06/pay_wxPay/","excerpt":"","text":"微信支付 生成订单 123456789101112131415161718//微信下单支付String appid = MyEnv.env.getProperty(&quot;appid&quot;);String mch_id = MyEnv.env.getProperty(&quot;mch_id&quot;);String wxkey = env.getProperty(&quot;wxkey&quot;);//回调地址String callBackUrl = env.getProperty(&quot;shopWeixinPay.notify&quot;);String outTradeNo = env.getProperty(&quot;shopOrder.prefix&quot;) + &quot;_&quot; + shopOrder.getId();String wapUrl = env.getProperty(&quot;shopWechatPayWapUrl&quot;);String sceneInfo = &quot;&#123;\\&quot;h5_info\\&quot;: &#123;\\&quot;type\\&quot;:\\&quot;Wap\\&quot;,\\&quot;wap_url\\&quot;: \\&quot;&quot; + wapUrl + &quot;\\&quot;,\\&quot;wap_name\\&quot;: \\&quot;xxxx商城\\&quot;&#125;&#125;&quot;;//下单JSONObject jsonObject = weiXinOrderService.doUnifiedOrder(outTradeNo, &quot;xxx商城订单&quot;, shopOrder.getTotalAmount(), shopOrder.getGoodsId().toString(), request, null, wxkey, callBackUrl, &quot;MWEB&quot;, sceneInfo, appid, mch_id);Map jsonMap = JSONObject.fromObject(jsonObject);String webUrl = jsonMap.get(&quot;mweb_url&quot;).toString();String redirect = env.getProperty(&quot;shopOrder.success.url&quot;) + shopOrder.getId();String wechatPayUrl = webUrl + &quot;&amp;redirect_url=&quot; + URLEncoder.encode(redirect, &quot;utf-8&quot;);response.setWebUrl(wechatPayUrl); 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566/** * 扫码支付 下单返回信息 */@Overridepublic JSONObject doUnifiedOrder(String outTradeNo, String goodsName, Integer goodsPrice, String goodsId, HttpServletRequest request, String openId, String wxkey, String callBackUrl, String tradeType, String sceneInfo, String appId, String mchId) &#123; String ip = HttpRequest.getIpAddr(request); try &#123; JSONObject jsonObject = this.doUnifiedOrderWx(outTradeNo, goodsName, goodsPrice, goodsId,ip,openId,wxkey, callBackUrl, tradeType, sceneInfo, appId, mchId); return jsonObject; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return null;&#125; @Overridepublic JSONObject doUnifiedOrderWx(String outTradeNo, String goodsName, Integer goodsPrice, String goodsId,String ip,String openId,String wxkey, String callBackUrl, String tradeType, String sceneInfo, String appId, String mchId) &#123; try &#123; //证书文件 String certpath = env.getProperty(&quot;certPath&quot;); config = WXPayConfigImpl.getInstance(certpath, appId, mchId); wxpay = new WXPay(config); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; HashMap&lt;String, String&gt; data = new HashMap&lt;String, String&gt;(); data.put(&quot;body&quot;, goodsName); data.put(&quot;out_trade_no&quot;, outTradeNo); data.put(&quot;fee_type&quot;, &quot;CNY&quot;); data.put(&quot;device_info&quot;, &quot;&quot;); data.put(&quot;total_fee&quot;, goodsPrice.toString()); data.put(&quot;spbill_create_ip&quot;, ip); data.put(&quot;notify_url&quot;, callBackUrl); data.put(&quot;trade_type&quot;, tradeType); data.put(&quot;product_id&quot;, goodsId); if(openId != null)&#123; data.put(&quot;openid&quot;, openId); &#125; data.put(&quot;scene_info&quot;, sceneInfo); try &#123; long timeMillis = System.currentTimeMillis(); Long timeStamp = (timeMillis/1000); Map&lt;String, String&gt; map = wxpay.unifiedOrder(data); logger.info(map); String appid = map.get(&quot;appid&quot;); String nonce_str = map.get(&quot;nonce_str&quot;); String prepay_id = map.get(&quot;prepay_id&quot;); String sign= &quot;appId=&quot;+appid+&quot;&amp;nonceStr=&quot;+nonce_str+&quot;&amp;package=prepay_id=&quot;+prepay_id+&quot;&amp;signType=MD5&quot;+&quot;&amp;timeStamp=&quot;+timeStamp+&quot;&amp;key=&quot;+ wxkey; System.out.println(sign); String jsSign= MD5Util.MD5Encode(sign,&quot;utf-8&quot;).toUpperCase(); map.put(&quot;jsSign&quot;,jsSign); map.put(&quot;timeStamp&quot;,timeStamp.toString());//当前时间戳 System.out.println(map); return JSONObject.fromObject(map); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return null;&#125; h5发起微信支付 1234567891011121314151617181920212223242526function onBridgeReady() &#123; WeixinJSBridge.invoke( &#x27;getBrandWCPayRequest&#x27;, &#123; &quot;appId&quot;: res.body.jsonObject.appid, //公众号名称，由商户传入 &quot;timeStamp&quot;: res.body.jsonObject.timeStamp, // 时间戳，自1970年以来的秒数 &quot;nonceStr&quot;: res.body.jsonObject.nonce_str, //随机串 &quot;package&quot;: &quot;prepay_id=&quot; + res.body.jsonObject.prepay_id, &quot;signType&quot;: &quot;MD5&quot;, //微信签名方式： &quot;paySign&quot;: res.body.jsonObject.jsSign //微信签名 &#125;, function(resp) &#123; if(resp.err_msg == &quot;get_brand_wcpay_request:ok&quot;) &#123; // alert(&#x27;成功&#x27; +self.vipcode ) window.location.href = &quot;../success/success.html?orderid=&quot; + self.orderid; &#125; // 使用以上方式判断前端返回,微信团队郑重提示：res.err_msg将在用户支付成功后返回 ok，但并不保证它绝对可靠。 else if(resp.err_msg == &quot;get_brand_wcpay_request:cancel&quot;) &#123; self.showSelect = false self.selectActive = true &#125; else &#123; // alert(resp.err_msg) &#125; &#125; ); &#125; 回调 123456789101112131415161718192021222324@CrossOrigin@RequestMapping(value = &quot;/WxPayNotify&quot;, method = RequestMethod.POST)@ResponseBody@ApiOperation(value = &quot;回调地址&quot;, notes = &quot;微信支付回调地址&quot;)@ApiResponses(&#123;@ApiResponse(code = 1, message = &quot;成功&quot;, response = GetUserResponse.class) , @ApiResponse(code = 201, message = &quot;没有找到这个用户&quot;, response = ExceptionResponse.class)&#125;)void wxpayNotify() throws IOException, ApiException &#123; logger.info(&quot;--- start wxpaynotify ---&quot;); String prefix = MyEnv.env.getProperty(&quot;shopOrder.prefix&quot;); WeixinNotify wxNotify = new WeixinNotify(request, prefix); String appid = MyEnv.env.getProperty(&quot;appid&quot;); String wxkey = MyEnv.env.getProperty(&quot;wxkey&quot;); String mch_id = MyEnv.env.getProperty(&quot;mch_id&quot;); boolean flagSign = wxNotify.checkWeixinSign(wxNotify, appid, wxkey, mch_id); logger.info(&quot;flagSign&quot; + flagSign); //验签成功 if (flagSign) &#123; //处理业务 //... int orderId = wxNotify.getOrderId().intValue(); &#125;&#125; 验签 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162 public class WeixinNotify&#123; Logger logger = Logger.getLogger(WeixinNotify.class); public String orderIdstr; Long orderId; String payAccount; String xmlDoc; Element root; String tradeNo; public WeixinNotify(HttpServletRequest request) throws IOException, ApiNotFoundException &#123; InputStream inStream = request.getInputStream(); ByteArrayOutputStream outSteam = new ByteArrayOutputStream(); byte[] buffer = new byte[1024]; int len = 0; while ((len = inStream.read(buffer)) != -1) &#123; outSteam.write(buffer, 0, len); &#125; outSteam.close(); inStream.close(); this.xmlDoc = new String(outSteam.toByteArray(),&quot;utf-8&quot;); logger.info(this.xmlDoc); StringReader read = new StringReader(xmlDoc); InputSource source = new InputSource(read); SAXBuilder sb = new SAXBuilder(); Document doc = null; try &#123; doc = sb.build(source); &#125; catch (JDOMException e) &#123; e.printStackTrace(); &#125; //取的根元素 root = doc.getRootElement(); // System.out.println(root.getName());//输出根元素的名称（测试） Namespace ns = root.getNamespace(); //获取 orderId // logger.info(&quot;--------------------wxpayNotify----prefix----&quot;+prefix); this.orderIdstr= root.getChild(&quot;out_trade_no&quot;,ns).getText(); this.payAccount = root.getChild(&quot;openid&quot;,ns).getText(); this.tradeNo= root.getChild(&quot;transaction_id&quot;,ns).getText(); //可以从订单号中区分 是单行本 还是 app String prefix= MyEnv.env.getProperty(&quot;order.prefix&quot;); if(this.orderIdstr.contains(&quot;_&quot;)) &#123; orderId = Long.parseLong(this.orderIdstr.split(&quot;_&quot;)[1]); if (!this.orderIdstr.split(&quot;_&quot;)[0].equals(prefix)) &#123; throw new ApiNotFoundException(&quot;order format error;not find orderId:&quot;+this.orderIdstr); &#125; &#125; &#125; public WeixinNotify(HttpServletRequest request, String orderPrefix) throws IOException, ApiNotFoundException &#123; InputStream inStream = request.getInputStream(); ByteArrayOutputStream outSteam = new ByteArrayOutputStream(); byte[] buffer = new byte[1024]; int len = 0; while ((len = inStream.read(buffer)) != -1) &#123; outSteam.write(buffer, 0, len); &#125; outSteam.close(); inStream.close(); this.xmlDoc = new String(outSteam.toByteArray(),&quot;utf-8&quot;); logger.info(this.xmlDoc); StringReader read = new StringReader(xmlDoc); InputSource source = new InputSource(read); SAXBuilder sb = new SAXBuilder(); Document doc = null; try &#123; doc = sb.build(source); &#125; catch (JDOMException e) &#123; e.printStackTrace(); &#125; //取的根元素 root = doc.getRootElement(); // System.out.println(root.getName());//输出根元素的名称（测试） Namespace ns = root.getNamespace(); //获取 orderId // logger.info(&quot;--------------------wxpayNotify----prefix----&quot;+prefix); this.orderIdstr= root.getChild(&quot;out_trade_no&quot;,ns).getText(); this.payAccount = root.getChild(&quot;openid&quot;,ns).getText(); this.tradeNo= root.getChild(&quot;transaction_id&quot;,ns).getText(); //可以从订单号中区分 是单行本 还是 app if(this.orderIdstr.contains(&quot;_&quot;)) &#123; orderId = Long.parseLong(this.orderIdstr.split(&quot;_&quot;)[1]); if (!this.orderIdstr.split(&quot;_&quot;)[0].equals(orderPrefix)) &#123; throw new ApiNotFoundException(&quot;order format error;not find orderId:&quot;+this.orderIdstr); &#125; &#125; &#125; public String getOrderIdstr() &#123; return orderIdstr; &#125; public String getPayAccount() &#123; return payAccount; &#125; public String getXmlDoc() &#123; return xmlDoc; &#125; public Element getRoot() &#123; return root; &#125; public String getTradeNo() &#123; if(tradeNo==null)&#123; return &quot;&quot;; &#125; return tradeNo; &#125; public Long getOrderId() &#123; return orderId; &#125; /** * 微信验签 * @return true成功 false失败 */ public boolean checkWeixinSign(WeixinNotify weixinNotify,String appid,String wxkey,String mch_id)&#123; //参数：开始生成签名 SortedMap&lt;Object,Object&gt; parameters = new TreeMap&lt;Object,Object&gt;(); List&lt;Element&gt; alle=weixinNotify.getRoot().getChildren(); Namespace namespace = weixinNotify.getRoot().getNamespace(); System.out.println(alle.get(1)); for(int i=0;i&lt;alle.size();i++)&#123; //Element sstr=alle.get(i); String key=alle.get(i).getName(); if(key.equals(&quot;sign&quot;) || key.equals(&quot;appid&quot;) || key.equals(&quot;mch_id&quot;) )&#123; continue; &#125; //System.out.println(sstr.getName()); parameters.put(key, weixinNotify.getRoot().getChild(key,namespace).getText()); &#125; parameters.put(&quot;appid&quot;, appid); parameters.put(&quot;mch_id&quot;, mch_id); //生成签名 String sign = WXSignUtils.createSign(&quot;UTF-8&quot;, parameters,wxkey); logger.info(&quot;签名是：&quot;+sign); logger.info(&quot;返回签名是：&quot;+weixinNotify.getRoot().getChild(&quot;sign&quot;,namespace).getText()); if(!sign.equals(weixinNotify.getRoot().getChild(&quot;sign&quot;,namespace).getText()))&#123;//验签失败 // logger.info(&quot;fail&quot;); return false; &#125; return true; &#125;&#125; 生成签名 123456789101112131415161718 public static String createSign(String characterEncoding,SortedMap&lt;Object,Object&gt; parameters,String key)&#123; StringBuffer sb = new StringBuffer(); Set es = parameters.entrySet();// Iterator it = es.iterator(); while(it.hasNext()) &#123; Map.Entry entry = (Map.Entry)it.next(); String k = (String)entry.getKey(); Object v = entry.getValue(); if(null != v &amp;&amp; !&quot;&quot;.equals(v) &amp;&amp; !&quot;sign&quot;.equals(k) &amp;&amp; !&quot;key&quot;.equals(k)) &#123; sb.append(k + &quot;=&quot; + v + &quot;&amp;&quot;); &#125; &#125; sb.append(&quot;key=&quot; + key); System.out.println(&quot;字符串拼接后是&quot;+sb.toString()); String sign = MD5Util.MD5Encode(sb.toString(), characterEncoding).toUpperCase(); return sign;&#125;","categories":[],"tags":[{"name":"ali/weixin pay","slug":"ali-weixin-pay","permalink":"http://example.com/tags/ali-weixin-pay/"}]},{"title":"多线程查询","slug":"多线程查询","date":"2018-11-05T03:20:36.000Z","updated":"2021-09-22T11:19:04.651Z","comments":true,"path":"2018/11/05/多线程查询/","link":"","permalink":"http://example.com/2018/11/05/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%9F%A5%E8%AF%A2/","excerpt":"","text":"线程简单使用 1234567class ThreadResult&#123; public List&lt;GroupStoryThread&gt; storyThreads=new ArrayList&lt;&gt;(); public List&lt;GroupSerialThread&gt; serialThreads=new ArrayList&lt;&gt;(); public GroupAdThread groupAdThread=null; public GroupPromptThread groupPromptThread=null; &#125; 线程 12345678910111213141516171819202122232425262728293031public class GroupStoryThread implements Runnable &#123; Logger logger=Logger.getLogger(GroupSerialThread.class); GroupRelevanceService groupRelevanceService; Page&lt;Story&gt; storyPage; User user; int groupId; int pageNo; int pageSize; public GroupStoryThread(GroupRelevanceService groupRelevanceService, User user, int groupId, int pageNo, int pageSize)&#123; this.groupRelevanceService=groupRelevanceService; this.user=user; this.groupId=groupId; this.pageNo=pageNo; this.pageSize=pageSize; &#125; @Override public void run() &#123;// logger.info(&quot;------storys begin&quot;); storyPage = groupRelevanceService.getNewGroupStoryList(user, groupId, pageNo, pageSize);// logger.info(&quot;------storys end&quot;); &#125; public Page&lt;Story&gt; getStoryPage() &#123; return storyPage; &#125; public int getGroupId() &#123; return groupId; &#125;&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243public class GroupSerialThread implements Runnable &#123; Logger logger=Logger.getLogger(GroupSerialThread.class); SerialStoryStyle serialStoryStyle; SerialStoryService serialStoryService; List&lt;SerialStory&gt; serialStoryList; User user; Integer pageNo; Integer pageSize; public GroupSerialThread(SerialStoryService serialStoryService,SerialStoryStyle serialStoryStyle, User user, int pageNo, int pageSize)&#123; this.serialStoryService=serialStoryService; this.user=user; this.pageNo=pageNo; this.pageSize=pageSize; this.serialStoryStyle=serialStoryStyle; &#125; @Override public void run() &#123;// logger.info(&quot;-----begin serial&quot;); int userid=0; if(user!=null)&#123; userid=user.getId().intValue(); &#125; Page&lt;SerialStory&gt; serialStoryPage = serialStoryService.getCommonSerialStoryPage((long)userid, serialStoryStyle, pageNo,pageSize); serialStoryList = serialStoryPage.getContent(); for(SerialStory item : serialStoryList)&#123; serialStoryService.setSerialStoryIsBuy(user,item); &#125;// logger.info(&quot;-----end serial&quot;); &#125; public List&lt;SerialStory&gt; getSerialStoryList() &#123; return serialStoryList; &#125; public SerialStoryStyle getSerialStoryStyle() &#123; return serialStoryStyle; &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839public class GroupPromptThread implements Runnable &#123; Logger logger=Logger.getLogger(GroupPromptThread.class); PromptService promptService; Prompt prompt; User user; public GroupPromptThread(PromptService promptService, User user)&#123; this.promptService=promptService; this.user=user; &#125; @Override public void run() &#123;// logger.info(&quot;----begin prompt&quot;); int userId=0; if(user!=null)&#123; userId=user.getId().intValue(); &#125; if(userId!=0)&#123; try &#123; prompt = promptService.getPrompt(userId); &#125;catch (Exception e)&#123; e.printStackTrace(); &#125; &#125;else&#123; prompt=new Prompt(PromptStyle.STUDY_PLAN.getId(),PromptStyle.STUDY_PLAN.getName(),PromptStyle.STUDY_PLAN.getUrl()); &#125;// logger.info(&quot;----end prompt&quot;); &#125; public Prompt getPrompt() &#123; return prompt; &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839public class GroupAdThread implements Runnable &#123; Logger logger=Logger.getLogger(GroupAdThread.class); AdService adService; List&lt;Ads&gt; adsList; String channel; String platform; User user; int isCheckVer; String ver; public GroupAdThread(AdService adService, String channel,String platform,int isCheckVer,String ver,User user)&#123; this.channel=channel; this.platform=platform; this.adService=adService; this.isCheckVer=isCheckVer; this.user=user; this.ver=ver; &#125; @Override public void run() &#123;// logger.info(&quot;------begin ad&quot;); adsList=adService.getAds(0,8,isCheckVer,channel,platform,ver,user); if(user != null &amp;&amp; user.getIsTest().equals(1))&#123; List&lt;Ads&gt; adsTestList = adService.getTestAds(); List&lt;Ads&gt; newAdsList = new ArrayList&lt;&gt;(adsList); newAdsList.addAll(adsTestList); adsList=newAdsList; &#125;// logger.info(&quot;------end ad&quot;); &#125; public List&lt;Ads&gt; getAdsList() &#123; return adsList; &#125;&#125; response 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164public class GetIndex280Response extends ApiResponse &#123; List&lt;Ads&gt; ads; /** 精品推荐*/ CustomGroup recommendGroup; /** 最新故事*/ List&lt;DisplayGroup&gt; newStoryGroup; /** 精品课程 */ LessonIndex lessonIndex; /** 故事足迹*/ CustomGroup userReadRecordGroup; /**飞船电台 */ CustomGroup radioGroup; /**IP专区 */ CustomGroup ipStoryGroup; /**经典故事 &amp;&amp; 创意思维 */ List&lt;DisplayGroup&gt; classicAndCreateGroup; /**绘本丛书 */ CustomGroup serialGroup; /**情感教育 &amp;&amp;幽默故事 */ List&lt;DisplayGroup&gt; emotionAndHumourGroup; /**益智训练专区 */ CustomGroup gameSerialGroup; /**传统文化 */ List&lt;DisplayGroup&gt; traditionCultureGroup; /**其他分类 */ List&lt;DisplayGroup&gt; otherGroup; Integer isSvip; Prompt prompt; Integer serialStoryCount; public List&lt;Ads&gt; getAds() &#123; return ads; &#125; public void setAds(List&lt;Ads&gt; ads) &#123; this.ads = ads; &#125; public CustomGroup getRecommendGroup() &#123; return recommendGroup; &#125; public void setRecommendGroup(CustomGroup recommendGroup) &#123; this.recommendGroup = recommendGroup; &#125; public List&lt;DisplayGroup&gt; getNewStoryGroup() &#123; return newStoryGroup; &#125; public void setNewStoryGroup(List&lt;DisplayGroup&gt; newStoryGroup) &#123; this.newStoryGroup = newStoryGroup; &#125; public LessonIndex getLessonIndex() &#123; return lessonIndex; &#125; public void setLessonIndex(LessonIndex lessonIndex) &#123; this.lessonIndex = lessonIndex; &#125; public CustomGroup getUserReadRecordGroup() &#123; return userReadRecordGroup; &#125; public void setUserReadRecordGroup(CustomGroup userReadRecordGroup) &#123; this.userReadRecordGroup = userReadRecordGroup; &#125; public CustomGroup getRadioGroup() &#123; return radioGroup; &#125; public void setRadioGroup(CustomGroup radioGroup) &#123; this.radioGroup = radioGroup; &#125; public CustomGroup getIpStoryGroup() &#123; return ipStoryGroup; &#125; public void setIpStoryGroup(CustomGroup ipStoryGroup) &#123; this.ipStoryGroup = ipStoryGroup; &#125; public List&lt;DisplayGroup&gt; getClassicAndCreateGroup() &#123; return classicAndCreateGroup; &#125; public void setClassicAndCreateGroup(List&lt;DisplayGroup&gt; classicAndCreateGroup) &#123; this.classicAndCreateGroup = classicAndCreateGroup; &#125; public List&lt;DisplayGroup&gt; getEmotionAndHumourGroup() &#123; return emotionAndHumourGroup; &#125; public void setEmotionAndHumourGroup(List&lt;DisplayGroup&gt; emotionAndHumourGroup) &#123; this.emotionAndHumourGroup = emotionAndHumourGroup; &#125; public CustomGroup getSerialGroup() &#123; return serialGroup; &#125; public void setSerialGroup(CustomGroup serialGroup) &#123; this.serialGroup = serialGroup; &#125; public CustomGroup getGameSerialGroup() &#123; return gameSerialGroup; &#125; public void setGameSerialGroup(CustomGroup gameSerialGroup) &#123; this.gameSerialGroup = gameSerialGroup; &#125; public List&lt;DisplayGroup&gt; getOtherGroup() &#123; return otherGroup; &#125; public void setOtherGroup(List&lt;DisplayGroup&gt; otherGroup) &#123; this.otherGroup = otherGroup; &#125; public Integer getIsSvip() &#123; return isSvip; &#125; public void setIsSvip(Integer isSvip) &#123; this.isSvip = isSvip; &#125; public Prompt getPrompt() &#123; return prompt; &#125; public void setPrompt(Prompt prompt) &#123; this.prompt = prompt; &#125; public Integer getSerialStoryCount() &#123; return serialStoryCount; &#125; public void setSerialStoryCount(Integer serialStoryCount) &#123; this.serialStoryCount = serialStoryCount; &#125; public List&lt;DisplayGroup&gt; getTraditionCultureGroup() &#123; return traditionCultureGroup; &#125; public void setTraditionCultureGroup(List&lt;DisplayGroup&gt; traditionCultureGroup) &#123; this.traditionCultureGroup = traditionCultureGroup; &#125;&#125; controller 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220 @RequestMapping(value = &quot;getIndex&quot;, method = RequestMethod.GET) @ResponseBody @ApiOperation(value = &quot;首页 版本开始&quot;) GetIndex280Response getIndex( @RequestHeader(value = &quot;ssToken&quot;, required = false) String ssToken, @ApiParam(value = &quot;版本号&quot;, defaultValue = &quot;&quot;, required = false) @RequestParam(required = false, defaultValue = &quot;&quot;) String ver ) &#123; GetIndex280Response response = new GetIndex280Response(); Long loginId = (Long) request.getAttribute(&quot;loginId&quot;); User user = userService.getUser(loginId.intValue()); int userid=0; if(user!=null)&#123; userid=user.getId().intValue(); &#125; //Ads 处理广告 判断设备 Integer isCheckVer = 0; String userAgent = request.getHeader(&quot;User-Agent&quot;); String version = VersionUtil.getVerionInfo(request); if (userAgent.contains(&quot;ios&quot;)) &#123; //判断版本是否在审核中，获取config的ver是否等于当前版本 String key = &quot;version&quot;; if (userAgent.contains(&quot;appname:zhijianStory&quot;)) &#123; key = &quot;zhijianStory&quot; + &quot;_version&quot;; &#125; Config config = this.configService.getConfigByKey(key); if (version.compareTo(config.getVal()) == 0) &#123; isCheckVer = 1; &#125; &#125; String channel = request.getHeader(&quot;channel&quot;); String platform = VersionUtil.getPlatformStr(request); List&lt;Ads&gt; adsList=adsService.getAds(0,8,isCheckVer,channel,platform,ver,user); if(user != null &amp;&amp; user.getIsTest().equals(1))&#123; List&lt;Ads&gt; adsTestList = adsService.getTestAds(); List&lt;Ads&gt; newAdsList = new ArrayList&lt;&gt;(adsList); newAdsList.addAll(adsTestList); adsList=newAdsList; &#125; response.setAds(adsList); //精品推荐 Ads ads = new Ads(); ads.setTitle(&quot;精品推荐&quot;); ads.setContent(&quot;精品推荐&quot;); ads.setUrl(&quot;www.baidu.com&quot;); ads.setImgPath(&quot;recommend.png&quot;); ads.setIcon(&quot;recommend.png&quot;); ads.setId(0L); ads.setTargetValue(0); ads.setTargetType(0); ads.setStatus(0); ads.setOrderBy(0); ads.setCreateTime(new Date()); ads.setIsIosVisual(0); ads.setAdsPosition(0); CustomGroup recommendGroup = new CustomGroup(); recommendGroup.setId(1005L); recommendGroup.setName(&quot;精品推荐&quot;); recommendGroup.setContent(&quot;精品推荐&quot;); recommendGroup.setIcon(&quot;&quot;); recommendGroup.setPadIcon(&quot;&quot;); recommendGroup.setTargetType(StoryGroupStyle.RECOMMEND.getTargetType()); recommendGroup.setTargetValue(0); recommendGroup.setIsSubscribe(0); recommendGroup.setAds(ads); response.setRecommendGroup(recommendGroup); //最新故事 groupId 1 互动故事 2 益智游戏 3 限时免费 4 精品课程 5 系列故事 6 睡前故事 7 热销故事 8 音频 9 经典故事 //10 情感教育 11 幽默故事 12 创意思维 13 小程序试看 14 传统文化 16 飞船电台 17 最新故事 //最新故事 List&lt;DisplayGroup&gt; newStoryList = new ArrayList&lt;&gt;(); DisplayGroup newSoryGroup = displayGroupService.getGroupById(17L); Page&lt;Story&gt; storyPage17 = groupRelevanceService.getNewGroupStoryList(user, 17, 0, 6); newSoryGroup.setStorys(storyPage17.getContent()); newStoryList.add(newSoryGroup); response.setNewStoryGroup(newStoryList); //精品课程 LessonIndex lessonIndex = new LessonIndex(); lessonIndex.setName(&quot;精品阅读课&quot;); lessonIndex.setContent(&quot;精品阅读课&quot;); lessonIndex.setTargetType(StoryGroupStyle.LESSON.getTargetType()); lessonIndex.setIntro(&quot;&quot;); lessonIndex.setLessonList(lessonService.getLessonList()); response.setLessonIndex(lessonIndex); //故事足迹 故事类型 type=1 4条 if(userid!=0)&#123; Page&lt;UserReadRecord&gt; readRecordPage = userReadRecordService.getReadStoryRecordByUserIdAndType(user.getId(), 1, 0, 4); CustomGroup userReadRecordGroup = new CustomGroup(); userReadRecordGroup.setId(1000L); userReadRecordGroup.setName(&quot;故事足迹&quot;); userReadRecordGroup.setContent(&quot;故事足迹&quot;); userReadRecordGroup.setIcon(&quot;&quot;); userReadRecordGroup.setPadIcon(&quot;&quot;); userReadRecordGroup.setIsSubscribe(0); userReadRecordGroup.setTargetType(StoryGroupStyle.RECORD.getTargetType()); userReadRecordGroup.setTargetValue(0); userReadRecordGroup.setUserReadRecordList(readRecordPage.getContent()); List&lt;Story&gt; storys = new ArrayList&lt;&gt;(); for (UserReadRecord s:readRecordPage.getContent()) &#123; storys.add(s.getStory()); &#125; userReadRecordGroup.setStorys(storys); response.setUserReadRecordGroup(userReadRecordGroup); &#125; //飞船电台 List&lt;Story&gt; radioList = storyService.getRadioList();// RadioGroup radioGroup = new RadioGroup(); CustomGroup radioGroup = new CustomGroup(); radioGroup.setId(1004L); radioGroup.setName(&quot;飞船电台&quot;); radioGroup.setContent(&quot;飞船电台&quot;); radioGroup.setIcon(&quot;&quot;); radioGroup.setPadIcon(&quot;&quot;); radioGroup.setTargetType(StoryGroupStyle.AUDIO.getTargetType()); radioGroup.setTargetValue(0); radioGroup.setIsSubscribe(0); radioGroup.setStorys(radioList); response.setRadioGroup(radioGroup); //IP专区 Page&lt;SerialStory&gt; ipStoryPage = serialStoryService.getCommonSerialStoryPage((long)userid, SerialStoryStyle.IP_STORY_SERIAL, 0,3); List&lt;SerialStory&gt; ipStoryList = ipStoryPage.getContent(); for(SerialStory item : ipStoryList)&#123; serialStoryService.setSerialStoryIsBuy(user,item); &#125; CustomGroup ipSerialGroup = new CustomGroup(); ipSerialGroup.setId(1002L); ipSerialGroup.setName(&quot;IP专区&quot;); ipSerialGroup.setContent(&quot;IP专区&quot;); ipSerialGroup.setIcon(&quot;&quot;); ipSerialGroup.setPadIcon(&quot;&quot;); ipSerialGroup.setIsSubscribe(0); ipSerialGroup.setTargetType(StoryGroupStyle.SERIAL.getTargetType()); ipSerialGroup.setTargetValue(0); ipSerialGroup.setSerialStories(ipStoryList); response.setIpStoryGroup(ipSerialGroup); //经典故事9 &amp;创意思维12 List&lt;DisplayGroup&gt; classicAndCreateGroup = new ArrayList&lt;&gt;(); DisplayGroup classicGroup = displayGroupService.getGroupById(9L); DisplayGroup createGroup = displayGroupService.getGroupById(12L); Page&lt;Story&gt; storyPage9 = groupRelevanceService.getNewGroupStoryList(user, 9, 0, 6); Page&lt;Story&gt; storyPage12 = groupRelevanceService.getNewGroupStoryList(user, 12, 0, 6); classicGroup.setStorys(storyPage9.getContent()); createGroup.setStorys(storyPage12.getContent()); classicAndCreateGroup.add(classicGroup); classicAndCreateGroup.add(createGroup); response.setClassicAndCreateGroup(classicAndCreateGroup); //绘本丛书 Page&lt;SerialStory&gt; serialStoryPage = serialStoryService.getCommonSerialStoryPage((long)userid, SerialStoryStyle.INDEX_SERIAL, 0,3); List&lt;SerialStory&gt; serialStoryList = serialStoryPage.getContent(); for(SerialStory item : serialStoryList)&#123; serialStoryService.setSerialStoryIsBuy(user,item); &#125; response.setSerialStoryCount(3); CustomGroup huiBenGroup = new CustomGroup(); huiBenGroup.setId(1000L); huiBenGroup.setName(&quot;绘本丛书&quot;); huiBenGroup.setContent(&quot;绘本丛书&quot;); huiBenGroup.setIcon(&quot;&quot;); huiBenGroup.setPadIcon(&quot;&quot;); huiBenGroup.setIsSubscribe(0); huiBenGroup.setTargetType(StoryGroupStyle.SERIAL.getTargetType()); huiBenGroup.setTargetValue(0); huiBenGroup.setSerialStories(serialStoryList); response.setSerialGroup(huiBenGroup); //情感教育10 &amp;幽默故事11 List&lt;DisplayGroup&gt; emotionAndHumourGroup= new ArrayList&lt;&gt;(); DisplayGroup emotionGroup = displayGroupService.getGroupById(10L); DisplayGroup humourGroup = displayGroupService.getGroupById(11L); Page&lt;Story&gt; storyPage10 = groupRelevanceService.getNewGroupStoryList(user, 10, 0, 6); Page&lt;Story&gt; storyPage11 = groupRelevanceService.getNewGroupStoryList(user, 11, 0, 6); emotionGroup.setStorys(storyPage10.getContent()); humourGroup.setStorys(storyPage11.getContent()); emotionAndHumourGroup.add(emotionGroup); emotionAndHumourGroup.add(humourGroup); response.setEmotionAndHumourGroup(emotionAndHumourGroup); //益智训练专区 GetSerialStoryPageResponse smartGameSerialStoryResponse = serialStoryController.getSmartGameSerialStoryPage(ssToken, SerialStoryStyle.SMART_GAME_SERIAL.getId(), 1, 3); CustomGroup gameSerialGroup = new CustomGroup(); gameSerialGroup.setId(1003L); gameSerialGroup.setName(&quot;益智训练专区&quot;); gameSerialGroup.setContent(&quot;益智训练专区&quot;); gameSerialGroup.setIcon(&quot;&quot;); gameSerialGroup.setPadIcon(&quot;&quot;); gameSerialGroup.setTargetValue(0); gameSerialGroup.setIsSubscribe(0); gameSerialGroup.setTargetType(StoryGroupStyle.SERIAL.getTargetType()); gameSerialGroup.setTargetValue(0); gameSerialGroup.setSerialStories(smartGameSerialStoryResponse.getSerialStoryList()); response.setGameSerialGroup(gameSerialGroup); //传统文化14 List&lt;DisplayGroup&gt; traditionCultureGroupList = new ArrayList&lt;&gt;(); DisplayGroup traditionCultureGroup = displayGroupService.getGroupById(14L); Page&lt;Story&gt; storyPage14 = groupRelevanceService.getNewGroupStoryList(user, 14, 0, 6); traditionCultureGroup.setStorys(storyPage14.getContent()); traditionCultureGroupList.add(traditionCultureGroup); response.setTraditionCultureGroup(traditionCultureGroupList); //其他分类 暂无 //Prompt Prompt prompt = new Prompt(PromptStyle.STUDY_PLAN.getId(),PromptStyle.STUDY_PLAN.getName(),PromptStyle.STUDY_PLAN.getUrl()); if(userid!=0)&#123; try &#123; prompt = promptService.getPrompt(userid); &#125;catch (Exception e)&#123; e.printStackTrace(); &#125; &#125; response.setPrompt(prompt); //isSvip if (user != null &amp;&amp; (user.getSvip().equals(SvipStyle.LEVEL_FOUR.getId()) || user.getSvip().equals(SvipStyle.LEVEL_THREE.getId())))&#123; response.setIsSvip(1); &#125; else &#123; response.setIsSvip(0); &#125; return response; &#125; Thread controller 123456789101112131415161718192021222324252627@RequestMapping(value = &quot;sgetIndex&quot;, method = RequestMethod.GET) @ResponseBody @ApiOperation(value = &quot;首页 &quot;) GetIndex280Response getIndex( @RequestHeader(value = &quot;ssToken&quot;, required = false) String ssToken, @ApiParam(value = &quot;版本号&quot;, defaultValue = &quot;&quot;, required = false) @RequestParam(required = false, defaultValue = &quot;&quot;) String ver )&#123; //使用线程增加故事 final ThreadPoolExecutor executor = (ThreadPoolExecutor) Executors.newFixedThreadPool(15); /** * 线程集合 */ ThreadResult threadResult=new ThreadResult(); Long loginId=(Long)request.getAttribute(&quot;loginId&quot;); User user=userService.getUser(loginId.intValue()); logger.info(&quot;-------------begin&quot;); GetIndex280Response response = this.getIndex280(user, 3,threadResult); logger.info(&quot;-------------3&quot;); threadResult.groupPromptThread=new GroupPromptThread(promptService,user); response=this.responseSetThreadValue2(response,executor,threadResult); logger.info(&quot;-------------end resp&quot;); return response; &#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206 private GetIndex280Response getIndex280(User user, Integer serialPageSize,ThreadResult threadResult) &#123; GetIndex280Response response = new GetIndex280Response(); //判断svip if(user != null &amp;&amp;(user.getSvip().equals(SvipStyle.LEVEL_FOUR.getId()) || user.getSvip().equals(SvipStyle.LEVEL_THREE.getId())))&#123; response.setIsSvip(1); &#125; else &#123; response.setIsSvip(0); &#125; logger.info(&quot;-------------001&quot;); //判断设备 Integer isCheckVer = 0; String userAgent = request.getHeader(&quot;User-Agent&quot;); if (userAgent.contains(&quot;ios&quot;)) &#123; //判断版本是否在审核中，获取config的ver是否等于当前版本 String key = &quot;version&quot;; if(userAgent.contains(&quot;appname:zhijianStory&quot;))&#123; key = &quot;zhijianStory&quot;+&quot;_version&quot;; &#125; Config config=this.configService.getConfigByKey(key); String ver = VersionUtil.getVerionInfo(request); if(ver.compareTo(config.getVal()) == 0)&#123; isCheckVer = 1; &#125; &#125; logger.info(&quot;-------------0011&quot;); //处理广告 String channel = request.getHeader(&quot;channel&quot;); String platform= VersionUtil.getPlatformStr(request); String ver=VersionUtil.getVerionInfo(request); threadResult.groupAdThread=new GroupAdThread(adsService,channel,platform,isCheckVer,ver,user); logger.info(&quot;-------------0016&quot;); //精品推荐 Ads ads = new Ads(); ads.setTitle(&quot;精品推荐&quot;); ads.setContent(&quot;精品推荐&quot;); ads.setUrl(&quot;www.baidu.com&quot;); ads.setImgPath(&quot;recommend.png&quot;); ads.setIcon(&quot;recommend.png&quot;); ads.setId(0L); ads.setTargetValue(0); ads.setTargetType(0); ads.setStatus(0); ads.setOrderBy(0); ads.setCreateTime(new Date()); ads.setIsIosVisual(0); ads.setAdsPosition(0); CustomGroup recommendGroup = new CustomGroup(); recommendGroup.setId(1006L); recommendGroup.setName(&quot;精品推荐&quot;); recommendGroup.setContent(&quot;精品推荐&quot;); recommendGroup.setIcon(&quot;&quot;); recommendGroup.setPadIcon(&quot;&quot;); recommendGroup.setTargetType(StoryGroupStyle.RECOMMEND.getTargetType()); recommendGroup.setTargetValue(0); recommendGroup.setIsSubscribe(0); recommendGroup.setAds(ads); response.setRecommendGroup(recommendGroup); logger.info(&quot;-------------00113&quot;); if(user!=null &amp;&amp; user.getId()!=0)&#123; Page&lt;UserReadRecord&gt; readRecordPage = userReadRecordService.getReadStoryRecordByUserIdAndType(user.getId(), 1, 0, 4); CustomGroup userReadRecordGroup = new CustomGroup(); userReadRecordGroup.setId(1004L); userReadRecordGroup.setName(&quot;故事足迹&quot;); userReadRecordGroup.setContent(&quot;故事足迹&quot;); userReadRecordGroup.setIcon(&quot;&quot;); userReadRecordGroup.setPadIcon(&quot;&quot;); userReadRecordGroup.setIsSubscribe(0); userReadRecordGroup.setTargetType(StoryGroupStyle.STORY.getTargetType()); userReadRecordGroup.setTargetValue(0); userReadRecordGroup.setUserReadRecordList(readRecordPage.getContent()); List&lt;Story&gt; storys = new ArrayList&lt;&gt;(); for (UserReadRecord s:readRecordPage.getContent()) &#123; storys.add(s.getStory()); &#125; userReadRecordGroup.setStorys(storys); response.setUserReadRecordGroup(userReadRecordGroup); &#125; //飞船电台 List&lt;Story&gt; radioList = storyService.getRadioList(); CustomGroup radioGroup = new CustomGroup(); radioGroup.setId(1005L); radioGroup.setName(&quot;飞船电台&quot;); radioGroup.setContent(&quot;飞船电台&quot;); radioGroup.setIcon(&quot;&quot;); radioGroup.setPadIcon(&quot;&quot;); radioGroup.setTargetType(StoryGroupStyle.AUDIO.getTargetType()); radioGroup.setTargetValue(0); radioGroup.setIsSubscribe(0); radioGroup.setStorys(radioList); response.setRadioGroup(radioGroup); logger.info(&quot;-------------0010&quot;); LessonIndex lessonIndex = new LessonIndex(); lessonIndex.setName(&quot;精品课程&quot;); lessonIndex.setContent(&quot;精品课程&quot;); lessonIndex.setIntro(&quot;&quot;); lessonIndex.setTargetType(StoryGroupStyle.LESSON.getTargetType()); lessonIndex.setLessonList(lessonService.getLessonList()); response.setLessonIndex(lessonIndex); logger.info(&quot;-------益智游戏专区------003&quot;); List&lt;CustomGroup&gt; cgroups = new ArrayList&lt;&gt;(); CustomGroup gameSerialGroup = new CustomGroup(); gameSerialGroup.setId(1003L); gameSerialGroup.setName(&quot;益智游戏专区&quot;); gameSerialGroup.setContent(&quot;益智游戏专区&quot;); gameSerialGroup.setIcon(&quot;&quot;); gameSerialGroup.setPadIcon(&quot;&quot;); gameSerialGroup.setIsSubscribe(0); cgroups.add(gameSerialGroup); GroupSerialThread groupSerialThread3=new GroupSerialThread(serialStoryService,SerialStoryStyle.SMART_GAME_SERIAL,user,0,serialPageSize); threadResult.serialThreads.add(groupSerialThread3); logger.info(&quot;-------ip专区------002&quot;); CustomGroup ipSerialGroup = new CustomGroup(); ipSerialGroup.setId(1002L); ipSerialGroup.setName(&quot;ip专区&quot;); ipSerialGroup.setContent(&quot;ip专区&quot;); ipSerialGroup.setIcon(&quot;&quot;); ipSerialGroup.setPadIcon(&quot;&quot;); ipSerialGroup.setIsSubscribe(0); cgroups.add(ipSerialGroup); GroupSerialThread groupSerialThread2=new GroupSerialThread(serialStoryService,SerialStoryStyle.IP_STORY_SERIAL,user,0,serialPageSize); threadResult.serialThreads.add(groupSerialThread2); logger.info(&quot;-------绘本丛书------000&quot;); CustomGroup huiBenGroup = new CustomGroup(); huiBenGroup.setId(1000L); huiBenGroup.setName(&quot;绘本丛书&quot;); huiBenGroup.setContent(&quot;&quot;); huiBenGroup.setIcon(&quot;&quot;); huiBenGroup.setPadIcon(&quot;&quot;); huiBenGroup.setIsSubscribe(0); cgroups.add(huiBenGroup); GroupSerialThread groupSerialThread=new GroupSerialThread(serialStoryService,SerialStoryStyle.INDEX_SERIAL,user,0,serialPageSize); threadResult.serialThreads.add(groupSerialThread); response.setSerialStoryCount(3); //获取分组列表// List&lt;DisplayGroup&gt; displayGroups = storyService.getStoryGroupListByNewCategory(); DisplayGroup group9 = displayGroupService.getGroupById(9L); group9.setStorys(new ArrayList&lt;Story&gt;()); DisplayGroup group12 = displayGroupService.getGroupById(12L); group12.setStorys(new ArrayList&lt;Story&gt;()); DisplayGroup group10 = displayGroupService.getGroupById(10L); group10.setStorys(new ArrayList&lt;Story&gt;()); DisplayGroup group11 = displayGroupService.getGroupById(11L); group11.setStorys(new ArrayList&lt;Story&gt;()); DisplayGroup group17 = displayGroupService.getGroupById(17L); group17.setStorys(new ArrayList&lt;Story&gt;()); DisplayGroup group14 = displayGroupService.getGroupById(14L); group14.setStorys(new ArrayList&lt;Story&gt;()); response.setSerialGroup(huiBenGroup); response.setGameSerialGroup(gameSerialGroup); response.setIpStoryGroup(ipSerialGroup); List&lt;DisplayGroup&gt; newStoryGroup = new ArrayList&lt;&gt;(); newStoryGroup.add(group17); List&lt;DisplayGroup&gt; classicAndCreateGroup = new ArrayList&lt;&gt;(); classicAndCreateGroup.add(group9); classicAndCreateGroup.add(group12); List&lt;DisplayGroup&gt; emotionAndHumourGroup = new ArrayList&lt;&gt;(); emotionAndHumourGroup.add(group10); emotionAndHumourGroup.add(group11); List&lt;DisplayGroup&gt; traditionCultureGroup = new ArrayList&lt;&gt;(); traditionCultureGroup.add(group14); response.setNewStoryGroup(newStoryGroup); response.setClassicAndCreateGroup(classicAndCreateGroup); response.setEmotionAndHumourGroup(emotionAndHumourGroup); response.setTraditionCultureGroup(traditionCultureGroup); logger.info(&quot;-------------003&quot;); //最新故事 groupId 9 经典故事 10 情感教育 11 幽默故事 12 创意思维 14 传统文化 16 飞船电台 17 最新故事 //9 12 GroupStoryThread groupStoryThread9=new GroupStoryThread(groupRelevanceService,user,9,0,6); threadResult.storyThreads.add(groupStoryThread9); GroupStoryThread groupStoryThread12=new GroupStoryThread(groupRelevanceService,user,12,0,6); threadResult.storyThreads.add(groupStoryThread12); // 10 11 GroupStoryThread groupStoryThread10=new GroupStoryThread(groupRelevanceService,user,10,0,6); threadResult.storyThreads.add(groupStoryThread10); GroupStoryThread groupStoryThread11=new GroupStoryThread(groupRelevanceService,user,11,0,6); threadResult.storyThreads.add(groupStoryThread11); // 17 GroupStoryThread groupStoryThread17=new GroupStoryThread(groupRelevanceService,user,17,0,6); threadResult.storyThreads.add(groupStoryThread17); // 14 GroupStoryThread groupStoryThread14=new GroupStoryThread(groupRelevanceService,user,14,0,6); threadResult.storyThreads.add(groupStoryThread14); logger.info(&quot;-------------004&quot;); return response; &#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091private GetIndex280Response responseSetThreadValue2(GetIndex280Response response, ExecutorService executor, ThreadResult threadResult)&#123; logger.info(&quot;=====1&quot;); for(GroupStoryThread groupStoryThreadItem:threadResult.storyThreads)&#123; executor.execute(groupStoryThreadItem); &#125; executor.execute(threadResult.groupAdThread); for(GroupSerialThread groupSerialThread:threadResult.serialThreads)&#123; executor.execute(groupSerialThread); &#125; executor.execute(threadResult.groupAdThread); if(threadResult.groupPromptThread!=null)&#123; executor.execute(threadResult.groupPromptThread); &#125; logger.info(&quot;=====2&quot;); try &#123; executor.shutdown(); executor.awaitTermination(5, TimeUnit.SECONDS); &#125; catch (InterruptedException ignored) &#123; ignored.printStackTrace(); &#125; logger.info(&quot;=====3&quot;); //最新故事 groupId 1 互动故事 2 益智游戏 3 限时免费 4 精品课程 5 系列故事 6 睡前故事 7 热销故事 8 音频 9 经典故事 //10 情感教育 11 幽默故事 12 创意思维 13 小程序试看 14 传统文化 16 飞船电台 17 最新故事 //赋值 for(GroupStoryThread groupStoryThread1:threadResult.storyThreads)&#123;// if(groupStoryThread1.getGroupId()==3)&#123;// response.getGroups().get(0).setStorys(groupStoryThread1.getStoryPage().getContent());// &#125; // 9经典故事 12创意思维 if(groupStoryThread1.getGroupId()==9)&#123; response.getClassicAndCreateGroup().get(0).setStorys(groupStoryThread1.getStoryPage().getContent()); &#125; if(groupStoryThread1.getGroupId()==12)&#123; response.getClassicAndCreateGroup().get(1).setStorys(groupStoryThread1.getStoryPage().getContent()); &#125; //10 情感教育 11 幽默故事 if(groupStoryThread1.getGroupId()==10)&#123; response.getEmotionAndHumourGroup().get(0).setStorys(groupStoryThread1.getStoryPage().getContent()); &#125; if(groupStoryThread1.getGroupId()==11)&#123; response.getEmotionAndHumourGroup().get(1).setStorys(groupStoryThread1.getStoryPage().getContent()); &#125; // 17最新故事 if(groupStoryThread1.getGroupId()==17)&#123; response.getNewStoryGroup().get(0).setStorys(groupStoryThread1.getStoryPage().getContent()); &#125;// for(DisplayGroup displayGroup:response.getGroupList())&#123;// if(groupStoryThread1.getGroupId()==displayGroup.getId().intValue())&#123;// if(displayGroup==null)&#123;// continue;// &#125;// displayGroup.setStorys(groupStoryThread1.getStoryPage().getContent());// &#125;// &#125; &#125; for(GroupSerialThread groupSerialThread:threadResult.serialThreads)&#123; //绘本 if(response.getSerialGroup().getId()==1000L&amp;&amp;groupSerialThread.getSerialStoryStyle()==SerialStoryStyle.INDEX_SERIAL)&#123; response.getSerialGroup().setSerialStories(groupSerialThread.getSerialStoryList()); &#125; //IP专区 if(response.getIpStoryGroup().getId()==1002L&amp;&amp;groupSerialThread.getSerialStoryStyle()==SerialStoryStyle.IP_STORY_SERIAL)&#123; response.getIpStoryGroup().setSerialStories(groupSerialThread.getSerialStoryList()); &#125; //益智专区 if(response.getGameSerialGroup().getId()==1003L&amp;&amp;groupSerialThread.getSerialStoryStyle()==SerialStoryStyle.SMART_GAME_SERIAL)&#123; response.getGameSerialGroup().setSerialStories(groupSerialThread.getSerialStoryList()); &#125;// for(CustomGroup customGroup:response.getGroups())&#123;// if(customGroup.getId()==1000L&amp;&amp;groupSerialThread.getSerialStoryStyle()==SerialStoryStyle.INDEX_SERIAL)&#123;// customGroup.setSerialStories(groupSerialThread.getSerialStoryList());// &#125;// if(customGroup.getId()==1002L&amp;&amp;groupSerialThread.getSerialStoryStyle()==SerialStoryStyle.IP_STORY_SERIAL)&#123;// customGroup.setSerialStories(groupSerialThread.getSerialStoryList());// &#125;// if(customGroup.getId()==1003L&amp;&amp;groupSerialThread.getSerialStoryStyle()==SerialStoryStyle.SUBJECT_SERIAL)&#123;// customGroup.setSerialStories(groupSerialThread.getSerialStoryList());// &#125;// &#125; &#125; response.setAds(threadResult.groupAdThread.getAdsList()); if(threadResult.groupPromptThread!=null)&#123; response.setPrompt(threadResult.groupPromptThread.getPrompt()); &#125; logger.info(&quot;=====4&quot;); return response; &#125;","categories":[],"tags":[{"name":"线程","slug":"线程","permalink":"http://example.com/tags/%E7%BA%BF%E7%A8%8B/"}]},{"title":"Exceutor","slug":"Exceutor","date":"2018-11-05T02:20:26.000Z","updated":"2021-09-22T11:19:04.605Z","comments":true,"path":"2018/11/05/Exceutor/","link":"","permalink":"http://example.com/2018/11/05/Exceutor/","excerpt":"","text":"Executor Java通过Executors提供四种线程池，分别为： newCachedThreadPool创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。 newFixedThreadPool 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。 newScheduledThreadPool 创建一个定长线程池，支持定时及周期性任务执行。 newSingleThreadExecutor 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。 1234567891011121314151617181920212223242526272829package javacc.executor;/** * @Auther: chenv * @Date: 2018/11/5 09:47 * @Description: */public class Threadv implements Runnable &#123; private Integer index; public Threadv(Integer index)&#123; this.index=index; &#125; @Override public void run() &#123; System.out.println(&quot;执行业务。。。。。。&quot;); try&#123; System.out.println(&quot;开始执行线程。。。&quot;); Thread.sleep(index*100); System.out.println(&quot;我的线程数是： &quot;+this.toString() +&quot; index :&quot;+index); &#125;catch (Exception e)&#123; e.printStackTrace(); &#125; &#125;&#125; newCachedThreadPool 创建一个可缓存线程池，应用中存在的线程数可以无限大 1234567891011/** * 可缓存线程池，应用中存在的线程数可以无限大 */ExecutorService newCachedThreadPool = Executors.newCachedThreadPool();System.out.println(&quot;********************newCachedThreadPool********************&quot;);for (int i = 0; i &lt; 10; i++) &#123; final int index = i; newCachedThreadPool.execute(new Threadv(index));&#125; 输出： 12345678910111213141516171819202122232425262728293031********************newCachedThreadPool********************执行业务。。。。。。开始执行线程。。。执行业务。。。。。。开始执行线程。。。执行业务。。。。。。开始执行线程。。。执行业务。。。。。。开始执行线程。。。我的线程数是： javacc.executor.Threadv@1478a613 index :0执行业务。。。。。。开始执行线程。。。执行业务。。。。。。开始执行线程。。。执行业务。。。。。。开始执行线程。。。执行业务。。。。。。开始执行线程。。。执行业务。。。。。。开始执行线程。。。执行业务。。。。。。开始执行线程。。。我的线程数是： javacc.executor.Threadv@42ab3a06 index :1我的线程数是： javacc.executor.Threadv@51e03dd8 index :2我的线程数是： javacc.executor.Threadv@4e3058f8 index :3我的线程数是： javacc.executor.Threadv@76fe9cc2 index :4我的线程数是： javacc.executor.Threadv@1f7a85de index :5我的线程数是： javacc.executor.Threadv@1aff604b index :6我的线程数是： javacc.executor.Threadv@495beecb index :7我的线程数是： javacc.executor.Threadv@77767c58 index :8我的线程数是： javacc.executor.Threadv@5259e47e index :9 newFixedThreadPool 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。 123456789// 定长线程池，可控制线程最大并发数，超出的线程会在队列中等待//线程池允许同时存在两个线程ExecutorService newFixedThreadPool = Executors.newFixedThreadPool(2);System.out.println(&quot;****************************newFixedThreadPool*******************************&quot;);for(int i=0;i&lt;10;i++)&#123; final int index=i; newFixedThreadPool.execute(new Threadv(index));&#125; 输出 ： 每次只有俩个线程存在 1234567891011121314151617181920212223242526272829303132****************************newFixedThreadPool*******************************执行业务。。。。。。开始执行线程。。。执行业务。。。。。。开始执行线程。。。我的线程数是： javacc.executor.Threadv@4f044f6c index :0执行业务。。。。。。开始执行线程。。。我的线程数是： javacc.executor.Threadv@4bb881c1 index :1执行业务。。。。。。开始执行线程。。。我的线程数是： javacc.executor.Threadv@41c3a8fc index :2执行业务。。。。。。开始执行线程。。。我的线程数是： javacc.executor.Threadv@457f66c6 index :3执行业务。。。。。。开始执行线程。。。我的线程数是： javacc.executor.Threadv@45fc241c index :4执行业务。。。。。。开始执行线程。。。我的线程数是： javacc.executor.Threadv@4140eab1 index :5执行业务。。。。。。开始执行线程。。。我的线程数是： javacc.executor.Threadv@fea2c7 index :6执行业务。。。。。。开始执行线程。。。我的线程数是： javacc.executor.Threadv@4426cfd index :7执行业务。。。。。。开始执行线程。。。我的线程数是： javacc.executor.Threadv@6d6cf29b index :8我的线程数是： javacc.executor.Threadv@bfb533d index :9 newScheduledThreadPool 创建一个定长线程池，支持定时及周期性任务执行 123456789// 定长线程池，支持定时及周期性任务执行ScheduledExecutorService newScheduledThreadPool = Executors.newScheduledThreadPool(2);System.out.println(&quot;****************************newScheduledThreadPool*******************************&quot;);for(int i=0;i&lt;10;i++)&#123; final int index=i; //延迟三秒执行 newScheduledThreadPool.schedule(new Threadv(index),3, TimeUnit.SECONDS);&#125; 输出 ： 延迟三秒之后执行，除了延迟执行之外和newFixedThreadPool基本相同，可以用来执行定时任务 12345678910111213141516171819202122232425262728293031****************************newScheduledThreadPool*******************************执行业务。。。。。。开始执行线程。。。我的线程数是： javacc.executor.Threadv@52a91127 index :0执行业务。。。。。。执行业务。。。。。。开始执行线程。。。开始执行线程。。。我的线程数是： javacc.executor.Threadv@56969faa index :1执行业务。。。。。。开始执行线程。。。我的线程数是： javacc.executor.Threadv@6c7d6e81 index :2执行业务。。。。。。开始执行线程。。。我的线程数是： javacc.executor.Threadv@13941b1c index :3执行业务。。。。。。开始执行线程。。。我的线程数是： javacc.executor.Threadv@62ba8d7e index :4执行业务。。。。。。开始执行线程。。。我的线程数是： javacc.executor.Threadv@38f7f590 index :5执行业务。。。。。。开始执行线程。。。我的线程数是： javacc.executor.Threadv@668505f1 index :6执行业务。。。。。。开始执行线程。。。我的线程数是： javacc.executor.Threadv@22cdeb80 index :7执行业务。。。。。。开始执行线程。。。我的线程数是： javacc.executor.Threadv@23878745 index :8我的线程数是： javacc.executor.Threadv@40445bbc index :9 newSingleThreadExecutor 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行 123456789//单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行 ExecutorService newSingleThreadExecutor = Executors.newSingleThreadExecutor(); System.out.println(&quot;****************************newSingleThreadExecutor*******************************&quot;); for(int i=0;i&lt;10;i++) &#123; final int index=i; newSingleThreadExecutor.execute(new Threadv(index)); &#125; 输出 ： 12345678910111213141516171819202122232425262728293031****************************newSingleThreadExecutor*******************************执行业务。。。。。。开始执行线程。。。我的线程数是： javacc.executor.Threadv@342648c8 index :0执行业务。。。。。。开始执行线程。。。我的线程数是： javacc.executor.Threadv@3ae1a03c index :1执行业务。。。。。。开始执行线程。。。我的线程数是： javacc.executor.Threadv@3ede23b8 index :2执行业务。。。。。。开始执行线程。。。我的线程数是： javacc.executor.Threadv@7bdcaa07 index :3执行业务。。。。。。开始执行线程。。。我的线程数是： javacc.executor.Threadv@7d3acdbc index :4执行业务。。。。。。开始执行线程。。。我的线程数是： javacc.executor.Threadv@4aed7267 index :5执行业务。。。。。。开始执行线程。。。我的线程数是： javacc.executor.Threadv@5e14b61 index :6执行业务。。。。。。开始执行线程。。。我的线程数是： javacc.executor.Threadv@1bf35548 index :7执行业务。。。。。。开始执行线程。。。我的线程数是： javacc.executor.Threadv@308f3ca7 index :8执行业务。。。。。。开始执行线程。。。我的线程数是： javacc.executor.Threadv@11501e9b index :9","categories":[],"tags":[{"name":"线程","slug":"线程","permalink":"http://example.com/tags/%E7%BA%BF%E7%A8%8B/"}]},{"title":"Spring boot test","slug":"测试","date":"2018-11-03T13:36:56.000Z","updated":"2021-09-22T11:19:04.655Z","comments":true,"path":"2018/11/03/测试/","link":"","permalink":"http://example.com/2018/11/03/%E6%B5%8B%E8%AF%95/","excerpt":"","text":"Spring boot test pom 123456&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;!--&lt;version&gt;1.4.3.RELEASE&lt;/version&gt;--&gt; &lt;/dependency&gt; 1234567@SpringBootApplication public class StartUpApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(StartUpApplication.class, args); &#125;&#125; controller 123456789101112@RequestMapping(value = &quot;/get_Str2&quot;,method = RequestMethod.GET)@ApiOperation(value = &quot;get_Str&quot;)@ResponseBodypublic BaseResponse getStr2()&#123; BaseResponse response = new BaseResponse(); String str = &quot;helllo spring str2&quot;; String str2 = &quot;helllo spring str2&quot;; response.setStr(str +str2); return response;&#125; test 12345678910@RunWith(SpringRunner.class)@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)public class CacheTest &#123; @Test public void testCache()throws Exception&#123; //... &#125;&#125; test(moc) 12345678910111213141516171819@RunWith(SpringRunner.class)@AutoConfigureMockMvc //mockmvc@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)@ComponentScan(&#123;&quot;com.test.xxx.xxx&quot;,&quot;com.test.xxx.xxx.impl&quot;&#125;)@EntityScan(&#123;&quot;com.tes.xxx.entity&quot;,&quot;com.xxx.xxx.entity&quot;&#125;)@Rollbackpublic class CacheTest &#123; @Autowired MockMvc mockMvc; @Test public void testCache()throws Exception&#123; MvcResult result=mockMvc.perform(MockMvcRequestBuilders.get(&quot;/simplecms/test.action&quot;)).andDo(MockMvcResultHandlers.print()).andReturn(); String respStr=result.getResponse().getContentAsString(); &#125;&#125;","categories":[],"tags":[{"name":"springboot","slug":"springboot","permalink":"http://example.com/tags/springboot/"}]},{"title":"设计模式-代理（Jdk代理）","slug":"design/Jdk代理","date":"2018-11-03T13:12:36.000Z","updated":"2021-09-22T11:19:04.612Z","comments":true,"path":"2018/11/03/design/Jdk代理/","link":"","permalink":"http://example.com/2018/11/03/design/Jdk%E4%BB%A3%E7%90%86/","excerpt":"","text":"dynamicProxy-jdk 接口 123public interface User&#123; void eat();&#125; 实现 真实user 12345678public class RealUser implements User&#123; @Override public void eat()&#123; System.out.println(&quot;RealUser eat&quot;); &#125;&#125; 代理类 1234567891011121314151617181920212223pulic class UerProxy implements InvocationHandler&#123; private User user; //被代理的人 public Object getInstance(User user)&#123; this.user = user; Class cls = user.getClass(); return Proxy.newProxyInstance(cls.getClassLoader(),cls.getInterfaces(),this); &#125; @Override public Object invoke(Object proxy,Method method,Object[] args) throws Throwable&#123; System.out.println(&quot;前置操作：&quot;); method.invoke(this.person,args); System.out.println(&quot;后置操作：&quot;); return null; &#125; &#125; client 123456789101112131415public class JdkProxyMain &#123; public static void main(String[] args) throws IOException &#123; User user = (User) new PersonProxy().getInstance(new RealUser()); user.eat(); System.out.println(user.getClass()); //原理： //1.拿到被代理对象的引用，然后获取它的接口 //2.JDK代理重新生成一个类，同时实现我们给的代理对象所实现的接口 //3.把被代理对象的引用也拿到了 //4.重新动态生成了一个class字节码 //5.然后编译 &#125;&#125;","categories":[],"tags":[{"name":"Design Patterns","slug":"Design-Patterns","permalink":"http://example.com/tags/Design-Patterns/"}]},{"title":"设计模式-代理（cglib代理）","slug":"design/dynamicProxy-cglib","date":"2018-11-03T13:12:36.000Z","updated":"2021-09-22T11:19:04.613Z","comments":true,"path":"2018/11/03/design/dynamicProxy-cglib/","link":"","permalink":"http://example.com/2018/11/03/design/dynamicProxy-cglib/","excerpt":"","text":"dynamicProxy-cglib 12345public class Python &#123; public void learnPython() &#123; System.out.println(&quot;learnPython&quot;); &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839public class LanguageProxy implements MethodInterceptor &#123; public Object getInstance(Class clazz) throws Exception&#123; //通过反射机制给他实例化 Enhancer enhancer=new Enhancer(); //注入父类，告诉CGLib，生成的子类需要继承那个类 enhancer.setSuperclass(clazz); //添加监听 enhancer.setCallback(this); //1.生成源代码 //2.编译成.class文件 //3.加载到JVM中，返回对象 return enhancer.create(); &#125; //也是做了字节码重组，jdk实现需要实现接口，cglib则是通过继承的方式 //对于使用api无法感知的 public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable &#123; System.out.println(&quot;-----------------学习开始-----------------&quot;); System.out.println(&quot;我正在学习Python&quot;); System.out.println(&quot;我正在学习大数据&quot;); //JDK的动态代理是通过接口来强制转换的 //生成以后的代理对象是可以强制转化为我们的接口 //CGLib的动态代理是通过生成一个被代理对象的子类，然后重写了父类的方法 //生成的对象，可以强制为被代理的对象（也就是用户自己写的类） //子类引用赋值给父类 //此处的 Object o对象是CGLib帮我么new出来子类的对象 //Java OOP,在new子类的同时，实际上默认先调用了我们super()的方法 //new了父类的同时，必须向new出来父类，这也就是间接持有了我们父类的引用 //我们改变了子类对象的某些属性，是可以间接的操作父类的属性的 methodProxy.invokeSuper(o,objects); System.out.println(&quot;-----------------学习结束-----------------&quot;); return o; &#125;&#125; 1234567891011public class TestLanguage &#123; public static void main(String[] args) &#123; try &#123; Python python = (Python)new LanguageProxy().getInstance(Python.class); python.learnPython(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125;&#125;","categories":[],"tags":[{"name":"Design Patterns","slug":"Design-Patterns","permalink":"http://example.com/tags/Design-Patterns/"}]},{"title":"设计模式-代理（静态代理）","slug":"design/静态代理","date":"2018-11-03T13:12:36.000Z","updated":"2021-09-22T11:19:04.615Z","comments":true,"path":"2018/11/03/design/静态代理/","link":"","permalink":"http://example.com/2018/11/03/design/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86/","excerpt":"","text":"proxy 接口 123public interface Image &#123; void display();&#125; 实体类 123456789101112131415161718public class RealImage implements Image &#123; private String fileName; public RealImage(String fileName)&#123; this.fileName = fileName; loadFromDisk(fileName); &#125; @Override public void display() &#123; System.out.println(&quot;Displaying &quot; + fileName); &#125; private void loadFromDisk(String fileName)&#123; System.out.println(&quot;Loading &quot; + fileName); &#125;&#125; 1234567891011121314151617public class ProxyImage implements Image&#123; private RealImage realImage; private String fileName; public ProxyImage(String fileName)&#123; this.fileName = fileName; &#125; @Override public void display() &#123; if(realImage == null)&#123; realImage = new RealImage(fileName); &#125; realImage.display(); &#125;&#125; client 12345678910111213public class ProxyPatternDemo &#123; public static void main(String[] args) &#123; Image image = new ProxyImage(&quot;test_10mb.jpg&quot;); // 图像将从磁盘加载 image.display(); System.out.println(&quot;&quot;); // 图像不需要从磁盘加载 image.display(); &#125;&#125; 1234Loading test_10mb.jpgDisplaying test_10mb.jpgDisplaying test_10mb.jpg","categories":[],"tags":[{"name":"Design Patterns","slug":"Design-Patterns","permalink":"http://example.com/tags/Design-Patterns/"}]},{"title":"shipjssdk.js","slug":"shipjssdk.js","date":"2018-10-29T10:41:35.000Z","updated":"2021-09-22T11:19:04.644Z","comments":true,"path":"2018/10/29/shipjssdk.js/","link":"","permalink":"http://example.com/2018/10/29/shipjssdk.js/","excerpt":"","text":"shipjssdk.js 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500501502503504505506507508509510511512513514515516517518519520521522523524525526527528529530531532533534535536537538539540541542543544545546547548549550551552553554555556557558559560561562563564565566567568569570571572573574575576577578579580581582583584585586587588589590591592593594595596597598599600601602603604605606607608/** * Created by wslhk on 2018/5/14. * storyship jssdk 1.5 * 增加confirm，增加2.5相关协议 * 增加微信分享配置 */var shipjssdk=new function(configObj)&#123; this.userAgent=navigator.userAgent; this.appVer=&quot;0&quot;; this.isAppIos=false; this.isAppAndroid=false; this.isTestVer=false; this.token=&#x27;&#x27;; this.isApp=false;//是否是app this.isMicroMessenger=false; this.pageConfig=&#123; appActivityAuthErrPage:&#x27;&#x27;//app没有登录提示页 ,microMessageActivityAuthErrpage:&#x27;&#x27; //微信没有登录的提示页如 https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx31edd56a45a12c7f&amp;redirect_uri=https%3A%2F%2Fwx.storybook.ifenghui.com%2Factpaydemo&amp;response_type=code&amp;scope=snsapi_userinfo&amp;state=STATE#wechat_redirect&#x27;//微信没有授权提示页 ,otherActiveAuthErrPage:&#x27;&#x27;//除了微信和app的渠道，分享页 , &#125; if(configObj)&#123; this.pageConfig=configObj; &#125; this.requestUrl = &#x27;//xxx.xxxxx.com/sale&#x27;; if(location.href.indexOf(&#x27;storybook&#x27;) !=-1&amp;&amp;location.href.indexOf(&#x27;localhost&#x27;) ==-1)&#123; // alert(1); this.requestUrl = &#x27;//storybook.xxxxx.com/sale&#x27;; &#125; _this=this var httpPost=function(url,params,callback)&#123; var ajax = new XMLHttpRequest(); // 使用post请求 ajax.open(&#x27;post&#x27;,url); // 如果 使用post发送数据 必须 设置 如下内容 // 修改了 发送给 服务器的 请求报文的 内容 // 如果需要像 HTML 表单那样 POST 数据，请使用 setRequestHeader() 来添加 HTTP 头。然后在 send() 方法中规定您希望发送的数据： ajax.setRequestHeader(&quot;Content-type&quot;,&quot;application/x-www-form-urlencoded&quot;); // 发送 // post请求 发送的数据 写在 send方法中 // 格式 name=jack&amp;age=18 字符串的格式 ajax.send(params); // 注册事件 ajax.onreadystatechange = function () &#123; if (ajax.readyState==4&amp;&amp;ajax.status==200) &#123; respObj=JSON.parse(ajax.responseText); callback(respObj); &#125; &#125; &#125; var httpGet=function(url,callback)&#123; //步骤一:创建异步对象 var ajax = new XMLHttpRequest();//步骤二:设置请求的url参数,参数一是请求的类型,参数二是请求的url,可以带参数,动态的传递参数starName到服务端 ajax.open(&#x27;get&#x27;,url);//步骤三:发送请求 ajax.send();//步骤四:注册事件 onreadystatechange 状态改变就会调用 ajax.onreadystatechange = function () &#123; if (ajax.readyState==4 &amp;&amp;ajax.status==200) &#123; //步骤五 如果能够进到这个判断 说明 数据 完美的回来了,并且请求的页面是存在的 // console.log(ajax.responseText);//输入相应的内容 respObj=JSON.parse(ajax.responseText); // console.log(&#x27;----------------------&#x27;) // console.log(respObj) callback(respObj); &#125; &#125; &#125; this.getVersion=function () &#123; verkey=&quot;storyship/&quot;; if(this.isAppAndroid)&#123; verkey=&quot;storyship/&quot;; &#125; if(this.userAgent.indexOf(verkey)!=-1)&#123; begin=this.userAgent.indexOf(verkey) end=this.userAgent.indexOf(&quot;;&quot;,begin) if(end==-1)&#123; end=this.userAgent.length; &#125; ver=this.userAgent.substr(begin+verkey.length,end-(begin+verkey.length)); this.appVer=ver; if(ver.substr(0,1)==&#x27;0&#x27;)&#123; this.isTestVer=true; &#125; &#125; &#125; this.getPlatform=function () &#123; if(this.userAgent.indexOf(&#x27;Android_&#x27;)!=-1&amp;&amp;this.userAgent.indexOf(&#x27;storyship&#x27;)!=-1)&#123; this.isAppAndroid=true; &#125; if(this.userAgent.indexOf(&#x27;AppleWebKit&#x27;)!=-1&amp;&amp;this.userAgent.indexOf(&#x27;storyship&#x27;)!=-1)&#123; this.isAppIos=true; &#125; if( this.isAppAndroid||this.isAppIos)&#123; this.isApp=true; &#125; if(this.userAgent.indexOf(&#x27;MicroMessenger&#x27;)!=-1)&#123; this.isMicroMessenger=true; &#125; &#125; this.GetQueryString=function(name) &#123; var reg = new RegExp(&quot;(^|&amp;)&quot; + name + &quot;=([^&amp;]*)(&amp;|$)&quot;); var r = window.location.search.substr(1).match(reg); if(r != null) return unescape(r[2]); return null; &#125; this.getToken=function()&#123; tokenQ=this.GetQueryString(&#x27;sstoken&#x27;); if(tokenQ!=null&amp;&amp;tokenQ!=&#x27;&#x27;)&#123; sessionStorage.setItem(&#x27;token&#x27;,tokenQ); &#125;else&#123; tokenQ=sessionStorage.getItem(&#x27;token&#x27;); &#125; this.token=tokenQ; return this.token; &#125; //1.1 支持 this.limitVer=function(verStr)&#123; //输入最次版本号，支持返回true，不支持返回false if(this.isApp==false)&#123; //不是app不支持 return false; &#125; if(this.compareVer(verStr)==1)&#123; return false; &#125;else&#123; return true; &#125; &#125; //版本判断和警告 this.limitVerAndAlert=function(verStr)&#123; //输入最次版本号，支持返回true，不支持返回false if(this.isApp==false)&#123; //不是app不支持 shipjssdk.showDialogAndHide(&#x27;请注意&#x27;,&#x27;请点击&#x27;,&#x27;确认&#x27;,2000) return false; &#125; if(this.compareVer(verStr)==1)&#123; shipjssdk.showDialog(&#x27;请注意&#x27;,&#x27;当前版本不支持，请升级到&#x27;+verStr+&#x27;以上的版本&#x27;,&#x27;确认&#x27;) return false; &#125;else&#123; return true; &#125; &#125; //比较版本大小 this.compareVer=function(verStr)&#123; //大于限制 // 如果输入版本大于当前版本返回1 // 如果输入版本小于当前版本返回-1 // 版本相等返回0 currentVer=this.appVer; if(currentVer.substr(0,1)==&#x27;0&#x27;&amp;&amp;currentVer.length&gt;4)&#123; currentVer=currentVer.substr(2,currentVer.length-2); &#125; currentVerArr=currentVer.split(&#x27;.&#x27;); inputVerArr=verStr.split(&#x27;.&#x27;) if(currentVerArr.length!=3||inputVerArr.length!=3)&#123; console.log(&quot;ver set error&quot;); return; &#125; if(Number(inputVerArr[0])&gt;Number(currentVerArr[0]))&#123; return 1 &#125;else if(Number(inputVerArr[0])&lt;Number(currentVerArr[0]))&#123; return -1 &#125;else&#123; // return 0 &#125; if(Number(inputVerArr[1])&gt;Number(currentVerArr[1]))&#123; return 1 &#125;else if(Number(inputVerArr[1])&lt;Number(currentVerArr[1]))&#123; return -1 &#125;else&#123; // return 0 &#125; if(Number(inputVerArr[2])&gt;Number(currentVerArr[2]))&#123; return 1 &#125;else if(Number(inputVerArr[2])&lt;Number(currentVerArr[2]))&#123; return -1 &#125;else&#123; return 0 &#125; &#125; //初始化 this.getPlatform(); this.getVersion(); this.getToken(); //协议调用 that=this; this.appMethod=new function()&#123; this.modeIframe=function (url) &#123; //iframe模式打开 var shipui_link = document.createElement(&quot;iframe&quot;); shipui_link.src = url; shipui_link.width = 0; shipui_link.height = 0; shipui_link.style.display=&#x27;none&#x27;; var ss = document.getElementsByTagName(&quot;body&quot;)[0]; ss.parentNode.insertBefore(shipui_link, ss); &#125; //登录 this.ss_login=function () &#123; location.href=&#x27;storyship://story?method=SS_Login&#x27;; &#125; this.ss_authredirect=function(url)&#123; //!!!!!!!!!!有安全风险，需要限定域名 location.href=&#x27;storyship://story?method=SS_AuthRedirect&amp;url=&#x27;+encodeURIComponent(url); &#125; this.ss_playstory=function(storyid)&#123; location.href=&#x27;storyship://story?method=SS_PlayStory&amp;id=&#x27;+Number(storyid); &#125; this.ss_showserialstory=function(sid)&#123; location.href=&#x27;storyship://story?method=SS_ShowSerialStory&amp;id=&#x27;+Number(sid); &#125; this.ss_resetshareurl=function(url)&#123; //设置分享地址 if(shipjssdk.limitVerAndAlert(&#x27;2.0.0&#x27;))&#123; this.modeIframe(&#x27;storyship://story?method=SS_ResetShareURL&amp;url=&#x27;+encodeURIComponent(url)); &#125; &#125; this.ss_sendsharecallbackurl=function(url)&#123; //设置分享回调地址 if(shipjssdk.limitVerAndAlert(&#x27;2.0.0&#x27;))&#123; this.modeIframe(&#x27;storyship://story?method=SS_SendShareCallbackURL&amp;url=&#x27;+encodeURIComponent(url)); &#125; &#125; //试用兑换码 this.ss_usecode=function(url)&#123; if(shipjssdk.limitVerAndAlert(&#x27;2.0.1&#x27;))&#123; location.href=&#x27;storyship://story?method=SS_UseCode&amp;url=&#x27;+encodeURIComponent(url); &#125; &#125; this.ss_payactivity=function(id,amount)&#123; if(shipjssdk.limitVerAndAlert(&#x27;2.1.0&#x27;))&#123; location.href=&#x27;storyship://story?method=SS_PayActivity&amp;id=&#x27;+Number(id)+&quot;&amp;amount=&quot;+amount; &#125; &#125; this.ss_resetbgcolor=function(bgcolor)&#123; if(shipjssdk.limitVerAndAlert(&#x27;2.2.0&#x27;))&#123; this.modeIframe(&#x27;storyship://story?method=SS_ResetBgColor&amp;color=&#x27;+bgcolor); &#125; &#125; this.ss_paylesson=function(priceId,lessonId,refresh)&#123; if(shipjssdk.limitVerAndAlert(&#x27;2.2.0&#x27;))&#123; if(refresh)&#123; location.href=&#x27;storyship://story?method=SS_PayLesson&amp;priceId=&#x27;+priceId+&#x27;&amp;lessonId=&#x27;+lessonId+&#x27;&amp;refresh=&#x27;+refresh; &#125; else &#123; location.href=&#x27;storyship://story?method=SS_PayLesson&amp;priceId=&#x27;+priceId+&#x27;&amp;lessonId=&#x27;+lessonId; &#125; &#125; &#125; this.ss_openlessonitem=function(lessonId,itemId,refresh)&#123; if(shipjssdk.limitVerAndAlert(&#x27;2.2.0&#x27;))&#123; if(refresh)&#123; location.href=&#x27;storyship://story?method=SS_OpenClassItem&amp;lessonId=&#x27;+lessonId+&quot;&amp;itemId=&quot;+itemId+&quot;&amp;refresh=&quot;+refresh; &#125; else &#123; location.href=&#x27;storyship://story?method=SS_OpenClassItem&amp;lessonId=&#x27;+lessonId+&quot;&amp;itemId=&quot;+itemId; &#125; &#125; &#125; this.ss_refresh=function()&#123; if(shipjssdk.limitVerAndAlert(&#x27;2.2.0&#x27;))&#123; this.modeIframe(&#x27;storyship://story?method=SS_OpenClassItem&amp;refresh=1&#x27;); &#125; &#125; this.ss_open_sharemenu=function()&#123; if(shipjssdk.limitVerAndAlert(&#x27;2.2.0&#x27;)) &#123; location.href = &#x27;storyship://story?method=SS_OpenShareMenu&#x27;; &#125; &#125; this.ss_open_svip=function()&#123; if(shipjssdk.limitVerAndAlert(&#x27;2.4.0&#x27;)) &#123; location.href = &#x27;storyship://story?method=SS_OpenSVip&#x27;; &#125; &#125; this.ss_open_ad=function(id)&#123; if(shipjssdk.limitVerAndAlert(&#x27;2.5.0&#x27;)) &#123; location.href = &#x27;storyship://story?method=SS_OpenAd&amp;id=&#x27;+id; &#125; &#125; this.ss_open_readplan=function()&#123; if(shipjssdk.limitVerAndAlert(&#x27;2.5.0&#x27;)) &#123; location.href = &#x27;storyship://story?method=SS_OpenReadPlan&#x27;; &#125; &#125; &#125; function loadBack(e)&#123; e.preventDefault(); &#125; //dialog /** * 提示窗口，代替alert * @param title * @param content * @param btntext * @param callback */ this.showDialog=function(title,content,btntext,callback)&#123; if(!btntext)&#123; btntext=&#x27;确认&#x27;; &#125; if(!title)&#123; title=&#x27;请注意&#x27;; &#125; if(!content)&#123; content=&#x27;提示文字&#x27;; &#125; var dialogHtml=&#x27;&lt;div class=&quot;js_dialog&quot; style=&quot;opacity: 1;&quot;&gt;\\ &lt;div class=&quot;shipui-mask&quot;&gt;&lt;/div&gt;\\ &lt;div class=&quot;shipui-alert shipui-dialog&quot;&gt;\\ &lt;div class=&quot;shipui-dialog-title&quot;&gt;&lt;strong&gt;&#x27;+title+&#x27;&lt;/strong&gt;&lt;/div&gt;\\ &lt;div class=&quot;shipui-dialog-content&quot;&gt;&#x27;+content+&#x27;&lt;/div&gt;\\ &lt;div class=&quot;shipui-dialog-btn&quot;&gt;\\ &lt;a href=&quot;javascript:;&quot; class=&quot;shipui-dialog-ok&quot; &gt;&#x27;+btntext+&#x27;&lt;/a&gt;\\ &lt;/div&gt;\\ &lt;/div&gt;\\ &lt;/div&gt;&#x27;; dialogAddListener(dialogHtml); &#125; this.showConfirm=function(title,content,btntext,callback)&#123; if(!btntext)&#123; btntext=&#x27;确认&#x27;; &#125; if(!title)&#123; title=&#x27;请注意&#x27;; &#125; if(!content)&#123; content=&#x27;提示文字&#x27;; &#125; var dialogHtml=&#x27;&lt;div class=&quot;js_dialog&quot; style=&quot;opacity: 1;&quot;&gt;\\ &lt;div class=&quot;shipui-mask&quot;&gt;&lt;/div&gt;\\ &lt;div class=&quot;shipui-alert shipui-dialog shipui-dialog-confirm&quot;&gt;\\ &lt;div class=&quot;shipui-dialog-title&quot;&gt;&lt;strong&gt;&#x27;+title+&#x27;&lt;/strong&gt;&lt;/div&gt;\\ &lt;div class=&quot;shipui-dialog-content&quot;&gt;&#x27;+content+&#x27;&lt;/div&gt;\\ &lt;div class=&quot;shipui-dialog-btn&quot;&gt;\\ &lt;a href=&quot;javascript:;&quot; class=&quot;shipui-dialog-cancel&quot; &gt;取消&lt;/a&gt;\\ &lt;a href=&quot;javascript:;&quot; class=&quot;shipui-dialog-ok&quot; &gt;&#x27;+btntext+&#x27;&lt;/a&gt;\\ &lt;/div&gt;\\ &lt;/div&gt;\\ &lt;/div&gt;&#x27;; dialogAddListener(dialogHtml,callback); &#125; function dialogAddListener(dialogHtml,callback) &#123; var hm = document.createElement(&quot;div&quot;); hm.id = &#x27;shipui-dialog-queue&#x27;; hm.innerHTML=dialogHtml; var s = document.getElementsByTagName(&quot;body&quot;)[0]; s.appendChild(hm); document.getElementsByClassName(&#x27;shipui-dialog-ok&#x27;)[0].addEventListener(&#x27;click&#x27;, function()&#123; document.getElementById(&#x27;shipui-dialog-queue&#x27;).remove(); window.removeEventListener(&#x27;touchmove&#x27;, loadBack,&#123; passive: false &#125;); try&#123; callback(); &#125;catch (e)&#123; &#125; &#125;, &#123;passive:false&#125;); document.getElementsByClassName(&#x27;shipui-dialog-cancel&#x27;)[0].addEventListener(&#x27;click&#x27;, function()&#123; document.getElementById(&#x27;shipui-dialog-queue&#x27;).remove(); window.removeEventListener(&#x27;touchmove&#x27;, loadBack,&#123; passive: false &#125;); &#125;, &#123;passive:false&#125;); window.addEventListener(&quot;touchmove&quot;,loadBack,&#123; passive: false &#125;); &#125; this.showDialogAndHide=function(title,content,btntext,time)&#123; this.showDialog(title,content,btntext); setTimeout(function () &#123; document.getElementById(&#x27;shipui-dialog-queue&#x27;).remove(); window.removeEventListener(&#x27;touchmove&#x27;, loadBack,&#123; passive: false &#125;); &#125;,time); // setTimeout(time,&#x27;alert()&#x27;); &#125; //微信分享 this.wxShare=new function()&#123; //增加js标签 this.initShare=function(siconUrl,stitle,sdesc,slink)&#123; if(slink.indexOf(&#x27;test.ifenghui.com&#x27;)==-1&amp;&amp;slink.indexOf(&#x27;storybook.ifenghui.com&#x27;)==-1)&#123; alert(&#x27;微信分享的域名不支持请确认&#x27;); &#125; if(siconUrl.indexOf(&quot;oss&quot;)!=-1&amp;&amp;siconUrl.indexOf(&quot;?&quot;)==-1)&#123; siconUrl=siconUrl+ &#x27;?x-oss-process=image/resize,m_lfit,w_100,h_100,limit_0/auto-orient,1/quality,q_80/format,jpg&#x27; &#125; if(!slink)&#123; slink=window.location.href &#125; httpGet(_this.requestUrl + &#x27;/pre_sale/get_wx_data?url=&#x27; + encodeURIComponent(window.location.href),function (res) &#123; var data = res; wx.config(&#123; debug: false, &quot;appId&quot;: data.appId, &quot;timestamp&quot;: parseInt(data.timestamp), &quot;nonceStr&quot;: data.nonceStr, &quot;signature&quot;: data.signature, jsApiList: [ &#x27;checkJsApi&#x27;, &#x27;onMenuShareTimeline&#x27;, &#x27;onMenuShareAppMessage&#x27; ] &#125;); wx.ready(function() &#123; // alert(&#x27;--&gt;&#x27;+stitle+&quot;-&gt;&quot;+data.appId) var shareData = &#123; title: stitle, desc: sdesc, link: slink, imgUrl: siconUrl, success: function(res) &#123; &#125;, cancel: function(res) &#123;&#125; &#125;; wx.onMenuShareAppMessage(shareData); wx.onMenuShareTimeline(shareData); &#125;); wx.error(function(res) &#123; // alert(&quot;error: &quot; + res.errMsg); &#125;); &#125;) &#125; &#125; //活动相关操作 this.act=new function()&#123; requestUrl=_this.requestUrl; this.initAct=function(callback)&#123; //判断是小程序还是app的，有没有存unionId，token unionid=sessionStorage.getItem(&#x27;unionId&#x27;) microMessageCoce=that.GetQueryString(&#x27;code&#x27;); ssToken=that.GetQueryString(&#x27;sstoken&#x27;); sessionSSToken=sessionStorage.getItem(&#x27;ssToken&#x27;) // requestUrl=&#x27;add_wxuser&#x27;; //没存，还没授权，直接跳到错误页 if(that.isMicroMessenger)&#123; //微信需要验证unionid和授权 if(!unionid)&#123; //没有unionid //看code是否存在 if(!microMessageCoce)&#123; //TODO需要跳到授权登录页，或错误页 if(that.pageConfig.microMessageActivityAuthErrpage=&#x27;&#x27;)&#123; location.href=that.pageConfig.microMessageActivityAuthErrpage; &#125; return; &#125;else&#123; //TODO需要用code进行授权登录,并设置unionid $.ajax(&#123; type: &quot;POST&quot;, url: requestUrl + &quot;/user/add_wxuser&quot;, data: &#123; code: microMessageCoce &#125;, dataType: &quot;json&quot;, success: function(res) &#123; // self.token = res.body.preSaleUser.unionId; if(res.status.code==0)&#123; // alert(&#x27;授权失败请返回重试&#x27;); throw new error(&quot;授权失败请返回重试&quot;); &#125; sessionStorage.setItem(&quot;unionId&quot;, res.preSaleUser.unionId); try&#123; callback(true); &#125;catch (e)&#123; console.log(e); &#125; return; &#125; &#125;) return; &#125; &#125; &#125;else if(that.isApp)&#123; if(!ssToken&amp;&amp;!sessionSSToken)&#123; //TO-DO:需要调转到APP未登录提示页 if(that.pageConfig.appActivityAuthErrPage!=&#x27;&#x27;)&#123; location.href=that.pageConfig.appActivityAuthErrPage; &#125; return; &#125;else if(!!ssToken)&#123; sessionStorage.setItem(&#x27;ssToken&#x27;,ssToken); try&#123; callback(true); &#125;catch (e)&#123; console.log(e); &#125; return; &#125;else&#123; try&#123; callback(true); &#125;catch (e)&#123; console.log(e); &#125; return; &#125; &#125;else&#123; alert(&#x27;当前浏览器无法参加活动&#x27;); return; &#125; // location.href=shipjssdk.pageConfig.otherActiveAuthErrPage; return; &#125;; this.getUnionId=function()&#123; return sessionStorage.getItem(&#x27;unionId&#x27;); &#125; this.getSsToken=function()&#123; return sessionStorage.getItem(&#x27;ssToken&#x27;); &#125; this.isLogin=function()&#123; if(sessionStorage.getItem(&#x27;unionId&#x27;)||sessionStorage.getItem(&#x27;ssToken&#x27;))&#123; return true &#125; return false; &#125; this.getUerType=function()&#123; if(that.isApp)&#123; return 1 &#125;else if(that.isMicroMessenger)&#123; return 2; &#125;else&#123; alert(&#x27;用户类型异常，请确认后重试&#x27;); &#125; &#125; //创建订单前的订单展示 this.previewOrder=function(goodsId)&#123; $.ajax(&#123; type: &quot;GET&quot;, url: requestUrl + &quot;/xxx/getorder&quot;, data: &#123; sstoken: that.act.getSsToken(), unionId: that.act.getUnionId(), usertype:that.act.getUerType(), goodsId:goodsId &#125;, dataType: &quot;json&quot;, success: function(res) &#123; // self.token = res.body.preSaleUser.unionId; sessionStorage.setItem(&quot;unionId&quot;, res.body.preSaleUser.unionId); callback(true); return; &#125; &#125;) &#125; //订单发起支付 this.payOrder=function(goodsId)&#123; // alert(requestUrl) token=&#x27;&#x27;; if(shipjssdk.isMicroMessenger)&#123; token=that.act.getUnionId(); &#125;else if(shipjssdk.isApp)&#123; token=that.getToken(); &#125; var timestamp = Date.parse(new Date()); params=&#x27;token=&#x27;+token+&#x27;&amp;userType=&#x27;+that.act.getUerType()+&#x27;&amp;goodsId=&#x27;+goodsId+&#x27;&amp;tt=&#x27;+timestamp httpPost(requestUrl + &quot;/xxx/add_order&quot;,params,function (res) &#123; if(res.status.code!==1)&#123; shipjssdk.showDialogAndHide(&quot;请注意&quot;,res.status.msg,&#x27;确定&#x27;,1500); &#125; shipjssdk.appMethod.ss_payactivity(res.preSalePay.id,res.preSalePay.price); &#125;); &#125; &#125;;//act&#125;;(function() &#123; var shipui_link = document.createElement(&quot;link&quot;); shipui_link.href = &quot;//test.ifenghui.com/api_web/js/shipsdk/shipui.css?a=1&quot;; shipui_link.rel = &quot;stylesheet&quot;; shipui_link.type = &quot;text/css&quot;; var ss = document.getElementsByTagName(&quot;title&quot;)[0]; ss.parentNode.insertBefore(shipui_link, ss); var wx_link = document.createElement(&quot;script&quot;); wx_link.src = &#x27;//res.wx.qq.com/open/js/jweixin-1.3.0.js&#x27;; // var ss = document.getElementsByTagName(&quot;body&quot;)[0]; ss.parentNode.insertBefore(wx_link, ss);&#125;)();","categories":[],"tags":[{"name":"util","slug":"util","permalink":"http://example.com/tags/util/"}]},{"title":"PHPoffice导出","slug":"PHPoffice导出","date":"2018-10-16T13:30:21.000Z","updated":"2021-09-22T11:19:04.607Z","comments":true,"path":"2018/10/16/PHPoffice导出/","link":"","permalink":"http://example.com/2018/10/16/PHPoffice%E5%AF%BC%E5%87%BA/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152 public function downLoadExcel()&#123; $searchParams = input(&#x27;get.searchParams&#x27;); $map = unserialize($searchParams); $List = Db::table(&#x27;xxx_xxx_gift&#x27;)-&gt;where($map)-&gt;select(); if($List == null)&#123; return ; &#125; //通过工厂模式创建内容 $spreadsheet = \\PhpOffice\\PhpSpreadsheet\\IOFactory::load(&#x27;exceltemplate/salegift.xlsx&#x27;); $worksheet = $spreadsheet-&gt;getActiveSheet(); foreach($List as $key =&gt; $val)&#123; $rowId = $key + 2; $worksheet-&gt;getCell(&#x27;A&#x27;.$rowId)-&gt;setValue($val[&#x27;id&#x27;]); $worksheet-&gt;getCell(&#x27;B&#x27;.$rowId)-&gt;setValue($val[&#x27;user_id&#x27;]); $goods = Db::table(&#x27;story_pre_sale_goods&#x27;)-&gt;where(&#x27;id&#x27;,$val[&#x27;goods_id&#x27;])-&gt;find(); $worksheet-&gt;getCell(&#x27;C&#x27;.$rowId)-&gt;setValue($goods[&#x27;content&#x27;]); $activity = Db::table(&#x27;story_pre_sale_activity&#x27;)-&gt;where(&#x27;id&#x27;,$val[&#x27;activity_id&#x27;])-&gt;find(); $worksheet-&gt;getCell(&#x27;D&#x27;.$rowId)-&gt;setValue($activity[&#x27;content&#x27;]); $worksheet-&gt;getCell(&#x27;E&#x27;.$rowId)-&gt;setValue($val[&#x27;name&#x27;]); $worksheet-&gt;getCell(&#x27;F&#x27;.$rowId)-&gt;setValue($val[&#x27;receiver&#x27;]); $worksheet-&gt;getCell(&#x27;G&#x27;.$rowId)-&gt;setValue($val[&#x27;phone&#x27;]); $worksheet-&gt;getCell(&#x27;H&#x27;.$rowId)-&gt;setValue($val[&#x27;address&#x27;]); if($val[&#x27;status&#x27;] == 0)&#123; $status =&#x27;未领取&#x27;; &#125;elseif ($val[&#x27;status&#x27;]==1)&#123; $status =&#x27;已领取&#x27;; &#125; $worksheet-&gt;getCell(&#x27;I&#x27;.$rowId)-&gt;setValue($status); $worksheet-&gt;getCell(&#x27;J&#x27;.$rowId)-&gt;setValue($val[&#x27;create_time&#x27;]); $worksheet-&gt;getCell(&#x27;K&#x27;.$rowId)-&gt;setValue($val[&#x27;express_company_name&#x27;]); $worksheet-&gt;getCell(&#x27;L&#x27;.$rowId)-&gt;setValue($val[&#x27;express_code&#x27;]); if($val[&#x27;express_status&#x27;] == 0)&#123; $express_status =&#x27;未发货&#x27;; &#125;elseif ($val[&#x27;express_status&#x27;]==1)&#123; $express_status =&#x27;已发货&#x27;; &#125; $worksheet-&gt;getCell(&#x27;M&#x27;.$rowId)-&gt;setValue($express_status); &#125; $writer = \\PhpOffice\\PhpSpreadsheet\\IOFactory::createWriter($spreadsheet, &#x27;Xlsx&#x27;); $date = date(&#x27;Y-m-d H:i:s&#x27;,time()); //通过工厂模式来写内容 header(&#x27;Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&#x27;);//告诉浏览器输出07Excel文件// header(&#x27;Content-Type:application/vnd.ms-excel&#x27;);//告诉浏览器将要输出Excel03版本文件 header(&#x27;Content-Disposition: attachment;filename=&#x27;.$date.&quot;.xlsx&quot;);//告诉浏览器输出浏览器名称 header(&#x27;Cache-Control: max-age=0&#x27;);//禁止缓存 $writer-&gt;save(&#x27;php://output&#x27;); &#125;","categories":[],"tags":[{"name":"php","slug":"php","permalink":"http://example.com/tags/php/"}]},{"title":"手动添加修改信息","slug":"添加修改","date":"2018-10-16T13:30:21.000Z","updated":"2021-09-22T11:19:04.655Z","comments":true,"path":"2018/10/16/添加修改/","link":"","permalink":"http://example.com/2018/10/16/%E6%B7%BB%E5%8A%A0%E4%BF%AE%E6%94%B9/","excerpt":"","text":"手动添加修改信息 public function edit() &#123; $dbConfig = config(\"db_fenxiao_config\"); $request = Request::instance(); if ($request-&gt;isPost()) &#123; $addressData = input('post.'); if (isset($addressData['id'])) &#123; $expressModel = Db::connect($dbConfig)-&gt;table(\"fx_express\"); $result = $expressModel-&gt;update($addressData); if ($result !== false) &#123; $this-&gt;success('恭喜，保存成功哦！', ''); &#125; else &#123; $this-&gt;error('保存失败，请稍候再试！'); &#125; &#125; &#125; elseif ($request-&gt;isGet()) &#123; $id = $_GET['id']; $expressModel = Db::connect($dbConfig)-&gt;table(\"fx_express\"); $vo = $expressModel-&gt;where('id', $id)-&gt;find(); if (isset($vo)) &#123; $this-&gt;assign('vo', $vo); &#125; $this-&gt;assign('id', $id); return $this-&gt;fetch('form'); &#125; else &#123; return null; &#125; return null; &#125; ···","categories":[],"tags":[{"name":"php","slug":"php","permalink":"http://example.com/tags/php/"}]},{"title":"添加数据","slug":"添加数据","date":"2018-10-16T13:30:21.000Z","updated":"2021-09-22T11:19:04.656Z","comments":true,"path":"2018/10/16/添加数据/","link":"","permalink":"http://example.com/2018/10/16/%E6%B7%BB%E5%8A%A0%E6%95%B0%E6%8D%AE/","excerpt":"","text":"1234&lt;!--查看数据--&gt; dump($xxx); die; 12345678910111213141516171819202122232425/** * 发送 */ public function send() &#123; if (request()-&gt;isGet()) &#123; $notice_id = input(&#x27;get.id&#x27;); $this-&gt;assign(&#x27;noticeId&#x27;,$notice_id); return $this-&gt;fetch(&#x27;send&#x27;); &#125; elseif( request()-&gt;isPost() ) &#123; $data = input(&#x27;post.&#x27;); $userList = explode(&#x27;,&#x27;, $data[&#x27;user_id&#x27;]); foreach($userList as $key =&gt; $val)&#123; $insData[&#x27;notice_id&#x27;] = $data[&#x27;notice_id&#x27;]; $insData[&#x27;user_id&#x27;] = $val; $insData[&#x27;is_read&#x27;] = 0; $insData[&#x27;is_del&#x27;] = 0; $insData[&#x27;create_time&#x27;] = date(&#x27;Y-m-d H:i:s&#x27;,time()); Db::table(&#x27;xxx_user&#x27;)-&gt;insert($insData); &#125; $this-&gt;success(&#x27;恭喜，保存成功哦！&#x27;, &#x27;&#x27;); &#125; else &#123; return false; &#125; &#125; 添加 123456789101112131415161718192021222324252627282930313233343536public function add() &#123; if (request()-&gt;isGet()) &#123; $code_id = input(&#x27;get.id&#x27;); $this-&gt;assign(&#x27;codeId&#x27;,$code_id); return $this-&gt;fetch(&#x27;add&#x27;); &#125; elseif( request()-&gt;isPost() ) &#123; $data = input(&#x27;post.&#x27;); $num = intval($data[&#x27;num&#x27;]); for ($n=0;$n&lt;$num;$n++)&#123; $insData[&#x27;name&#x27;] = $data[&#x27;name&#x27;]; $insData[&#x27;goods_id&#x27;] = $data[&#x27;goods_id&#x27;]; $insData[&#x27;activity_id&#x27;] = 4; $insData[&#x27;pay_id&#x27;] = 0; $insData[&#x27;user_id&#x27;] = 0; $insData[&#x27;status&#x27;] = 0; $insData[&#x27;is_expire&#x27;] = 0; $insData[&#x27;create_time&#x27;] = date(&#x27;Y-m-d H:i:s&#x27;,time()); $insData[&#x27;end_time&#x27;] = date(&#x27;2099-12-12 00:00:00&#x27;); $insData[&#x27;code&#x27;] = &#x27;&#x27;; $codeId =Db::table(&#x27;story_pre_sale_code&#x27;)-&gt;insertGetId($insData); $r = rand(10,99); $pre=&quot;&quot;; for($i=0;$i&lt;8-strlen($codeId);$i++)&#123; $pre = $pre.&quot;0&quot;; &#125; $newCode = $r.$pre.$codeId; $newCode16 = base_convert($newCode, 10, 16); Db::table(&#x27;xxx_code&#x27;)-&gt;where(&#x27;id&#x27;, $codeId)-&gt;setField(&#x27;code&#x27;,$newCode16); &#125; $this-&gt;success(&#x27;恭喜，保存成功哦！&#x27;, &#x27;&#x27;); &#125; else &#123; return false; &#125; &#125;","categories":[],"tags":[{"name":"php","slug":"php","permalink":"http://example.com/tags/php/"}]},{"title":"Exception","slug":"Exception","date":"2018-10-15T05:15:19.000Z","updated":"2021-09-22T11:19:04.604Z","comments":true,"path":"2018/10/15/Exception/","link":"","permalink":"http://example.com/2018/10/15/Exception/","excerpt":"","text":"异常处理 异常处理 123456789101112131415161718192021222324252627282930313233/** * 异常处理类 */@ControllerAdvicepublic class ApiExceptionHandler &#123; /** * Api接口默认异常 * @param req * @param e * @return * @throws Exception */ @ExceptionHandler(value = ApiException.class) @ResponseBody public ExceptionResponse jsonErrorHandler(HttpServletRequest req, Exception e) throws Exception &#123; ExceptionResponse response = new ExceptionResponse(); ApiStatus apiStatus=new ApiStatus(); apiStatus.setMsg(e.getMessage()); apiStatus.setCode(500); //查询数据不存在 if(e instanceof ApiException)&#123; apiStatus.setCode(((ApiException) e).getApicode()); apiStatus.setMsg(((ApiException) e).getApimsg()); &#125; response.setStatus(apiStatus); return response; &#125;&#125; 123public class ExceptionResponse extends ApiResponse &#123;&#125; 123456789101112131415161718public abstract class ApiResponse &#123; ApiStatus status; public ApiResponse()&#123; status=new ApiStatus(); status.setCode(1); status.setMsg(&quot;成功&quot;); &#125; public ApiStatus getStatus() &#123; return status; &#125; public void setStatus(ApiStatus status) &#123; this.status = status; &#125;&#125; 1234567891011121314151617181920212223242526272829303132333435363738public class ApiException extends RuntimeException&#123; protected String apimsg; public int apicode; public ApiException()&#123; &#125; public ApiException(ExceptionStyle exceptionStyle,String apimsg)&#123; super(apimsg); this.apicode=exceptionStyle.code; this.apimsg=apimsg; if(apimsg==null||&quot;&quot;.equals(apimsg))&#123; this.apimsg=exceptionStyle.msg; &#125; &#125; public String getApimsg() &#123; return apimsg; &#125; public void setApimsg(String apimsg) &#123; this.apimsg = apimsg; &#125; public int getApicode() &#123; return apicode; &#125; public void setApicode(int apicode) &#123; this.apicode = apicode; &#125;&#125; 123456789101112131415161718/** * 没有找到数据的异常 */public class ApiNotFoundException extends ApiException &#123; public ApiNotFoundException(String apimsg)&#123; super(ExceptionStyle.NOT_FOUND_EXCEPTION,apimsg); &#125; public ApiNotFoundException(String apimsg,int code)&#123; this.apimsg=apimsg; this.apicode=code; &#125;&#125; 1234567891011121314public enum ExceptionStyle &#123; NOT_USER_EXCEPTION(3,&quot;没有这个用户&quot;) ,NOT_FOUND_EXCEPTION(201,&quot;没有找到数据&quot;) int code; String msg; ExceptionStyle(int code,String msg)&#123; this.code=code; this.msg=msg; &#125;&#125;","categories":[],"tags":[{"name":"springboot","slug":"springboot","permalink":"http://example.com/tags/springboot/"}]},{"title":"Swagger-ui","slug":"Swagger-ui","date":"2018-10-15T05:15:19.000Z","updated":"2021-09-22T11:19:04.609Z","comments":true,"path":"2018/10/15/Swagger-ui/","link":"","permalink":"http://example.com/2018/10/15/Swagger-ui/","excerpt":"","text":"Swagger-ui SwaggerConfig 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273/** * SwaggerConfig */@Configuration@EnableSwagger2public class SwaggerConfig &#123; /** * SpringBoot默认已经将classpath:/META-INF/resources/和classpath:/META-INF/resources/webjars/映射 * 所以该方法不需要重写，如果在SpringMVC中，可能需要重写定义（我没有尝试） * 重写该方法需要 extends WebMvcConfigurerAdapter * */ /** * 可以定义多个组，比如本类中定义把test和demo区分开了 * （访问页面就可以看到效果了） * */ public List&lt;Parameter&gt; globeParams() &#123; ParameterBuilder parameterBuilder = new ParameterBuilder(); List&lt;Parameter&gt; parameters = new ArrayList&lt;Parameter&gt;(); parameterBuilder.name(&quot;ssToken&quot;) .description(&quot;ssToken&quot;) .modelRef(new ModelRef(&quot;string&quot;)) .parameterType(&quot;header&quot;) .required(false).build(); parameters.add(parameterBuilder.build()); return parameters; &#125; @Bean public Docket swaggerSpringMvcPlugin() &#123; // 显示名称 return new Docket(DocumentationType.SWAGGER_2).groupName(&quot;api&quot;) .apiInfo(apiInfo()) .select() .apis(RequestHandlerSelectors.basePackage(&quot;com.xxxx.xxx.app&quot;)) .paths(PathSelectors.any()) .build() .globalOperationParameters(this.globeParams()); &#125; @Bean public Docket swaggerSpringMvcPluginAdmin() &#123; // 显示名称 return new Docket(DocumentationType.SWAGGER_2).groupName(&quot;admin&quot;) .apiInfo(apiInfoAdmin()) .select() .apis(RequestHandlerSelectors.basePackage(&quot;com.xxxx.xxx.adminapi&quot;)) .paths(PathSelectors.any()) .build() .globalOperationParameters(this.globeParams()); &#125; private ApiInfo apiInfo() &#123; return new ApiInfoBuilder().title(&quot;Simple APIs&quot;) .description(&quot;simple apis&quot;) .termsOfServiceUrl(&quot;http://www.gm.com&quot;) .contact(new Contact(&quot;suliyea&quot;, &quot;http://xxx&quot;, &quot;suliyea@qq.com&quot;)) .version(&quot;1.0&quot;) .build(); &#125; private ApiInfo apiInfoAdmin() &#123; return new ApiInfoBuilder().title(&quot;Simple APIs&quot;) .description(&quot;admin apis&quot;) .termsOfServiceUrl(&quot;http://www.gm.com&quot;) .contact(new Contact(&quot;suliyea&quot;, &quot;http://xxx&quot;, &quot;suliyea@qq.com&quot;)) .version(&quot;1.0&quot;) .build(); &#125;&#125; 依赖 1234567891011121314//pom.xml&lt;!-- Swagger --&gt;&lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt; &lt;version&gt;2.6.1&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt; &lt;version&gt;2.6.1&lt;/version&gt;&lt;/dependency&gt;","categories":[],"tags":[{"name":"springboot","slug":"springboot","permalink":"http://example.com/tags/springboot/"}]},{"title":"web","slug":"web","date":"2018-10-12T13:36:56.000Z","updated":"2021-09-22T11:19:04.650Z","comments":true,"path":"2018/10/12/web/","link":"","permalink":"http://example.com/2018/10/12/web/","excerpt":"","text":"web 123456789101112131415161718192021222324252627282930313233@Controller@EnableAutoConfiguration//@EnableAutoConfiguration//@SpringBootApplication//@ConfigurationProperties(prefix = &quot;spring&quot;)@RequestMapping(&quot;/web&quot;)public class ShareController &#123; @Autowired public Environment env; @RequestMapping(value=&quot;/shareUser/&#123;userIdStr&#125;&quot;,method = RequestMethod.GET) @ResponseBody void shareStory(HttpServletResponse response,@PathVariable String userIdStr) throws IOException &#123; // return &quot;Hello World!&quot;; try&#123; int userId=Integer.parseInt(userIdStr); User user = userService.getStory(userId); if(user.getWebFile().indexOf(&quot;zip&quot;)==-1)&#123; response.getWriter().write(&quot;not find share page.&quot;); return; &#125; String url=env.getProperty(&quot;cmsconfig.oss.url&quot;)+&quot;webfolder/&quot;+user.getWebFile().replace(&quot;.zip&quot;,&quot;/index.html&quot;); response.sendRedirect(url); &#125;catch (Exception e)&#123; e.printStackTrace();; response.getWriter().write(&quot;not find share page.&quot;); return; &#125; &#125;&#125;","categories":[],"tags":[{"name":"springboot","slug":"springboot","permalink":"http://example.com/tags/springboot/"}]},{"title":"枚举类型","slug":"枚举类型","date":"2018-10-12T12:36:56.000Z","updated":"2021-09-22T11:19:04.655Z","comments":true,"path":"2018/10/12/枚举类型/","link":"","permalink":"http://example.com/2018/10/12/%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B/","excerpt":"","text":"枚举类型 枚举 1234567891011121314151617181920212223242526272829303132333435363738public enum WalletStyle &#123; DEFAULT(0,&quot;隐藏钱包&quot;), IOS_WALLET(1,&quot;IOS钱包&quot;), ANDROID_WALLET(2,&quot;安卓钱包&quot;); int id; String name; WalletStyle(int id, String name)&#123; this.id=id; this.name=name; &#125; public int getId() &#123; return id; &#125; public void setId(int id) &#123; this.id = id; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public static WalletStyle getById(int id)&#123; for(WalletStyle style:WalletStyle.values())&#123; if(style.getId()==id)&#123; return style; &#125; &#125; return null; &#125;&#125;","categories":[],"tags":[{"name":"springboot","slug":"springboot","permalink":"http://example.com/tags/springboot/"}]},{"title":"SpringBoot中注解","slug":"SpringBoot中注解","date":"2018-10-12T12:19:23.000Z","updated":"2021-09-22T11:19:04.609Z","comments":true,"path":"2018/10/12/SpringBoot中注解/","link":"","permalink":"http://example.com/2018/10/12/SpringBoot%E4%B8%AD%E6%B3%A8%E8%A7%A3/","excerpt":"","text":"SpringBoot中常见注解 @RestController @RestController被称为一个构造型（stereotype）注解。它为阅读代码的开发人员提供建议。对于Spring，该类扮演了一个特殊角色。它继承自@Controller注解。4.0之前的版本，spring MVC的组件都使用@Controller来标识当前类是一个控制器servlet。使用这个特性，我们可以开发REST服务的时候不需要使用@Controller而专门的@RestController。 @RequestMapping 注解提供路由信息。它告诉Spring任何来自&quot;/&quot;路径的HTTP请求都应该被映射到home方法。@RestController注解告诉Spring以字符串的形式渲染结果，并直接返回给调用者。该注解有六个属性： params：指定request中必须包含某些参数值是，才让该方法处理。 headers：指定request中必须包含某些指定的header值，才能让该方法处理请求。 value：指定请求的实际地址，指定的地址可以是URI Template 模式 method：指定请求的method类型， GET、POST、PUT、DELETE等 consumes：指定处理请求的提交内容类型（Content-Type），如application/json,text/html produces：指定返回的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回 @EnableAutoConfiguration @EnableAutoConfiguration。这个注解告诉Spring Boot根据添加的jar依赖猜测你想如何配置Spring。由于spring-boot-starter-web添加了Tomcat和Spring MVC，所以auto-configuration将假定正在开发一个web应用并相应地对Spring进行设置。Starter POMs和Auto-Configuration设计auto-configuration的目的是更好的使用&quot;Starter POMs&quot;，但这两个概念没有直接的联系。可以自由地挑选starter POMs以外的jar依赖，并且Spring Boot将仍旧尽最大努力去自动配置你的应用 @Configuration Spring Boot提倡基于Java的配置。尽管可以使用一个XML源来调用SpringApplication.run()，但官方建议使用@Configuration类作为主要源。一般定义main方法的类也是主要@Configuration的一个很好候选。不需要将所有的@Configuration放进一个单独的类。@Import注解可以用来导入其他配置类。另外也可以使用@ComponentScan注解自动收集所有的Spring组件，包括@Configuration类。 如果需要使用基于XML的配置，官方建议仍旧从一个@Configuration类开始。可以使用附加的@ImportResource注解加载XML配置文件。 @Configuration注解该类，等价与XML中配置beans；用@Bean标注方法等价于XML中配置bean。 @ComponentScan 表示将该类自动发现扫描组件。如果扫描到有@Component、@Controller、@Service等这些注解的类，并注册为Bean，可以自动收集所有的Spring组件，包括@Configuration类。使用@ComponentScan注解搜索beans，并结合@Autowired注解导入。可以自动收集所有的Spring组件，包括@Configuration类。如果没有配置，Spring Boot会扫描启动类所在包下以及子包下的使用了@Service,@Repository等注解的类。 @SpringBootApplication @SpringBootApplication // 等同于@Configuration @EnableAutoConfiguration @ComponentScan @Profiles Spring Profiles提供了一种隔离应用程序配置的方式，并让这些配置只能在特定的环境下生效。任何@Component或@Configuration都能被@Profile标记，从而限制加载它的时机。 @ControllerAdvice 包含@Component。可以被扫描到。统一处理异常。 @ExceptionHandler 用在方法上面表示遇到这个异常就执行以下方法。 123456789101112131415161718192021222324252627282930313233/** * 全局异常处理 */ @ControllerAdvice public class GlobalDefaultExceptionHandler &#123; public static final String DEFAULT_ERROR_VIEW = &quot;error&quot;; @ExceptionHandler(&#123;TypeMismatchException.class,NumberFormatException.class&#125;) public ModelAndView formatErrorHandler(HttpServletRequest req, Exception e) throws Exception &#123; ModelAndView mav = new ModelAndView(); mav.addObject(&quot;error&quot;,&quot;参数类型错误&quot;); mav.addObject(&quot;exception&quot;, e); mav.addObject(&quot;url&quot;, RequestUtils.getCompleteRequestUrl(req)); mav.addObject(&quot;timestamp&quot;, new Date()); mav.setViewName(DEFAULT_ERROR_VIEW); return mav; &#125;&#125; @value 通过@value注解来读取application.properties里面的配置，使用实例参考： 1234567891011121314151617181920/************** application.properties *************/qq_api_key=********1***********qq_api_secrt=******2*********** /************* Java **************/@Value(&quot;$&#123;qq_api_key&#125;&quot;) private String API_KEY; @Value(&quot;$&#123;qq_api_secrt&#125;&quot;) private String API_SECRET; @ResponseBody 表示该方法的返回结果直接写入HTTP response body中一般在异步获取数据时使用，在使用@RequestMapping后，返回值通常解析为跳转路径，加上@Responsebody后返回结果不会被解析为跳转路径，而是直接写入HTTP response body中。如异步获取json数据，加上@Responsebody后，会直接返回json数据。 @Component 泛指组件，当组件不好归类时，可以使用这个注解进行标注。一般公共的方法会用上这个注解 @RequestParam 用在方法的参数前面，实例： @RequestParam String a=request.getParameter(“a”); @PathVariable 路径变量注解，其参数与大括号里的名字一样要保持一致，实例： 12345678RequestMapping(&quot;yoodb/detail/&#123;id&#125;&quot;) public String getByMacAddress(@PathVariable String id)&#123; //do something; &#125; @Inject 等价于默认的@Autowired，只是没有required属性。 @Bean 相当于XML中的,放在方法的上面，而不是类，意思是产生一个bean,并交给spring管理。 @AutoWired 自动导入依赖的bean。byType方式。把配置好的Bean拿来用，完成属性、方法的组装，它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作。当加上（required=false）时，就算找不到bean也不报错。 @Qualifier 当有多个同一类型的Bean时，可以用@Qualifier(“name”)来指定。与@Autowired配合使用。@Qualifier限定描述符除了能根据名字进行注入，但能进行更细粒度的控制如何选择候选者，具体使用方式如下： 123456@Autowired@Qualifier(value = &quot;demoInfoService&quot;)private DemoInfoService demoInfoService; @Resource(name=“name”,type=“type”) 没有括号内内容的话，默认byName。与@Autowired类似。","categories":[],"tags":[{"name":"springboot","slug":"springboot","permalink":"http://example.com/tags/springboot/"}]},{"title":"application.properties","slug":"application.properties","date":"2018-10-12T12:16:52.000Z","updated":"2021-09-22T11:19:04.612Z","comments":true,"path":"2018/10/12/application.properties/","link":"","permalink":"http://example.com/2018/10/12/application.properties/","excerpt":"","text":"spring boot application.properties application.properties 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485spring.datasource.url=jdbc:mysql://128.37.136.265/test?characterEncoding=utf-8spring.datasource.username=rootspring.datasource.password=rootspring.datasource.driver-class-name=com.mysql.jdbc.Driverspring.datasource.type=com.alibaba.druid.pool.DruidDataSource# ??????????????????????????????????????# ???????С????С?????spring.datasource.initialSize=1spring.datasource.minIdle=1spring.datasource.maxActive=5# ????????????????????spring.datasource.maxWait=60000# ???ü????ò??????μ??????????????????????λ?????spring.datasource.timeBetweenEvictionRunsMillis=60000# ??????????????????С??????????λ?????spring.datasource.minEvictableIdleTimeMillis=300000spring.datasource.validationQuery=SELECT 1 FROM DUALspring.datasource.testWhileIdle=truespring.datasource.testOnBorrow=falsespring.datasource.testOnReturn=false# ??PSCache??????????????????PSCache???Сspring.datasource.poolPreparedStatements=truespring.datasource.maxPoolPreparedStatementPerConnectionSize=20# ???ü??????????filters????????????sql???????&#x27;wall&#x27;????????spring.datasource.filters=stat,wall,log4j# ???connectProperties????????mergeSql???????SQL???spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000# ??????DruidDataSource????????#spring.datasource.useGlobalDataSourceStat=true#spring.jpa.properties.hibernate.cache.use_second_level_cache=true#spring.jpa.properties.hibernate.cache.use_query_cache=true#spring.jpa.properties.hibernate.cache.region.factory_class=org.hibernate.cache.ehcache.EhCacheRegionFactoryspring.jpa.properties.javax.persistence.sharedCache.mode=ALLtest.preSaleUser.ids=115,103,1,7,18,23,25,27server.tomcat.access-log-enabled=true# REDIS (RedisProperties)# database namespring.redis.database=4# server hostspring.redis.host=101.37.174.227# server passwordspring.redis.password=# connection portspring.redis.port=6379# pool settings ...spring.redis.pool.max-idle=8spring.redis.pool.min-idle=1spring.redis.pool.max-active=8spring.redis.pool.max-wait=-1cache.defaultexpiration=86400#spring.datasource.driver-class-name=com.mysql.jdbc.Driver#spring.jpa.hibernate.dialect=org.hibernate.dialect.MySQL5Dialectspring.jpa.database-platform=org.hibernate.dialect.MySQL5Dialect#spring.view.prefix: classpath:/template/spring.view.suffix: .html#JPA Configuration:spring.jpa.show-sql=truespring.jpa.properties.hibernate.show_sql=true## LOGGINGlogging.path=/home/logs/test/debug=truespring.freemarker.enabled=truespring.freemarker.cache=falsespring.freemarker.charset=UTF-8spring.freemarker.check-template-location=truespring.freemarker.content-type=text/htmlspring.freemarker.expose-request-attributes=truespring.freemarker.expose-session-attributes=truespring.freemarker.request-context-attribute=requestspring.freemarker.suffix=.htmlspring.freemarker.settings.number_format=0.###spring.profiles.active=devserver.port = 8080","categories":[],"tags":[{"name":"springboot","slug":"springboot","permalink":"http://example.com/tags/springboot/"}]},{"title":"Jrebel","slug":"Jrebel","date":"2018-10-10T05:20:38.000Z","updated":"2021-09-22T11:19:04.606Z","comments":true,"path":"2018/10/10/Jrebel/","link":"","permalink":"http://example.com/2018/10/10/Jrebel/","excerpt":"","text":"Jrebel https://www.cnblogs.com/wang1024/p/7211194.html http://chessman-126-com.iteye.com/blog/2163514 默认反代 idea.lanyus.com, 运行起来后，http://127.0.0.1:8888/Zephyr就是激活地址了（激活地址复制到激活的窗口，而不是浏览器地址栏，见下图）, 邮箱随意填写（激活成功前不要关闭反向代理程序）。 如果使用上面的激活地址出现 “Incorrect license server group URL.Contact license sever administrator.” 错误，是由于授权地址增加了GUID检测造成的，可以尝试使用下面的激活地址： http://127.0.0.1:8888/88414687-3b91-4286-89ba-2dc813b107ce、 http://127.0.0.1:8888/ff47a3ac-c11e-4cb2-836b-9b2b26101696、 http://127.0.0.1:8888/11d221d1-5cf0-4557-b023-4b4adfeeb36a 链接：https://pan.baidu.com/s/1db2_jRJFvfm1FtdhiyTfCQ 提取码：xbv4","categories":[],"tags":[{"name":"idea","slug":"idea","permalink":"http://example.com/tags/idea/"}]},{"title":"Spring boot 创建","slug":"Spring boot 创建","date":"2018-10-07T13:36:56.000Z","updated":"2021-09-22T11:19:04.609Z","comments":true,"path":"2018/10/07/Spring boot 创建/","link":"","permalink":"http://example.com/2018/10/07/Spring%20boot%20%E5%88%9B%E5%BB%BA/","excerpt":"","text":"创建spring boot项目 创建新项目 new -&gt; project -&gt; Spring Intializr SpringBootApplication 12345678@EnableTransactionManagement@EnableAutoConfiguration@SpringBootApplication@EnableCaching@ServletComponentScanpublic class SpringBootApplication &#123; SpringApplication.run(SpringBootApplication.class, args);&#125; Entity 1234567891011121314151617181920@Entity@Table(name=&quot;t_user&quot;)@JsonIgnoreProperties(&#123;&quot;hibernateLazyInitializer&quot;, &quot;handler&quot;&#125;)public class WeekPlanIntro &#123; @Id @GeneratedValue(strategy= GenerationType.AUTO) Integer id; String nick; //spring boot只添加get方法 @JsonProperty(&quot;nick&quot;) public String getOtherNick() &#123; return this.nick+&quot;other&quot;; &#125; @JsonFormat(timezone = &quot;GMT+8&quot;, pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;) Date createTime; //数据库不存在字段 @Transient Integer num; &#125; Dao 1234567@Transactionalpublic interface UserDao extends JpaRepository&lt;User, Integer&gt; &#123; //例： @Query(&quot;select u from User as u where u.id =:id&quot;) User getUser(@Param(&quot;id&quot;) Integer id);&#125; Service 123public interface User &#123; User getUser(Integer id);&#125; 1234567891011121314@Componentpublic class UserImpl implements User &#123; @Autowired UserDao userDao; @Override public User getUser(Integer id)&#123; return userDao.getUser(id); &#125;&#125; controller 12345678910111213141516171819202122232425@Controller@EnableAutoConfiguration@Api(value = &quot;xxx相关接口&quot;, description = &quot;xxx相关接口&quot;)@RequestMapping(&quot;/user&quot;)public class UserController &#123; @Autowired UserService userService; @ApiOperation(value = &quot;getUser&quot;) @RequestMapping(value = &quot;/get_user&quot;, method = RequestMethod.GET) @ResponseBody UserResponse getUser( //头取信息 //@RequestHeader(value = &quot;id&quot;) Integer id, //required默认true 不写 @RequestParam(required = true) @ApiParam(value = &quot;id&quot;) @RequestParam() Integer id ) &#123; UserResponse response = new UserResponse(); User user = userService.getUser(id); return response; &#125; &#125; response 12345678910111213public class UserResponse extends BaseResponse &#123; User user; public User getUser() &#123; return user;&#125; public void setUser(User user) &#123; this.user = user; &#125;&#125; 123public class BaseResponse extends ApiResponse &#123;&#125; 123456789101112131415161718public abstract class ApiResponse &#123; ApiStatus status; public ApiResponse()&#123; status=new ApiStatus(); status.setCode(1); status.setMsg(&quot;成功&quot;); &#125; public ApiStatus getStatus() &#123; return status; &#125; public void setStatus(ApiStatus status) &#123; this.status = status; &#125;&#125; 1234567891011121314151617181920public class ApiStatus &#123; int code; String msg; public int getCode() &#123; return code; &#125; public void setCode(int code) &#123; this.code = code; &#125; public String getMsg() &#123; return msg; &#125; public void setMsg(String msg) &#123; this.msg = msg; &#125;&#125; PageResponse 12345678910111213141516171819202122232425262728293031323334353637383940public abstract class ApiPageResponse &#123; ApiStatus status; ApiPage page; public ApiPageResponse()&#123; status=new ApiStatus(); status.setCode(1); status.setMsg(&quot;成功&quot;); page=new ApiPage(); &#125; public ApiStatus getStatus() &#123; return status; &#125; public void setStatus(ApiStatus status) &#123; this.status = status; &#125; public ApiPage getPage() &#123; return page; &#125; public void setPage(ApiPage page) &#123; this.page = page; &#125; @JsonIgnore public void setJpaPage(Page page) &#123; this.page.setPageCount(page.getTotalPages()); this.page.setPageNo(page.getNumber()+1); this.page.setPageSize(page.getSize()); this.page.setHasNext(page.hasNext()); this.page.setRsCount(page.getTotalElements()); &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748public class ApiPage &#123; public ApiPage()&#123;&#125; int pageNo; int pageSize; int pageCount; boolean hasNext; long rsCount; public int getPageNo() &#123; return pageNo; &#125; public void setPageNo(int pageNo) &#123; this.pageNo = pageNo; &#125; public int getPageSize() &#123; return pageSize; &#125; public void setPageSize(int pageSize) &#123; this.pageSize = pageSize; &#125; public boolean isHasNext() &#123; return hasNext; &#125; public void setHasNext(boolean hasNext) &#123; this.hasNext = hasNext; &#125; public int getPageCount() &#123; return pageCount; &#125; public void setPageCount(int pageCount) &#123; this.pageCount = pageCount; &#125; public long getRsCount() &#123; return rsCount; &#125; public void setRsCount(long rsCount) &#123; this.rsCount = rsCount; &#125;&#125;","categories":[],"tags":[{"name":"springboot","slug":"springboot","permalink":"http://example.com/tags/springboot/"}]},{"title":"springboot之乐观锁和悲观锁","slug":"springboot之乐观锁和悲观锁","date":"2018-10-07T13:36:56.000Z","updated":"2021-09-22T11:19:04.647Z","comments":true,"path":"2018/10/07/springboot之乐观锁和悲观锁/","link":"","permalink":"http://example.com/2018/10/07/springboot%E4%B9%8B%E4%B9%90%E8%A7%82%E9%94%81%E5%92%8C%E6%82%B2%E8%A7%82%E9%94%81/","excerpt":"","text":"springboot之乐观锁和悲观锁 原文：https://blog.csdn.net/east123321/article/details/81084158 悲观锁：比较适合写入操作比较频繁的场景，如果出现大量的读取操作，每次读取的时候都会进行加锁，这样会增加大量的锁的开销，降低了系统的吞吐量。 乐观锁：比较适合读取操作比较频繁的场景，如果出现大量的写入操作，数据发生冲突的可能性就会增大，为了保证数据的一致性，应用层需要不断的重新获取数据，这样会增加大量的查询操作，降低了系统的吞吐量。 一、乐观锁 1、乐观锁： 每次获取数据的时候，都不会担心数据被修改，所以每次获取数据的时候都不会进行加锁，由于数据没有进行加锁，期间该数据可以被其他线程进行读写操作。 2、乐观锁的原理 乐观锁，大多是基于数据版本 Version ）记录机制实现。何谓数据版本？即为数据增加一个版本标识，在基于数据库表的版本解决方案中，一般是通过为数据库表增加一个 “version” 字段来 实现。 读取出数据时，将此版本号一同读出，之后更新时，对此版本号加一。此时，将提 交数据的版本数据与数据库表对应记录的当前版本信息进行比对，如果提交的数据 版本号大于数据库表当前版本号，则予以更新，否则认为是过期数据。 3、乐观锁的实现 在实体类中添加一个int型的字段，并标注注解@Version即可，注意该字段要在主键id的后面。 User.java 123456789@Id@GeneratedValue(strategy = GenerationType.IDENTITY)private Long id; @Versionprivate int version; ....... Controller.java 12345678910111213141516171819202122232425262728@ResponseBody@RequestMapping(&quot;/test1&quot;)@RetryOnOptimisticLockingFailure//最后一步public String test() &#123; User user=userRepo.findByNumber(&quot;20180716114900229366&quot;); user.setStartTime(&quot;22232322&quot;); System.out.println(&quot;test1：&quot;+leaveApproval.getVersion()); userRepo.save(user); return &quot;success&quot;; &#125; @ResponseBody@RequestMapping(&quot;/test2&quot;)@RetryOnOptimisticLockingFailure//最后一步public String test2() &#123; User user=new User(); user=userRepo.findByNumber(&quot;20180716114900229366&quot;); leaveApproval.setEndTime(&quot;111111&quot;); try &#123; Thread.sleep(5000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; System.out.println(&quot;test2：&quot;+leaveApproval.getVersion()); userRepo.save(leaveApproval); return &quot;success&quot;; &#125; 先执行/test2，然后在5秒之内执行/test1,来模拟多个用户对同一个资源的并发操作。此时便会报错 1232018-07-17 17:03:14.254 ERROR 6816 --- [p-nio-80-exec-2] o.a.c.c.C.[.[.[/].[dispatcherServlet] : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.orm.ObjectOptimisticLockingFailureException: Batch update returned unexpected row count from update [0]; actual row count: 0; expected: 1; nested exception is org.hibernate.StaleStateException: Batch update returned unexpected row count from update [0]; actual row count: 0; expected: 1] with root cause 当test2 save时，数据库通过对比version发现 该条数据已经过期，便会终止save 操作。 接下来只要捕获并处理这个异常即可。 3、乐观锁更新失败后的解决方案 用spring AOP思想来实现处理异常并实现重试机制。以下。 首先自定义一个注解： @RetryOnOptimisticLockingFailure 123456@Target(ElementType.METHOD) @Retention(RetentionPolicy.RUNTIME)public @interface RetryOnOptimisticLockingFailure &#123; &#125; 然后 用AOP抛出异常 并进行重试。 注意：捕获异常时，网上的大部分文章都是只有OptimisticLockingFailureException这一种异常，这是不够的，可以先e.printStackTrace();看一看都有哪些异常，再进行捕获 1234567891011121314151617181920212223242526272829@Aspect@Componentpublic class RetryOnOptimisticLockingAspect &#123; private static final Logger logger= LoggerFactory.getLogger(RetryOnOptimisticLockingFailure.class); public static final int maxRetries = 5;//最多重试的次数 @Pointcut(&quot;@annotation(RetryOnOptimisticLockingFailure)&quot;)//自定义的注解作为切点 public void retryOnOptFailure() &#123;&#125; @Around(&quot;retryOnOptFailure()&quot;)//around注解可以在 目标方法 之前执行 也可以在目标方法之后 public Object doConcurrentOperation(ProceedingJoinPoint pjp) throws Throwable &#123; int numAttempts = 0; do &#123; numAttempts++; try &#123; return pjp.proceed(); &#125; catch (Exception e) &#123;//此处捕获异常时，网上的大部分文章都是只有OptimisticLockingFailureException这一种异常，这是不够的，可以先e.printStackTrace();看一看都有哪些异常，在进行捕获 if (e instanceof ObjectOptimisticLockingFailureException || e instanceof StaleStateException ||e instanceof JpaSystemException ) &#123; logger.info(&quot;更新数据---乐观锁重试中---&quot;); if (numAttempts &gt; maxRetries)&#123; logger.info(&quot;抛出异常&quot;); throw e; &#125; &#125; &#125; &#125;while (numAttempts &lt; this.maxRetries); return null; &#125;&#125; 最后在controller的对应的方法上 添加该注解即可。 二、悲观锁 1、 悲观锁 每次在读取或者加载一条记录的时候，都会锁住被加载的记录，此时当其他事务如果要更新或者是加载此条记录就会因为不能获得锁而阻塞，但是其他事务还是可以插入和删除记录的。 2、 实现 在JDBC中使用悲观锁，需要使用select for update，即 select * from A Where id=1 for update; 3、 实例代码 先写查询的Jpa 接口 UserRepo.java 123@Lock(LockModeType.PESSIMISTIC_WRITE)//这就相当与 select for update 一会执行的时候看打印的sql语句就知道了@Query(value = &quot;select u from User u where phoneNumber=?1 &quot;) public User findByPhoneNumber(String phoneNumber); 然后写调用它的service服务，为了便于观察，写两个方法 注意：1、 一定要声明事务管理@Transactional，不添加注解会报错 no transation。 2、 事务管理的注解一定要 包住 对数据库的持久化操作 。即 find–set-save。 AppControllerService.java 12345678910111213141516171819 @Transactionalpublic User findByPhoneNumber(String phoneNumber)&#123; User user = userRepo.findByPhoneNumber(phoneNumber); user.setUsername(&quot;第一步111&quot;); try &#123; Thread.sleep(12000);//线程sleep12秒 &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; userRepo.save(user); return user;&#125;@Transactionalpublic User findByPhoneNumber1(String phoneNumber)&#123; User user = userRepo.findByPhoneNumber(phoneNumber); user.setEmail(&quot;第二部222&quot;); userRepo.save(user); return user;&#125; 最后写controller UserController.java 12345678910 @GetMapping(&quot;/app/getUser1&quot;)public String transform()&#123; User user = appControllerService.findByPhoneNumber(&quot;123123&quot;); return user.toString();&#125;@GetMapping(&quot;/app/getUser2&quot;)public String transform1()&#123; User user = appControllerService.findByPhoneNumber1(&quot;123123&quot;); return user.toString();&#125; 首先执行接口 localhost/app/getUser1 该接口执行完成需要12s，在这期间 执行接口2 即localhost/app/getUser2。接口2 没有设置线程sleep。此时会发现接口2 不会立马执行完，而是要等待接口1 （12秒之后）执行完成之后 才会执行接口1。 这样 就表示设置悲观锁成功，方法2修改的数据不会被覆盖。","categories":[],"tags":[{"name":"线程","slug":"线程","permalink":"http://example.com/tags/%E7%BA%BF%E7%A8%8B/"}]},{"title":"logstash.conf","slug":"logstash.conf","date":"2018-10-05T13:30:21.000Z","updated":"2021-09-22T11:19:04.634Z","comments":true,"path":"2018/10/05/logstash.conf/","link":"","permalink":"http://example.com/2018/10/05/logstash.conf/","excerpt":"","text":"logstash.conf 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160input &#123; file &#123; #要过滤的日志 path =&gt; &quot;/var/log/nginx/log/xxx-host.access.log&quot; type =&gt; &quot;syslog&quot; #标签 tags =&gt; [&quot;tag1&quot;] codec =&gt; plain &#125; jdbc &#123; # mysql jdbc connection string to our backup databse 后面的test对应mysql中的test数据库 jdbc_connection_string =&gt; &quot;jdbc:mysql://xxxxxx:3306/testlog&quot; # the user we wish to excute our statement as jdbc_user =&gt; &quot;root&quot; jdbc_password =&gt; &quot;root&quot; # the path to our downloaded jdbc driver mysql jar jdbc_driver_library =&gt; &quot;/usr/share/logstash/lib/mysql-connector-java-5.1.44-bin.jar&quot; # the name of the driver class for mysql jdbc_driver_class =&gt; &quot;com.mysql.jdbc.Driver&quot; jdbc_paging_enabled =&gt; &quot;true&quot; jdbc_page_size =&gt; &quot;500&quot;#以下对应着要执行的sql的绝对路径。 statement_filepath =&gt; &quot;/usr/share/logstash/logstash_count/mysql_user.sql&quot;#定时字段 各字段含义（由左至右）分、时、天、月、年，全部为*默认含义为每分钟都更新（测试结果，不同的话请留言指出）#设定ES索引类型 type =&gt; &quot;jdbc&quot; tags =&gt; [&quot;userCount&quot;] schedule =&gt; &quot;* * * * *&quot; &#125; jdbc &#123; # mysql jdbc connection string to our backup databse 后面的test对应mysql中的test数据库 jdbc_connection_string =&gt; &quot;jdbc:mysql://rxxx.comm:3306/user2&quot; # the user we wish to excute our statement as jdbc_user =&gt; &quot;root&quot; jdbc_password =&gt; &quot;root&quot; # the path to our downloaded jdbc driver jdbc_driver_library =&gt; &quot;/usr/share/logstash/lib/mysql-connector-java-5.1.44-bin.jar&quot; # the name of the driver class for mysql jdbc_driver_class =&gt; &quot;com.mysql.jdbc.Driver&quot; jdbc_paging_enabled =&gt; &quot;true&quot; jdbc_page_size =&gt; &quot;500&quot;#以下对应着要执行的sql的绝对路径。 statement_filepath =&gt; &quot;/usr/share/logstash/logstash_count/mysql_user2.sql&quot;#定时字段 各字段含义（由左至右）分、时、天、月、年，全部为*默认含义为每分钟都更新（测试结果，不同的话请留言指出）#设定ES索引类型 type =&gt; &quot;jdbc&quot; tags =&gt; [&quot;user2Count&quot;] schedule =&gt; &quot;* * * * *&quot; &#125; jdbc &#123; # mysql jdbc connection string to our backup databse 后面的test对应mysql中的test数据库 jdbc_connection_string =&gt; &quot;jdbc:mysql://rxxxx.com:3306/user3&quot; # the user we wish to excute our statement as jdbc_user =&gt; &quot;root&quot; jdbc_password =&gt; &quot;root&quot; # the path to our downloaded jdbc driver jdbc_driver_library =&gt; &quot;/usr/share/logstash/lib/mysql-connector-java-5.1.44-bin.jar&quot; # the name of the driver class for mysql jdbc_driver_class =&gt; &quot;com.mysql.jdbc.Driver&quot; jdbc_paging_enabled =&gt; &quot;true&quot; jdbc_page_size =&gt; &quot;500&quot;#以下对应着要执行的sql的绝对路径。 statement_filepath =&gt; &quot;/usr/share/logstash/logstash_count/mysql_user3.sql&quot;#定时字段 各字段含义（由左至右）分、时、天、月、年，全部为*默认含义为每分钟都更新（测试结果，不同的话请留言指出）#设定ES索引类型 type =&gt; &quot;jdbc&quot; tags =&gt; [&quot;user3Count&quot;] schedule =&gt; &quot;* * * * *&quot; &#125; &#125;filter &#123;# json &#123; # source =&gt; &quot;message&quot; # remove_field =&gt; [&quot;message&quot;] # &#125;if [type] == &quot;syslog&quot; &#123;grok &#123; patterns_dir =&gt; &quot;/etc/logstash/patterns&quot; # nginx/patterns match =&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;NGINXACCESS&#125;&quot;&#125; &#125;&#125; if[type]==&quot;jdbc&quot;&#123;&#125;&#125;output &#123;# stdout &#123;#以JSON格式输出#codec =&gt; json_lines# &#125;if &quot;_jsonparsefailure&quot; not in [tags] &#123;if &quot;userCount&quot; in [tags] &#123; elasticsearch &#123;#ESIP地址与端口 hosts =&gt; &quot;10.xx.xx.xx:9200&quot;#ES索引名称（自己定义的） index =&gt; &quot;userCount&quot;#自增ID编号 user=&gt;&quot;elastic&quot; password=&gt;&quot;elastic&quot; document_type=&gt;&quot;syslog&quot; codec=&gt;json &#125;&#125;if &quot;user2Count&quot; in [tags] &#123; elasticsearch &#123;#ESIP地址与端口 hosts =&gt; &quot;10.xx.xx.xx:9200&quot;#ES索引名称（自己定义的） index =&gt; &quot;user2Count&quot;#自增ID编号 document_id =&gt; &quot;%&#123;id&#125;&quot; user=&gt;&quot;elastic&quot; password=&gt;&quot;elastic&quot;# document_type=&gt;&quot;syslog&quot;# document_id =&gt; &quot;%&#123;id&#125;&quot; codec=&gt;json &#125; &#125; if &quot;user3Count&quot; in [tags] &#123; elasticsearch &#123;#ESIP地址与端口 hosts =&gt; &quot;10.xx.xx.xx:9200&quot;#ES索引名称（自己定义的） index =&gt; &quot;user3Count&quot;#自增ID编号 document_id =&gt; &quot;%&#123;id&#125;&quot; user=&gt;&quot;elastic&quot; password=&gt;&quot;elastic&quot;# document_type=&gt;&quot;syslog&quot;# document_id =&gt; &quot;%&#123;id&#125;&quot; codec=&gt;json &#125; &#125; &#125;&#125;","categories":[],"tags":[{"name":"logstash","slug":"logstash","permalink":"http://example.com/tags/logstash/"}]},{"title":"history_","slug":"history_","date":"2018-10-05T13:30:21.000Z","updated":"2021-09-22T11:19:04.619Z","comments":true,"path":"2018/10/05/history_/","link":"","permalink":"http://example.com/2018/10/05/history_/","excerpt":"","text":".d/php56-php-fpm restart#1495091240svn up#1495091241/etc/init.d/php56-php-fpm restart#1495091742svn up#1495091745/etc/init.d/php56-php-fpm restart#1495091862svn up#1495091863/etc/init.d/php56-php-fpm restart#1495092276svn up#1495092277/etc/init.d/php56-php-fpm restart#1495092427cd /chroot/api#1495092428ls#1495092429svn up#1495092440/etc/init.d/php56-php-fpm restart#1495092519svn up#1495092522/etc/init.d/php56-php-fpm restart#1495092571svn up#1495092573/etc/init.d/php56-php-fpm restart#1495092681svn up#1495092683/etc/init.d/php56-php-fpm restart#1495093248svn up#1495093249/etc/init.d/php56-php-fpm restart#1495093313svn up#1495093315/etc/init.d/php56-php-fpm restart#1495093836svn up#1495093837/etc/init.d/php56-php-fpm restart#1495094232svn up#1495094233/etc/init.d/php56-php-fpm restart#1495094795svn up#1495094797/etc/init.d/php56-php-fpm restart#1495094824svn up#1495094825/etc/init.d/php56-php-fpm restart#1495095300svn up#1495095302/etc/init.d/php56-php-fpm restart#1495095633svn up#1495095634/etc/init.d/php56-php-fpm restart#1495097625svn up#1495106121/etc/init.d/php56-php-fpm restart#1495106375svn up#1495106388ls#1495183650cd /chroot/api#1495183654svn up#1495183669/etc/init.d/php56-php-fpm restart#1495185194df -h#1495185263df -aT#1495185290df -aT /chroot#1495185301df -h /chroot/api#1495290930tail -f /var/log/nginx/log/wish-host.access.log #1495290937tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1495522814ping open.vistastory.com#1495537845cd /chroot/api/#1495537846ks#1495537847ls#1495537848svn up#1495537867/etc/init.d/php56-php-fpm restart#1495538047svn up#1495538050/etc/init.d/php56-php-fpm restart#1495538320svn up#1495538322/etc/init.d/php56-php-fpm restart#1495538563svn up#1495538565/etc/init.d/php56-php-fpm restart#1495540888tail -f /var/log/nginx/log/wish-host.access.log #1495540894tail -f /var/log/nginx/log/wish-host.access.log |grep Index#1495541023tail -f /var/log/nginx/log/wish-host.access.log #1495541042tail -f /var/log/nginx/log/wish-host.access.log |grep v2#1495591631cd /etc/nginx/conf#1495591631ls#1495591636cd /etc/nginx/conf.d/#1495591637ls#1495591657rm *.log#1495591662rm *.log -rf#1495591666ls#1495591671vi hfbug.conf #1495591796/etc/init.d/nginx configtest#1495591799/etc/init.d/nginx reload#1495593002cd /etc/nginx/conf.d/#1495593002ls#1495622470cd /chroot/api#1495622470ls#1495622478cd ../#1495622478ls#1495622808cd#1495622811cd api#1495622812ls#1495622818cd ../#1495622818ls#1495622821cd api#1495622827cd ./api#1495622827ls#1495622830cd ./api#1495622832ls#1495622842cd /chtoot#1495622846cd /chroot#1495622846ls#1495622848cd api#1495622850ls#1495622852cd ../#1495622872ls#1495683166cd /chroot/api#1495683166ls#1495683168svn up#1495683180/etc/init.d/php56-php-fpm restart#1495691740cd /chroot/api#1495691741ls#1495691743svn up#1495691752/etc/init.d/php56-php-fpm restart#1495702311cd /etc/nginx/conf#1495702315cd /etc/nginx/conf.#1495702316cd /etc/nginx/conf.d#1495702317ls#1495702346vi wx.storybook.conf #1495702383/etc/init.d/nginx configtest#1495702386/etc/init.d/nginx reload#1495711884cd /var/log/nginx/log/#1495711884ls#1495711896tail -f fenxiao-host.access.log #1495767323crontab -e#1495767422cd /var/log/nginx/log/#1495767431ls#1495767582tail -f storybook-host.access.log#1495773050cd /etc/nginx/conf#1495773050ls#1495773054cd /etc/nginx/conf.d#1495773054ls#1495773079ps -ef|grep tomcat#1495773093/usr/local/tomcat-cas-server/bin/shutdown.sh #1495773104ps -ef|grep tomcat#1495773109ls#1495773114rm *.log -rf#1495773116ls#1495773131vi storybook.conf #1495776341cat /var/log/nginx/log/wish-host.access.log |grep 275915#1495776418ls#1495776435cat /var/log/nginx/log/wish/wish-host_2017-05-25.log |grep #1495776435123.57.117.74 - - [26/May/2017:08:52:19 +0800] &quot;GET /v2/interface.php?m=Status&amp;a=getStatusDetail&amp;statusId=275915&amp;userId=361802&amp;ver=4.6.3&amp;paintVer=3&amp;loginId=361802 HTTP/1.1&quot; 200 25 &quot;-&quot; &quot;Android_4.6.3&quot; &quot;121.31.251.70&quot; &quot;0.160&quot;&quot;-&quot;#1495776435123.57.117.66 - - [26/May/2017:10:24:28 +0800] &quot;GET /v2/interface.php?m=Status&amp;a=getStatusDetail&amp;statusId=275915&amp;userId=3911&amp;ver=4.6.3&amp;paintVer=3&amp;loginId=3911 HTTP/1.1&quot; 200 25 &quot;-&quot; &quot;Android_4.6.3&quot; &quot;124.204.41.3&quot; &quot;0.121&quot;&quot;-&quot;#1495776435123.57.117.66 - - [26/May/2017:10:24:29 +0800] &quot;GET /v2/interface.php?m=Status&amp;a=getStatusDetail&amp;statusId=275915&amp;userId=3911&amp;ver=4.6.3&amp;paintVer=3&amp;loginId=3911 HTTP/1.1&quot; 200 25 &quot;-&quot; &quot;Android_4.6.3&quot; &quot;124.204.41.3&quot; &quot;0.178&quot;&quot;-&quot;#1495776436123.57.117.66 - - [26/May/2017:10:24:31 +0800] &quot;GET /v2/interface.php?m=Status&amp;a=getStatusDetail&amp;statusId=275915&amp;userId=3911&amp;ver=4.6.3&amp;paintVer=3&amp;loginId=3911 HTTP/1.1&quot; 200 25 &quot;-&quot; &quot;Android_4.6.3&quot; &quot;124.204.41.3&quot; &quot;0.111&quot;&quot;-&quot;#1495776436123.57.117.66 - - [26/May/2017:10:24:36 +0800] &quot;GET /v2/interface.php?m=Status&amp;a=getStatusDetail&amp;statusId=275915&amp;userId=3911&amp;ver=4.6.3&amp;paintVer=3&amp;loginId=3911 HTTP/1.1&quot; 200 25 &quot;-&quot; &quot;Android_4.6.3&quot; &quot;124.204.41.3&quot; &quot;0.116&quot;&quot;-&quot;#1495776436123.57.117.66 - - [26/May/2017:10:26:25 +0800] &quot;GET /v2/interface.php?m=Status&amp;a=getStatusDetail&amp;device=iPhone%206&amp;userId=20773&amp;ver=4.6.3&amp;platform=2&amp;loginId=20773&amp;statusId=275915&amp;paintVer=3&amp;pf=iOS_iPhone_iOS%2010.0.2 HTTP/1.1&quot; 200 25 &quot;-&quot; &quot;iOS_4.6.3&quot; &quot;124.204.41.3&quot; &quot;0.122&quot;&quot;-&quot;#1495776436123.57.117.79 - - [26/May/2017:10:30:11 +0800] &quot;GET /v2/interface.php?m=Status&amp;a=getStatusDetail&amp;statusId=275915&amp;userId=4&amp;ver=4.6.3&amp;paintVer=3&amp;loginId=4 HTTP/1.1&quot; 200 25 &quot;-&quot; &quot;Android_4.6.3&quot; &quot;124.204.41.3&quot; &quot;0.120&quot;&quot;-&quot;#1495776436119.23.169.219 - - [26/May/2017:10:31:02 +0800] &quot;GET /v2/interface.php?m=Status&amp;a=getStatusDetail&amp;statusId=275915&amp;userId=389613&amp;ver=4.6.3&amp;paintVer=3&amp;loginId=389613 HTTP/1.1&quot; 200 25 &quot;-&quot; &quot;Android_4.6.3&quot; &quot;27.150.121.54&quot; &quot;0.233&quot;&quot;-&quot;#1495776436140.205.9.2 - - [26/May/2017:10:31:04 +0800] &quot;GET /v2/interface.php?m=Status&amp;a=getStatusDetail&amp;statusId=275915&amp;userId=389613&amp;ver=4.6.3&amp;paintVer=3&amp;loginId=389613 HTTP/1.1&quot; 200 25 &quot;-&quot; &quot;Android_4.6.3&quot; &quot;27.150.121.54&quot; &quot;0.655&quot;&quot;-&quot;#1495776436140.205.9.3 - - [26/May/2017:10:47:37 +0800] &quot;GET /v2/interface.php?m=Status&amp;a=getStatusDetail&amp;statusId=275915&amp;userId=365112&amp;ver=4.6.3&amp;paintVer=3&amp;loginId=365112 HTTP/1.1&quot; 200 25 &quot;-&quot; &quot;Android_4.6.3&quot; &quot;117.136.8.76&quot; &quot;0.131&quot;&quot;-&quot;#1495776436140.205.9.3 - - [26/May/2017:10:47:40 +0800] &quot;GET /v2/interface.php?m=Status&amp;a=getStatusDetail&amp;statusId=275915&amp;userId=365112&amp;ver=4.6.3&amp;paintVer=3&amp;loginId=365112 HTTP/1.1&quot; 200 25 &quot;-&quot; &quot;Android_4.6.3&quot; &quot;117.136.8.76&quot; &quot;0.111&quot;&quot;-&quot;#1495776436123.57.117.79 - - [26/May/2017:10:49:14 +0800] &quot;GET /v2/interface.php?m=Status&amp;a=getStatusDetail&amp;statusId=275915&amp;userId=4&amp;ver=4.6.3&amp;paintVer=3&amp;loginId=4 HTTP/1.1&quot; 200 25 &quot;-&quot; &quot;Android_4.6.3&quot; &quot;124.204.41.3&quot; &quot;0.122&quot;&quot;-&quot;#1495776436123.57.117.79 - - [26/May/2017:10:49:20 +0800] &quot;GET /v2/interface.php?m=Status&amp;a=getStatusDetail&amp;statusId=275915&amp;userId=4&amp;ver=4.6.3&amp;paintVer=3&amp;loginId=4 HTTP/1.1&quot; 200 25 &quot;-&quot; &quot;Android_4.6.3&quot; &quot;124.204.41.3&quot; &quot;0.119&quot;&quot;-&quot;#1495776436140.205.9.8 - - [26/May/2017:10:50:47 +0800] &quot;GET /v2/interface.php?m=Status&amp;a=getStatusDetail&amp;statusId=275915&amp;userId=395173&amp;ver=4.6.3&amp;paintVer=3&amp;loginId=395173 HTTP/1.1&quot; 200 25 &quot;-&quot; &quot;Android_4.6.3&quot; &quot;113.69.244.2&quot; &quot;0.125&quot;&quot;-&quot;#1495776436119.23.169.206 - - [26/May/2017:10:50:48 +0800] &quot;GET /v2/interface.php?m=Status&amp;a=getStatusDetail&amp;statusId=275915&amp;userId=395173&amp;ver=4.6.3&amp;paintVer=3&amp;loginId=395173 HTTP/1.1&quot; 200 25 &quot;-&quot; &quot;Android_4.6.3&quot; &quot;113.69.244.2&quot; &quot;0.118&quot;&quot;-&quot;#1495776464cat /var/log/nginx/log/wish/wish-host_2017-05-25.log |grep 275915#1495776706cat /var/log/nginx/log/215.videoapi.access.log |grep 275915#1495776717ll#1495776724cd /var/log/nginx/log/#1495776724ls#1495776725ll#1495776751tail -f 215.videoapi.access.log |grep 275915#1495765409cd /chroot/api#1495765414svn up#1495765426/etc/init.d/php56-php-fpm restart#1495766640svn up#1495766642/etc/init.d/php56-php-fpm restart#1495766857svn up#1495766859/etc/init.d/php56-php-fpm restart#1495778276svn up#1495778279/etc/init.d/php56-php-fpm restart#1495779973svn up#1495779975/etc/init.d/php56-php-fpm restart#1495780193svn up#1495780194/etc/init.d/php56-php-fpm restart#1495795677svn up#1495795678/etc/init.d/php56-php-fpm restart#1495794990cd /chroot/wishroot/v2/#1495794991ls#1495794992ll#1495795013cd ..#1495795022cd wish#1495795024ls#1495795026ll#1495795030cd rule/#1495795031ls#1495795040pwd#1495795137cd ..#1495795149cd wishroot/#1495795151cd v2/#1495795151ll#1495795190cd ..#1495795194cd wish#1495795194ls#1495795195ll#1495794758cd /var/log/nginx/log/#1495794773ls#1495794804tail -f wish-host.access.log |grep 2603#1495850943tail -f /var/log/nginx/log/wish-host.access.log #1495850964tail -f /var/log/nginx/log/storybook-host.access.log #1495852543cd /var/log/nginx/log/#1495852562tail -f wish-host.access.log |grep 2603#1495849404cd /chroot/api#1495849409svn up#1495849419/etc/init.d/php56-php-fpm restart#1495875635svn up#1495875647/etc/init.d/php56-php-fpm restart#1496222271ps -ef|grep snort#1496222276ps -ef|grep nort#1496222283ps -ef|grep gshelld#1496222290ps -ef|grep aegins#1496222298ps -ef|grep aegi#1496223132tail -f /var/log/nginx/log/wish-host.access.log #1496223137tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1496224115df#1496224180cd /chroot/wishroot/#1496224180ls#1496224189cd v2#1496224189ls#1496224195vi interface_test.php#1496224203ls#1496224210php56 interface_test.php #1496224526svn up#1496224528ls#1496224529cd Li#1496224531cd Interface/#1496224532svn up#1496224608cd ..#1496224609ls#1496224616vi interface_test.php #1496224748php56 interface_test.php #1496224758vi interface_test.php #1496224814php56 interface_test.php #1496224836vi interface_test.php #1496224936php56 interface_test.php #1496224961vi interface_test.php #1496224995php56 interface_test.php #1496225002vi interface_test.php #1496225033php56 interface_test.php #1496225039vi interface_test.php #1496225073php56 interface_test.php #1496225076vi interface_test.php #1496225171php56 interface_test.php #1496225284cd Interface/#1496225285svn up#1496225288cd ..#1496225289ls#1496225318php56 interface_test.php #1496225325vi interface_test.php #1496225379php56 interface_test.php #1496225417ls#1496225419cd Interface/#1496225420svn up#1496225424cd Lib/#1496225426svn up#1496225436cd ..#1496225443php56 interface_test.php #1496225445ls#1496225449vi interface_test.php #1496225617cd Interface/#1496225620svn up#1496225623cd ..#1496225626vi interface_test.php #1496225658php56 interface_test.php #1496225665vi interface_test.php #1496225782php56 interface_test.php #1496225793vi interface_test.php #1496201312tail -f /var/log/nginx/log/wish-host.access.log #1496201321tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1496201373tail -f /var/log/nginx/log/wish-host.access.log |grep html#1496201397tail -f /var/log/nginx/log/wish-host.access.log |grep jpg#1496225839cd /chroot/wishroot/v2#1496225839ls#1496225848php56 interface_test.php #1496297885/chroot/howToUse/clush/clush_queue.sh #1496298208tail -f /var/log/php/queueMnsv2_2017-06-01.log #1496298215tail -f /var/log/php/queueMnsv2_2017-06-01.log |grep pullPriMsgByUserId#1496301023tail -f /var/log/php/queueMnsv2_2017-06-01.log |grep pullPriMsgByUserId -A 5#1496301055cat /var/log/php/queueMnsv2_2017-06-01.log |grep pullPriMsgByUserId -A#1496301096cat /var/log/php/queueMnsv2_2017-06-01.log |grep pullPriMsgByUserId -B 5#1496301366tail -f /var/log/php/queueMnsv2_2017-06-01.log #1496301784pwd#1496301794tail -f /var/log/php/queueMnsv2_2017-06-01.log #1496300662cd /chroot/wishroot/v2#1496300662ls#1496300667vi interface_test.php #1496300766ls#1496300779php56 interface_test.php #1496301534pwd#1496301538cd ..#1496301540cd queue/#1496301540ls#1496301545rm *.log -rf#1496301588df#1496301599cd /chroot/wishroot/queue/#1496301600ls#1496301603cd Interface/#1496301603ls#1496301604cd Lib/#1496301606svn up#1496316302crontab -e#1496316351cat /chroot/howToUse/wish_paihang.sh#1496316361cd /chroot/wishroot/queue/#1496316361ls#1496316363svn up#1496316368rm *.gz -rf#1496316396/chroot/howToUse/clush/clush_queue.sh #1496316480crontab -e#1496316493/chroot/howToUse/wish_paihang.sh 4#1496305686tail -f /var/log/nginx/log/wish-host.access.log |4977#1496305692tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1496388100cd /etc/nginx/conf#1496388101ls#1496388105cd /etc/nginx/conf.d/#1496388105ls#1496388156vi storyship.conf #1496388325/etc/init.d/nginx configtest#1496388329/etc/init.d/nginx reload#1496391593df#1496391597cd /etc/nginx/conf.d/#1496391597ls#1496391625vi storyship.conf #1496391641/etc/init.d/nginx configtest#1496391644/etc/init.d/nginx reload#1496398073tail -f /var/log/nginx/log/wish-host.access.log#1496398143tail -f /var/log/nginx/log/wish-host.access.log |group#1496398151tail -f /var/log/nginx/log/wish-host.access.log |grep roup#1496492196cd /etc/nginx/conf.d/#1496492197ls#1496492273cp dongman.conf fenghuicomic.conf#1496492277vi fenghuicomic.conf #1496492366/etc/init.d/config configtest#1496492374/etc/init.d/nginx configtest#1496492380vi fenghuicomic.conf #1496492416/etc/init.d/nginx configtest#1496492421/etc/init.d/nginx reload#1496568062crontab -e#1496575062vnstat -l -i eth1#1496630152cd /etc/nginx/conf.d/#1496630152ls#1496630237vi fenghuicomic.conf #1496630610/etc/init.d/nginx configtest#1496630614/etc/init.d/nginx reload#1496631338vi fenghuicomic.conf #1496631354/etc/init.d/nginx configtest#1496631355/etc/init.d/nginx reload#1496650686tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1496661075crontab -e#1496661149curl http://100.114.150.73/adminapi/logclickcomic/createPaihang#1496668777cd /etc/nginx/conf.d/#1496668777ls#1496711970cd /etc/nginx/conf.d/#1496711970ls#1496712123cat *|grep www#1496712140ls#1496712162ls *.conf#1496712177vi fenghuicomic.conf #1496712251/etc/init.d/nginx configtest#1496712256vi fenghuicomic.conf #1496712284/etc/init.d/nginx configtest#1496712288/etc/init.d/nginx reload#1496713064ls#1496713068vi img2.ifenghui.conf #1496713214ping 215.ifenghui.com#1496713232tail -f /var/log/nginx/log/img2.ifenghui.com.access.log #1496713760crontab -e#1496715625cd /chroot/api#1496715625ls#1496715627svn up#1496715639/etc/init.d/php56-php-fpm restart#1496716202cd /var/log/nginx#1496716203ls#1496716212cd log#1496716212ls#1496716243tail fenxiao-host.access.log #1496716324tail -10 fenxiao-host.access.log #1496717943cd /chroot/api#1496717944ls#1496717947svn up#1496717956/etc/init.d/php56-php-fpm restart#1496808267cd /etc/nginx/conf.d/#1496808268ls#1496808276vi fenghuicomic.conf #1496808290tail -f /var/log/nginx/log/www.ifenghui.com-host.access.log #1496808299tail -f /var/log/nginx/log/www.ifenghui.com-host.access.log |grep 404#1496811600tail -f /var/log/nginx/log/www.ifenghui.com-host.access.log |grep 404#1496818654tail -f /var/log/nginx/log/openvista-host.access.log #1496798071crontab -l#1496799394crontab -e#1496799471crontab -l#1496823475cd /chroot/api#1496823475ls#1496823479svn up#1496823490/etc/init.d/php56-php-fpm restart#1496824235svn up#1496824237/etc/init.d/php56-php-fpm restart#1496824564svn up#1496824565/etc/init.d/php56-php-fpm restart#1496824792svn up#1496824793/etc/init.d/php56-php-fpm restart#1496824853svn up#1496824857/etc/init.d/php56-php-fpm restart#1496824957svn up#1496824959/etc/init.d/php56-php-fpm restart#1496825112svn up#1496825113/etc/init.d/php56-php-fpm restart#1496825292svn up#1496825293/etc/init.d/php56-php-fpm restart#1496825715svn up#1496825717/etc/init.d/php56-php-fpm restart#1496825935svn up#1496825937/etc/init.d/php56-php-fpm restart#1496826396svn up#1496826397/etc/init.d/php56-php-fpm restart#1496826571svn up#1496826574/etc/init.d/php56-php-fpm restart#1496826845svn up#1496826846/etc/init.d/php56-php-fpm restart#1496826982svn up#1496826984/etc/init.d/php56-php-fpm restart#1496827156svn up#1496827158/etc/init.d/php56-php-fpm restart#1496827252svn up#1496827254/etc/init.d/php56-php-fpm restart#1496848414crontab -e#1496848439curl http://100.114.150.73/adminapi/logclickcomic/createPaihang#1496848845wget http://100.114.150.73/adminapi/logclickcomic/createPaihang#1496848860crontab -e#1496848882curl http://100.114.150.73:8080/adminapi/logclickcomic/createPaihang#1496892171tail -f /var/log/nginx/log/openvista-host.access.log #1496829649vnstat -l -i eth1#1496829655vnstat -l -i eth0#1496890704docker ps#1496890710cd /etc/nginx/conf#1496890711ls#1496890714cd /etc/nginx/conf.d/#1496890714ls#1496890733vi admin.storybook.conf admin.comic.ifenghui.com.conf#1496890921ls#1496890940vi fenghuicomic.conf #1496890975/etc/init.d/nginx configtest#1496890979/etc/init.d/nginx reload#1496891575tail -f /var/log/nginx/log/openvista-host.access.log #1496892462ls#1496892468vi admin.storybook.conf #1496892481ls#1496892511pwd#1496892528vi admin.videoapi.conf #1496892565ls#1496892584cp admin.storybook.conf admin.comic.ifenghui.com.conf#1496892589vi admin.storybook.conf #1496892727/etc/init.d/nginx configtest#1496892792vi admin.storybook.conf #1496892804/etc/init.d/nginx configtest#1496892815/etc/init.d/nginx reload#1496904612cd /etc/nginx#1496904612ls#1496904618cd conf.d#1496904620ls#1496904634cat storybook.conf#1496904673ls#1496904697cat admin.storybook.conf#1496916029cd ../#1496916029ls#1496916031cd ../#1496916036cd /chroot/api#1496916036ls#1496916039svn up#1496916052/etc/init.d/php56-php-fpm restart#1496917666svn up#1496917668/etc/init.d/php56-php-fpm restart#1496918006svn up#1496918007/etc/init.d/php56-php-fpm restart#1496918108svn up#1496918109/etc/init.d/php56-php-fpm restart#1496918199svn up#1496918200/etc/init.d/php56-php-fpm restart#1496918262svn up#1496918263/etc/init.d/php56-php-fpm restart#1496918464svn up#1496918465/etc/init.d/php56-php-fpm restart#1496918591svn up#1496918593/etc/init.d/php56-php-fpm restart#1496918714svn up#1496918715/etc/init.d/php56-php-fpm restart#1496918818svn up#1496918820/etc/init.d/php56-php-fpm restart#1496919516svn up#1496919517/etc/init.d/php56-php-fpm restart#1496919675svn up#1496919676/etc/init.d/php56-php-fpm restart#1496919913svn up#1496919914/etc/init.d/php56-php-fpm restart#1496920055svn up#1496920057/etc/init.d/php56-php-fpm restart#1496973438vi /var/log/cron#1496973452cd /var/log/#1496973452ll;#1496973459ll cron*#1496973462cd cron#1496973463ls#1496973464ll#1496973510cd /var/spool/cron/#1496973511ls#1496973512ll#1496973546vi root#1496973551crontab -e#1496973252crontab -e#1496973270curl http://100.114.150.73:8080/adminapi/logclickcomic/createPaihang#1496976387crontab -e#1496976403curl http://100.114.150.73:8080/adminapi/logclickcomic/createPaihang#1496979276df#1496979299cd /var/www/html/#1496979308vi openvista#1496979313mkdir openvista#1496979315cd openvista/#1496979316pwd#1496979334vi fileauth.txt#1496979353mkdir .well-known#1496979358cd .well-known/#1496979364mkdir pki-validation#1496979371cd pki-validation/#1496979379vi fileauth.txt#1496979390cd ..#1496979392ls#1496979395pwd#1496979398cd openvista/#1496979399pwd#1496979413vi /etc/nginx/conf.d/openvista.conf #1496980351/etc/init.d/nginx configtest#1496980354/etc/init.d/nginx reload#1496972482cd /chroot/api#1496972483ls#1496972485svn up#1496972495/etc/init.d/php56-php-fpm restart#1496972605svn up#1496972606/etc/init.d/php56-php-fpm restart#1496972746svn up#1496972747/etc/init.d/php56-php-fpm restart#1496972810svn up#1496972811/etc/init.d/php56-php-fpm restart#1496972945svn up#1496972947/etc/init.d/php56-php-fpm restart#1496973071svn up#1496973072/etc/init.d/php56-php-fpm restart#1496973135svn up#1496973136/etc/init.d/php56-php-fpm restart#1496973170svn up#1496973171/etc/init.d/php56-php-fpm restart#1496973565svn up#1496973566/etc/init.d/php56-php-fpm restart#1496973651svn up#1496973652/etc/init.d/php56-php-fpm restart#1496973752svn up#1496973753/etc/init.d/php56-php-fpm restart#1496973863svn up#1496973864/etc/init.d/php56-php-fpm restart#1496973936svn up#1496973938/etc/init.d/php56-php-fpm restart#1496974126svn up#1496974128/etc/init.d/php56-php-fpm restart#1496974177svn up#1496974178/etc/init.d/php56-php-fpm restart#1496975252svn up#1496975254/etc/init.d/php56-php-fpm restart#1496975370svn up#1496975372/etc/init.d/php56-php-fpm restart#1496975422svn up#1496975423/etc/init.d/php56-php-fpm restart#1496975590svn up#1496975591/etc/init.d/php56-php-fpm restart#1496975684svn up#1496975686/etc/init.d/php56-php-fpm restart#1496976391svn up#1496976392/etc/init.d/php56-php-fpm restart#1496976496svn up#1496976499/etc/init.d/php56-php-fpm restart#1496976629svn up#1496976630/etc/init.d/php56-php-fpm restart#1496976981svn up#1496976982/etc/init.d/php56-php-fpm restart#1496977107svn up#1496977109/etc/init.d/php56-php-fpm restart#1496977199svn up#1496977200/etc/init.d/php56-php-fpm restart#1496977327svn up#1496977328/etc/init.d/php56-php-fpm restart#1496977387svn up#1496977388/etc/init.d/php56-php-fpm restart#1496977484svn up#1496977485/etc/init.d/php56-php-fpm restart#1496977551svn up#1496977552/etc/init.d/php56-php-fpm restart、#1496977555/etc/init.d/php56-php-fpm restart#1496978464/etc/init.d/php56-php-fpm restart、#1496978466svn up#1496978469/etc/init.d/php56-php-fpm restart#1496978531svn up#1496978534/etc/init.d/php56-php-fpm restart#1496978834svn up#1496978835/etc/init.d/php56-php-fpm restart#1496979171svn up#1496979172/etc/init.d/php56-php-fpm restart#1496979720svn up#1496979721/etc/init.d/php56-php-fpm restart#1496980109svn up#1496980110/etc/init.d/php56-php-fpm restart#1496986949svn up#1496986951/etc/init.d/php56-php-fpm restart#1496987133svn up#1496987135/etc/init.d/php56-php-fpm restart#1496988066svn up#1496988068/etc/init.d/php56-php-fpm restart#1496989301svn up#1496989302/etc/init.d/php56-php-fpm restart#1496989559svn up#1496989561/etc/init.d/php56-php-fpm restart#1496989647svn up#1496989648/etc/init.d/php56-php-fpm restart#1496989908svn up#1496989909/etc/init.d/php56-php-fpm restart#1496989959svn up#1496989961/etc/init.d/php56-php-fpm restart#1496990976svn up#1496990977/etc/init.d/php56-php-fpm restart#1496991181svn up#1496991183/etc/init.d/php56-php-fpm restart#1496991356svn up#1496991357/etc/init.d/php56-php-fpm restart#1496996235svn up#1496996237/etc/init.d/php56-php-fpm restart#1496996840svn up#1496996841/etc/init.d/php56-php-fpm restart#1496997455svn up#1496997457/etc/init.d/php56-php-fpm restart#1497000354svn up#1497000355/etc/init.d/php56-php-fpm restart#1497004009svn up#1497004011/etc/init.d/php56-php-fpm restart#1496740921cd /var/log/nginx/log/#1496740921ls#1496740991cd wish#1496740991ls#1496741693cd ..#1496741717ls#1496741738tail -f wish-host.access.log |grep 71710#1496741821cat wish-host.access.log |grep 71710#1496743574ls#1496744189cd ..#1496744198cd /chroot/wishroot/#1496744198ls#1496744207cd v2/#1496744211vi interface.php #1496830078tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1496971715cd /var/log/nginx/logs#1496971718cd /var/log/nginx/log#1496971719ls#1496971758cat storybook-host.access.log |grep iospayNotify#1496972570cat storybook-host.access.log |grep 17.200.2.214#1496973689tail -f storybook-host.access.log |grep otherLogin#1496973702cat storybook-host.access.log |grep otherLogin#1496978836tail -f storybook-host.access.log#1496980185cat storybook-host.access.log |grep 17.200.2.214#1496985718cat storybook-host.access.log |grep iospayNotify#1496986931tail -f storybook-host.access.log#1496987008cat storybook-host.access.log |grep iospayNotify#1496992601tail -f storybook-host.access.log |grep iospayNotify#1497011879crontab -e#1497011894df#1497011900cd /chroot/howToUse/#1497011900ls#1497011927vi fhcomic-paihang.sh#1497011933ls#1497011940chmod 777 fhcomic-paihang.sh #1497011941pwd#1497011949crontab -e#1497017680cd /var/log/nginx/log/#1497017713cat storybook-host.access.log |grep iospay#1497063945crontab -e#1497063954/chroot/howToUse/fhcomic-paihang.sh#1497114737crontab -e#1497114754cat /var/log/createpaihang.log#1497114934/chroot/howToUse/fhcomic-paihang.sh#1497170222crontab status#1497170229/etc/init.d/crond status#1497170250tail -f /var/log/createpaihang.log #1497234694cd /chroot/api#1497234695ls#1497234699svn up#1497234709/etc/init.d/php56-php-fpm restart#1497236211svn up#1497236214/etc/init.d/php56-php-fpm restart#1497236935svn up#1497236936/etc/init.d/php56-php-fpm restart#1497237104svn up#1497237105/etc/init.d/php56-php-fpm restart#1497237158svn up#1497237159/etc/init.d/php56-php-fpm restart#1497237656svn up#1497237658/etc/init.d/php56-php-fpm restart#1497237854svn up#1497237855/etc/init.d/php56-php-fpm restart#1497245865svn up#1497245867/etc/init.d/php56-php-fpm restart#1497245980svn up#1497245981/etc/init.d/php56-php-fpm restart#1497246328svn up#1497246329/etc/init.d/php56-php-fpm restart#1497246709svn up#1497246711/etc/init.d/php56-php-fpm restart#1497246937svn up#1497246938/etc/init.d/php56-php-fpm restart#1497248611svn up#1497248612/etc/init.d/php56-php-fpm restart#1497249044svn up#1497249046/etc/init.d/php56-php-fpm restart#1497249253svn up#1497249254/etc/init.d/php56-php-fpm restart#1497249295svn up#1497251246/etc/init.d/php56-php-fpm restart#1497251249svn up#1497251250/etc/init.d/php56-php-fpm restart#1497251356svn up#1497251358/etc/init.d/php56-php-fpm restart#1497251592svn up#1497251593/etc/init.d/php56-php-fpm restart#1497254836svn up#1497254837/etc/init.d/php56-php-fpm restart#1497257940svn up#1497257941/etc/init.d/php56-php-fpm restart#1497258183svn up#1497258184/etc/init.d/php56-php-fpm restart#1497325788crontab -e#1497325798cat /var/log/createpaihang.log#1497325830/chroot/howToUse/fhcomic-paihang.sh#1497326057crontab -e#1497350917cd /data/www#1497350921cd /chroot/api#1497350922ls#1497350925svn up#1497350936/etc/init.d/php56-php-fpm restart#1497352620cd /var/log/nginx#1497352620ls#1497352637docker ps#1497353174cd /chroot/api#1497353175ls#1497353177svn up#1497348581tail -f /var/log/nginx/log/fenxiao-host.access.log #1497348672tail -f /var/log/nginx/log/storybook-host.access.log#1497349650tail -f /var/log/nginx/log/fenxiao-host.access.log #1497349818docker ps#1497347003cd /etc/nginx/conf.d/#1497347003ls#1497347013vi admin.comic.ifenghui.com.conf #1497347025/etc/init.d/nginx configtest#1497347029/etc/init.d/nginx reload#1497351998tail -f /var/log/nginx/log/fenxiao-host.access.log #1497406871tail -f /var/log/nginx/log/openvista-host.access.log #1497410692tail -f /var/log/nginx/log/storybook-host.access.log|grep vip#1497410698cat -f /var/log/nginx/log/storybook-host.access.log|grep vip#1497410704cat /var/log/nginx/log/storybook-host.access.log|grep vip#1497410734cat /var/log/nginx/log/storybook-host.access.log|grep code#1497410915cat /var/log/nginx/log/storybook-host.access.log|grep 1w0kgdt7d#1497411419tail -f /var/log/nginx/log/storybook-host.access.log|gerp subscribeByCode#1497411432tail -f /var/log/nginx/log/storybook-host.access.log|grep subscribeByCode#1497411554tail -f /var/log/nginx/log/storybook-host.access.log#1497402555cd /chroot/api#1497402555ls#1497402556svn up#1497402566/etc/init.d/php56-php-fpm restart#1497403371cd /var/log#1497403371ls#1497403378cd nginx#1497403378ls#1497403382cd log#1497403383ls#1497403399tail -f fenxiao-host.access.log #1497403470docker ps#1497403829cd /chroot/api#1497403829ls#1497403831svn up#1497403844/etc/init.d/php56-php-fpm restart#1497403958ls#1497403961cd runtime#1497403961ls#1497403963cd log#1497403963ls#1497403967cd 201706#1497403968ls#1497403981tail -f 14.log #1497404067tail -10 14.log #1497406477ls#149740648214.LGO#1497406494tail -f 14.log #1497411065cd ../#1497411066ls#1497411074cd ../#1497411074ls#1497411077cd ../#1497411077ls#1497411082svn up#1497411093/etc/init.d/php56-php-fpm restart#1497421885cd /var/log#1497421886ls#1497421888cd nginx#1497421888ls#1497421891cd log#1497421892ls#1497421895cd ../#1497421895ls#1497421897cd ../#1497421899ls#1497421903cd /etc/nginx#1497421903ls#1497421910cd conf.d#1497421912ls#1497421934cat storybook.conf #1497421982ls#1497422002cat default.conf#1497422020ls#1497422023cd ../#1497422024ls#1497422029cd log#1497422029ls#1497422032cd ../#1497422033ls#1497422042cat nginx.conf #1497337383tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1497408370cd /var/log/nginx/log/#1497408370ls#1497408416tail -f storybook-host.access.log |grep subscribeByCode #1497432401crontab -e#1497432434cd /chroot/howToUse/#1497432435ll#1497432437ls#1497432451ll fh*#1497432458vi fhcomic-paihang.sh #1497432470ls#1497432477./fhcomic-paihang.sh #1497437119tail -f /var/log/nginx/log/openvista-host.access.log |grep 101001100#1497437129cat -f /var/log/nginx/log/openvista-host.access.log |grep 101001100#1497437134cat /var/log/nginx/log/openvista-host.access.log |grep 101001100#1497438281cat /var/log/nginx/log/openvista-host.access.log #1497438289tail -f /var/log/nginx/log/openvista-host.access.log #1497438366tail -f /var/log/nginx/log/openvista-host.access.log |grep 124.204.41.3#1497448545ps -ef|grep sh#1497448562ps -ef|grep wget#1497453805df#1497453806time#1497453809date#1497490098docker ps#1497490102crontab -e#1497490116vi /chroot/howToUse/fhcomic-paihang.sh#1497490126curl http://100.114.150.73:8080/adminapi/logclickcomic/createPaihang#1497492716df#1497492749tail -f /var/log/nginx/log/www.ifenghui.com-host.access.log #1497492754tail -f /var/log/nginx/log/www.ifenghui.com-host.access.log |grep 404#1497510678tail -f /var/log/nginx/log/openvista-host.access.log #1497510682tail -f /var/log/nginx/log/openvista-host.access.log |login#1497510691tail -f /var/log/nginx/log/openvista-host.access.log #1497510871tail -f /var/log/nginx/log/openvista-host.access.log |grep 124.204.41.3#1497524217tail -f /var/log/nginx/log/openvista-host.access.log #1497532175tail -f /var/log/nginx/log/openvista-host.access.log |grep 404#1497532185tail -f /var/log/nginx/log/www.ifenghui.com-host.access.log |grep 404#1497532225tail -f /var/log/nginx/log/www.ifenghui.com-host.access.log |grep 500#1497536079fd#1497536080df#1497542039docker ps#1497604327cd /var/log/nginx/log/wish-host.access.log |grep 2603#1497604337tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1497605169cd /var/log/nginx/log/wish-host.access.log |grep 2603#1497605176tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1497611195docker ps#1497611199crontab -e#1497611208/chroot/howToUse/fhcomic-paihang.sh#1497660767time#1497660768date#1497662519crontab -e#1497662535/chroot/howToUse/fhcomic-paihang.sh#1497665195cat /chroot/howToUse/fhcomic-paihang.sh#1497716684crontab -e#1497716692/chroot/howToUse/fhcomic-paihang.sh#1497850100df#1497888677date#1497888714ps -ef|grep wget#1497888757tail -f /var/lo#1497888772tail -f /var/log/createpaihang.log #1497888819crontab -e#1497888835 /chroot/howToUse/fhcomic-paihang.sh#1498031562cd /data/www#1498031562ls#1498031567cd /chroot#1498031567ls#1498031580cd api#1498031580ls#1498031583svn up#1498031593/etc/init.d/php56-php-fpm restart#1498031919svn up#1498031921/etc/init.d/php56-php-fpm restart#1498032069svn up#1498032071/etc/init.d/php56-php-fpm restart#1498032139svn up#1498032140/etc/init.d/php56-php-fpm restart#1498032225svn up#1498032226/etc/init.d/php56-php-fpm restart#1498032301svn up#1498032303/etc/init.d/php56-php-fpm restart#1498032501svn up#1498032503/etc/init.d/php56-php-fpm restart#1498035569cd /etc/nginx#1498035570ls#1498035572cd log#1498035573ls#1498035574cd log#1498035574ls#1498035580cd ../#1498035580ls#1498035586cd ../#1498035586ls#1498035596cd /var/log#1498035596ls#1498035598cd nginx#1498035599ls#1498035602cd log#1498035602ls#1498035626tail -f fenxiao-host.access.log #1498036816cd /chroot/api#1498036816ls#1498036818svn up#1498036825/etc/init.d/php56-#1498036829/etc/init.d/php56-php-fpm restart#1498037071ls#1498037073cd app#1498037074ls#1498037091cd home#1498037092ls#1498037093cd view#1498037094ls#1498037096cd user#1498037097ls#1498037100cat index.html #1498038491cd ../#1498038491ls#1498038493cd ../#1498038494ls#1498038496cd ../#1498038497ls#1498038499cd ../#1498038499ls#1498038502svn up#1498038512/etc/init.d/php56-php-fpm restart#1498098325tail -f /var/log/nginx/log/wish-host.access.log |grep 500#1498205816cd /chroot/wishroot/v2/Interface/Lib/Service/#1498205820ls#1498205825cd ..#1498205827svn up#1498205848cd /chroot/#1498205850ls#1498205862cd wishroot/queue/Interface/Lib/#1498205863svn up#1497851396tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1497862290tail -f /var/log/nginx/log/wish-host.access.log#1498183859tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1498545306date#1498545416java -version#1498545426java Date()#1498545436java System.out.print(&quot;11&quot;);#1498546805date -R#1498621834cd /var/log/nginx/log/#1498621844ls#1498622229cat storybook-host.access|grep iospayNotify &gt;&gt;storybook-host.access-ios20170628#1498622252cat storybook-host.access.log|grep iospayNotify &gt;&gt;storybook-host.access.log-ios20170628#1498625590tail -f /var/log/nginx/log/storybook-host.access.log|grep iospayNotify#1498631084cd /var/log/nginx/log/#1498631095tail -f /var/log/nginx/log/storybook-host.access.log|grep iospayNotify#1498632313crontab -e#1498632336cd /var/log/nginx/log/#1498632337ls#1498632363cat admin-storybook-host.access.log |grep cronSetNowSendUserInfo#1498633145]#1498636090cd /var/log/nginx/log/#1498636091tail -f /var/log/nginx/log/storybook-host.access.log|grep iospayNotify#1498638832cd /chroot#1498638832sl#1498638834ls#1498638841cd /api#1498638841ls#1498638846cd api/#1498638847ls#1498638851svn up#1498638861/etc/init.d/php56-php-fpm restart#1498640593crontab -e#1498640613cat /chroot/howToUse/log_cut.sh#1498640628vi /chroot/howToUse/log_cut.sh#1498640910cd /var/log/nginx/log/#1498640911ls#1498640926cd wish#1498640927ls#1498640996cd ..#1498640997ls#1498641001mkdir storybook#1498712758tail -f /var/log/nginx/log/wish-host.access.log #1498712772tail -f /var/log/nginx/log/storybook-host.access.log#1498712853cat /var/log/nginx/log/storybook-host.access.log|#1498712858cat /var/log/nginx/log/storybook-host.access.log|grep oupons#1498713098cat /var/log/nginx/log/storybook-host.access.log|grep 124.201.41.3#1498713108cat /var/log/nginx/log/storybook-host.access.log|grep 124.204.41.3#1498964188cd /var/log/nginx/log/#1498964188ls#1498964208cat www.ifenghui.com-host.access.log |grep comic_read#1498965514tail -f www.ifenghui.com-host.access.log |grep 404#1498966973cd ..#1498966977ls#1498966984cd /etc/nginx/conf.d/#1498966985ls#1498967008vi fenghuicomic.conf #1498967077ls#1498967084vi openvista.conf #1498967096ls#1498967107cat* |grep oss#1498967110cat * |grep oss#1498967165vi fenghuicomic.conf #1498967187vi img2.ifenghui.conf #1498967434tail -f www.ifenghui.com-host.access.log |grep 404#1498967447tail -f /var/log/nginx/log/www.ifenghui.com-host.access.log |grep 404#1499058706crontab -e#1499058754vi /chroot/howToUse/fhcomic-paihang.sh #1499049172cd /chroot#1499049173ls#1499049177cd apo#1499049179cd api#1499049179ls#1499049184svn up#1499049198/etc/init.d/php56-php-fpm restart#1499049290svn up#1499049291/etc/init.d/php56-php-fpm restart#1499049419svn up#1499049420/etc/init.d/php56-php-fpm restart#1499138510tail -f /var/log/nginx/log/wish-host.access.log #1499138523tail -f /var/log/nginx/log/wish-host.access.log |grep userId=4#1499138529tail -f /var/log/nginx/log/wish-host.access.log |grep loginId=4#1499132955cd /chroot/api#1499132955ls#1499132956svn up#1499132970/etc/init.d/php56-php-fpm restart#1499133441svn up#1499133508/etc/init.d/php56-php-fpm restart#1499133857svn up#1499133858/etc/init.d/php56-php-fpm restart#1499133916svn up#1499133917/etc/init.d/php56-php-fpm restart#1499134022svn up#1499134023/etc/init.d/php56-php-fpm restart#1499134103svn up#1499134105/etc/init.d/php56-php-fpm restart#1499134479svn up#1499134481/etc/init.d/php56-php-fpm restart#1499134517svn up#1499134519/etc/init.d/php56-php-fpm restart#1499134643svn up#1499134645/etc/init.d/php56-php-fpm restart#1499408645tail -f /var/log/nginx/log/wish-host.access.log #1499408651tail -f /var/log/nginx/log/wish-host.access.log |grep iOS#1499408658tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1499409727vi /etc/nginx/conf.d/storyship.conf #1499410794crontab -e#1499424038ifconfig#1499424140cd /etc/nginx/conf#1499424143cd /etc/nginx/conf.d/#1499424143ls#1499424150vi dongman.conf#1499424267tail -f /var/log/nginx/log/dongman.ifenghui.com-host.access.log #1499424279tail -f /var/log/nginx/log/dongman.ifenghui.com-host.access.log |grep pagemake#1499424414vi dongman.conf#1499424427/etc/init.d/nginx configtest#1499424430/etc/init.d/nginx restart#1499432799tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1499434961tail -f /var/log/nginx/log/wish-host.access.log #1499436254cd /usr/local/coreseek#1499436254ls#1499436258cd etc/#1499436259ls#1499436263vi sphinx.conf#1499436705ls#1499436713crontab -e#1499570523cd /var/log/nginx/log/storybook#1499570523ls#1499570532cat storybook-host_2017-07-07.log |grep 325#1499570594cat storybook-host_2017-07-07.log |grep =325#1499573359cd /var/log/nginx/log#1499573359ls#1499573365cd storybook#1499573365ls#1499573380cd ..#1499573381ls#1499573404cat storybook-host.access|grep iospayNotify#1499573419cat storybook-host.access.log|grep iospayNotify#1499649124tail -f /var/log/nginx/log/wish-host.access.log #1499649186tail -f /var/log/nginx/log/wish-host.access.log |getStatusDetail#1499649191tail -f /var/log/nginx/log/wish-host.access.log |grep getStatusDetail#1499649202tail -f /var/log/nginx/log/wish-host.access.log |grep status#1499652832tail -f /var/log/nginx/log/storybook-host.access.log#1499670427tail -f /var/log/nginx/log/storyship-host.access.log #1499406252cd /chroot/#1499406253ls#1499406258cd wishroot/#1499406259ls#1499406261cd queue/#1499406263ls#1499406270cd Interface/#1499406270ls#1499406273cd Lib/#1499406275cd ..#1499406278cd Lib/#1499406279svn up#1499413802cd /chroot/wish_beta/#1499413803ls#1499413805cd Interface/#1499413809svn up#1499413830ls#1499413861cd ..#1499413862ls#1499737844tail -f /var/log/nginx/log/storyship-host.access.log #1499751551cd /chroot/api#1499751552s#1499751555ls#1499751558svn up#1499751569/etc/init.d/php56-php-fpm restart#1499752331svn up#1499752334/etc/init.d/php56-php-fpm restart#1499752494svn up#1499752495/etc/init.d/php56-php-fpm restart#1499752646svn up#1499752648/etc/init.d/php56-php-fpm restart#1499754095svn up#1499754097/etc/init.d/php56-php-fpm restart#1499754366svn up#1499754369/etc/init.d/php56-php-fpm restart#1499754582svn up#1499754584/etc/init.d/php56-php-fpm restart#1499754753svn up#1499754756/etc/init.d/php56-php-fpm restart#1499763976cd /chroot/wishroot/#1499763977ls#1499763986rm admin_cas_server_product.war #1499763988ll#1499764007du -ah --max-depth=1 ./#1499764036cd queue/#1499764037ls#1499764044rm *.log#1499764048rm *.log -rf#1499764661ls#1499764668du -ah --max-depth=1 ./#1499764672cd ..#1499764675ls#1499764678du -ah --max-depth=1 ./#1499764697cd admin/#1499764697ls#1499764705cd ads/#1499764718cd ..#1499764718ls#1499764720cd ..#1499764720ls#1499764734mv admin admin_del#1499764735ls#1499764741cd v2/#1499764741ls#1499764759cd ..#1499764759ls#1499764761cd ..#1499764761ls#1499764763cd wish#1499764763ls#1499764827du -ah --max-depth=1 ./#1499766970cd resource_avatar/#1499766970ls#1499766973cd Public/#1499766973ls#1499766995ll#1499767005cd fe91456d841d41c8a813da66bc08ed0a/#1499767005kls#1499767006ls#1499767088wpd#1499767090pwd#1499767197ll#1499767201cd ..#1499767202cdll#1499767204cd ..#1499767204ll#1499767210cd ..#1499767226rm resource_avatar -rf#1499765601tail -f /var/log/nginx/log/wish-host.access.log |grep 4.6.7#1499767300df#1499768404cd /etc/nginx/conf#1499768404ls#1499768409cd /etc/nginx/conf.d/#1499768410ls#1499768416vi admin.storybook.conf #1499769556/etc/init.d/nginx configtest#1499769560/etc/init.d/nginx reload#1499840521tail -f /var/log/nginx/log/wish-host.access.log #1499840529tail -f /var/log/nginx/log/wish-host.access.log |grep php#1499840548tail -f /var/log/nginx/log/wish-host.access.log |grep status#1499840568tail -f /var/log/nginx/log/wish-host.access.log |grep getStatusDetail#1499840759tail -f /var/log/nginx/log/wish-host.access.log#1499840801top#1499840814free#1499840815df#1499840820cd /chroot#1499840821ls#1499840824cd wish#1499840824ls#1499840840rm resource_avatar -rf#1499842297tail -f /var/log/nginx/log/openvista-host.access.log #1499842678wpd#1499842680pwd#1499842681ls#1499842684wget http://open.vistastory.com/mobilecms/admin/login.action#1499842870tail -f /var/log/nginx/log/openvista-host.access.log #1499842891tail -f /var/log/nginx/log/openvista-host.access.log |grep mobilecms#1499842901tail -f /var/log/nginx/log/openvista-host.access.log |grep admin#1499843056tail -f /var/log/nginx/log/wish-host.access.log #1499843065tail -f /var/log/nginx/log/openvista-host.access.log #1499843093df#1499822760cd /var/nginx#1499822760ls#1499822767cd /var/nginx#1499822771cd /etc/nginx#1499822772ls#1499822778cd conf.d/#1499822779ls#1499822799cat admin.storybook.conf#1499823051ls#1499823059cat wx.storybook.conf #1499844625cd /chroot/api#1499844626ls#1499844629svn up#1499844647ls #1499844650svn up#1499844694/etc/init.d/php56-php-fpm restart#1499847064svn up#1499847069/etc/init.d/php56-php-fpm restart#1499854520ls#1499854526cd /etc/nginx#1499854526ls#1499854529cd conf#1499854529ls#1499854533cd conf.d/#1499854533ls#1499854543cat storyship.conf #1499854593ls#1499854598cat admin.storybook.conf #1499854782ls#1499854793cat default.conf#1499767171tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1499840562tail -f /var/log/nginx/log/storybook-host.access #1499840569tail -f /var/log/nginx/log/storybook-host.access.log#1499872886cat /chroot/howToUse/clush/clush_queue.sh #1499872908/chroot/howToUse/clush/clush_queue.sh #1499911309tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1499910650cd /chroot/wishroot/queue/Interface/Lib/#1499910651svn up#1499912106tail -f /var/log/nginx/log/storybook-host.access.log#1499996928tail -f /var/log/nginx/log/wish-host.access.log |grep 20797#1499997875tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1500101845cd /var/log/nginx/log/#1500101846ls#1500101853cd wish#1500101854ls#1500101869cd ..#1500101870ls#1500101879cat wish-host.access.log |grep 351372#1500101950cat wish-host.access.log |grep 357884#1500102084119.23.169.201 - - [15/Jul/2017:06:53:27 +0800] &quot;POST /v2/interface.php?m=RedPride&amp;a=showTime HTTP/1.1&quot; 200 109 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.082&quot;&quot;userId=357884&amp;loginId=357884&amp;ctime=2016-04-07+19%3A48%3A00&quot;#1500102084119.23.169.213 - - [15/Jul/2017:06:53:31 +0800] &quot;GET /v2/interface.php?m=Pay&amp;a=getUserBalance&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 200 164 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.105&quot;&quot;-&quot;#1500102084119.23.169.216 - - [15/Jul/2017:06:53:31 +0800] &quot;GET /v2/interface.php?m=User&amp;a=getPerson&amp;userId=357884&amp;visitorId=357884&amp;ver=4.5.6&amp;loginId=357884 HTTP/1.1&quot; 200 895 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.137&quot;&quot;-&quot;#1500102084119.23.169.213 - - [15/Jul/2017:06:53:31 +0800] &quot;GET /v2/interface.php?m=Pay&amp;a=getUserBalance&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 200 164 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.094&quot;&quot;-&quot;#1500102084119.23.169.202 - - [15/Jul/2017:06:53:33 +0800] &quot;GET /interfacepy?a=getNewMsgCount&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 200 574 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.030&quot;&quot;-&quot;#1500102084119.23.169.219 - - [15/Jul/2017:06:53:40 +0800] &quot;POST /v2/interface.php?m=Experience&amp;a=sign HTTP/1.1&quot; 200 73 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.318&quot;&quot;userId=357884&amp;loginId=357884&amp;ver=4.5.6&quot;#1500102084119.23.169.219 - - [15/Jul/2017:06:53:40 +0800] &quot;POST /v2/interface.php?m=Experience&amp;a=sign HTTP/1.1&quot; 200 51 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.113&quot;&quot;userId=357884&amp;loginId=357884&amp;ver=4.5.6&quot;#1500102084119.23.169.201 - - [15/Jul/2017:06:53:41 +0800] &quot;GET /v2/interface.php?m=Experience&amp;a=getCheckIn&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 200 2089 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.199&quot;&quot;-&quot;#1500102084119.23.169.201 - - [15/Jul/2017:06:53:41 +0800] &quot;GET /v2/interface.php?m=Experience&amp;a=getCheckIn&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 200 2089 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.113&quot;&quot;-&quot;#1500102084119.23.169.202 - - [15/Jul/2017:06:53:45 +0800] &quot;GET /interfacepy?a=getNewMsgCount&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.049&quot;&quot;-&quot;#1500102084119.23.169.219 - - [15/Jul/2017:06:53:45 +0800] &quot;GET /v2/interface.php?m=Experience&amp;a=getUserDailyQuest&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 200 1966 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.301&quot;&quot;-&quot;#1500102084119.23.169.209 - - [15/Jul/2017:06:53:49 +0800] &quot;POST /v2/interface.php?m=Experience&amp;a=getTaskFhCoin HTTP/1.1&quot; 200 103 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.108&quot;&quot;userId=357884&amp;ruleId=23&amp;loginId=357884&amp;ver=355533058227720&quot;#1500102084119.23.169.219 - - [15/Jul/2017:06:53:50 +0800] &quot;POST /v2/interface.php?m=Experience&amp;a=sign HTTP/1.1&quot; 200 51 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.097&quot;&quot;userId=357884&amp;loginId=357884&amp;ver=4.5.6&quot;#1500102084119.23.169.201 - - [15/Jul/2017:06:53:51 +0800] &quot;GET /v2/interface.php?m=Experience&amp;a=getCheckIn&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 200 2089 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.102&quot;&quot;-&quot;#1500102084119.23.169.213 - - [15/Jul/2017:06:53:53 +0800] &quot;GET /v2/interface.php?m=Pay&amp;a=getUserBalance&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 200 164 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.133&quot;&quot;-&quot;#1500102084119.23.169.201 - - [15/Jul/2017:06:53:53 +0800] &quot;POST /v2/interface.php?m=RedPride&amp;a=showTime HTTP/1.1&quot; 200 109 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.169&quot;&quot;userId=357884&amp;loginId=357884&amp;ctime=2016-04-07+19%3A48%3A00&quot;#1500102084119.23.169.202 - - [15/Jul/2017:06:53:56 +0800] &quot;GET /interfacepy?a=getNewMsgCount&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.010&quot;&quot;-&quot;#1500102084119.23.169.215 - - [15/Jul/2017:06:53:56 +0800] &quot;GET /v2/interface.php?m=Experience&amp;a=getUserHeatValue&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 200 2748 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.105&quot;&quot;-&quot;#1500102084119.23.169.213 - - [15/Jul/2017:06:54:02 +0800] &quot;GET /v2/interface.php?m=Pay&amp;a=getUserBalance&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 200 164 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.089&quot;&quot;-&quot;#1500102084119.23.169.201 - - [15/Jul/2017:06:54:02 +0800] &quot;POST /v2/interface.php?m=RedPride&amp;a=showTime HTTP/1.1&quot; 200 109 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.115&quot;&quot;userId=357884&amp;loginId=357884&amp;ctime=2016-04-07+19%3A48%3A00&quot;#1500102084119.23.169.202 - - [15/Jul/2017:06:54:07 +0800] &quot;GET /interfacepy?a=getNewMsgCount&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.009&quot;&quot;-&quot;#1500102084119.23.169.202 - - [15/Jul/2017:06:54:09 +0800] &quot;POST /v2/interface.php?m=Message&amp;a=delNewMsgCount HTTP/1.1&quot; 200 39 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.093&quot;&quot;userId=357884&amp;loginId=357884&amp;msgType=11&quot;#1500102084119.23.169.218 - - [15/Jul/2017:06:54:10 +0800] &quot;GET /v2/interface.php?m=Message&amp;a=getMessageByType&amp;userId=357884&amp;messageType=19&amp;pageNo=1&amp;pageSize=10&amp;ver=4.5.6&amp;loginId=357884 HTTP/1.1&quot; 200 36766 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.645&quot;&quot;-&quot;#1500102084119.23.169.202 - - [15/Jul/2017:06:54:17 +0800] &quot;GET /interfacepy?a=getNewMsgCount&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 200 574 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.020&quot;&quot;-&quot;#1500102084119.23.169.202 - - [15/Jul/2017:06:54:19 +0800] &quot;GET /v2/interface.php?m=Status&amp;a=getStatusDetail&amp;statusId=350027&amp;userId=357884&amp;ver=4.5.6&amp;paintVer=3&amp;loginId=357884 HTTP/1.1&quot; 200 2422 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.176&quot;&quot;-&quot;#1500102085119.23.169.219 - - [15/Jul/2017:06:54:22 +0800] &quot;GET /v2/interface.php?m=Status&amp;a=getHotRecommend&amp;userId=357884&amp;statusId=350027&amp;loginId=357884 HTTP/1.1&quot; 200 12132 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.459&quot;&quot;-&quot;#1500102085119.23.169.212 - - [15/Jul/2017:06:54:22 +0800] &quot;GET /v2/interface.php?m=CommentOther&amp;a=getOtherComments&amp;visitorId=357884&amp;targetType=6&amp;targetValue=350027&amp;pageNo=1&amp;pageSize=20&amp;loginId=357884 HTTP/1.1&quot; 200 1732 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.549&quot;&quot;-&quot;#1500102085119.23.169.203 - - [15/Jul/2017:06:54:22 +0800] &quot;GET /v2/interface.php?m=LikeOther&amp;a=getLikeOtherUser&amp;targetType=6&amp;targetValue=350027&amp;userId=357884&amp;pageNo=1&amp;pageSize=20&amp;loginId=357884 HTTP/1.1&quot; 200 5263 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.433&quot;&quot;-&quot;#1500102085119.23.169.220 - - [15/Jul/2017:06:54:22 +0800] &quot;POST /v2/interface.php?m=Index&amp;a=eventAnalytics HTTP/1.1&quot; 200 39 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.530&quot;&quot;loginId=357884&amp;eventType=16&amp;eventContent=964764&amp;deviceToken=&amp;ver=4.5.6&quot;#1500102085119.23.169.202 - - [15/Jul/2017:06:54:27 +0800] &quot;GET /interfacepy?a=getNewMsgCount&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.010&quot;&quot;-&quot;#1500102085119.23.169.202 - - [15/Jul/2017:06:54:38 +0800] &quot;GET /interfacepy?a=getNewMsgCount&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.010&quot;&quot;-&quot;#1500102085119.23.169.220 - - [15/Jul/2017:06:54:41 +0800] &quot;GET /v2/interface.php?m=Status&amp;a=getStatusDetail&amp;statusId=350160&amp;userId=357884&amp;ver=4.5.6&amp;paintVer=3&amp;loginId=357884 HTTP/1.1&quot; 200 2311 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.195&quot;&quot;-&quot;#1500102085119.23.169.202 - - [15/Jul/2017:06:54:42 +0800] &quot;GET /v2/interface.php?m=Status&amp;a=getHotRecommend&amp;userId=357884&amp;statusId=350160&amp;loginId=357884 HTTP/1.1&quot; 200 12132 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.208&quot;&quot;-&quot;#1500102085119.23.169.214 - - [15/Jul/2017:06:54:43 +0800] &quot;GET /v2/interface.php?m=CommentOther&amp;a=getOtherComments&amp;visitorId=357884&amp;targetType=6&amp;targetValue=350160&amp;pageNo=1&amp;pageSize=20&amp;loginId=357884 HTTP/1.1&quot; 200 1489 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.266&quot;&quot;-&quot;#1500102085119.23.169.220 - - [15/Jul/2017:06:54:43 +0800] &quot;POST /v2/interface.php?m=Index&amp;a=eventAnalytics HTTP/1.1&quot; 200 39 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.362&quot;&quot;loginId=357884&amp;eventType=16&amp;eventContent=964875&amp;deviceToken=&amp;ver=4.5.6&quot;#1500102085119.23.169.205 - - [15/Jul/2017:06:54:43 +0800] &quot;GET /v2/interface.php?m=LikeOther&amp;a=getLikeOtherUser&amp;targetType=6&amp;targetValue=350160&amp;userId=357884&amp;pageNo=1&amp;pageSize=20&amp;loginId=357884 HTTP/1.1&quot; 200 7775 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.703&quot;&quot;-&quot;#1500102085119.23.169.202 - - [15/Jul/2017:06:54:49 +0800] &quot;GET /interfacepy?a=getNewMsgCount&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.010&quot;&quot;-&quot;#1500102085119.23.169.202 - - [15/Jul/2017:06:55:00 +0800] &quot;GET /interfacepy?a=getNewMsgCount&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.010&quot;&quot;-&quot;#1500102085119.23.169.214 - - [15/Jul/2017:06:55:06 +0800] &quot;POST /v2/interface.php?m=CommentOther&amp;a=addCommentOther HTTP/1.1&quot; 200 55 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.242&quot;&quot;userId=357884&amp;loginId=357884&amp;repliedId=367670&amp;targetValue=350160&amp;content=%E3%80%82%E4%BD%A0%E5%A4%9F%E4%BA%86&amp;targetType=6&amp;ver=4.5.6&quot;#1500102085119.23.169.209 - - [15/Jul/2017:06:55:07 +0800] &quot;POST /v2/interface.php?m=Experience&amp;a=addTaskValue HTTP/1.1&quot; 200 113 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.114&quot;&quot;userId=357884&amp;ruleId=13&amp;loginId=357884&quot;#1500102085119.23.169.202 - - [15/Jul/2017:06:55:11 +0800] &quot;GET /interfacepy?a=getNewMsgCount&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.010&quot;&quot;-&quot;#1500102085119.23.169.212 - - [15/Jul/2017:06:55:20 +0800] &quot;GET /v2/interface.php?m=Status&amp;a=getStatusDetail&amp;statusId=348581&amp;userId=357884&amp;ver=4.5.6&amp;paintVer=3&amp;loginId=357884 HTTP/1.1&quot; 200 2602 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.199&quot;&quot;-&quot;#1500102085119.23.169.202 - - [15/Jul/2017:06:55:21 +0800] &quot;GET /v2/interface.php?m=Status&amp;a=getHotRecommend&amp;userId=357884&amp;statusId=348581&amp;loginId=357884 HTTP/1.1&quot; 200 12132 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.198&quot;&quot;-&quot;#1500102085119.23.169.212 - - [15/Jul/2017:06:55:21 +0800] &quot;GET /v2/interface.php?m=CommentOther&amp;a=getOtherComments&amp;visitorId=357884&amp;targetType=6&amp;targetValue=348581&amp;pageNo=1&amp;pageSize=20&amp;loginId=357884 HTTP/1.1&quot; 200 16307 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.515&quot;&quot;-&quot;#1500102085119.23.169.212 - - [15/Jul/2017:06:55:22 +0800] &quot;GET /v2/interface.php?m=LikeOther&amp;a=getLikeOtherUser&amp;targetType=6&amp;targetValue=348581&amp;userId=357884&amp;pageNo=1&amp;pageSize=20&amp;loginId=357884 HTTP/1.1&quot; 200 8670 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.867&quot;&quot;-&quot;#1500102085119.23.169.220 - - [15/Jul/2017:06:55:22 +0800] &quot;POST /v2/interface.php?m=Index&amp;a=eventAnalytics HTTP/1.1&quot; 200 39 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.416&quot;&quot;loginId=357884&amp;eventType=16&amp;eventContent=963573&amp;deviceToken=&amp;ver=4.5.6&quot;#1500102085119.23.169.202 - - [15/Jul/2017:06:55:22 +0800] &quot;GET /interfacepy?a=getNewMsgCount&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.011&quot;&quot;-&quot;#1500102085119.23.169.202 - - [15/Jul/2017:06:55:33 +0800] &quot;GET /interfacepy?a=getNewMsgCount&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.012&quot;&quot;-&quot;#1500102085119.23.169.214 - - [15/Jul/2017:06:55:39 +0800] &quot;POST /v2/interface.php?m=CommentOther&amp;a=addCommentOther HTTP/1.1&quot; 200 55 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.231&quot;&quot;userId=357884&amp;loginId=357884&amp;repliedId=430115&amp;targetValue=348581&amp;content=%E8%B0%A2%E8%B0%A2&amp;targetType=6&amp;ver=4.5.6&quot;#1500102085119.23.169.209 - - [15/Jul/2017:06:55:40 +0800] &quot;POST /v2/interface.php?m=Experience&amp;a=addTaskValue HTTP/1.1&quot; 200 113 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.117&quot;&quot;userId=357884&amp;ruleId=13&amp;loginId=357884&quot;#1500102085119.23.169.202 - - [15/Jul/2017:06:55:43 +0800] &quot;GET /interfacepy?a=getNewMsgCount&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.011&quot;&quot;-&quot;#1500102085119.23.169.202 - - [15/Jul/2017:06:55:54 +0800] &quot;GET /interfacepy?a=getNewMsgCount&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.010&quot;&quot;-&quot;#1500102085119.23.169.214 - - [15/Jul/2017:06:56:02 +0800] &quot;POST /v2/interface.php?m=CommentOther&amp;a=addCommentOther HTTP/1.1&quot; 200 55 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.344&quot;&quot;userId=357884&amp;loginId=357884&amp;repliedId=398774&amp;targetValue=348581&amp;content=%E5%89%8D%E4%BA%94%E5%8D%95%E5%85%8D%EF%BC%8C%E4%BD%A0%E5%88%9A%E5%A5%BD%E7%AC%AC%E4%BA%94&amp;targetType=6&amp;ver=4.5.6&quot;#1500102085119.23.169.209 - - [15/Jul/2017:06:56:03 +0800] &quot;POST /v2/interface.php?m=Experience&amp;a=addTaskValue HTTP/1.1&quot; 200 113 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.117&quot;&quot;userId=357884&amp;ruleId=13&amp;loginId=357884&quot;#1500102085119.23.169.202 - - [15/Jul/2017:06:56:04 +0800] &quot;GET /interfacepy?a=getNewMsgCount&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.010&quot;&quot;-&quot;#1500102085119.23.169.208 - - [15/Jul/2017:06:56:06 +0800] &quot;GET /v2/interface.php?m=Status&amp;a=getStatusDetail&amp;statusId=344068&amp;userId=357884&amp;ver=4.5.6&amp;paintVer=3&amp;loginId=357884 HTTP/1.1&quot; 200 2424 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.231&quot;&quot;-&quot;#1500102085119.23.169.218 - - [15/Jul/2017:06:56:08 +0800] &quot;GET /v2/interface.php?m=Status&amp;a=getHotRecommend&amp;userId=357884&amp;statusId=344068&amp;loginId=357884 HTTP/1.1&quot; 200 12132 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.392&quot;&quot;-&quot;#1500102085119.23.169.220 - - [15/Jul/2017:06:56:09 +0800] &quot;POST /v2/interface.php?m=Index&amp;a=eventAnalytics HTTP/1.1&quot; 200 39 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.400&quot;&quot;loginId=357884&amp;eventType=16&amp;eventContent=960042&amp;deviceToken=&amp;ver=4.5.6&quot;#1500102085119.23.169.216 - - [15/Jul/2017:06:56:09 +0800] &quot;GET /v2/interface.php?m=CommentOther&amp;a=getOtherComments&amp;visitorId=357884&amp;targetType=6&amp;targetValue=344068&amp;pageNo=1&amp;pageSize=20&amp;loginId=357884 HTTP/1.1&quot; 200 4463 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.675&quot;&quot;-&quot;#1500102085119.23.169.216 - - [15/Jul/2017:06:56:09 +0800] &quot;GET /v2/interface.php?m=LikeOther&amp;a=getLikeOtherUser&amp;targetType=6&amp;targetValue=344068&amp;userId=357884&amp;pageNo=1&amp;pageSize=20&amp;loginId=357884 HTTP/1.1&quot; 200 8627 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.988&quot;&quot;-&quot;#1500102085119.23.169.202 - - [15/Jul/2017:06:56:15 +0800] &quot;GET /interfacepy?a=getNewMsgCount&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.010&quot;&quot;-&quot;#1500102085119.23.169.202 - - [15/Jul/2017:06:56:26 +0800] &quot;GET /interfacepy?a=getNewMsgCount&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.021&quot;&quot;-&quot;#1500102085119.23.169.202 - - [15/Jul/2017:06:56:36 +0800] &quot;GET /interfacepy?a=getNewMsgCount&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.008&quot;&quot;-&quot;#1500102086119.23.169.202 - - [15/Jul/2017:06:56:47 +0800] &quot;GET /interfacepy?a=getNewMsgCount&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.009&quot;&quot;-&quot;#1500102086119.23.169.202 - - [15/Jul/2017:06:56:57 +0800] &quot;GET /interfacepy?a=getNewMsgCount&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.011&quot;&quot;-&quot;#1500102086119.23.169.214 - - [15/Jul/2017:06:57:01 +0800] &quot;POST /v2/interface.php?m=CommentOther&amp;a=addCommentOther HTTP/1.1&quot; 200 55 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.253&quot;&quot;userId=357884&amp;loginId=357884&amp;repliedId=417895&amp;targetValue=344068&amp;content=%E5%92%A6%E3%80%82%E6%88%91%E4%B9%9F%E4%B8%8D%E7%9F%A5%E9%81%93%E3%80%82%E9%A2%9D%E5%88%AB%E4%BA%BA%E5%8F%91%E7%9A%84%E5%9B%BE%EF%BC%8C%E4%B8%8D%E8%BF%87%E5%8F%91%E5%9E%8B%E8%B6%85%E5%83%8F%E5%B0%8F%E4%B9%94&amp;targetType=6&amp;ver=4.5.6&quot;#1500102086119.23.169.209 - - [15/Jul/2017:06:57:02 +0800] &quot;POST /v2/interface.php?m=Experience&amp;a=addTaskValue HTTP/1.1&quot; 200 113 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.129&quot;&quot;userId=357884&amp;ruleId=13&amp;loginId=357884&quot;#1500102086119.23.169.201 - - [15/Jul/2017:06:57:06 +0800] &quot;POST /v2/interface.php?m=RedPride&amp;a=showTime HTTP/1.1&quot; 200 109 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.045&quot;&quot;userId=357884&amp;loginId=357884&amp;ctime=2016-04-07+19%3A48%3A00&quot;#1500102086119.23.169.213 - - [15/Jul/2017:06:57:06 +0800] &quot;GET /v2/interface.php?m=Pay&amp;a=getUserBalance&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 200 164 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.118&quot;&quot;-&quot;#1500102086119.23.169.202 - - [15/Jul/2017:06:57:07 +0800] &quot;POST /v2/interface.php?m=Message&amp;a=delNewMsgCount HTTP/1.1&quot; 200 39 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.098&quot;&quot;userId=357884&amp;loginId=357884&amp;msgType=3&quot;#1500102086119.23.169.204 - - [15/Jul/2017:06:57:08 +0800] &quot;GET /v2/interface.php?m=Message&amp;a=getMessageByType&amp;userId=357884&amp;messageType=2&amp;pageNo=1&amp;pageSize=10&amp;ver=4.5.6&amp;loginId=357884 HTTP/1.1&quot; 200 9357 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.276&quot;&quot;-&quot;#1500102086119.23.169.202 - - [15/Jul/2017:06:57:08 +0800] &quot;GET /interfacepy?a=getNewMsgCount&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 200 574 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.020&quot;&quot;-&quot;#1500102086119.23.169.213 - - [15/Jul/2017:06:57:12 +0800] &quot;GET /v2/interface.php?m=Pay&amp;a=getUserBalance&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 200 164 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.085&quot;&quot;-&quot;#1500102086119.23.169.201 - - [15/Jul/2017:06:57:12 +0800] &quot;POST /v2/interface.php?m=RedPride&amp;a=showTime HTTP/1.1&quot; 200 109 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.069&quot;&quot;userId=357884&amp;loginId=357884&amp;ctime=2016-04-07+19%3A48%3A00&quot;#1500102086119.23.169.202 - - [15/Jul/2017:06:57:13 +0800] &quot;POST /v2/interface.php?m=Message&amp;a=delNewMsgCount HTTP/1.1&quot; 200 39 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.107&quot;&quot;userId=357884&amp;loginId=357884&amp;msgType=12&quot;#1500102086119.23.169.204 - - [15/Jul/2017:06:57:15 +0800] &quot;GET /v2/interface.php?m=Message&amp;a=getMessageByType&amp;userId=357884&amp;messageType=18&amp;pageNo=1&amp;pageSize=10&amp;ver=4.5.6&amp;loginId=357884 HTTP/1.1&quot; 200 34050 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.549&quot;&quot;-&quot;#1500102086119.23.169.202 - - [15/Jul/2017:06:57:19 +0800] &quot;GET /interfacepy?a=getNewMsgCount&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 200 573 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.024&quot;&quot;-&quot;#1500102086119.23.169.213 - - [15/Jul/2017:06:57:21 +0800] &quot;GET /v2/interface.php?m=Pay&amp;a=getUserBalance&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 200 164 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.108&quot;&quot;-&quot;#1500102086119.23.169.201 - - [15/Jul/2017:06:57:21 +0800] &quot;POST /v2/interface.php?m=RedPride&amp;a=showTime HTTP/1.1&quot; 200 109 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.062&quot;&quot;userId=357884&amp;loginId=357884&amp;ctime=2016-04-07+19%3A48%3A00&quot;#1500102086119.23.169.202 - - [15/Jul/2017:06:57:23 +0800] &quot;POST /v2/interface.php?m=Message&amp;a=delNewMsgCount HTTP/1.1&quot; 200 39 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.105&quot;&quot;userId=357884&amp;loginId=357884&amp;msgType=10&quot;#1500102086119.23.169.212 - - [15/Jul/2017:06:57:24 +0800] &quot;GET /v2/interface.php?m=Message&amp;a=getMessageByType&amp;userId=357884&amp;messageType=21&amp;pageNo=1&amp;pageSize=10&amp;ver=4.5.6&amp;loginId=357884 HTTP/1.1&quot; 200 34160 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.684&quot;&quot;-&quot;#1500102086119.23.169.201 - - [15/Jul/2017:06:57:27 +0800] &quot;GET /v2/interface.php?m=Status&amp;a=getStatusDetail&amp;statusId=351162&amp;userId=357884&amp;ver=4.5.6&amp;paintVer=3&amp;loginId=357884 HTTP/1.1&quot; 200 2561 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.197&quot;&quot;-&quot;#1500102086119.23.169.219 - - [15/Jul/2017:06:57:30 +0800] &quot;GET /v2/interface.php?m=LikeOther&amp;a=getLikeOtherUser&amp;targetType=6&amp;targetValue=351162&amp;userId=357884&amp;pageNo=1&amp;pageSize=20&amp;loginId=357884 HTTP/1.1&quot; 200 8675 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.374&quot;&quot;-&quot;#1500102086119.23.169.203 - - [15/Jul/2017:06:57:30 +0800] &quot;GET /v2/interface.php?m=Status&amp;a=getHotRecommend&amp;userId=357884&amp;statusId=351162&amp;loginId=357884 HTTP/1.1&quot; 200 12132 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.666&quot;&quot;-&quot;#1500102086119.23.169.202 - - [15/Jul/2017:06:57:30 +0800] &quot;GET /interfacepy?a=getNewMsgCount&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 200 573 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.022&quot;&quot;-&quot;#1500102086119.23.169.213 - - [15/Jul/2017:06:57:30 +0800] &quot;GET /v2/interface.php?m=CommentOther&amp;a=getOtherComments&amp;visitorId=357884&amp;targetType=6&amp;targetValue=351162&amp;pageNo=1&amp;pageSize=20&amp;loginId=357884 HTTP/1.1&quot; 200 18645 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;1.034&quot;&quot;-&quot;#1500102086119.23.169.220 - - [15/Jul/2017:06:57:30 +0800] &quot;POST /v2/interface.php?m=Index&amp;a=eventAnalytics HTTP/1.1&quot; 200 39 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.409&quot;&quot;loginId=357884&amp;eventType=16&amp;eventContent=965770&amp;deviceToken=&amp;ver=4.5.6&quot;#1500102086119.23.169.214 - - [15/Jul/2017:06:57:35 +0800] &quot;POST /v2/interface.php?m=LikeOther&amp;a=likeOther HTTP/1.1&quot; 200 39 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.122&quot;&quot;userId=357884&amp;loginId=357884&amp;targetValue=351162&amp;targetType=6&quot;#1500102086119.23.169.209 - - [15/Jul/2017:06:57:36 +0800] &quot;POST /v2/interface.php?m=Experience&amp;a=addTaskValue HTTP/1.1&quot; 200 113 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.122&quot;&quot;userId=357884&amp;ruleId=12&amp;loginId=357884&quot;#1500102086119.23.169.204 - - [15/Jul/2017:06:57:37 +0800] &quot;POST /v2/interface.php?m=Collect&amp;a=newCollect HTTP/1.1&quot; 200 39 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.185&quot;&quot;userId=357884&amp;loginId=357884&amp;targetValue=351162&amp;targetType=4&quot;#1500102086119.23.169.202 - - [15/Jul/2017:06:57:41 +0800] &quot;GET /interfacepy?a=getNewMsgCount&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.010&quot;&quot;-&quot;#1500102086119.23.169.202 - - [15/Jul/2017:06:57:52 +0800] &quot;GET /interfacepy?a=getNewMsgCount&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.010&quot;&quot;-&quot;#1500102086119.23.169.214 - - [15/Jul/2017:06:57:53 +0800] &quot;POST /v2/interface.php?m=CommentOther&amp;a=addCommentOther HTTP/1.1&quot; 200 55 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.235&quot;&quot;userId=357884&amp;loginId=357884&amp;targetValue=351162&amp;content=%E4%BD%A0%E3%80%82%E6%80%8E%E4%B9%88%E5%8F%AF%E4%BB%A5%E8%BF%99%E4%B9%88%E6%A3%92&amp;targetType=6&amp;ver=4.5.6&quot;#1500102086119.23.169.209 - - [15/Jul/2017:06:57:54 +0800] &quot;POST /v2/interface.php?m=Experience&amp;a=addTaskValue HTTP/1.1&quot; 200 113 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.118&quot;&quot;userId=357884&amp;ruleId=13&amp;loginId=357884&quot;#1500102086119.23.169.215 - - [15/Jul/2017:06:57:58 +0800] &quot;GET /v2/interface.php?m=User&amp;a=getPerson&amp;userId=356183&amp;visitorId=357884&amp;ver=4.5.6&amp;loginId=357884 HTTP/1.1&quot; 200 886 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.108&quot;&quot;-&quot;#1500102086119.23.169.213 - - [15/Jul/2017:06:57:58 +0800] &quot;GET /v2/interface.php?m=Pay&amp;a=getUserBalance&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 200 164 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.115&quot;&quot;-&quot;#1500102086119.23.169.210 - - [15/Jul/2017:06:57:58 +0800] &quot;GET /v2/interface.php?m=Experience&amp;a=getUserHeat&amp;loginId=357884&amp;userId=356183 HTTP/1.1&quot; 200 47 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.151&quot;&quot;-&quot;#1500102086119.23.169.213 - - [15/Jul/2017:06:57:58 +0800] &quot;GET /v2/interface.php?m=Pay&amp;a=getUserBalance&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 200 164 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.088&quot;&quot;-&quot;#1500102086119.23.169.202 - - [15/Jul/2017:06:58:03 +0800] &quot;GET /interfacepy?a=getNewMsgCount&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.011&quot;&quot;-&quot;#1500102086119.23.169.205 - - [15/Jul/2017:06:58:12 +0800] &quot;GET /v2/interface.php?m=Status&amp;a=getUserStatuss&amp;userId=356183&amp;visitorId=357884&amp;targetType=&amp;pageNo=1&amp;pageSize=10&amp;loginId=357884 HTTP/1.1&quot; 200 27220 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.535&quot;&quot;-&quot;#1500102086119.23.169.202 - - [15/Jul/2017:06:58:13 +0800] &quot;GET /interfacepy?a=getNewMsgCount&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.011&quot;&quot;-&quot;#1500102086119.23.169.214 - - [15/Jul/2017:06:58:23 +0800] &quot;POST /v2/interface.php?m=LikeOther&amp;a=likeOther HTTP/1.1&quot; 200 39 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.220&quot;&quot;userId=357884&amp;loginId=357884&amp;targetValue=348067&amp;targetType=6&quot;#1500102086119.23.169.209 - - [15/Jul/2017:06:58:23 +0800] &quot;POST /v2/interface.php?m=Experience&amp;a=addTaskValue HTTP/1.1&quot; 200 113 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.108&quot;&quot;userId=357884&amp;ruleId=12&amp;loginId=357884&quot;#1500102086119.23.169.202 - - [15/Jul/2017:06:58:24 +0800] &quot;GET /interfacepy?a=getNewMsgCount&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.011&quot;&quot;-&quot;#1500102086119.23.169.214 - - [15/Jul/2017:06:58:26 +0800] &quot;POST /v2/interface.php?m=LikeOther&amp;a=likeOther HTTP/1.1&quot; 200 39 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.125&quot;&quot;userId=357884&amp;loginId=357884&amp;targetValue=340426&amp;targetType=6&quot;#1500102086119.23.169.209 - - [15/Jul/2017:06:58:26 +0800] &quot;POST /v2/interface.php?m=Experience&amp;a=addTaskValue HTTP/1.1&quot; 200 113 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.128&quot;&quot;userId=357884&amp;ruleId=12&amp;loginId=357884&quot;#1500102086119.23.169.202 - - [15/Jul/2017:06:58:34 +0800] &quot;GET /interfacepy?a=getNewMsgCount&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.011&quot;&quot;-&quot;#1500102086119.23.169.214 - - [15/Jul/2017:06:58:39 +0800] &quot;POST /v2/interface.php?m=LikeOther&amp;a=likeOther HTTP/1.1&quot; 200 39 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.194&quot;&quot;userId=357884&amp;loginId=357884&amp;targetValue=314380&amp;targetType=6&quot;#1500102086119.23.169.209 - - [15/Jul/2017:06:58:39 +0800] &quot;POST /v2/interface.php?m=Experience&amp;a=addTaskValue HTTP/1.1&quot; 200 161 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.112&quot;&quot;userId=357884&amp;ruleId=12&amp;loginId=357884&quot;#1500102086119.23.169.214 - - [15/Jul/2017:06:58:45 +0800] &quot;GET /v2/interface.php?m=Status&amp;a=getUserStatuss&amp;userId=356183&amp;visitorId=357884&amp;targetType=&amp;pageNo=2&amp;pageSize=10&amp;loginId=357884 HTTP/1.1&quot; 200 23989 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.656&quot;&quot;-&quot;#1500102086119.23.169.202 - - [15/Jul/2017:06:58:45 +0800] &quot;GET /interfacepy?a=getNewMsgCount&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.012&quot;&quot;-&quot;#1500102086119.23.169.202 - - [15/Jul/2017:06:58:55 +0800] &quot;GET /interfacepy?a=getNewMsgCount&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.010&quot;&quot;-&quot;#1500102086119.23.169.202 - - [15/Jul/2017:06:59:06 +0800] &quot;GET /interfacepy?a=getNewMsgCount&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.010&quot;&quot;-&quot;#1500102086119.23.169.214 - - [15/Jul/2017:06:59:09 +0800] &quot;POST /v2/interface.php?m=LikeOther&amp;a=likeOther HTTP/1.1&quot; 200 39 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.133&quot;&quot;userId=357884&amp;loginId=357884&amp;targetValue=291494&amp;targetType=6&quot;#1500102086119.23.169.209 - - [15/Jul/2017:06:59:10 +0800] &quot;POST /v2/interface.php?m=Experience&amp;a=addTaskValue HTTP/1.1&quot; 200 161 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.102&quot;&quot;userId=357884&amp;ruleId=12&amp;loginId=357884&quot;#1500102087119.23.169.214 - - [15/Jul/2017:06:59:12 +0800] &quot;POST /v2/interface.php?m=LikeOther&amp;a=likeOther HTTP/1.1&quot; 200 39 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.144&quot;&quot;userId=357884&amp;loginId=357884&amp;targetValue=290959&amp;targetType=6&quot;#1500102087119.23.169.209 - - [15/Jul/2017:06:59:13 +0800] &quot;POST /v2/interface.php?m=Experience&amp;a=addTaskValue HTTP/1.1&quot; 200 161 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.106&quot;&quot;userId=357884&amp;ruleId=12&amp;loginId=357884&quot;#1500102087119.23.169.202 - - [15/Jul/2017:06:59:16 +0800] &quot;GET /interfacepy?a=getNewMsgCount&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.018&quot;&quot;-&quot;#1500102087119.23.169.213 - - [15/Jul/2017:06:59:16 +0800] &quot;GET /v2/interface.php?m=Pay&amp;a=getUserBalance&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 200 164 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.157&quot;&quot;-&quot;#1500102087119.23.169.210 - - [15/Jul/2017:06:59:16 +0800] &quot;GET /v2/interface.php?m=Experience&amp;a=getUserHeat&amp;loginId=357884&amp;userId=356183 HTTP/1.1&quot; 200 47 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.236&quot;&quot;-&quot;#1500102087119.23.169.213 - - [15/Jul/2017:06:59:20 +0800] &quot;GET /v2/interface.php?m=Pay&amp;a=getUserBalance&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 200 164 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.098&quot;&quot;-&quot;#1500102087119.23.169.201 - - [15/Jul/2017:06:59:20 +0800] &quot;POST /v2/interface.php?m=RedPride&amp;a=showTime HTTP/1.1&quot; 200 109 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.125&quot;&quot;userId=357884&amp;loginId=357884&amp;ctime=2016-04-07+19%3A48%3A00&quot;#1500102087119.23.169.216 - - [15/Jul/2017:06:59:20 +0800] &quot;GET /v2/interface.php?m=User&amp;a=getPerson&amp;userId=357884&amp;visitorId=357884&amp;ver=4.5.6&amp;loginId=357884 HTTP/1.1&quot; 200 895 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.214&quot;&quot;-&quot;#1500102087119.23.169.202 - - [15/Jul/2017:06:59:23 +0800] &quot;POST /v2/interface.php?m=Message&amp;a=delNewMsgCount HTTP/1.1&quot; 200 39 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.105&quot;&quot;userId=357884&amp;loginId=357884&amp;msgType=13&quot;#1500102087119.23.169.202 - - [15/Jul/2017:06:59:23 +0800] &quot;POST /v2/interface.php?m=Message&amp;a=delNewMsgCount HTTP/1.1&quot; 200 32 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.116&quot;&quot;userId=357884&amp;loginId=357884&amp;msgType=13&quot;#1500102087119.23.169.218 - - [15/Jul/2017:06:59:23 +0800] &quot;GET /v2/interface.php?m=FriendMessage&amp;a=getFriendMessages&amp;userId=357884&amp;pageNo=1&amp;pageSize=10&amp;loginId=357884 HTTP/1.1&quot; 200 10316 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.490&quot;&quot;-&quot;#1500102087119.23.169.201 - - [15/Jul/2017:06:59:27 +0800] &quot;POST /v2/interface.php?m=RedPride&amp;a=showTime HTTP/1.1&quot; 200 109 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.045&quot;&quot;userId=357884&amp;loginId=357884&amp;ctime=2016-01-17&quot;#1500102087119.23.169.202 - - [15/Jul/2017:06:59:28 +0800] &quot;GET /interfacepy?a=getNewMsgCount&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 200 573 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.019&quot;&quot;-&quot;#1500102087119.23.169.216 - - [15/Jul/2017:06:59:31 +0800] &quot;GET /v2/interface.php?m=Status&amp;a=getStatusDetail&amp;statusId=349655&amp;userId=357884&amp;ver=4.5.6&amp;paintVer=3&amp;loginId=357884 HTTP/1.1&quot; 200 2991 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.207&quot;&quot;-&quot;#1500102087119.23.169.214 - - [15/Jul/2017:06:59:32 +0800] &quot;GET /v2/interface.php?m=Status&amp;a=getStatusMoreAtStory&amp;storyId=32939&amp;statudId=349655&amp;ver=4.5.6&amp;loginId=357884 HTTP/1.1&quot; 200 3000 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.160&quot;&quot;-&quot;#1500102087119.23.169.215 - - [15/Jul/2017:06:59:32 +0800] &quot;GET /v2/interface.php?m=Status&amp;a=getHotRecommend&amp;userId=357884&amp;statusId=349655&amp;loginId=357884 HTTP/1.1&quot; 200 14237 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.447&quot;&quot;-&quot;#1500102087119.23.169.216 - - [15/Jul/2017:06:59:32 +0800] &quot;GET /v2/interface.php?m=LikeOther&amp;a=getLikeOtherUser&amp;targetType=6&amp;targetValue=349655&amp;userId=357884&amp;pageNo=1&amp;pageSize=20&amp;loginId=357884 HTTP/1.1&quot; 200 8655 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.520&quot;&quot;-&quot;#1500102087119.23.169.216 - - [15/Jul/2017:06:59:33 +0800] &quot;GET /v2/interface.php?m=CommentOther&amp;a=getOtherComments&amp;visitorId=357884&amp;targetType=6&amp;targetValue=349655&amp;pageNo=1&amp;pageSize=20&amp;loginId=357884 HTTP/1.1&quot; 200 16045 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.738&quot;&quot;-&quot;#1500102087119.23.169.220 - - [15/Jul/2017:06:59:33 +0800] &quot;POST /v2/interface.php?m=Index&amp;a=eventAnalytics HTTP/1.1&quot; 200 39 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.913&quot;&quot;loginId=357884&amp;eventType=1&amp;eventContent=441994&amp;deviceToken=&amp;ver=4.5.6&quot;#1500102087119.23.169.214 - - [15/Jul/2017:06:59:37 +0800] &quot;POST /v2/interface.php?m=LikeOther&amp;a=likeOther HTTP/1.1&quot; 200 39 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.132&quot;&quot;userId=357884&amp;loginId=357884&amp;targetValue=349655&amp;targetType=6&quot;#1500102087119.23.169.209 - - [15/Jul/2017:06:59:38 +0800] &quot;POST /v2/interface.php?m=Experience&amp;a=addTaskValue HTTP/1.1&quot; 200 161 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.103&quot;&quot;userId=357884&amp;ruleId=12&amp;loginId=357884&quot;#1500102087119.23.169.202 - - [15/Jul/2017:06:59:39 +0800] &quot;GET /interfacepy?a=getNewMsgCount&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.009&quot;&quot;-&quot;#1500102087119.23.169.202 - - [15/Jul/2017:06:59:49 +0800] &quot;GET /interfacepy?a=getNewMsgCount&amp;userId=357884&amp;loginId=357884 HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Android_4.5.6&quot; &quot;31.55.48.122&quot; &quot;0.009&quot;&quot;-&quot;#1500105671cd /var/log/nginx/log#1500105672ls#1500105686cat wish-host.access.log |grep 351372#1500106169tail -f wish-host.access.log |grep 2977#1500106180tail -f wish-host.access.log |grep 4977#1500106352cat wish-host.access.log |grep 351372#1500106375cat wish-host.access.log |grep 373935#1500107365tail -f wish-host.access.log |grep 4977#1500107566cat wish-host.access.log |grep artShowId=8#1500107629cat 215-host.access.log |grep artShowId=7#1500107636cat 215-host.access.log |grep =8#1500107662cat 215-host.access.log |grep id=8#1500107676cat 215-host.access.log |grep ArtShow#1500107693cat wish-host.access.log |grep artShowId=8#1500107974tail -f wish-host.access.log |grep 4977#1500108389cat wish-host.access.log |grep artShowId=8#1500119645cat /var/log/nginx/log/wish-host.access.log |grep 330112#1500119820crontab -e#1500169588cd /var/log/nginx/log/#1500169588ls#1500169620cat wish-host.access.log |grep 327265 &gt;&gt;user327265.log#1500169621ls#1500169627vi user327265.log #1500181806cd /var/log/nginx/log/#1500181807ls#1500181818vi user327265.log #1500182419crontab -e#1500184263cd /var/log/nginx/log/#1500184380pwd#1500184380ls#1500185420tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1500185581wdp#1500185584pwd#1500185602cat wish-host.access.log |grep 190110 &gt;&gt; user190110.log#1500185677cd wish#1500185677ls#1500185702cat wish-hosh_2017_07_15.log |grep 190110 &gt;&gt; user190110.log#1500185714cat wish-hosh_2017-07-15.log |grep 190110 &gt;&gt; user190110.log#1500185750cat wish-host_2017_07_15.log |grep 190110 &gt;&gt; user190110.log#1500185766cat wish-host_2017-07-15.log |grep 190110 &gt;&gt; user190110.log#1500185805cd ..#1500185806ls#1500185824cat wish-host.access.log |grep 343234 &gt;&gt; user343234.log#1500186054tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1500215890ls#1500215916cd /var/log/nginx/log/#1500215930cat wish-host.access.log |grep 407133 &gt;&gt; user407133.log#1500258584cd /var/log/nginx/log/wish-host.access.log #1500258594tail -f /var/log/nginx/log/wish-host.access.log #1500258599tail -f /var/log/nginx/log/wish-host.access.log |grep post#1500258605tail -f /var/log/nginx/log/wish-host.access.log |grep POST#1500275332crontab -e#1500276790crontab -l#1500279126cd /var/log#1500279126ls#1500279128cd nginx#1500279130ls#1500279132cd log#1500279133ls#1500279140cat 215-host.access.log #1500279150tail -f 215-host.access.log #1500279240crontab -e#1500279353crontab -l#1500279394ls#1500279414tail -f 215-host.access.log #1500279482ls#1500279503tail -f admin.videoapi.access.log #1500279524cd ../#1500279529cd /etc/nginx#1500279529ls#1500279532cd conf.d#1500279532ls#1500279569cat wish.conf #1500279584ls#1500279623cat wish_admin.conf #1500279665tail -f /var/log/nginx/log/215.videoapi.access.log #1500279866crontab -l#1500279966tail -f /var/log/nginx/log/215.videoapi.access.log #1500275101crontab -e#1500276412cat /var/log/nginx/log/wish-host.access.log |grep 328089#1500279923curl http://215.ifenghui.com/admin/index.php?s=/Crontab/CrontabSetGreen#1500283795 df#1500354812tail -f /var/log/nginx/log/storyship-host.access.log #1500354840cat /var/log/nginx/log/storyship-host.access.log |grep qr#1500355032tail -f /var/log/nginx/log/storyship-host.access.log #1500355958vnstat -l -i eth1#1500357616tail -f /var/log/nginx/log/openfenghui-host.access.log #1500357628cd /etc/nginx/conf.d/#1500357628ls#1500357638vi openfenghui.conf #1500363524top#1500363556free#1500364088cd /etc/nginx#1500364089ls#1500364100cd conf.d/#1500364101ls#1500364118cat wish_admin.conf #1500364182cd wx.storybook.conf #1500364186cat wx.storybook.conf #1500372434vnstat -l -i eth1#1500427953vnstat -d#1500427962vnstat -m#1500522781cd /chroot/howToUse/#1500522781ls#1500522884cd /chroot#1500522884ls#1500522888cd nodejs/#1500522889ls#1500522896ps -ef|grep js#1500522898ls#1500522901cd ..#1500522901ls#1500522927cd nodejs/#1500522927ls#1500522955node videoMp4Server.js #1500522961node videoMp4Server.js &amp;&#x27;#1500522963node videoMp4Server.js &amp;#1500522975ps -ef|grep node#1500523064cd /chroot#1500523064ls#1500523067ll#1500523082cd nodejs/#1500523082ls#1500523101nohup nodejs videoMp4Server.js #1500523109nohup node videoMp4Server.js #1500523125nohup node videoMp4Server.js &amp;#1500523142ps -ef|grep node#1500523222ps -u#1500523252ps -u root#1500523280ps -u root|grep node#1500523322kill 20949#1500533346tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1500533483vnstat -l -i eth1#1500533767tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1500537336cat /var/log/nginx/log/wish-host.access.log |grep 4977#1500537345tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1500535977tail -f /var/log/nginx/log/wish-host.access.log #1500535988tail -f /var/log/nginx/log/wish-host.access.log |grep php#1500536542tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1500600395tail -f /var/log/nginx/log/wish-host.access.log #1500623001cd /chroot/wish_beta/#1500623002ls#1500623159cd Lib#1500623166cd Interface/Lib/Service/#1500623176vi StatisticsService.class.php #1500258514tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1500346894tail -f /var/log/nginx/log/wish-host.access.log |grep getToken#1500365371tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1500456898tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1500513394tail -f /var/log/nginx/log/wish-host.access.log |grep getPerson#1500522338tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1500533916tail -f /var/log/nginx/log/wish-host.access.log#1500534426tail -f /var/log/nginx/log/wish-host.access.log |grep LikeOther#1500535362tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1500535737tail -f /var/log/nginx/log/wish-host.access.log |grep LikeOther#1500536741tail -f /var/log/nginx/log/wish-host.access.log |grep LikeOther #1500536854tail -f /var/log/nginx/log/wish-host.access.log |grep LikeOther H#1500536859tail -f /var/log/nginx/log/wish-host.access.log |grep LikeOther #1500536892tail -f /var/log/nginx/log/wish-host.access.log |grep LikeOther#1500537029tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1500538790tail -f /var/log/nginx/log/wish-host.access.log |grep LikeOther#1500538798tail -f /var/log/nginx/log/wish-host.access.log |grep LikeOtherUser#1500627602cd /etc/nginx/conf#1500627602ls#1500627607cd /etc/nginx/conf#1500627608cd /etc/nginx/conf.d#1500627609ls#1500627613cd ..#1500627613ls#1500627615vi nginx.conf #1500627778/etc/init.d/nginx configtest#1500627781/etc/init.d/nginx reaload#1500627785/etc/init.d/nginx reload#1500627803tail -f /var/log/nginx/log/wish-host.access.log #1500627814tail -f /var/log/nginx/log/wish-host.access.log |grep iOS#1500636824tail -f /var/log/nginx/log/wish-host.access.log |grep login#1500636842tail -f /var/log/nginx/log/wish-host.access.log |grep login&amp;#1500636863ps -ef|grep tail#1500636868tail -f /var/log/nginx/log/wish-host.access.log |grep login#1500636885tail -f /var/log/nginx/log/wish-host.access.log |grep User#1500636952tail -f /var/log/nginx/log/wish-host.access.log |grep 13611220831#1500863458tail -f /var/log/nginx/log/wish-host.access.log #1500863464tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1500865396ps -ef|grep sphinx#1500877129tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1500891727vi /etc/nginx/nginx.conf #1500880025tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1500881391tail -f /var/log/nginx/log/wish-host.access.log |grep getStatusAll#1500886669tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1500888911tail -f /var/log/nginx/log/wish-host.access.log#1500864439cd /chroot/wish_beta/Interface/Lib/#1500864439ls#1500864558cd Service/#1500864559s#1500864561ls#1500864581rm -rf StatisticsService.class.php #1500864582svn up#1500864597cd ..#1500864599cd Model/#1500864603svn up#1500864607cd ..#1500864610cd Service/#1500864617vi StatisticsService.class.php #1500865417cd ..#1500865420cd Action/#1500865425svn up StatisticsAction.class.php #1500865618cd ..#1500865620cd Service/#1500865620ls#1500865628vi StatisticsService.class.php #1500866281cd .#1500866282cd ..#1500866285cd Action/#1500866596svn up StatisticsAction.class.php #1500874877cd ..#1500874878cd Service/#1500874879ls#1500874884vi StatisticsService.class.php #1500879456rm -rf StatisticsService.class.php #1500879511svn up#1500879519vi StatisticsService.class.php #1500974803tail -f /var/log/nginx/log/wish-host.access.log |grep nginx#1500974813tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1500974957tail -f /var/log/nginx/log/wish-host.access.log |grep 4&amp;#1500975022tail -f /var/log/nginx/log/wish-host.access.log #1500975028tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1500975601exit#1501039455cd /chroot/howToUse/#1501039455ls#1501039463cd /var/log/nginx/log/wish#1501039463ls#1501039477cat wish-host_2017-07-25.log |grep e688e02fe8fa47328bf5846245b809a7#1501040428cat wish-host_2017-07-25.log |grep 424010#1501040466cat wish-host_2017-07-25.log |grep 424010 &gt;&gt;424010.log#1501040472vi 424010.log #1501061252cd /chroot#1501061252ls#1501061254cd api#1501061254ls#1501061256svn up#1501061266/etc/init.d/php56-php-fpm restart#1501206604tail -f /var/log/nginx/log/wish-host.access.log #1501206609tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1501206871tail -f /var/log/nginx/log/wish-host.access.log |grep 13611220831#1501208798tail -f /var/log/nginx/log/wish-host.access.log |grep 13207625838#1501209105tail -f /var/log/nginx/log/wish-host.access.log |grep 13611220831#1501209147tail -f /var/log/nginx/log/wish-host.access.log |grep 13207625838#1501209805tail -f /var/log/nginx/log/wish-host.access.log |grep 13311220831#1501209854tail -f /var/log/nginx/log/wish-host.access.log |grep 13611220831#1501402893tail -f /var/log/nginx/log/wish-host.access.log #1501402898tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1500979097cd /chroot/wishroot/queue/#1500979106cd Interface/Lib/Service/#1500979107svn up#1500979116cd ..#1500979117svn up#1501033030pwd#1501033033svn up#1501065156tail -f /var/log/nginx/log/wish-host.access.log#1501065178tail -f /var/log/nginx/log/wish-host.access.log |grep ios#1501127927pwd#1501127930svn up#1501205548tail -f /var/log/nginx/log/wish-host.access.log |grep addUser#1501222536tail -f /var/log/nginx/log/wish-host.access.log |grep addTaskValue#1501226519tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1501241207pwd#1501241213svn up#1501242283tail -f /var/log/nginx/log/wish-host.access.log |grep 405972#1501243724svn up#1501481975tail -f /var/log/nginx/log/wish-host.access.log #1501482168tail -f /var/log/nginx/log/wish-host.access.log |grep php#1501482179tail -f /var/log/nginx/log/wish-host.access.log |grep phone#1501482196tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1501484184tail -f /var/log/nginx/log/wish-host.access.log #1501484190tail -f /var/log/nginx/log/wish-host.access.log |grep php#1501484196df#1501484202cd /var/log#1501484203ls#1501484209cd nginx/log/#1501484210ls#1501484211ll#1501484218rm img2.ifenghui.com.access.log #1501484224cd wish#1501484224ls#1501484226ll#1501484285rm wish-host_2017-06-* -rf#1501484305df#1501484312/etc/init.d/nginx configtest#1501484316/etc/init.d/nginx reload#1501484319df#1501484338top#1501490645tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1501643120tail -f /var/log/nginx/log/storybook-host.access.log#1501643195tail -f /var/log/nginx/log/storyship-host.access.log #1501481305tail -f /var/log/nginx/log/wish-host.access.log#1501482090tail -f /var/log/nginx/log/wish-host.access.log |grep skill#1501580336tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1501482937cd /chroot/wish_beta/Interface/Lib/Action/#1501482944vi StatisticsAction.class.php #1501484351cd ..#1501484357cd tpl#1501484358ls#1501484360cd Tpl/#1501484361svn up#1501740721tail -f /var/log/nginx/log/wish-host.access.log #1501740727tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1501760649top#1501760769аs #1501760772ps -aux#1501760855kill 3441#1501760883top#1501743576tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1501842675tail -f /var/log/nginx/log/wish-host.access.log #1501842683tail -f /var/log/nginx/log/wish-host.access.log |gerp 4977#1501842696tail -f /var/log/nginx/log/wish-host.access.log #1501842700tail -f /var/log/nginx/log/wish-host.access.log|grep 4977#1501842724tail -f /var/log/nginx/log/wish-host.access.log|grep 20773#1501923601tail -f /var/log/nginx/log/openvista-host.access.log #1501842974crontab -e#1501843200cd /usr/local/coreseek#1501843201ls#1501843212./start.sh #1501843326cat start.sh #1501843439cd etc/#1501843439ls#1501843442cd ..#1501843443ls#1501843568pwd#1501843581/usr/local/coreseek/start.sh #1501843694/usr/local/coreseek/indexAll.sh #1502068130ls#1502068137cat indexAll.sh #1502093134cd /var/log/nginx/logs#1502093134ls#1502093140cd /var/log/nginx#1502093140ls#1502093142cd log#1502093142ls#1502093178tail -f storybook-host.access.log#1502243531tail -f /var/log/nginx/log/wish-host.access.log|grep 2603#1502255515crontab -e#1502255557/chroot/howToUse/wish_paihang.sh 3#1502256518ls#1502256526df#1502256534cat /chroot/howToUse/wish_paihang.sh#1502256544cd /chroot/wishroot/queue/#1502256545ls#1502256549rm *.log -rf#1502256635ls#1502256641svn up#1502256671cat /chroot/howToUse/clush/clush_queue.sh #1502256690/chroot/howToUse/clush/clush_queue.sh #1502256727/chroot/howToUse/wish_paihang.sh 3#1502257675/chroot/howToUse/clush/clush_queue.sh #1502257689/chroot/howToUse/wish_paihang.sh 3#1502257714/chroot/howToUse/clush/clush_queue.sh #1502257727/chroot/howToUse/wish_paihang.sh 3#1502258294/chroot/howToUse/clush/clush_queue.sh #1502258306/chroot/howToUse/wish_paihang.sh 3#1502260477tail -f /var/log/nginx/log/wish-host.access.log #1502260481tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1502270505cd /var/log#1502270505ls#1502270508cd nginx#1502270508ls#1502270515cd log#1502270516ls#1502270528tail -f storybook#1502270539tail -f storybook-host.access.log#1502266349tail -f /var/log/nginx/log/storybook-host.access.log#1502330145cd /var/log#1502330145ls#1502330147cd nginx#1502330148l;s#1502330149ls#1502330152cd log#1502330153ls#1502330175tail -f storybook-host.access.log#1502330280ls#1502330282cd story#1502330287storybook/#1502330287ls#1502330295cd storybook#1502330296ls#1502330305cd ../#1502330306ls#1502330330tail -f storybook-host.access.log#1502330537cat storybook-host.access.log#1502330810tail -f storybook-host.access.log#1502331162ls#1502331164cd ../#1502331164ls#1502331179cd /etc/nginx#1502331179;ls#1502331180ls#1502331185cd conf.d#1502331186ls#1502331225cat storybook.conf #1502331240ls#1502331366cd ../#1502331373cd /var/log/nginx/log#1502331374ls#1502331385tail -f storybook-host.access.log#1502333220cd /etc/nginx#1502333221ls#1502333279cd conf.d#1502333281ls#1502333320cat default.conf#1502333327ls#1502333362cat storybook_ssl.conf#1502333404ls#1502333409../#1502333409ls#1502333748cat storyship.conf #1502333821ls#1502333824cd ../#1502333825ls#1502333836vim nginx.conf #1502333956/etc/init.d/nginx reload#1502333967cd /var/log/nginx/log#1502333967ls#1502333981tail -f storybook-host.access.log#1502334062ls#1502334080tail -f storyship-host.access.log#1502334183tail -f storyship-host.access.log | grep susbcribe#1502334203tail -f storyship-host.access.log | grep subscribe#1502334229ls#1502334241tail -f storybook-host.access.log#1502334467tail -f storyship-host.access.log | grep subscribe#1502335500tail -f storyship-host.access.log#1502346424ls#1502422287cd /etc/nginx/#1502422288ls#1502422290cd conf#1502422294cd conf.d#1502422294ls#1502422330vi storyship.conf storyship_v.conf #1502422340cp storyship.conf storyship_v.conf #1502422346vi storyship_v.conf #1502422454/etc/init.d/configtest#1502422463/etc/init.d/nginx configtest#1502422469/etc/init.d/nginx reload#1502330613tail -f /var/log/nginx/log/storybook-host.access.log |grep 2603#1502330662tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1502345033tail -f /var/log/nginx/log/storybook-host.access.log |grep 4#1502345059tail -f /var/log/nginx/log/wish-host.access.log |grep 4#1502345083tail -f /var/log/nginx/log/wish-host.access.log |grep 4 #1502348742tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1502446959cd /var/log/nginx/log/#1502446959ls#1502447042cd /var/log/nginx/log/wish-host.access.log |grep 387480#1502447048cat /var/log/nginx/log/wish-host.access.log |grep 387480#1502675104tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1502680338cd /etc/nginx/#1502680338ls#1502680340cd conf#1502680343cd conf.d#1502680344ls#1502680369vi storybook.conf #1502680380vi storyship.conf #1502680401/etc/init.d/nginx configtest#1502680405/etc/init.d/nginx reload#1502682848cd /etc/nginx/conf.d/#1502682848ls#1502682855vi hfbug.conf #1502682910/etc/init.d/nginx configtest#1502682913/etc/init.d/nginx reload#1502688074cd /etc/nginx/conf.d/#1502688075sl#1502688076ls#1502688085vi storybook.conf #1502688108ls#1502688111vi admin.storybook.conf #1502688169/etc/init.d/nginx configtest#1502688172/etc/init.d/nginx reload#1502693850cd /etc/nginx/conf.d/#1502693851ls#1502693861vi wish.conf #1502694001/etc/init.d/nginx configtest#1502694008/etc/init.d/nginx reload#1502694036vi wish.conf #1502764053cd /chroot/howToUse/#1502764054ls#1502702340vnstat -l -i eth1#1502775052cd /etc/nginx/conf#1502775052ls#1502775056cd /etc/nginx/conf.d/#1502775057ls#1502775060vi wish.conf #1502775118ls#1502775134cp wish.conf wish.conf_20170815#1502775138vi wish.conf#1502775145ps -ef |grep vi#1502775159ls#1502775163vi wish.conf#1502775406/etc/init.d/nginx configtest#1502775408vi wish.conf#1502775645/etc/init.d/nginx configtest#1502775653/etc/init.d/nginx reload#1502775990vi wish.conf#1502776096/etc/init.d/nginx configtest#1502776098/etc/init.d/nginx reload#1502776100vi wish.conf#1502776228/etc/init.d/nginx configtest#1502776230/etc/init.d/nginx reload#1502776365tail -f /var/log/nginx/log/wish-host.access.log #1502776369tail -f /var/log/nginx/log/wish-host.access.log |grep v3#1502776383tail -f /var/log/nginx/error.log#1502776411dftail -f /var/log/nginx/log#1502776412df#1502779638ԣd #1502779643cd /etc/nginx/conf#1502779643ls#1502779648cd /etc/nginx/conf.d/#1502779649ls#1502779651vi wish.conf#1502779752/etc/init.d/nginx configtest#1502779761/etc/init.d/nginx reload#1502780164vi wish.conf#1502780523vnstat -l -i eth1#1502692096cat /var/log/nginx/log/wish-host.access.log |grep addExperience#1502692111tail -f /var/log/nginx/log/wish-host.access.log |grep addExperience#1502763268tail -f /var/log/nginx/log/wish-host.access.log |grep 2603]#1502763273tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1502854384tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1502975375̫#1502975401tail -f /var/log/nginx/log/storybook-host.access#1502975405tail -f /var/log/nginx/log/storybook-host.access.log#1502975526cat /var/log/nginx/log/storybook-host.access.log|grep 596#1502975563cat /var/log/nginx/log/storybook-host.access.log|grep 596|grep getSubscriptionOrder#1502975573cat /var/log/nginx/log/storybook-host.access.log|grep getSubscriptionOrder#1503036979tail -f /var/log/nginx/log/wish-host.access.log #1503036981tail -f /var/log/nginx/log/wish-host.access.log |4977#1503036985tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1503038413top#1503038427vnstat -l -i eth1#1502848872tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1502951274tail -f /var/log/nginx/log/wish-host.access.log |grep messageType#1502954171tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1503023973tail -f /var/log/nginx/log/wish-host.access.log |grep messageType#1503024038tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1503079181df#1503079207tail -f /var/log/nginx/log/wish-host.access.log #1503079214tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1503285836top#1503285847vnstat -l -i eth1#1503285873tail -f /var/log/nginx/log/wish-host.access.log #1503286016vnstat -l -i eth1#1503286072df#1503286079cd /var/log/nginx/#1503286079ls#1503286082cd log#1503286082ls#1503286083cd wish#1503286084ls#1503286085ll#1503286238cat wish-host_2017-08-19.log |grep 322979#1503286260cat wish-host_2017-08-19.log |grep 322979|grep php#1503286709cat wish-host_2017-08-19.log |grep 322979|grep php|grep art#1503286720cat wish-host_2017-08-19.log |grep 322979|grep php|grep buy#1503286756cat wish-host_2017-08-19.log |grep 322979|grep php &gt;&gt;322979.log#1503286784vi 322979.log #1503331428cd /var/log/nginx/log/#1503331429ls#1503331502vi /etc/nginx/conf.d/wish.conf#1503285820df#1503286141vnstat -l -i eth1#1503471681cd /var/log/nginx/log/wish#1503471682ls#1503471694cat wish-host_2017-08-22.log |grep getUserTitle#1503472637cat wish-host_2017-08-22.log |grep getPerson#1503472817pwd#1503472820ls#1503472821cd ..#1503472822ls#1503472829tial -f wish-host.access.log #1503472836tail -f wish-host.access.log #1503472841tail -f wish-host.access.log |grep 4977#1503483012df#1503483015cd /chroot#1503483016ls#1503483021cd wishroot/#1503483021ls#1503483024cd queue/#1503483024ls#1503483035tail -f 17_08_23.log #1503483132ps -ef|grep php#1503483158cd /chroot/howToUse/#1503483158ls#1503483173cat mnsQueuev2_interface.sh #1503483183tail -f /var/log/php/queueMnsv2.log#1503483226tail -f /var/log/php/queueMnsv2_2017-08-23.log #1503546649tail -f /var/log/nginx/log/wish-host.access.log |grep getUserPendingWorks#1503546666cd /var/log/nginx/log/wish#1503546666ls#1503546681cat wish-host_2017-08-23.log |grep getUserPendingWorks#1503552517df#1503552566cd /var/log/nginx/log/wish#1503552566ls#1503552576cat wish-host_2017-08-23.log |grep UmIM#1503562630tail -f /var/log/nginx/log/wish-host.access.log #1503562636tail -f /var/log/nginx/log/wish-host.access.log |grep php#1503562788tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1503563451df#1503563473vnstat -l -i eth1#1503563602/etc/init.d/nginx configtest#1503563607/etc/init.d/nginx reload#1503565023cat -f /var/log/nginx/log/wish-host.access.log |grep getDialogueSecondArticles#1503565030cat /var/log/nginx/log/wish-host.access.log |grep getDialogueSecondArticles#1503565226tail -f /var/log/nginx/log/wish-host.access.log |grep php#1503566820tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1503566845tail -f /var/log/nginx/log/wish-host.access.log |grep loginId=4#1503566851tail -f /var/log/nginx/log/wish-host.access.log |grep loginId=4 #1503566859tail -f /var/log/nginx/log/wish-host.access.log |grep &quot;loginId=4 &quot;#1503590671cat /var/log/nginx/log/wish/*.log|grep ios#1503590681cat /var/log/nginx/log/wish/*.log|grep notify#1503642217crontab -e#1503642272/chroot/howToUse/wish_paihang.sh 3#1503645480tail -f /var/log/nginx/log/wish-host.access.log |grep Ver#1503294887cd /var/log/nginx//log/#1503294888l#1503294889ls#1503294892cd wish#1503294893ls#1503294908cat wish-host_2017-08-18.log #1503294920cat wish-host_2017-08-18.log |grep 398978#1503296832ls#1503303987contrab -e#1503303995crontab -e#1503306544tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1503387184cd /chroot/wish_beta/Interface/#1503387188cd Lib/#1503387190svn up#1503387205cd Service/#1503387209vi StatisticsService.class.php #1503387241vi SuggestUserService.class.php #1503391433tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1503393107cat /var/log/nginx/log/wish-host.access.log |grep 2603#1503393269cat /var/log/nginx/log/wish-host.access.log |grep egister#1503393291cat /var/log/nginx/log/wish-host.access.log |grep 13718094053#1503393369cat /var/log/nginx/log/wish-host.access.log |grep 13718094053 -A 10#1503393434cat /var/log/nginx/log/wish-host.access.log |grep perfectInfo#1503394494cat /var/log/nginx/log/wish-host.access.log |grep 486627#1503394535cat /var/log/nginx/log/wish-host.access.log |grep updateUser#1503394793cat /var/log/nginx/log/wish-host.access.log |grep 486627#1503460809cat /var/log/nginx/log/wish-host.access.log |grep getBbsArticleDetail#1503484156cd /chroot/wishroot/#1503484157ls#1503484160cd v2/#1503484160ls#1503484178cat interfaceQueuev2.php #1503484330cd /var/log#1503484330ls#1503484334cd php#1503484335ls#1503541004cd /chroot/wishroot/queue/#1503541006cd Interface/#1503541008cd Lib#1503541009svn up#1503543776cat /var/log/nginx/log/wish-host.access.log |grep 2603#1503543789tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1503568365cd /chroot/wishroot/v2/Interface/#1503568366ls#1503568374svn up#1503568401cd /chroot/wish_beta/#1503568401ls#1503568406cd Interface/#1503568407svn up#1503568530ls#1503568535cd Lib/Service/#1503568542vi BbsService.class.php #1503572200tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1503643674tail -f /var/log/nginx/log/wish-host.access.log |grep getDialogueSecondArticles#1503644583cd /chroot/wish_beta/Interface/Lib/#1503644584svn up#1503648768tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1503720762ps -ef|grep wish#1503720765ps -ef|grep php#1503720895crontab -e#1503720903cat /chroot/howToUse/mnsQueuev2.sh#1503720915cd /chroot/wishroot/queue/#1503720916ls#1503720921rm *.log#1503720927rm *.log -rf#1503716885cdf#1503716886df#1503716920/chroot/howToUse/clush/clush_queue.sh #1503721002cd /chroot/wishroot/queue/#1503721003ls#1503721006cd Interface/#1503721006ls#1503721011cd Lib/#1503721012ls#1503721015svn up#1503721082ps -ef|grep php#1503823381cd /usr/local/coreseek#1503823382ls#1503823386cd etc/#1503823386ls#1503823392cat sphinx.conf#1503824327vi sphinx.conf#1503825534cd /var/log/nginx/log/wish#1503825534ls#1503825549cat wish-host_2017-08-26.log |grep addUser#1503825626cat wish-host_2017-08-26.log |grep getUserTitle#1503825821cat wish-host_2017-08-26.log |grep getPerson#1503826038cat wish-host_2017-08-26.log |grep edituser#1503826225cat wish-host_2017-08-26.log |grep updateUser#1503826277tail -f /var/log/nginx/log/wish-host.access.log #1503826282tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1503851963tail -f /var/log/nginx/log/wish-host.access.log |grep 404#1503886196vi /etc/nginx/conf.d/wish.conf#1503896839cd /etc/nginx/#1503896840vi nginx.conf #1503903824ls#1503903835cd /var/log#1503903836ls#1503903838cd nginx#1503903838ls#1503903840cd logs#1503903840ls#1503903842cd log#1503903843ls#1503903856tail -f 215-host.access.log #1503903922ls#1503903939tail -f 247-host.access.log #1503903960tail -f 247.videoapi.access.log #1503903980tail -f 215.videoapi.access.log#1503904010ls#1503904044tail -f wish-host.access.log #1503904095tail -f wish-host.access.log |grep 124.204.41.3#1503904266tail -f wish-host.access.log |grep 416156#1503915536ls#1503915539cd /var/log#1503915539ls#1503915541cd nginx#1503915541sl#1503915542kls#1503915543ls#1503915545cd log#1503915546ls#1503915562tail -f wish-host.access.log #1503915608tail -f wish-host.access.log |grep 4977#1503915983tail -f /var/log/nginx/log/wish-host.access.log #1503915991tail -f /var/log/nginx/log/wish-host.access.log |grep php#1503916243tail -f /var/log/nginx/log/wish-host.access.log #1503916249vnstat -l -i eth1#1503972272tail -f /var/log/nginx/log/wish-host.access.log |grep getIndexHotNew#1503972298ls#1503972304cd /tail#1503972304ls#1503972317cd /var/log#1503972317ls#1503972322cd nginx#1503972323ls#1503972325cd log#1503972326ls#1503972359tail -f wish-host.access.log | grep sendRedPacketActivity#1503972383tail -f wish-host.access.log#1503972452tail -f wish-host.access.log|grep sendRedPacket#1503990921ls#1503990942tail -f ./wish-host.access.log |grep CollectAction#1503990998tail -f ./wish-host.access.log#1503991075tail -f ./wish-host.access.log |grep 416156#1504081256ls#1504081262cd /var/log#1504081263ls#1504081271cd nginx#1504081271ls#1504081273cd /log#1504081279cd ./log#1504081280ls#1504081294cd wish#1504081295ls#1504081300cd ,,.#1504081302cd ../#1504081302ls#1504081319tail -f wish-host.access.log #1504081338tail -f wish-host.access.log |grep getActivity#1504082154cd /etc/nginx/conf#1504082154ls#1504082158cd /etc/nginx/conf.d#1504082158ls#1504082183vi fenghui_help.conf #1504082235/etc/init.d/nginx configtest#1504082265/etc/init.d/nginx reload#1504173380tail -f /var/log/nginx/log/storybook-host.access#1504173383tail -f /var/log/nginx/log/storybook-host.access.log#1503971058tail -f /var/log/nginx/log/wish-host.access.log |grep getHotIndexNewCartoonGroup#1503971092tail -f /var/log/nginx/log/wish-host.access.log |grep getIndexHotNew#1503972380tail -f /var/log/nginx/log/wish-host.access.log |grep 4.7.2#1503976121tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1504001578tail -f /var/log/nginx/log/wish-host.access.log |grep delNewMsgCount#1504059383tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1504059536cd /chroot/wishroot/v2/#1504059536ls#1504059566ll#1504061514tail -f /var/log/nginx/log/storybook-host.access.log #1504080238tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1504081374tail -f /var/log/nginx/log/wish-host.access.log |grep UserLove#1504142215tail -f /var/log/nginx/log/wish-host.access.log |grep getMoreUserBuyStorys#1504143079tail -f /var/log/nginx/log/wish-host.access.log#1504143134tail -f /var/log/nginx/log/storybook-host.access.log #1504147857tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1504162893cd /chroot/wish_beta/#1504162898cd Interface/Lib/#1504162900svn up#1504163025cd Model/#1504163025ls#1504163049vi StatisticsPaihangModel.class.php #1504166868cd /var/log/nginx/log/#1504166869ls#1504166875cd wish#1504166875l#1504166877ls#1504167006cat wish-host_2017-08-30.log |grep 402275#1504167036cat wish-host_2017-08-31.log |grep 402275#1504167044cd ..#1504167066cat wish-host.access.log |grep 402275#1504167078cd wish#1504167086cat wish-host_2017-08-29.log |grep 402275#1504167141cd ..#1504167154cat wish-host.access.log |grep 411650#1504167167cd wish#1504167169ls#1504167293cat wish-host_2017-08-29.log |grep 354340#1504167332cat wish-host_2017-08-30.log |grep 354340#1504167348cd ..#1504167359cat wish-host.access.log |grep 354340#1504167503ls#1504167549cat admin.videoapi.access.log |grep 354340#1504167570tail -f admin.videoapi.access.log |grep 354340#1504167583tail -f admin.videoapi.access.log#1504167593ls#1504167615tail -f 215.videoapi.access.log #1504167643tail -f 215.videoapi.access.log |grep 385504#1504167653cat 215.videoapi.access.log |grep 385504#1504170163tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1504170605cat 215.videoapi.access.log |grep 271806#1504170634cat /var/log/nginx/log/wish-host.access.log |grep 271806#1504229124cd /etc/init.d/#1504229125ls#1504229128cd nginx#1504229129ls#1504229148cd nginx#1504229324ll#1504229708crontab -e#1504235326cat /var/log/nginx/log/wish-host.access.log |grep 2603#1504235338tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1504235762cat /var/log/nginx/log/wish-host.access.log |grep delStatus#1504235790cat /var/log/nginx/log/wish-host.access.log |grep admin#1504237337cat /var/log/nginx/log/wish-host.access.log |grep delStatus#1504237353tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1504237824cd /chroot/wish_beta/Interface/Lib/#1504237826svn up#1504238068cd Action/#1504238075vi StatisticsAction.class.php #1504238590tail -f /var/log/nginx/log/wish-host.access.log |grep getUserLove#1504257477tail -f /var/log/nginx/log/storybook-host.access.log #1504257639tail -f /var/log/nginx/log/storybook-host.access.log |grep getRecommendStorys#1504260960tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1504261385tail -f /var/log/nginx/log/wish-host.access.log |grep 309152#1504261395cat /var/log/nginx/log/wish-host.access.log |grep 309152#1504326284cd /var/log/nginx/log/wish/wish-host_2017-09-01.log |grep addStatistics#1504326297cat /var/log/nginx/log/wish/wish-host_2017-09-01.log |grep addStatistics#1504326601cat /var/log/nginx/log/wish/wish-host_2017-09-01.log |grep eventAnalytics#1504501442cd /etc/nginx/conf.d/#1504501447ls#1504501455vi wish.conf#1504501517/etc/init.d/nginx configtest#1504501521/etc/init.d/nginx reload#1504581797crontab -l#1504581873cd /var/log#1504581874ls#1504581876cd nginx#1504581877ls#1504581878cd log#1504581880ls#1504581911tail -f wish-host.access.log |grep returnRedPacket#1504581933cat wish-host.access.log |grep returnRedPacket#1504581962cd wish#1504581962ls#1504581985cat wish-host_2017-09-04.log |grep returnRedPacket#1504582003cat wish-host_2017-09-02.log |grep returnRedPacket#1504582012cat wish-host_2017-09-01.log |grep returnRedPacket#1504582020cat wish-host_2017-09-03.log |grep returnRedPacket#1504589380ls#1504589382cd ../#1504589383ls#1504596126cd /var/log/nginx/log/#1504596126ls#1504596145tail -f storybook-host.access #1504596202tail -f storybook-host.access.log#1504621928vnstat -l -i eth1#1504626047cd /etc/nginx/conf.d/#1504626048ls#1504626052vi wish.conf#1504626075/etc/init.d/nginx configtest#1504626078/etc/init.d/nginx reload#1504680883cd /var/log/nginx/log/#1504680893tail -f storybook-host.access.log #1504692473tail -f wish-host_2017-09-01.log |grep 2603#1504692486ls#1504692502tail -f wish-host.access.log |grep 2603#1504752505tail -f storybook-host.access.log #1504768136tail -f wish-host.access.log |grep 2603#1504769897ܴail #1504769910tail -f /var/log/nginx/log/wish-host.access.log #1504769915tail -f /var/log/nginx/log/wish-host.access.log |grep v3#1504778664tail -f /var/log/nginx/log/storybook-host.access.log#1504835774tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1505296395ܴata#1505296413tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1505300504crontab -e#1505316899tail -f /var/log/nginx/log/wish-host.access.log #1505316903tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1505352576cd /var/log/nginx/log/#1505352585cat wish-host.access.log |grep addStatistics#1505352661cat wish-host.access.log |grep event#1505352678cat wish-host.access.log |grep eventAnalytics#1505355854crontab -e#1505359478cd /var/log/nginx/log/#1505359478ls#1505359488cat wish-host.access.log |grep event#1505359513cat wish-host.access.log |grep eventType=1#1505359517cat wish-host.access.log |grep eventType=2#1505359519cat wish-host.access.log |grep eventType=3#1505359521cat wish-host.access.log |grep eventType=4#1505359524cat wish-host.access.log |grep eventType=7#1505359529cat wish-host.access.log |grep eventType=6#1505359531cat wish-host.access.log |grep eventType=8#1505359534cat wish-host.access.log |grep eventType=9#1505366502tail -f /var/log/nginx/log/wish-host.access.log #1505451453cd /data/www#1505456258cd /etc/nginx/conf.d/#1505456259ls#1505456261ll#1505456273vi dongman.conf#1505456286ls#1505456291ll#1505456344ll *.conf#1505456360ls#1505456373vi dongmana1.conf.bk #1505456382ls#1505456386cat *|grep huodong#1505456397cat d*|grep huodong#1505456404ll d*#1505456409vi dm.conf.bk #1505456525ls#1505456549ll d*#1505456554vi dongman.conf#1505456577/etc/init.d/nginx configtest#1505456583/etc/init.d/nginx reload#1505456740df#1505456751cd /var/log/nginx/#1505456751ls#1505456753cd log/#1505456754ls#1505456757cd wish#1505456757ls#1505456776rm wish-host_2017-07* -rf#1505456813df#1505456818ll#1505456819cd ..#1505456821ll#1505456826cd ifenghui/#1505456827ls#1505456828ll#1505456837rm www.ifenghui.com-host_2017-07* -rf#1505456845ll#1505456846df#1505456850cd ..#1505456850ls#1505456855cd storybook#1505456855ll#1505456870rm storybook-host_2017-07-* -rf#1505456872l#1505456873df#1505456874cd ..#1505456875ll#1505456894rm openvista-host.access.log #1505456910/etc/init.d/nginx configtest#1505456914/etc/init.d/nginx reload#1505456919ls#1505456940vnstat -l -i eth1#1505457139ls#1505457142cd /etc/nginx/conf.d/#1505457143ls#1505457146cat game.conf #1505457162q#1505457166cd /var/www/html/game/#1505457167ls#1505457170cd djn/#1505457170ls#1505457183svn up#1505457185ls#1505457186cd ..#1505457186ls#1505457219cd /chroot/howToUse/#1505457220ls#1505457242cat svn_game_djn.sh #1505456540ls#1505456543cd /chroot#1505456544ls#1505456548cd dongman#1505456549ls#1505456553cd huodong/#1505456554ls#1505456556svn up#1505457212ls#1505457250svn up#1505457303rm -rf 20150909/files/20150926215319829.jpg #1505457306svn up#1505457326rm -rf 20150909#1505457331svn up#1505457552chmod 777 -R 2017#1505457577ls#1505457578cd 201#1505457580cd 2017#1505457581ls#1505457582cd activity1709/#1505457586ls#1505457589cd application/#1505457590ls#1505457592cd vie#1505457601cd ../#1505457601ls#1505457844svn up#1505457881cd runtime/#1505457881ls#1505457885cd ../#1505457888rm -rf runtime/#1505458081svn up#1505458105ll#1505458111ls#1505458115cd runtime/#1505458115ls#1505458142svn up#1505458173chmod 777 -R .#1505458175ll#1505458178cd ../#1505458179ls#1505458181ll#1505458575svn up#1505461320ls#1505461326svn up#1505461331cd application/#1505461331ls#1505461334svn up#1505461550cd ../#1505461550ls#1505461552svn up#1505461974cd runtime/#1505461975ls#1505462044cd ..#1505462046svn up#1505184281tail -f /var/log/nginx/log/wish-host.access.log |grep eventAnalytics#1505209707tail -f /var/log/nginx/log/storybook-host.access.log#1505179333tail -f /var/log/nginx/log/storybook-host.access.log#1505181975cd /chroot/wish_beta/#1505181981cd Interface/Lib/#1505181982snv up#1505181983svn up#1505181998cd Action/#1505182002vi IndexAction.class.php #1505182530cd ..#1505182531cd Model/#1505182538vi StatusModel.class.php #1505182820cd ..#1505182822cd Action/#1505182823ls#1505182832vi IndexAction.class.php #1505469449ܴail #1505469461tail -f /var/log/nginx/log/storybook-host.access#1505469465tail -f /var/log/nginx/log/storybook-host.access.log#1505801078cd /usr/local/coreseek#1505801078ls#1505801081cd /usr/local/src/#1505801082ls#1505801083ll#1505801279cd ..#1505801279ls#1505801281ll#1505812103crontab -e#1505815564ls#1505815640pw#1505815642pwd#1505977294tail -f /var/log/nginx/log/wish-host.access.log #1505977298tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1505988095crontab -e#1505988112cat /chroot/howToUse/wish_paihang.sh #1505988162/chroot/howToUse/clush/clush_queue.sh #1506043788cd /var/log/nginx/log/#1506043788ls#1506043796cat wish-host.access.log |grep addStatistics#1506047831tail -f /var/log/nginx/log/wish-host.access.log |grep eventAnalytics#1506047842cat /var/log/nginx/log/wish-host.access.log |grep eventAnalytics#1506047998tail -f /var/log/nginx/log/wish-host.access.log |grep eventAnalytics#1506071760cd /var/log/nginx/log/wish#1506071760ls#1506071801cat wish-host_2017-09-19.log |grep publishBackImg#1506071850cat wish-host_2017-09-19.log |grep 277372#1506072327ls#1506073936tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1505793305tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1505809164crontab -e#1505887620tail -f /var/log/nginx/log/storybook-host.access.log#1505959330tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1505959685tail -f /var/log/nginx/log/storybook-host.access.log#1505963635tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1505981227tail -f /var/log/nginx/log/storybook-host.access.log#1505984674cd /chroot/wish_beta/Interface/Lib/#1505984676svn up#1505984687cd ..#1505984690cd Co#1505984694cd Conf/#1505984696svn up#1505984698cd ..#1505985591tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1506045174tail -f /var/log/nginx/log/storybook-host.access.log#1506143068cat /chroot/howToUse/wish_paihang.sh#1506143035crontab -e#1506143042/chroot/howToUse/wish_paihang.sh 1#1506143338/chroot/howToUse/clush/clush_queue.sh #1506143395/chroot/howToUse/wish_paihang.sh 1#1506143551/chroot/howToUse/wish_paihang.sh 2#1506144880/chroot/howToUse/clush/clush_queue.sh #1506305613crontab -e#1506305664crontab -l#1506315604ping 172.19.0.33#1506315524cd /etc/nginx/#1506315525ls#1506315526cd conf#1506315526ls#1506315535cd conf#1506315538cd conf.d/#1506315538ls#1506315545vi wish.conf#1506315682ls#1506315803vi wish.conf#1506315819/etc/init.d/nginx configtest&#x27;#1506315821/etc/init.d/nginx configtest#1506315822ls#1506315834cp wish.conf wish_mqtt.conf#1506315839vi wish_mqtt.conf #1506315983/etc/init.d/nginx configtest#1506315999mv wish_mqtt.conf wish_mqtt.conf.bk#1506316975ls#1506316991mv wish_mqtt.conf.bk wish_mqtt.conf#1506316994vi wish_mqtt.conf #1506317006ls#1506317011/etc/init.d/nginx configtest#1506317018vi wish_mqtt.conf #1506317052/etc/init.d/nginx configtest#1506317059vi wish_mqtt.conf #1506317089/etc/init.d/nginx configtest#1506317122vi wish_mqtt.conf #1506317144/etc/init.d/nginx configtest#1506317145vi wish_mqtt.conf #1506317269/etc/init.d/nginx configtest#1506317276vi wish_mqtt.conf #1506317285ls#1506317291vi wish.conf#1506317324vi wish_mqtt.conf #1506317339/etc/init.d/nginx configtest#1506317342vi wish_mqtt.conf #1506317356/etc/init.d/nginx configtest#1506317358vi wish_mqtt.conf #1506317369/etc/init.d/nginx configtest#1506317374vi wish_mqtt.conf #1506317412/etc/init.d/nginx configtest#1506317415vi wish_mqtt.conf #1506317424/etc/init.d/nginx configtest#1506317426vi wish_mqtt.conf #1506317447mv wish_mqtt.conf wish_mqtt.conf.bk#1506317456ls#1506317483yum search nginx#1506317597ls#1506317619cd ..#1506317619ls#1506317621vi nginx.conf #1506317663/etc/init.d/nginx configtest#1506317674mkdir stream_conf.d#1506317676ls#1506317677cd stream_conf.d/#1506317678ls#1506317713cp ../conf.d/wish_mqtt.conf.bk wish_mqtt.conf#1506317715vi wish_mqtt.conf #1506317746/etc/init.d/nginx configtest#1506317812vi wish_mqtt.conf #1506317852/etc/init.d/nginx configtest#1506317858vi wish_mqtt.conf #1506317882/etc/init.d/nginx configtest#1506317889vi wish_mqtt.conf #1506317954/etc/init.d/nginx configtest#1506317956vi wish_mqtt.conf #1506317978/etc/init.d/nginx configtest#1506317980vi wish_mqtt.conf #1506317994/etc/init.d/nginx configtest#1506317999vi wish_mqtt.conf #1506318008/etc/init.d/nginx configtest#1506318013/etc/init.d/nginx reload#1506322109ps -ef|grep lesson#1506322117ps -ef|grep java#1506419332tail -f /var/log/nginx/log/wish-host.access.log |grep v3#1506422947df#1506422956cd /var/log/nginx/#1506422956ls#1506422957ll#1506422978rm error.*.gz -rf#1506422980ls#1506422982cd log/#1506422982ls#1506422986cd wish#1506422986ls#1506422987ll#1506422999cd ..#1506422999ls#1506423004ll#1506423021rm img2.ifenghui.com.access.log #1506423028/etc/init.d/nginx configtest#1506423031/etc/init.d/nginx reload#1506423032ls#1506423033cd sp#1506423037cd storybook#1506423038ls#1506423038ll#1506423043cd ..#1506423043ls#1506423044df#1506423050cd /var/log#1506423050ls#1506423052ll#1506423077cd py/#1506423078ls#1506423080ll#1506423083cd msgcountPy/#1506423084ll#1506423098cd ..#1506423099ls#1506423101cd ..#1506423101ls#1506423110cd face#1506423110ls#1506423112cd ..#1506423115cd face_api/#1506423115ls#1506423118cd bqapi2/#1506423118ls#1506423122cd uploads/#1506423122ls#1506423124cd ..#1506423125cd application/#1506423125ls#1506423130cd ..#1506423131ls#1506423132cd ..#1506423133ls#1506423134cd ..#1506423134ls#1506423135pwd#1506423149rm face_api -rf#1506423150ls#1506423159cd bqapi2/#1506423160ls#1506423161cd ..#1506423162ls#1506423165rm bqapi2 -rf#1506423172cd biaoqing#1506423172ls#1506423174cd ..#1506423175ls#1506423181rm biaoqing -rf#1506423185rm biaoqingadmin -rf#1506423255df#1506423260ls#1506423265cd web#1506423265ls#1506423267cd ..#1506423268ls#1506423271rm web -rf#1506423286cd howToUse/#1506423287ls#1506423289cd ..#1506423290ls#1506423307rm howToUse -rf#1506423323cd howToUse/#1506423323ls#1506423332cd ..#1506423333ls#1506423338rm howToUse -rf#1506423353ls#1506423354df#1506423359cd nginx/#1506423359sl#1506423360ls#1506423362ll#1506423364cd log#1506423365ls#1506423366ll#1506423388rm dongman.ifenghui.com-host.access.log #1506423395cd ifenghui/#1506423396ls#1506423397ll#1506423404q#1506423405ls#1506423407cd ..#1506423407ls#1506423409cd wish#1506423410ls#1506423411ll#1506423440rm wish-host_2017-08-* -rf#1506423827df#1506429618cd /var/log/nginx/log/#1506429625cat wish-host.access.log |grep 500#1506429641cat wish-host.access.log |grep &quot; 500 &quot;#1506429766cat wish-host.access.log |grep alipayNotify#1506430102cat wish-host.access.log |grep &quot; 500 &quot;#1506533635cd /var/log/nginx/log/#1506533645cat wish-host.access.log |grep POST#1506533660cat wish-host.access.log |grep POST|grep comment#1506533668ls#1506533670cd wish#1506533671ls#1506533690cat wish-host_2017-09-27.log |grep POST |grep Comment#1506489255tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1506528638tail -f /var/log/nginx/log/wish-host.access.log #1506528644tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1506569596crontab -e#1506570203ls#1506579405cd /etc/nginx/#1506579405ls#1506579414cd conf#1506579417cd conf.d/#1506579417ls#1506579887ll *.conf#1506579894vi fenghui_help.conf #1506579950/etc/init.d/nginx configtest#1506579954/etc/init.d/nginx reload#1506663345tail -f /var/log/nginx/log/wish-host.access.log |grep ver#1506663371tail -f /var/log/nginx/log/wish-host.access.log |grep @After(&quot;execution(* com.ifenghui.app.ad.dao.AdsDao.save(..))&quot;)#1506663371 public void afterStatusService(JoinPoint jp)&#123;#1506663372 //ڣ٦֢ٶһԃȥ phpoԐлϢһӬڽһؖדì׸ȒˇҳۺզϞרȷɏ͵#1506663387tail -f /var/log/nginx/log/wish-host.access.log |grep 124.204.41.3#1506663422tail -f /var/log/nginx/log/wish-host.access.log |grep 405972#1506737167tail -f /var/log/nginx/log/wish-host.access.log |grep 124.204.41.3#1506741468tail -f /var/log/nginx/log/wish-host.access.log |grep 124.204.41.3#1506743339/etc/init.d/nginx configtest#1506744020cd /etc/nginx/conf.d/#1506744021ls#1506744025vi dongman.conf#1506744067/etc/init.d/nginx reload#1506310920tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1506568702tail -f /var/log/nginx/log/wish-host.access.log |grep 489080#1506665857cd /chroot/wishroot/#1506665858ls#1506665863cd queue/Interface/#1506665867svn up#1506753505tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1506754601cd /chroot/wish_beta/#1506754604svn up#1506754606ls#1506754750cd Interface/#1506754751svn up#1506754769cd Lib/Action/#1506754774vi LikeOtherAction.class.php #1506755022cd ..#1506755024cd Service/#1506755044cd ..#1506755046cd Action/#1506755052vi LikeOtherAction.class.php #1506755545cd ..#1506755547cd Service/#1506755550vi SpringCloudService.class.php #1506755713cd ..#1506755717cd Conf/#1506755718ls#1506755724svn up#1506755730vi config.php#1506755976cd ..#1506755995ls#1506756006vi interface.php#1506756016cd Interface/#1506756020cd Runtime/Logs/#1506756020ls#1506756075tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1506756114cd /var/log/nginx/log/wish-host.access.log #1506756120cd /var/log/nginx/log/#1506756121ls#1506756142tail -f wishbeta-host.access.log |grep 2603#1506761099tail -f wish-host.access.log |grep 2603#1506396749tail -f /var/log/nginx/log/wish-host.access.log #1506396790tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1506396841tail -f /var/log/nginx/log/wish-host.access.log |grep getPerson#1506583300tail -f /var/log/nginx/log/wish-host.access.log |grep 489080#1506589066tail -f /var/log/nginx/log/storybook-host.access.log#1506590165tail -f /var/log/nginx/log/wish-host.access.log |grep getPerson#1506590232tail -f /var/log/nginx/log/wish-host.access.log |grep 408816#1506647178tail -f /var/log/nginx/log/storybook-host.access.log#1506647204cat /var/log/nginx/log/storybook-host.access.log|grep 1.3.1#1506657671tail -f /var/log/nginx/log/wish-host.access.log #1506742614cd /chroot#1506742614ls#1506742623cd activity/#1506742624ls#1506742626cd ../#1506742626ls#1506742633cd wish#1506742633ls#1506742639cd ../#1506742671;s#1506742671ls#1506742674cd dongman#1506742675ls#1506742679cd huodong/#1506742681svn up#1506742706/etc/init.d/php56-php-fpm restart#1506742981cd /etc/nginx#1506742981ls#1506742988cd conf.d/#1506742988ls#1506743004cat dongman.conf#1506743099vim dongman.conf#1506743150/etc/init.d/nginx reload#1506743179vim dongman.conf#1506743850cd /chroot/dongman#1506743852cd huodong/#1506743854svn up#1506743863/etc/init.d/nginx reload#1506867708tail -f /var/log/nginx/log/wish-host.access.log #1506867739tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1507000898cat -f /var/log/nginx/log/wish-host.access.log |grep 448886#1507000904cat /var/log/nginx/log/wish-host.access.log |grep 448886#1507001033cat /var/log/nginx/log/wish-host.access.log |grep 448886|grep addSpecial#1507001095cat /var/log/nginx/log/wish-host.access.log |grep 448723|grep addSpecial#1507001132cat /var/log/nginx/log/wish/wish-host_2017-10-02.log |grep 448723|grep addSpecial#1507001160cat /var/log/nginx/log/wish/wish-host_2017-10-02.log |grep 448886|grep addSpecial#1507001186cat -f /var/log/nginx/log/wish-host.access.log |grep 448886#1507001193cat /var/log/nginx/log/wish-host.access.log |grep 448886#1507001206cat /var/log/nginx/log/wish-host.access.log |grep 448886|grep getStatusDetial#1507001215cat /var/log/nginx/log/wish-host.access.log |grep 448886|grep getStatusDetial#1507001271cat /var/log/nginx/log/wish-host.access.log |grep 448886|grep getStatusDetail#1507001315cat /var/log/nginx/log/wish-host.access.log |grep loginId=374390#1507001342cat /var/log/nginx/log/wish-host.access.log |grep loginId=374390 &gt;&gt;u374390.log#1507001345pwd#1507001346ls#1507001354vi u374390.log #1507001465cat /var/log/nginx/log/wish-host.access.log |grep 448886|grep getStatusDetail#1507001492cat /var/log/nginx/log/wish-host.access.log |grep 448886|grep recommend#1507001526vi u374390.log #1507344201cd /chroot/howToUse/#1507344202ls#1507344225crontab -e#1507344237cat ./wish_paihang.sh #1507344252./wish_paihang.sh 3#1507345026./clush/clush_queue.sh #1507345062./wish_paihang.sh 3#1507528670tail -f /var/log/nginx/log/storyship-host.access.log #1507536613cd /etc/nginx/co#1507536616cd /etc/nginx/conf.d/#1507536616ls#1507536632vi wx.storybook.conf #1507545069ܴail #1507545183tail -f /var/log/nginx/log/wish-host.access.log #1507545187tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1507601799df#1507600030crontab -e#1507527552cat /var/log/nginx/log/wish-host.access.log |grep 2603#1507527568tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1507530960cd /chroot/wish_beta/Interface/Lib/#1507530962SVN UP#1507530966svn up#1507531205cd Service/#1507531206ls#1507531212vi StatisticsService.class.php #1507531245cd ..#1507531247cd Model/#1507531258vi StatisticsModel.class.php #1507531313vi StatisticsPaihangModel.class.php #1507531408cd ..#1507531409cd Service/#1507531422vi StatisticsService.class.php #1507531447cd ..#1507531449cd Action/#1507531456vi StatisticsAction.class.php #1507531527rm -f StatisticsAction.class.php #1507531529svn up#1507531532ll#1507531542cd ..#1507531544cd Service/#1507531553rm -rf StatisticsService.class.php #1507531554svn up#1507531556cd ..#1507531563cd Model/#1507531575rm -rf StatisticsPaihangModel.class.php #1507531577svn up#1507531632cd ..#1507531636cd Conf/#1507531638ls#1507531646vi config.php#1507531669rm -rf config.php#1507531673rm -rf config.php_svn #1507531674svn up#1507531678vi config.php#1507531692rm -rf config.php#1507531703cp config.php_svn config.php#1507531704ls#1507531830cd Lib#1507531833cd ..#1507531835cd Lib#1507531837cd Service/#1507531849rm -rf StatusService.class.php #1507531850svn up[#1507531851svn up#1507531866cd ..#1507531868cd Model/#1507531876rm -rf StatusModel.class.php #1507531877svn up#1507531973tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1507540465cd ..#1507540467svn up#1507545232tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1507603567df#1507618638cd /etc/nginx/#1507618638ls#1507618641cat nginx.conf #1507618656ls#1507618663cd conf.d/#1507618664ls#1507618672cat wish.conf#1507688915cd /var/log/nginx/log/#1507688916ls#1507688930tail -f storybook-host.access#1507688937tail -f storybook-host.access.log#1507690664tail -f wish-host.access.log |grep 2603#1507691083tail -f wish-host.access.log #1507691109tail -f wish-host.access.log |grep 489080#1507713654tail -f wish-host.access.log |grep 2603#1507778336tail -f /var/log/nginx/log/storybook-host.access.log#1507785314cd /etc/nginx/conf.d/#1507785314ls#1507785325cat *|grep static.ifenghui.com#1507785330cat *|grep static#1507785334ls#1507785343vi fenghuicomic.conf #1507785364/etc/init.d/nginx configtest#1507785367/etc/init.d/nginx reload#1507863062tail -f /var/log/nginx/log/storybook-host.access.log#1507863070tail -f /var/log/nginx/log/storybook-host.access.log|grep py#1507863077tail -f /var/log/nginx/log/wish-host.access.log #1507864004tail -f /var/log/nginx/log/storybook-host.access.log|grep py#1507864008tail -f /var/log/nginx/log/storybook-host.access.log#1507865823tail -f /var/log/nginx/log/wish-host.access.log #1507865827tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1507874892tail -f /var/log/nginx/log/wish-host.access.log |grep 311628#1507874901cat -f /var/log/nginx/log/wish-host.access.log |grep 311628#1507874907cat /var/log/nginx/log/wish-host.access.log |grep 311628#1507874928cat /var/log/nginx/log/wish-host.access.log |grep loginId=311628#1507875640cat /var/log/nginx/log/wish-host.access.log |grep loginId=494142#1507880709cat /var/log/nginx/log/wish-host.access.log |grep POST#1507772530crontab -e#1507772842cd /etc/nginx/#1507772845vi nginx.conf #1507773005nginx -s reload#1507773198cd /var/log/nginx/log/#1507773199ls#1507773213tail -f storybook-host.access.log#1507779827ls#1507779840#1507875840ls#1507875850tail -f storybook-host.access.log#1507884469tail -f /var/log/nginx/log/storybook-host.access.log#1508394907аs #1508394915ps -ef|grep msg#1508394920ps -ef|grep py#1508394923df#1508394949tail -f /var/log/py/msgcountPy/server.log#1508483487tail -f /var/log/nginx/log/storybook/storybook-host_2017-10-19.log #1508483549cat /var/log/nginx/log/storybook/storybook-host_2017-10-19.log |grep b426b84b3cae987f32c76d225a6e8eba#1508483593cat /var/log/nginx/log/storybook/storybook-host_2017-10-19.log |grep b426b84b3cae987f32c76d225a6e8eba|grep POST#1508483866cat /var/log/nginx/log/storybook/storybook-host_2017-10-19.log |grep b426b84b3cae987f32c76d225a6e8eba &gt;&gt;user904.log#1508483871vi user904.log #1508298471tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1508312411tail -f /var/log/nginx/log/wish-host.access.log #1508316241tail -f /var/log/nginx/log/wish-host.access.log \\#1508316245tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1508316919tail -f /var/log/nginx/log/wish-host.access.log |grep getUserFavorites#1508406031tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1508488585tail -f /var/log/nginx/log/storybook-host.access.log#1508492443tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1508207281tail -f /var/log/nginx/log/wish-host.access.log|grep 2603#1508488166cd /var/log/nginx/log/storybook#1508488167ls#1508488168ll#1508488185cat storybook-host_2017-10-04.log |grep 1213#1508488248cat storybook-host_2017-10-04.log |grep b426b84b3cae987f32c76d225a6e8eba#1508827274ls#1508827282crontab -l#1508909595ls#1508909606crontab -l#1508909710ls#1508909715cd /chroot#1508909716ls#1508909730dc wish#1508909732cd wish#1508909733ls#1508728203tail -f /var/log/nginx/log/wish-host.access.log|grep 2603#1508812667cat storybook-host_2017-10-04.log |grep b426b84b3cae987f32c76d225a6e8eba#1508812672tail -f /var/log/nginx/log/wish-host.access.log|grep 2603#1508830861tail -f /var/log/nginx/log/storybook-host.access.log#1508989768tail -f /var/log/nginx/log/wish-host.access.log|grep 2603#1509000227tail -f /var/log/nginx/log/wish-host.access.log|grep 173945#1509005810tail -f /var/log/nginx/log/wish-host.access.log|grep 2603#1509089775tail -f /var/log/nginx/log/wish-host.access.log|grep getActivityLabel#1509089826tail -f /var/log/nginx/log/wish-host.access.log |grep getActivityLabel#1509094059tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1509327825docker ps#1509327845df#1509334962tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1509522953crontab -l#1509613080cd /chroot/api#1509613080ls#1509613083svn up#1509613096/etc/init.d/php56-php-fpm restart#1509614913cd /var/log/nginx/#1509614913ls#1509614917cd log#1509614918ls#1509614933tail -f 215-host.access.log #1509614943ls#1509614994tail -f fenxiao-host.access.log #1509615127cd /chroot/api#1509615127ls#1509615129svn up#1509615140/etc/init.d/php56-php-fpm restart#1509615221cd app/#1509615222ls#1509615224cd api#1509615224ls#1509615226cd controller/#1509615226ls#1509615232cat Order.php #1509615268tail -f /var/log/nginx/log/fenxiao-host.access.log #1509615334ls#1509615335cd ../#1509615335ls#1509615337cd ../#1509615337ls#1509615345tail config.php #1509615352cat config.php #1509615367cat database.php#1509615394tail -f /var/log/nginx/log/fenxiao-host.access.log #1509615477cd cont#1509615481la#1509615483ls#1509615485cd api#1509615486ls#1509615498cd controller#1509615523cd ../#1509615523ls#1509615525ks#1509615528ls#1509615538cd ../#1509615538ls#1509615547vim config.php#1509615567cd ../#1509615568ls#1509615570cd../#1509615570ls#1509615572cd ../#1509615572ls#1509615575cd api#1509615575ls#1509615579cd runtime/#1509615579ls#1509615583cd log#1509615583ls#1509615587cd 201711#1509615587ls#1509615592tail 02.log#1509615715cat 02.log #1509615976tail -f /var/log/nginx/log/fenxiao-host.access.log #1509589490ܴail #1509589505tail -f /var/log/nginx/log/wish-host.access.log #1509589513tail -f /var/log/nginx/log/wish-host.access.log |grep ver#1509589552tail -f /var/log/nginx/log/wish-host.access.log |grep channel#1509601456tail -f /var/log/nginx/log/*.log|grep html#1509601475tail -f /var/log/nginx/log/*.log|#1509601483tail -f /var/log/nginx/log/*.log|grep html#1509601498tail -f /var/log/nginx/log/*.log|grep 124.204.41.3#1509536427df#1509536435tail -f /var/log/nginx/log/wish-host.access.log#1509536504tail -f /var/log/nginx/log/wish-host.access.log|grep 489086#1509538841tail -f /var/log/nginx/log/wish-host.access.log|grep py#1509538896tail -f /var/log/nginx/log/wish-host.access.log|grep 2603#1509589178tail -f /var/log/nginx/log/wish-host.access.log#1509589199tail -f /var/log/nginx/log/wish-host.access.log|grep Bbs#1509592985tail -f /var/log/nginx/log/wish-host.access.log|grep etail#1509609715tail -f /var/log/nginx/log/wish-host.access.log|grep 2603#1509609857tail -f /var/log/nginx/log/wish-host.access.log|grep etail#1509609901tail -f /var/log/nginx/log/wish-host.access.log|grep 413454#1509610849tail -f /var/log/nginx/log/wish-host.access.log|grep 2603#1509617193tail -f /var/log/nginx/log/wish-host.access.log|grep publish#1509617202cat /var/log/nginx/log/wish-host.access.log|grep publish#1509681406tail -f /var/log/nginx/log/storybook-host.access |grep Bbs#1509681419tail -f /var/log/nginx/log/storybook-host.access.log |grep Bbs#1509681435tail -f /var/log/nginx/log/storybook-host.access.log#1509681457cat /var/log/nginx/log/wish-host.access.log|grep Bbs#1509681467tail -f /var/log/nginx/log/wish-host.access.log|grep Bbs#1509693561cd /chroot/wish_beta/#1509693562ls#1509693565cd tiN#1509693567Interface/#1509693569cd Interface/#1509693570ls#1509693573svn up#1509693719ls#1509693721cd Lib/#1509693724cd Action/#1509693729vi StatisticsAction.class.php #1509693772cd ..#1509693774cd Service/#1509693781vi StatisticsService.class.php #1509702873tail -f /var/log/nginx/log/wish-host.access.log|grep 2603#1509935081docker ps#1510026464tail -f /var/log/nginx/log/storybook-host.access#1510026469tail -f /var/log/nginx/log/storybook-host.access.log#1510026538cat /var/log/nginx/log/storybook-host.access.log |grep 23c7a28353456e02ed52095e10e92307#1510055297df#1510056098docker ps#1510056103yum install docker#1510056149docker ps#1510056170service docker start#1510056174docker start#1510056180service start docker#1510056183docker ps#1510056230service docker start#1510056235yum install docker-io#1510056247docker ps#1510056257service start docker#1510056263service docker start#1510056292yum remove docker#1510056305yum install docker-io#1510056325docker ps#1510056335service docker start#1510056338docker ps#1510056354top#1510056445docker run -it -p 9200:9200 -p 9300:9300 --name &quot;elasticsearch&quot; registry.cn-hangzhou.aliyuncs.com/com_fenghui_springcloud/elastic_search:0.1.0 elasticsearch#1510056622docker ps#1510056626docker ps -a#1510056634start 455bb50fecea#1510056639docker start 455bb50fecea#1510056652docker ps#1510056657docker ps -a#1510056662docker rm 455bb50fecea#1510056668df#1510056679docker run -itd -p 9200:9200 -p 9300:9300 --name &quot;elasticsearch&quot; registry.cn-hangzhou.aliyuncs.com/com_fenghui_springcloud/elastic_search:0.1.0 elasticsearch#1510056696cd /var/lib/docker/#1510056696ls#1510056700cd containers/#1510056700ls#1510056711cd ..#1510056712ls#1510056768ll#1510056788docker -v#1510056802docker up#1510056806docker --help#1510056823docker ps -a#1510056828docker start ticsearch#1510056835docker start 0df57c33f031#1510056857cat /var/log/docker #1510056886docker start 0df57c33f031ca6253a7487320cd5d1246a0bed4d429312b7b29b6c1f8b8781d#1510056916cd /var/lib/docker/containers/0df57c33f031ca6253a7487320cd5d1246a0bed4d429312b7b29b6c1f8b8781d#1510056918ls#1510056920cd ..#1510056973docker ps -a#1510056985docker rm 0df57c33f031#1510056991docker run -itd -p 9200:9200 -p 9300:9300 registry.cn-hangzhou.aliyuncs.com/com_fenghui_springcloud/elastic_search:0.1.0 elasticsearch#1510057000docker run -itd -p 9200:9200 -p 9300:9300 registry.cn-hangzhou.aliyuncs.com/com_fenghui_springcloud/elastic_search:0.1.0#1510057020docker run -itd https://registry.cn-hangzhou.aliyuncs.com/com_fenghui_springcloud/elastic_search:0.1.0#1510057027docker run -itd registry.cn-hangzhou.aliyuncs.com/com_fenghui_springcloud/elastic_search:0.1.0#1510057037docker run registry.cn-hangzhou.aliyuncs.com/com_fenghui_springcloud/elastic_search:0.1.0#1510057042docker ps -a#1510057051docker rm cede719408b3#1510057060docker rm 1d0b26145a37#1510057067docker rm cd3a335ce75d#1510057077docker rm b244d7262e2c#1510104848ӊ#1510104850ɣd #1510104881cd /usr/local/src/#1510104882ls#1510104885wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.6.4.tar.gz#1510105074ls#1510105083tar zxvf elasticsearch-5.6.4.tar.gz #1510105086cd elasticsearch-5.6.4#1510105087ls#1510105091cd ..#1510105104cp elasticsearch-5.6.4 ../elasticsearch#1510105106cd ..#1510105107ls#1510105120cd src/#1510105120ls#1510105139cp elasticsearch-5.6.4 /usr/local/elasticsearch -rf#1510105142cd ..#1510105142ls#1510105145cd elasticsearch/#1510105145ls#1510105151./bin/elasticsearch#1510105191adduser elastic#1510105198passwd elastic#1510105229chown ./ elastic -R#1510105238chown elastic ./ -R#1510105248su elastic#1510106414vi /etc/security/limits.d/90-nproc.conf #1510106450̕su #1510106453su elastic#1510106339vi /etc/security/limits.conf #1510106356su elastic#1510106218vi /etc/security/limits.conf#1510106253su elastic#1510106098vi /etc/sysctl.conf#1510106132sysctl -p#1510106139su elastic#1510105792ulimit -n 65536#1510105798su elastic#1510105712vi /etc/sysctl.conf#1510105726./bin/elasticsearch#1510105733su elastic#1510121950top#1510121961ls#1510121965cd /usr/local/src/#1510121965ls#1510121970wget https://artifacts.elastic.co/downloads/kibana/kibana-5.6.4-linux-x86_64.tar.gz#1510121983ll#1510121997tar zxvf kibana-5.6.4-linux-x86_64.tar.gz #1510122023cp kibana-5.6.4-linux-x86_64 ../kibana -rf#1510122031cd ..#1510122033cd kibana/#1510122033ls#1510122037./bin/kibana -d#1510122049ps -ef|grep kibana#1510123150./bin/kibana#1510123350nohup ./bin/kibana &amp;#1510136544cd /chroot/api#1510136545ls#1510136548svn up#1510136639/etc/init.d/php56-php-fpm#1510136642/etc/init.d/php56-php-fpm restart#1510136789svn up#1510136791/etc/init.d/php56-php-fpm restart#1510137570svn up#1510137571/etc/init.d/php56-php-fpm restart#1510190045cd /usr/local/elasticsearch/#1510190045ls#1510190052./bin/elasticsearch restart#1510190063./bin/elasticsearch stop#1510190069docker ps#1510190084ps -ef|grep elast#1510190112kill 32-042#1510190116kill 32042#1510190123./bin/elasticsearch -d#1510190348top#1510190371ps -ef|grep kibana#1510190375ps -ef|grep ki#1510190382cd /usr/local/kibana/#1510190387./bin/kibana stop#1510190398ps -ef|grep kibana#1510190461fuser -n tcp 5601#1510190472kill 8836#1510189766cd /usr/local/elasticsearch/#1510189769bin/elasticsearch-plugin install x-pack#1510189861cd ..#1510189871pwd#1510189873ls#1510189875cd kibana/#1510189886bin/kibana-plugin install x-pack#1510190340bin/kibana-plugin remove x-pack#1510190479bin/kibana-plugin install x-pack#1510192262nohup ./bin/kibana &amp;#1510192290tail -f nohup.out #1510192344curl localhost:9200#1510192356ls#1510192364curl 127.0.0.1:9200#1510193925ɣd#1510193927cd ..#1510193930cd elasticsearch/#1510193930ls#1510193932cd config/#1510193932ls#1510193934vi elasticsearch.yml #1510193950ps -ef|grep elastic#1510193955cd ..#1510193959./bin/elasticsearch#1510193973su elastic#1510212062ta#1510212959cd /chroot/api#1510212959ls#1510212961svn up#1510212972/etc/init.d/php56-php-fpm restart#1510213825svn up#1510213826/etc/init.d/php56-php-fpm restart#1510213901svn up#1510213903/etc/init.d/php56-php-fpm restart#1510216321tail -f /var/log/nginx/log/wish-host.access.log |grep User#1510218262yum install logstash#1510218346rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch#1510218356vim /etc/yum.repos.d/logstash.repo#1510218372yum install logstash#1510218681cd /usr/share/logstash#1510218687bin/logstash -e &#x27;input &#123; stdin &#123; &#125; &#125; output &#123; stdout &#123;&#125; &#125;&#x27;#1510218734yum install gem#1510291617tail -f /var/log/nginx/log/openvista-host.access.log #1510292357df#1510293080tail -f /var/log/nginx/log/openvista-host.access.log #1510293948ޣd #1510293954cd /etc/nginx/#1510293958vi nginx.conf #1510294148cd /usr/share/logstash/#1510294149ls#1510283486crontab -l#1510294545tail -f /var/log/nginx/log#1510294551cd /var/log/nginx/log#1510294552ls#1510294631cd storybook#1510294632ls#1510294635cd ../#1510294637ls#1510294649tail -f storybook-host.access.log#1510294699ls#1510294729tail -f 215-host.access.log #1510298606ls#1510298653cd /etc/nginx#1510298654ls#1510298657cd conf.d/#1510298658ls#1510298731tail -f /var/log/nginx/log/storybook.access.log#1510298739tail -f /var/log/nginx/log/storybook-host.access.log#1510298788cd /var/log/nginx/log#1510298788ls#1510298797tail -f ./admin-storybook-host.access.log #1510306835cd /usr/share/logstash/#1510306835ls#1510306850cd /etc/logstash/#1510306850ks#1510306853ls#1510306865cd conf.d#1510306909vi logstash.conf#1510307431cd /chroot/howToUse/#1510307432ls#1510307446vi logstash.sh#1510307465 /usr/share/logstash/bin/logstash#1510307490ls#1510307501vi /etc/logstash/conf.d/logstash.conf #1510307674 /usr/share/logstash/bin/logstash#1510307687 /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/#1510307813 /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/*#1510307866curl 10.135.196.35:9200#1510307877curl 101.37.254.236:9200#1510307899curl 10.80.62.93:9200#1510307922ls#1510307925pwd#1510307972vi /etc/logstash/conf.d/logstash.conf #1510307999 /usr/share/logstash/bin/logstash #1510308031 /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/*#1510308205 /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf #1510308290ls#1510308293vi logstash.sh #1510308303ls#1510308324chmod 777 logstash.sh #1510308329./logstash.sh #1510311558cd /etc/nginx#1510311563cd conf.d/#1510311563ls#1510311591vim storyship.conf #1510311703/etc/init.d/nginx reload#1510313162vim storyship.conf #1510313252/etc/init.d/nginx reload#1510313260/etc/init.d/nginx restart#1510313353vim storyship.conf #1510314308ls#1510314317cat storybook.conf #1510314348ls#1510314356cat admin.storybook.conf #1510314383ls#1510314395cat wx.storybook.conf #1510314442ls#1510314455vi storyship.conf #1510314494/etc/init.d/nginx restart#1510314725ls#1510314733vim storyship.conf#1510314766/etc/init.d/nginx restart#1510314628cd /etc/nginx/#1510314628ls#1510314631cd conf.d/#1510314631ls#1510314637cat wx.storybook.conf #1510369923tail -f /var/log/nginx/log/openvista-host.access.log #1510369987tail -f /var/log/nginx/log/openvista-host.access.log |ad#1510369991tail -f /var/log/nginx/log/openvista-host.access.log |grep ad#1510370546tail -f /var/log/nginx/log/openvista-host.access.log#1510370949tail -f /var/log/nginx/log/openvista-host.access.logɼgre#1510370985tail -f /var/log/nginx/log/openvista-host.access.log|grep GET#1510371283tail -f /var/log/nginx/log/openvista-host.access.log|grep 112.224.19.90#1510371298tail -f /var/log/nginx/log/openvista-host.access.log|grep GET#1510371372tail -f /var/log/nginx/log/openvista-host.access.log|grep 112.224.19.90#1510425422cd /etc/logstash/conf.d/#1510425422ls#1510425427vi logstash.conf #1510426668cd /var/log/nginx/log/#1510426669ll#1510426679tail storybook-host.access.log#1510428861cd /etc/nginx/#1510428863vi nginx.conf #1510439269cd /etc/logstash/#1510439270ls#1510439277mkdir patterns#1510439279cd patterns/#1510439283vi nginx#1510439298ls#1510439301cd ..#1510439301ls#1510439306cd conf.d/#1510439307ls#1510439324cat logstash.conf #1510466516cd /etc/logstash/#1510466516ls#1510466517cd conf.d/#1510466518ls#1510466525cd ..#1510466527cd patterns/#1510466528ls#1510466529vi nginx #1510467039vi /etc/nginx/nginx.conf #1510467238vi nginx #1510467390ls#1510467392cd ..#1510467393ls#1510467395cd conf.d/#1510467395ls#1510467397vi logstash.conf #1510468068cd ..#1510468071vi patterns/nginx #1510468671vi logstash.conf #1510468676ls#1510468679vi patterns/nginx #1510469676yum list logstash#1510469733yum update logstash#1510462285tail -f /var/log/nginx/log/storybook-host.access.log#1510462734ps -ef|grep log#1510462741ps -ef|grep logst#1510462867kill 21246#1510463035ls#1510463036pwd#1510463041cd /etc/logstash/#1510463042ls#1510463043cd conf.d/#1510463043ls#1510463045vi logstash.conf #1510463194tail /var/log/nginx/log/storybook-host.access.log#1510463256ls#1510463259vi logstash.conf #1510463472tail -f /var/log/nginx/log/openvista-host.access.log #1510463484/etc/init.d/nginx reload#1510463487tail -f /var/log/nginx/log/openvista-host.access.log #1510463757ll /etc/logstash/patterns#1510461511cd /etc/logstash/#1510461511ls#1510461525vi patterns/nginx #1510461625ls#1510461629cd conf.d/#1510461630ls#1510461635cat logstash.conf #1510461664ls#1510461667vi logstash.conf #1510462044ls#1510463366top#1510463656pwd#1510463659cd ..#1510463660cd patterns/#1510463661ls#1510463662vi nginx #1510463685ls#1510463687cd ..#1510463688ls#1510463689cd conf.d/#1510463689ls#1510463691vi logstash.conf #1510469814cd /etc/logstash/#1510469816vi patterns/nginx #1510469993top#1510470003vnstat -l -i eth1#1510470024tail -f /var/log/nginx/log/storybook-host.access.log#1510461997cd /etc/logstash/patterns#1510462759pwd#1510462802/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf #1510471179/chroot/howToUse/logstash.sh #1510474668cd /etc/logstash/#1510474669ls#1510474682cd conf.d/#1510474682ls#1510474684vi logstash.conf #1510477794cd /etc/logstash/#1510477795ls#1510477797cd conf.d/#1510477797ls#1510477804vi logstash.conf #1510477839cd /chroot#1510477840ls#1510477843cd howToUse/#1510477844ls#1510477851ps -ef|grep logstash#1510477857kill 24045#1510477864./logstash.sh #1510477882vi /etc/logstash/conf.d/logstash.conf #1510477915ps -ef|grep lost#1510477920ps -ef|grep logstash#1510477926kill 28445#1510477931./logstash.sh #1510481059tail -f /var/log/nginx/log/storybook-host.access#1510481062tail -f /var/log/nginx/log/storybook-host.access.log#1510483487cat /var/log/nginx/log/storybook-host.access.log|grep POST#1510483600cat /var/log/nginx/log/storybook-host.access.log|grep POST|grep Alipay#1510483698cat /var/log/nginx/log/storybook-host.access.log|grep POST|grep Reg#1510510535cd /etc/logstash/conf.d/logstash.conf #1510510539cd /etc/logstash/conf.d/#1510510541vi logstash.conf #1510510632cd /chroot#1510510634cd howToUse/#1510510635ls#1510510637cat logstash.sh #1510510646ps -ef|grep logs#1510510659ps -ef|grep logstash#1510510667kill 28542#1510510674/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf#1510510897/chroot/howToUse/logstash.sh #1510535604ܴail #1510535623tail -f /var/log/nginx/log/storybook-host.access.log#1510535669ls#1510535699pwd#1510535716cd /etc/logstash/patterns/#1510535716ls#1510535719cat nginx #1510535449cd /etc/logstash/conf.d/#1510535449ls#1510535453vi logstash.conf #1510535471cd ..#1510535474cd patterns/#1510535474ls#1510535476vi nginx #1510535772cd ..#1510535773cd conf.d/#1510535773ls#1510535775cat logstash.conf #1510536054ԫՊ#1510536055cd ..;#1510536058pwe#1510536059pw#1510536060pwd#1510536062ls#1510536064cd patterns/#1510536064ls#1510536066vi nginx #1510534863tail -f /var/log/nginx/log/storybook-host.access.log#1510534872tail -f /var/log/nginx/log/storybook-host.access.log|grep channel#1510534898cat /var/log/nginx/log/storybook-host.access.log#1510534999cd /etc/logstash/conf.d/#1510534999ls#1510535001vi logstash.conf #1510535045cat /chroot/howToUse/logstash.sh #1510535054ps -ef|grep logstash#1510535060kill 16020#1510535067/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf#1510535152vi logstash.conf #1510535173/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf#1510536821/chroot/howToUse/logstash.sh #1510556438crontab -l#1510561160ps -ef|grep elastic#1510561165kill 16148#1510561217cd /usr/local/#1510561217ls#1510561238elasticsearch/bin/elasticsearch -d#1510577519whereis kibana#1510577533/usr/local/kibana/bin/kibana -d#1510577565nohup /usr/local/kibana/bin/kibana &amp;#1510577582tail -f nohup.out #1510577597ps -ef|grep nohup#1510577603ps -ef|grep kibana#1510577640/usr/local/kibana/bin/kibana#1510577667ps -aux|grep elas#1510577672ps -aux|grep kibana#1510577701netstat -lnp|grep 5601#1510577723ps -ef|grep 15104#1510577743kill 14104#1510577748kill 15104#1510577753/usr/local/kibana/bin/kibana#1510577828nohup /usr/local/kibana/bin/kibana &amp;#1510577856/usr/local/elasticsearch/bin/elasticsearch -d#1510577881tail -f nohup.out #1510577935tail -f /usr/local/elasticsearch/logs/elasticsearch_access.log #1510577941tail -f /usr/local/elasticsearch/logs/elasticsearch*#1510578018ps -ef|grep elas#1510578023su elastic#1510578086ps -ef|grep elas#1509934874tail -f /var/log/nginx/log/storybook#1509934883tail -f /var/log/nginx/log/storybook-host.access.log#1509936648tail -f /var/log/nginx/log/wish-host.access.log|grep 2603#1509953440tail -f /var/log/nginx/log/storybook-host.access.log#1510367569tail -f /var/log/nginx/log/wish-host.access.log|grep 2603#1510368917tail -f /var/log/nginx/log/wish-host.access.log|grep 2603 -A 5#1510368945tail -f /var/log/nginx/log/wish-host.access.log|grep 2603 -A 10#1510557550crontab -e#1510557593cd /usr/local/coreseek#1510557594ls#1510557601cd bin/#1510557602ls#1510557605cd ..#1510557611cd varq#1510557615cd var/#1510557616ls#1510557620cd data#1510557621ls#1510557625cd ..#1510557631ls#1510557638cat index.sh #1510557651cd /etc/#1510557651ls#1510557668pwd#1510557687cd /usr/local/coreseek/etc/#1510557687ls#1510557694cat sphinx.conf#1510558165ls#1510558299crontab -e#1510558321ls#1510558323cd ..#1510558325ls#1510558335cat indexAll.sh #1510558724ps -ef#1510558752cat etc/sphinx.conf#1510559136ls#1510559141cat indexMerge.sh #1510623038tail -f /var/log/nginx/log/wish-host.access.log #1510623099cat /var/log/nginx/log/wish-host.access.log |grep 485658#1510623112cat /var/log/nginx/log/wish-host.access.log |grep 485658|grep POST#1510623131cat /var/log/nginx/log/wish/wish-host_2017-11-13.log |grep 485658|grep POST#1510623420cat /var/log/nginx/log/wish/wish-host_2017-11-13.log |grep 485658 &gt;log485658.log#1510623426vi log485658.log #1510623967cd /etc/nginx/#1510623967ls#1510623969cd nginx.conf #1510623971cd conf#1510623975cd conf.d/#1510623975ls#1510623987vi wish.conf#1510623990ls#1510623995vi admin.videoapi.conf #1510624000ls#1510624014tail *|grep 215.ifenghui#1510624023tail *.conf|grep 215.ifenghui#1510624026tail *.conf|grep 215#1510624030pwd#1510624042vi admin.videoapi.conf #1510624068tail -f /var/log/nginx/log/admin.videoapi.access.log #1510624131tail -f /var/log/nginx/log/*.log|grep admin#1510624187tail -f |grep admin#1510624201tail /var/log/nginx/log/*.log|grep admin#1510624229ls#1510624246tail /var/log/nginx/log/wish*#1510624276tail /var/log/nginx/log/215-host.access.log#1510624281tail -f /var/log/nginx/log/215-host.access.log#1510624292tail -f /var/log/nginx/log/215*#1510624303tail -f /var/log/nginx/log/215.videoapi.access.log #1510624325cat /var/log/nginx/log/215.videoapi.access.log |grep 485658#1510624447ll#1510624844tail /var/log/nginx/log/215.videoapi.access.log #1510625008cd /var/log/nginx/#1510625008ls#1510625012cd log/#1510625013ls#1510625019cd ifenghui/#1510625019ls#1510625031tail -f www.ifenghui.com-host_2017-11-13.log #1510625033ls#1510625034cd ..#1510625035ls#1510625044cd wish#1510625045ls#1510625047cd ..#1510625048ls#1510625060ll 215.videoapi.access.log #1510625082tail 215.videoapi.access.log #1510625092vi 215.videoapi.access.log #1510645142cd /etc/nginx/#1510645142ls#1510645143cd conf#1510645144ls#1510645145cd conf.d/#1510645146ls#1510645162tail *|grep activity#1510645183cd /etc/nginx/conf.d/#1510645184ls#1510645193vi storyship.conf #1510645369/etc/init.d/nginx configtest#1510645373/etc/init.d/nginx reload#1510645417ls#1510645434vi hfbug.conf #1510645452/etc/init.d/nginx configtest#1510645455/etc/init.d/nginx reload#1510665263ɣd #1510665278cd /usr/share/logstash/#1510665279ls#1510665281cd config/#1510665281ls#1510665285cd ..#1510665285ls#1510665292cd data/#1510665292ls#1510665294cd ..#1510665295ls#1510649745df#1510649759tail -f /var/log/nginx/log/storybook-host.access.log#1510650300ping storybook.ifenghui.com#1510650355tail -f /var/log/nginx/log/storybook-host.access.log#1510716182tail -f /var/log/nginx/log/wish-host.access.log #1510716187tail -f /var/log/nginx/log/storybook-host.access.log|grep lesson#1510716195tail -f /var/log/nginx/log/storybook-host.access.log|grep Lesson#1510716205tail -f /var/log/nginx/log/storybook-host.access.log|grep 4977#1510716220tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1510735721tail -f /var/log/nginx/log/wish-host.access.log |grep eventAnalytics#1510735767curl -X POST localhost//v2/interface.php?m=Index&amp;a=eventAnalytics&amp;loginId=544634&amp;eventType=18&amp;eventContent=485956&amp;deviceToken=Al1QJbxcelm0YxGwFffMuWVU-iiODTBlNwsDvJsf2h9w&amp;ver=4.7.5#1510735791curl -X POST http://videoapi.ifenghui.com/v2/interface.php?m=Index&amp;a=eventAnalytics&amp;loginId=544634&amp;eventType=18&amp;eventContent=485956&amp;deviceToken=Al1QJbxcelm0YxGwFffMuWVU-iiODTBlNwsDvJsf2h9w&amp;ver=4.7.5#1510797301tail -f /var/log/nginx/log/fenxiao-host.access.log #1510797306tail -f /var/log/nginx/log/fenxiao-host.access.log |grep POST#1510797319cat /var/log/nginx/log/fenxiao-host.access.log |grep POST#1510803367cd /etc/ngihnx#1510803370cd /etc/nginx#1510803370ls#1510803374cd conf.d#1510803374ls#1510803385vi storyship.conf #1510810267cat storyship#1510810271cat storyship.conf#1510810279ls#1510810296/etc/init.d/nginx -s reload#1510810303/etc/init.d/nginx restart#1510811694cat storyship.conf#1510813870crontab -l#1510813912crontab -e#1510813960crontab -l#1510816144ls#1510816158vi storyship.conf #1510816190/etc/init.d/nginx restart#1510816214cat storyship.conf #1510816230ls#1510816309ps -ef nginx#1510816322ps -aux |grep nginx#1510816336ls#1510816405vi storyship.conf#1510816447/etc/init.d/nginx restart#1510816493vi storyship.conf#1510816520/etc/init.d/nginx restart#1510816677vi storyship.conf#1510816802/etc/init.d/nginx restart#1510816827vi storyship.conf#1510816923/etc/init.d/nginx restart#1510816937vi storyship.conf#1510817055/etc/init.d/nginx restart#1510817068vi storyship.conf#1510817135/etc/init.d/nginx restart#1510817207vi storyship.conf#1510817239/etc/init.d/nginx restart#1510818149vi storyship.conf#1510818167/etc/init.d/nginx restart#1510818180vi storyship.conf#1510818194/etc/init.d/nginx restart#1510825729tail -f /var/log/nginx/log/storybook-host.access.log#1510831102df#1510831106cd /var/log#1510831107ls#1510831109df#1510831111ls#1510831133cd /var/lo#1510831139cd /var/logs/storybookapi/#1510831140ll#1510831142cd ..#1510831145ls#1510831147cd log#1510831147ls#1510831149cd nginx/#1510831150ls#1510831150ll#1510831169rm error.log*.gz -rf#1510831172ll#1510831178cd log#1510831178ls#1510831179ll#1510831193crontab -e#1510831209vi /chroot/howToUse/log_cut.sh#1510833184vi /chroot/howToUse/log_cut.sh #1510833255vim /chroot/howToUse/log_cut.sh #1510833317cat /chroot/howToUse/log_cut.sh #1510833343ls#1510833141cd /var/log/nginx/log/#1510833142ll#1510833381rm storybook-host.access.log_0628* -rf#1510833383ll#1510833398rm storybook-host.access.log-* -rf#1510833400ll#1510833413cd storybook#1510833413ls#1510833414ll#1510900201Haifeng123#1510900203docker ps#1510900205df#1510900218cd /var/log/nginx/log/#1510900219ll#1510900242mkdir openvista#1510900260mv openvista-host.access.log ./openvista#1510900266/etc/init.d/nginx configtest#1510900269/etc/init.d/nginx reload#1510900272ll#1510900292rm storybook-host.access.log.20170609#1510900300rm storybook-host.access-ios.log-0626#1510900307rm storybook-host.access-ios20170628#1510900309ll#1510900318cd ifenghui/#1510900318ll#1510900340cd ..#1510900340ll#1510900351cd wish#1510900352ll#1510900362cd ..#1510900363ll#1510900383df#1510900389pwd#1510900391ll#1510900395cd ..#1510900395ll#1510900402pwd#1510900403cd ..#1510900404ll#1510900420cd face#1510900420ls#1510900421ll#1510900422cd ..#1510900431cd tomcat7/#1510900431ll#1510900440rm *.gz -rf#1510900442cd ..#1510900444ll#1510900448cd tomcat6#1510900448ls#1510900453cd ..#1510900463cd py/msgcountPy/#1510900464ll#1510900479rm server.log.201* -rf#1510900483ll#1510900487cd ..#1510900487ls#1510900490cd ..#1510900490ls#1510900493cd php#1510900493ls#1510900495ll#1510900527rm queueMnsv2_2017-05-*.log -rf#1510900536rm queueMnsv2_2017-06-*.log -rf#1510900545rm queueMnsv2_2017-07-*.log -rf#1510900562rm queueMnsv2_2017-08-*.log -rf#1510900586rm queueMnsv2_2017-09-*.log -rf#1510900594ll#1510900597df#1510900617cd /usr/local/share/#1510900617ll#1510900622cd ..#1510900622ls#1510900629cd tomcat7/logs/#1510900629ls#1510900631ll#1510900649tail -f *.out#1510900654ll#1510900658rm * -rf#1510900660ll#1510900661cd ..#1510900661ls#1510900662cd ..#1510900663ls#1510900710du -ah --max-depth=1 ./#1510900783cd src/#1510900784ll#1510900788du -ah --max-depth=1 ./#1510900845rm coreseek-4.1-beta.tar.gz #1510901515df#1510901520ll#1510901531rm elasticsearch-5.6.4.tar.gz#1510901534ll#1510901535df#1510901537cd ..#1510901538ls#1510901542cd ..#1510901543ls#1510901549cd games/#1510901549ls#1510901551cd ..#1510901551ls#1510901557cd share/#1510901557ls#1510901558cd ..#1510901559ls#1510901562cd /usr/local/#1510901563ls#1510901564ll#1510901576cd tomcat-cas-server/#1510901576ls#1510901578ll#1510901591rm *.log -rf#1510901592ll#1510901596cd logs/#1510901597ls#1510901598ll#1510901615rm *.log -rf#1510901621rm *.txt -rf#1510901623ll#1510901631rm catalina.out #1510901633df#1510901635cd ..#1510901637ls#1510901645cd tomcat-simplecms/#1510901645ls#1510901651cd ..#1510901663du -ah --max-depth=1 ./#1510901723cd src/#1510901723ls#1510901725ll#1510901740rm kibana-5.6.4-linux-x86_64.tar.gz #1510901745rm php-5.6.22.tar.gz #1510901747cd ..#1510901748df#1510901753cd ..#1510901754ls#1510901756cd local/#1510901756ll#1510901760cd o#1510901762cd coreseek#1510901762ls#1510901770cd var/data#1510901770ls#1510901771ll#1510901775cd ..#1510901775ls#1510901779cd data_wish/#1510901779ll#1510901950ls#1510901951df#1510901959cd /var/www#1510901960ls#1510901961ll#1510901962cd ..#1510901963ll#1510901972cd /chroot/#1510901982du -ah --max-depth=1 ./#1510901992df#1510902255cat /var/log/nginx/log/wish-host.access.log |grep loginByPhone#1510905607tail -f /var/log/nginx/log/wish-host.access.log #1510905658tail -f /var/log/nginx/log/wish-host.access.log |grep ver#1510905666tail -f /var/log/nginx/log/wish-host.access.log |grep Ver#1510905681tail -f /var/log/nginx/log/wish-host.access.log |grep getVer#1510905719tail -f /var/log/nginx/log/wish-host.access.log |grep cloud-userservice171115:#1510905731tail -f /var/log/nginx/log/wish-host.access.log |grep 124.204.41.3#1510905932tail -f /var/log/nginx/log/wish-host.access.log |grep &quot;124.204.41.3&quot;#1510905970tail -f /var/log/nginx/log/wish-host.access.log |grep 124.204.41.3#1510905999tail -f /var/log/nginx/log/storybook-host.access.log #1510904213tail -f /var/log/nginx/log/wish-host.access.log |grep v3#1510904251tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1510907125df#1510907128top#1510907148ps -ef|grep elastic#1510797234tail -f /var/log/nginx/log/storybook-host.access.log#1510881699cd#1510881705crontab -e#1510881883crontab -l#1510883004crontab -e#1510924837cd /var/log/nginx/#1510924837ls#1510924843cd log#1510924843ls#1510924912cd storybook#1510924913ls#1510924915cd ../#1510924916ls#1510924933tail storybook-host.access.log #1510924938tail -f storybook-host.access.log #1510925266tail -f /var/log/nginx/log/storybook-host.access.log #1511150463cd /var/log/nginx/log#1511150463ls#1511150475tail -f storybook-host.access.log#1511357820cd /etc/nginx/#1511357820ls#1511357823cd conf.d/#1511357823ls#1511357875vi hfbug.conf #1511357906/etc/init.d/nginx configtes#1511357907/etc/init.d/nginx configtest#1511357911/etc/init.d/nginx reload#1511405563cd /etc/nginx#1511405563ls#1511405567cd conf.d#1511405568l;s#1511405569ls#1511405580vi storyship.conf #1511405629/etc/nginx/init.d restart#1511405644/etc/init.d/nginx restart#1511405990vi storyship.conf #1511406094/etc/init.d/nginx restart#1511407573̫#1511407575ܲta#1511407590tail -f /var/log/nginx/log/storybook-host.access.log #1511505163tail -f /var/log/nginx/log/wish-host.access.log #1511505167tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1511505184tail -f /var/log/nginx/log/wish-host.access.log #1511505207tail -f /var/log/nginx/log/wish-host.access.log |grep 518b7950aec7ab18adc080939bcfd76e#1511519125tail -f /var/log/nginx/log/openvista-host.access.log #1511519144tail -f /var/log/nginx/log/openvista-host.access.log |grep detail#1511519218tail -f /var/log/nginx/log/openvista-host.access.log#1511486084crontab -l#1511619155tail -f /var/log/nginx/log/wish-host.access.log |grep getBbsArticle#1511619169tail -f /var/log/nginx/log/wish-host.access.log |grep getBbsArticles#1511658016 tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1511693606cat /var/log/nginx/log/wish-host.access.log |grep phonereg#1511759338tail -f /var/log/nginx/log/wish-host.access.log |grep reg#1511761962cd /var/log/nginx/log/#1511761986cat ./wish-host.access.log |grep 535242#1511761996cat ./wish-host.access.log |grep 535242|grep POST#1511762112pwd#1511762113ls#1511762115cd wish#1511762139cat ./wish-host_2017-11-26.log |grep 535242|grep POST#1511762155cat ./wish-host_2017-11-25.log |grep 535242|grep POST#1511762173cat ./wish-host_2017-11-24.log |grep 535242|grep POST#1511762235cat ./wish-host_2017-11-23.log |grep 535242|grep POST#1511762384cat ./wish-host_2017-11-22.log |grep 535242|grep POST#1511762394cat ./wish-host_2017-11-21.log |grep 535242|grep POST#1511762404cat ./wish-host_2017-11-*.log |grep 535242|grep POST#1511779404cd /etc/nginx/conf.d/#1511779410vi wish.conf#1511779435cd ..#1511779435ls#1511779437vi nginx.conf #1511780427tail -f /var/log/nginx/log/wish-host.access.log #1511780444tail -f /var/log/nginx/log/wish-host.access.log |grep &quot;-&quot;#1511780469tail -f /var/log/nginx/log/wish-host.access.log |grep POST#1511780780140.205.9.36 - - [27/Nov/2017:19:06:08 +0800] &quot;POST /v2/interface.php?m=Index&amp;a=eventAnalytics HTTP/1.1&quot; 200 39 &quot;-&quot; &quot;iOS_4.7.6&quot; &quot;125.121.189.189&quot; &quot;0.109&quot; &quot;--Boundary+AC6337DFDE099D2A\\x0D\\x0AContent-Disposition: form-data; name=\\x22device\\x22\\x0D\\x0A\\x0D\\x0AiPhone 5\\x0D\\x0A--Boundary+AC6337DFDE099D2A\\x0D\\x0AContent-Disposition: form-data; name=\\x22eventContent\\x22\\x0D\\x0A\\x0D\\x0A\\xE6\\x9A\\x96\\xE5\\x86\\xAC\\xE6\\x83\\x85\\xE8\\xAF\\x97\\xE2\\x80\\x94\\xE7\\x88\\xB1\\xE5\\x9C\\xA8\\xE6\\x9A\\x96\\xE5\\x86\\xAC\\xEF\\xBC\\x8C\\xE6\\x84\\x9F\\xE8\\xB0\\xA2\\xE6\\x9C\\x89\\xE4\\xBD\\xA0\\x0D\\x0A--Boundary+AC6337DFDE099D2A\\x0D\\x0AContent-Disposition: form-data; name=\\x22eventType\\x22\\x0D\\x0A\\x0D\\x0A12\\x0D\\x0A--Boundary+AC6337DFDE099D2A\\x0D\\x0AContent-Disposition: form-data; name=\\x22loginId\\x22\\x0D\\x0A\\x0D\\x0A551022\\x0D\\x0A--Boundary+AC6337DFDE099D2A\\x0D\\x0AContent-Disposition: form-data; name=\\x22pf\\x22\\x0D\\x0A\\x0D\\x0AiOS_iPhone_iOS 10.2\\x0D\\x0A--Boundary+AC6337DFDE099D2A\\x0D\\x0AContent-Disposition: form-data; name=\\x22platform\\x22\\x0D\\x0A\\x0D\\x0A2\\x0D\\x0A--Boundary+AC6337DFDE099D2A\\x0D\\x0AContent-Disposition: form-data; name=\\x22userId\\x22\\x0D\\x0A\\x0D\\x0A551022\\x0D\\x0A--Boundary+AC6337DFDE099D2A\\x0D\\x0AContent-Disposition: form-data; name=\\x22ver\\x22\\x0D\\x0A\\x0D\\x0A4.7.6\\x0D\\x0A--Boundary+AC6337DFDE099D2A--\\x0D\\x0A&quot; &quot;db43c93c88a34ffa2eeeb9e243bf8fe7&quot; &quot;-&quot; &quot;-&quot;#1511791366tail -f /var/log/nginx/log/wish-host.access.log |#1511791381tail -f /var/log/nginx/log/wish-host.access.log |grep 13611220831#1511801745tail -f /var/log/nginx/log/wish-host.access.log |grep phonereg#1511837953tail -f /var/log/nginx/log/wish-host.access.log #1511837959tail -f /var/log/nginx/log/wish-host.access.log |grep GET#1511839528vnstat -l -i eth1#1511839549vnstat -d -i eth1#1511839554vnstat -m -i eth1#1511839557vnstat -h -i eth1#1511839560vnstat -l -i eth1#1511853225cd /etc/nginx/conf#1511853226ls#1511853230cd /etc/nginx/conf.d/#1511853230ls#1511853253ll *help*#1511853262vi fenghui_help.conf #1511853496/etc/init.d/nginx configtest#1511853500/etc/init.d/nginx reload#1511859207crontab -l#1511918984cd /etc/nginx/conf#1511918984ls#1511918988cd /etc/nginx/conf.d/#1511918988ls#1511919011vi dongman.conf#1511919037/etc/init.d/nginx configtest#1511919041/etc/init.d/nginx reload#1511919300vi dongman.conf#1511919310/etc/init.d/nginx reload#1511919366vi dongman.conf#1511919648/etc/init.d/nginx configtest#1511919651/etc/init.d/nginx reload#1511948542cd /etc/logstash/#1511948542ls#1511948545cd conf.d/#1511948546ls#1511948549cat logstash.conf #1511948639ls#1511948642cd ..#1511948642ls#1511948650cd patterns/#1511948651ls#1511948654cat nginx #1512006854Ԋ#1512006856ޣd #1512006874whereis logstash#1512006880cd /etc/logstash/#1512006880ls#1512006892cd conf.d/#1512006892ls#1512006894vi logstash.conf #1512009899cd /etc/logstash/#1512009899ls#1512009902cd conf.d/#1512009902ls#1512009904vi logstash.conf #1512021046whereis logstash#1512021054cd /usr/share/logstash/#1512021054ls#1512021090pwd#1512026647ls#1512026653cd /etc/logstash/#1512026653ls#1512026657cd conf.d/#1512026658ls#1512026660vi logstash.conf #1512027467ps -ef|grep logstash#1512027471pwd#1512027474vi logstash.conf #1512027962docker ps#1512027973ps -ef|grep logstash#1512027978cd ..#1512028018ls#1512028033pwd#1512028046cd /usr/share/logstash/#1512028047ls#1512028048ll#1512028057cd bin/#1512028057ls#1512028068vi logstash.bat #1512028072ls#1512028077cd ..#1512028077ls#1512028106nohup ./bin/logstash -f /etc/logstash/conf.d/logstash.conf &amp;#1512028119ps -ef|grep logstash#1512028125kill 24945#1512028133kill 31933#1512028137ps -ef|grep logstash#1512028145./bin/logstash -f /etc/logstash/conf.d/logstash.conf#1512028211vi /etc/logstash/conf.d/logstash.conf #1512028236./bin/logstash -f /etc/logstash/conf.d/logstash.conf#1512028731nohup ./bin/logstash -f /etc/logstash/conf.d/logstash.conf &amp; &gt;&gt;/var/log/logstash/logstash.log#1512028753ps -ef|grep nginx#1512028758ps -ef|grep logstash#1512029942tail -f /var/log/nginx/log/wish-host.access.log #1512030237tail -f /var/log/nginx/log/wish-host.access.log |grep POST#1512030518ls#1512030530vi /etc/logstash/conf.d/logstash.conf #1512030585tail -f /var/log/logstash/logstash.log #1512030588ls#1512030589pwd#1512030597tail -f nohup.out #1512030619tail -f nohup.out |grep PSOT#1512030623tail -f nohup.out |grep POST#1512031039ls#1512031040pwd#1512031050vi /etc/logstash/conf.d/logstash.conf #1512033676tail -f /var/log/nginx/log/wish-host.access.log #1512035051df#1512035072cd /usr/local/elasticsearch/#1512035073ls#1512035091pwd#1512035094cd ..#1512035095ls#1512035112pwd#1512035113ll#1512034722df#1512034739cd /usr/share/logstash/#1512034739ls#1512034742cd config/#1512034742ls#1512034745cd ..#1512034746ls#1512034753vi /etc/logstash/conf.d/logstash.conf #1512034880ps -ef|grep logs#1512034886kill 25435#1512034888ls#1512034908nohup ./bin/logstash -f /etc/logstash/conf.d/logstash.conf &amp;#1512034911tail -f nohup.out #1512034936ll#1512034955vi /etc/logstash/conf.d/logstash.conf #1512034968ls#1512034984ps -ef|grep logstash#1512034989killl 29279#1512034993ps -ef|grep logstash#1512034998kill 29279#1512034999ps -ef|grep logstash#1512035008ls#1512035013rm -rf nohup.out #1512035023nohup ./bin/logstash -f /etc/logstash/conf.d/logstash.conf &amp;#1512035027tail -f nohup.out #1512037794ls#1512037803vi /etc/logstash/conf.d/logstash.conf #1512037811pwd#1512037847vi /etc/logstash/patterns/nginx #1512037872ls#1512037879pwd#1512037881ls#1512037885pwd#1512037916vi /etc/logstash/conf.d/logstash.conf #1512037935ps -ef|grep logstash#1512037944kill 29435#1512037993nohup /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf &amp;#1512041912ޣd #1512041917cd /etc/logstash/#1512041918ls#1512041920cd conf.d/#1512041921ls#1512041922pwd#1512041925vi logstash.conf #1512042016ps -ef|grep logstash#1512042021kill 31532#1512042028ps -ef|grep logstash#1512042051nohup /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf &amp;#1512042057tail -f nohup.out #1512042166ll#1512042175pwd#1512042179vi logstash.conf #1512042285ps -ef|grep logstash#1512042289kill 1864#1512042313nohup /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf &amp;&gt;/dev/null &amp;#1512042315ll#1512042320rm nohup.out -rf#1512042323df#1512042339tail -f /dev/null#1512043043cd /chroot/howToUse/#1512043044ls#1512043049vi logstash.sh #1512043063ls#1512043075vi /etc/logstash/conf.d/logstash.conf #1512043637ps -ef|grep logstash.sh #1512043639ps -ef|grep logstash#1512043654kill 2141#1512043671/chroot/howToUse/logstash.sh #1512043682ps -ef|grep logstash#1512056569tail -f /var/log/nginx/log/wish-host.access.log #1512056584vi /etc/logstash/conf.d/logstash.conf #1512056914ps -ef|grep logstash#1512056927kill 3073#1512056938/chroot/howToUse/logstash.sh #1512056944df#1512099600cd /usr/local/#1512099600ls#1512099602ll#1512099620du -ah --max-depth=1 ./#1512201910cd /etc/nginx/#1512201911ls#1512201917cd conf#1512201918ls#1512201919cd conf.d/#1512201920ls#1512201921cd ..#1512201922ls#1512202055htpasswd -c passwd.db vista#1512202064ls#1512202500pwd#1512202501ls#1512202504cd conf.d/#1512202548ls#1512202569cp img2.ifenghui.conf elastic.ifenghui.com.conf#1512202571vi elastic.ifenghui.com.conf #1512202730/etc/init.d/nginx configtest#1512202734/etc/init.d/nginx reload#1512202782vi elastic.ifenghui.com.conf #1512202791/etc/init.d/nginx configtest#1512202793/etc/init.d/nginx reload#1512202816vi elastic.ifenghui.com.conf #1512202831/etc/init.d/nginx configtest#1512202833/etc/init.d/nginx reload#1512204443vi elastic.ifenghui.com.conf #1512204456/etc/init.d/nginx configtest#1512204458/etc/init.d/nginx reload#1512360231cd /etc/logstash/#1512360232ls#1512360235cd conf.d/#1512360235ls#1512360237vi logstash.conf #1512360366ls#1512360368pwd#1512360384vi mysql_bbs.sql#1512360403ls#1512360407vi logstash.conf #1512360452cd /usr/local/src/#1512360452ls#1512360495cd /usr/share/logstash/#1512360495ls#1512360497cd lib/#1512360498ls#1512360502wget https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.45.tar.gz#1512360515ls#1512360520tar zxvf mysql-connector-java-5.1.45.tar.gz #1512360528ls#1512360530cd mysql-connector-java-5.1.45#1512360530ls#1512360535cp mysql-connector-java-5.1.45-bin.jar ../#1512360536ls#1512360537cd ..#1512360538ls#1512360556cd /etc/logstash/conf.d/#1512360556ls#1512360559vi logstash.conf #1512362757cat /chroot/howToUse/logstash.sh #1512362794ps -ef|grep logs#1512362801kill 11037#1512362812/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf#1512362898ls#1512362901vi logstash.conf #1512362927/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf#1512363006vi logstash.conf #1512363023/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf#1512363630/chroot/howToUse/logstash.sh #1512364385df#1512364544vi logstash.conf #1512364575ps -ef|grep elastic#1512364581vi mysql_bbs.sql #1512364615ps -ef|grep logstash#1512364619kill 5129#1512364624kill 5219#1512364633/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf#1512365133/chroot/howToUse/logstash.sh #1512437127cd /var/log/nginx/log/storybook#1512437127ls#1512437139cat storybook-host_2017-11-26.log |grep 4f430976fac677b448203603dee3ae86#1512437159cat storybook-host_2017-11-26.log |grep 4f430976fac677b448203603dee3ae86 &gt;&gt;storybook_936.log#1512437165vi storybook_936.log #1512488820cd /etc/nginx/conf#1512488820ls#1512488827cd /etc/nginx/#1512488827ls#1512488829cd conf.d/#1512488829ls#1512488834vi elastic.ifenghui.com.conf #1512526295tail -f /var/log/nginx/log/wish-host.access.log #1512526299tail -f /var/log/nginx/log/wish-host.access.log |grep php#1512526387tail -f /var/log/nginx/log/wish-host.access.log |grep POST#1512527472tail -f /var/log/nginx/log/wish-host.access.log |grep php#1512527508tail -f /var/log/nginx/log/wish-host.access.log |grep v3#1512522595cd /etc/nginx/conf#1512522598cd /etc/nginx/conf.d#1512522598ls#1512522603vi wish.conf#1512532268tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1512541717ޣd #1512541731cd /usr/local/kibana/#1512541731ls#1512541734cd bin/#1512541734ls#1512541736cd ..#1512541737cd config/#1512541737ls#1512541739vi kibana.yml #1512542006ps -ef|grep kibana#1512542018kill 24139#1512542020cd ..#1512542020ls#1512542024./bin/kibana#1512544756cd /usr/local/kibana/#1512544756ls#1512544758cd config/#1512544758ls#1512544759vi kibana.yml #1512544767cd ..#1512544775nohup ./bin/kibana &amp;#1512544813tail -f /var/log/nginx/log/wish-host.access.log #1512544816tail -f /var/log/nginx/log/wish-host.access.log |grep 500#1512545035ps -ef|grep elastic#1512545044kill 24363#1512545059/chroot/howToUse/logstash.sh #1512545284ps -ef|grep elastic#1512545325ps -ef|grep logs#1512545382ls#1512545387tail -f nohup.out #1512545418ping elasticsearch#1512545554tail -f nohup.out #1512545594tail -f /var/log/nginx/log/wish-host.access.log #1512545960tail -f /var/log/nginx/log/wish-host.access.log 500#1512545967tail -f /var/log/nginx/log/wish-host.access.log &quot; 500&quot;#1512545992tail -f /var/log/nginx/log/wish-host.access.log 500#1512546015cd /etc/logstash/#1512546016ls#1512546017cd conf.d/#1512546018ls#1512546020vi logstash.conf #1512546039tail -f /var/log/nginx/log/wish-host.access.log#1512546088cat /chroot/howToUse/logstash.sh #1512546103ps -ef|grep logstash#1512546109kill 6240#1512546137ps -ef|grep logstash#1512546148kill 6240#1512546170kill -9 6240#1512546173kill 6240#1512546175ps -ef|grep logstash#1512546178/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf#1512546355ls#1512546356pwd#1512546375/chroot/howToUse/logstash.sh #1512550158tail -f /var/log/nginx/log/wish-host.access.log #1512550162tail -f /var/log/nginx/log/wish-host.access.log |grep v3#1512550270tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1512550292tail -f /var/log/nginx/log/wish-host.access.log |grep v3#1512550322tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1512559671tail -f /var/log/nginx/log/wish-host.access.log #1512559676tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1512603423tail -f /var/log/nginx/log/wish-host.access.log #1512603429tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1512608768tail -f /var/log/nginx/log/wish-host.access.log #1512608775tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1512614818ps -ef|grep kibana#1512614822cd /usr/local/kibana/#1512614823ls#1512614835nohup bin/kibana &amp;#1512614840tail -f nohup.out #1512617866cd /usr/local/elasticsearch/#1512617876./bin/elasticsearch-plugin remove x-pack#1512617891cd #1512617893cd ..#1512617906cd usr/local/#1512617922./kibana/bin/kibana-plugin remove x-pack#1512617979cd elasticsearch/#1512617979ls#1512617984ps -ef|grep elastic#1512617991./bin/elasticsearch#1512618002ps -ef|grep elas#1512618043su elastic#1512618120pwd#1512618123cd /usr/local/kibana/#1512618124ls#1512618131ps -ef|grep kibana#1512618143nohup ./bin/kibana &amp;#1512618151ps -ef|grep elastic#1512618157ps -ef|grep kibana#1512618172./bin/kibana#1512623311cd /usr/local/kibana/#1512623311ls#1512623320./bin/kibana-plugin remove x-pack#1512623359ls#1512623362cd plugins/#1512623363ls#1512623364cd ..#1512623365ls#1512623370cd config/#1512623370ls#1512623375vi kibana.yml #1512623381ls#1512623383cd ..#1512623383ls#1512623388cd ..#1512623389ls#1512623529cd kibana/#1512623529ls#1512623534ps -ef|grep kibana#1512623539ps -ef|grep kiba#1512623543ps -ef|grep kibana#1512623553ps -ef#1512623635docker ps#1512623664fuser -n tcp 5601#1512623675ps -ef|grep 22521#1512623685kill 22521#1512623695./bin/kibana#1511400921tail -f /var/log/nginx/log/storybook-host.access.log #1511773658tail -f /var/log/nginx/log/wish-host.access.log #1511773665tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1511924313tail -f /var/log/nginx/log/wish-host.access.log |grep 416156#1511953014tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1512003645tail -f /var/log/nginx/log/wish-host.access.log#1512003753tail -f /var/log/nginx/log/wish-host.access.log|grep 538615#1512009186tail -f /var/log/nginx/log/wish-host.access.log#1512024867tail -f /var/log/nginx/log/wish-host.access.log|grep 2603#1512026054crontab -e#1512026070cd /usr/local/#1512026070ls#1512026073cd coreseek#1512026074ls#1512026090cd bin#1512026091ls#1512026092cd ..#1512026094cd etc/#1512026095ls#1512026102cat sphinx.conf#1512026236ls#1512026238cd ..#1512026239ls#1512026254cat indexAll.sh #1512026265cat index.sh #1512026337cat start.sh #1512026390cd etc/#1512026391ls#1512026399cat sphinx.conf#1512026454ls#1512026458cd ..#1512026460ls#1512026462cd bin/#1512026463ls#1512100824tail -f /var/log/nginx/log/storybook-host.access.log #1512356339tail -f /var/log/nginx/log/wish-host.access.log #1512356349tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1512464081tail -f /var/log/nginx/log/wish-host.access.log #1512468674tail -f /var/log/nginx/log/wish-host.access.log |grep 538612#1512476078tail -f /var/log/nginx/log/wish-host.access.log |grep 556461#1512523668tail -f /var/log/nginx/log/wish-host.access.log |grep 530833#1512525027tail -f /var/log/nginx/log/wish-host.access.log |grep 538615#1512525731tail -f /var/log/nginx/log/wish-host.access.log |grep 530833#1512526831tail -f /var/log/nginx/log/wish-host.access.log |grep 538615#1512527373tail -f /var/log/nginx/log/wish-host.access.log |grep 538612#1512533543tail -f /var/log/nginx/log/wish-host.access.log |grep 538615#1512538505tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1512540617tail -f /var/log/nginx/log/wish-host.access.log |grep 538615#1512540827tail -f /var/log/nginx/log/wish-host.access.log |grep 538612#1512541502tail -f /var/log/nginx/log/wish-host.access.log |grep 538615#1512542204tail -f /var/log/nginx/log/wish-host.access.log |grep 20825#1512545797tail -f /var/log/nginx/log/wish-host.access.log |grep 538615#1512547205tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1512549703tail -f /var/log/nginx/log/wish-host.access.log |grep 556461#1512550025tail -f /var/log/nginx/log/wish-host.access.log |grep 445338#1512550976tail -f /var/log/nginx/log/wish-host.access.log |grep 538615#1512558552tail -f /var/log/nginx/log/wish-host.access.log |grep 538612#1512560498tail -f /var/log/nginx/log/wish-host.access.log |grep 21365#1512560544tail -f /var/log/nginx/log/wish-host.access.log |grep 445338#1512560593tail -f /var/log/nginx/log/wish-host.access.log |grep 556461#1512561907tail -f /var/log/nginx/log/wish-host.access.log |grep 20825#1512563067tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1512564891tail -f /var/log/nginx/log/wish-host.access.log |grep 538612#1512610170tail -f /var/log/nginx/log/wish-host.access.log |grep 538612#1512614938tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1512616925tail -f /var/log/nginx/log/wish-host.access.log |grep 538612#1512632913tail -f /var/log/nginx/log/storybook-host.access.log #1512637597tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1512639144tail -f /var/log/nginx/log/wish-host.access.log |grep 538615#1512704090tail -f /var/log/nginx/log/wish-host.access.log |grep 530833#1512715953tail -f /var/log/nginx/log/wish-host.access.log |grep 538612#1512744396cd /var/log/nginx/log/#1512744411cat wish-host.access.log |grep ozQzasylbe9TrMT16BNrADMTcv1s#1512744448cd wish#1512744449ls#1512744461cat wish-host_2017-12-0*|grep ozQzasylbe9TrMT16BNrADMTcv1s#1512700798tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1512703760tail -f /var/log/nginx/log/storybook-host.access.log #1512784709ps -ef|grep tail#1512784715kill 22221#1512784602̫#1512784604tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1512784617tail -f /var/log/nginx/log/wish-host.access.log |grep v2#1512784623tail -f /var/log/nginx/log/wish-host.access.log |grep Login#1512784674tail -f /var/log/nginx/log/wish-host.access.log |grep v3#1512784682tail -f /var/log/nginx/log/wish-host.access.log |grep login#1512784691tail -f /var/log/nginx/log/wish-host.access.log |grep login&amp;#1512784726tail -f /var/log/nginx/log/wish-host.access.log |grep &quot;login&amp;&quot;#1512784756tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1512784769tail -f /var/log/nginx/log/wish-host.access.log |grep 114.250.80.200#1512830965cd /etc/nginx/conf#1512830965ls#1512830970cd /etc/logstash/#1512830970ls#1512830972cd conf.d/#1512830973ls#1512830974vi logstash.conf #1512831453ps -ef|grep logstash#1512831466kill 15428#1512831470kill 15438#1512831486/chroot/howToUse/logstash.sh #1512832558ps -ef|grep logstash#1512832562kill 19155#1512832616ps -ef|grep logstash#1512832621kill 19155#1512832733ps -ef|grep logstash#1512832736kill 19155#1512832746kill -9 19155#1512832748ps -ef|grep logstash#1512832773cat /chroot/howToUse/logstash.sh #1512832782/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf#1512832921vi /etc/logstash/conf.d/logstash.conf #1512832956/chroot/howToUse/logstash.sh #1512854764tali -f /var/log/nginx/log/wish-host.access.log |grep 4977#1512854776tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1512962814tail -f /var/log/nginx/log/storybook-host.access.log #1512991486tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1513076143 /v2/interface.php?m=Statistics&amp;a=getRankList&amp;timeType=0&amp;typeId=311&amp;loginId=4977&amp;type=6&amp;userId=4977&amp;platform=2&amp;ver=4.8.1&amp;startOne=1&amp;pf=iOS_iPhone_iOS%2010.3.1&amp;device=iPhone%20SE&amp;pageNo=6&amp;pageSize=10#1513076152tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1513118069tail -f /var/log/nginx/log/wish-host.access.log #1513118075tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1513134324tail -f /var/log/nginx/log/wish-host.access.log #1513134328tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1513136458246854#1513136790cd /var/log/nginx/log/#1513136805cat admin.videoapi.access.log |grep 246854#1513136816tail -f admin.videoapi.access.log #1513136836tail -f 215.videoapi.access.log #1513136847cat 215.videoapi.access.log |grep 246854#1513136937cat 215.videoapi.access.log |grep &quot;statusId=246854&quot;#1513136955cat 215.videoapi.access.log |grep &quot;id=246854&quot;#1513136974cat 215.videoapi.access.log |grep &quot;userId=246854&quot;#1513155878cd /var/log/nginx/log/#1513155878ls#1513155888cat 215.videoapi.access.log |grep 505065#1513160856cd /etc/nginx/conf#1513160857ls#1513160860cd /etc/nginx/conf.d/#1513160860ls#1513160867vi dongman.conf#1513160985/etc/init.d/nginx configtest#1513160988/etc/init.d/nginx reload#1513167577tail -f /var/log/nginx/log/wish-host.access.log |grep login#1513167596tail -f /var/log/nginx/log/wish-host.access.log |grep &quot;a=login&quot;#1513216918curl -X GET http://101.37.254.236:9001/apps#1513220068cd /etc/nginx/conf#1513220068ls#1513220071cd /etc/nginx/conf.d/#1513220072ls#1513220075vi elastic.ifenghui.com.conf #1513220092/etc/init.d/nginx configtest#1513220096/etc/init.d/nginx reload#1513300324Ԋ#1513300325ޣd #1513300336cd ch#1513300342df#1513300347cd /chroot#1513300348ls#1513300353cd web#1513300354ls#1513306218ls#1513306223crontab -l#1513332677ܴail#1513332691tail -f /var/log/nginx/log/wish-host.access.log #1513332695tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1513436025vnstat -l -i eth1#1513043775tail -f /var/log/nginx/log/wish-host.access.log |grep 538615#1513043844tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1513064662tail -f /var/log/nginx/log/storybook-host.access.log #1513147888tail -f /var/log/nginx/log/wish-host.access.log |grep 538615#1513152428tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1513153754cd /var/log/nginx/log/#1513153754ls#1513153761cd wish#1513153762ls#1513153769cd ..#1513153785cat wish-host.access.log |grep 505065#1513153951ls#1513154010cat admin.videoapi.access.log |grep 505065#1513154038cat 215-host.access.log |grep 505065#1513154071cat 215.videoapi.access.log |grep 505065#1513154258tail -f /var/log/nginx/log/wish-host.access.log |grep 505065#1513154275cat /var/log/nginx/log/wish-host.access.log |grep 505065#1513154512cat 215.videoapi.access.log |grep 505065#1513154527cat 215.videoapi.access.log |grep 502242#1513154540cat 215.videoapi.access.log |grep 505065#1513154572cat /var/log/nginx/log/wish-host.access.log |grep 505065#1513154690ls#1513154693cd wish#1513154694ls#1513154736cat /var/log/nginx/log/wish/wish-host-2017-12-12.log |grep 505065#1513154777cat wish-host_2017-12-12.log |grep 505065#1513154810ls#1513154814cd ..#1513154824cat /var/log/nginx/log/wish-host.access.log |grep #1513155027cat 215.videoapi.access.log |grep 505065#1513155549cat /var/log/nginx/log/wish-host.access.log |grep 505065#1513155601cat 215.videoapi.access.log |grep 505065#1513301666tail -f /var/log/nginx/log/storybook-host.access.log |grep 98e15bdc3262040aea949f8cb926d8e5#1513305539ls#1513305960tail -f /var/log/nginx/log/storybook-host.access.log |grep 98e15bdc3262040aea949f8cb926d8e5#1513317105tail -f /var/log/nginx/log/storybook-host.access.log #1513328741tail -f /var/log/nginx/log/storybook-host.access.log |grep 970fe3ab8575bc35a00cc6ae47cd19b9#1513332628tail -f /var/log/nginx/log/storybook-host.access.log#1513332146tail -f /var/log/nginx/log/wish-host.access.log |grep 408816#1513592763ls#1513592772cd /var/log/nginx#1513592772ls#1513592775cd log#1513592775ls#1513592785cd storybook#1513592785ls#1513592788cd ../#1513592788ls#1513592803tail -f storybook-host.access.log #1513581202tail -f /var/log/nginx/log/storybook-host.access.log #1513670704df#1513670716cd /var/log/nginx/log/wish#1513670717ls#1513670719ll#1513666570cdcd#1513666576cd /chroot#1513666577ls#1513666581cd api#1513666582ls#1513666583svn up#1513666598/etc/init.d/php56-php-fpm restart#1513666824svn up#1513666826/etc/init.d/php56-php-fpm restart#1513668709svn up#1513669382/etc/init.d/php56-php-fpm restart#1513669384svn up#1513669385/etc/init.d/php56-php-fpm restart#1513747818cd /var/log/nginx/log/wish/#1513747820ls#1513909662cd /var/log/nginx/log/#1513909670tail -f 215.videoapi.access.log #1513909685cat 215.videoapi.access.log |grep 564928#1513909717cat 215.videoapi.access.log |grep 564928|grep POST#1513927306ls#1513927310cd /var/www/html/#1513927311ls#1513929337tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1513931596pwd#1513931598ls#1513931608pwd#1513931614psd#1513931616df#1513931621cd /chroot#1513931621ls#1513931623cd www#1513931636cd /var/www/html/#1513931637ls#1513931648vi eureka.php#1513931656ls#1513931659pwd#1513931667cd /etc/nginx/conf#1513931671cd /etc/nginx/conf.d/#1513931671ls#1513931682vi wish.conf#1513931687ls#1513931694vi admin.videoapi.conf #1513931698ls#1513931712ll *.conf#1513931726vi wish_admin.conf #1513931771/etc/init.d/nginx configtest#1513931776/etc/init.d/nginx reload#1513931796ls#1513931799vi dongman.conf#1513931819ls#1513931827vi wish_admin.conf #1513931841/etc/init.d/nginx configtest#1513931845/etc/init.d/nginx reload#1513931899curl http://101.37.254.236:9001/eureka/apps#1513942216tail -f /var/log/nginx/log/wish-host.access.log |grep Comment#1514169883cd /etc/logstash/#1514169884ls#1514169886cd conf.d/#1514169887;s#1514169887ls#1514169891cat logstash.conf #1514184076tail -f /var/log/nginx/log/wish-host.access.log #1514184081tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1514198191cat /var/log/nginx/log/wish-host.access.log |grep method=SS_PlayStory#1514198196cat /var/log/nginx/log/wish-host.access.log |grep SS_PlayStory#1514198215cat /var/log/nginx/log/storybook-host.access.log |grep SS_PlayStory#1514252502cd /etc/nginx#1514252502ls#1514252506cd conf.d/#1514252507;s#1514252507ls#1514252588cat storyship.conf #1514252604ls#1514252612cat storyship_v.conf #1514252862ls#1514252873cat storyship.conf #1514280631df#1514339116cd /chroot#1514339118cd api#1514339119ls#1514339123svn up#1514339135/etc/init.d/php56-php-fpm restart#1514339159cd /etc/nginx#1514339159ls#1514339163cd conf#1514339166cd conf.d#1514339166ls#1514339180cat storybook.conf #1514342631ls#1514342672mv storybook.conf storybookbeta.conf#1514342673ls#1514342692cp storybook.conf#1514342702cp storybookbeta.conf storybook.conf#1514342703;s#1514342704ls#1514342730vi storybookbeta.conf #1514342861/etc/init.d/nginx reload#1514342865/etc/init.d/nginx restart#1514342977ping storybookbeta.ifenghui,com#1514342988vi storybookbeta.conf #1514345190cd /etc/nginx/#1514345191ls#1514345193cd conf#1514345194ls#1514345204cd /etc/bin#1514346971ls#1514346993cd /chroot/howToUse/#1514346993ls#1514347002vi osslog.sh#1514347017pwd#1514347018ls#1514347028chmod 777 ./osslog.sh #1514347031./osslog.sh ]#1514347042pwd#1514347062crontab -e#1514343155cd /etc/nginx/conf.d/#1514343156ls#1514343163cat storybookbeta.conf #1514371711cd /chroot#1514371712ls#1514371717cd /var/www/html/#1514371718ls#1514371721cd /chroot#1514371722ls#1514371742crontab -e#1514371757cat /chroot/howToUse/osslog.sh #1514371783cd /var/log/nginx/log/#1514371783ls#1514371790cd storybook#1514371791ls#1514371796cd ..#1514371796ls#1514371807pwd#1514371859cd storybook#1514371859ls#1514371860pwd#1514371876vi /chroot/howToUse/osslog.sh #1514371915/usr/local/ossutil cp -r --update /var/log/nginx/log/storybook oss://ifenghui-logs/logs/storybook#1513828671tail -f /var/log/nginx/log/storybook-host.access.log #1513926796tail -f /var/log/nginx/log/storybook-host.access.log |grep da9975ce69342b40bb7496cf336a0ddd#1513938249tail -f /var/log/nginx/log/storybook-host.access.log #1514181915tail -f /var/log/nginx/log/storybook-host.access.log |grep c8020d75bcc0a7bb2e96f41becc3e71b#1514185651tail -f /var/log/nginx/log/wish-host.access.log #1514188899tail -f /var/log/nginx/log/wish-host.access.log |grep 538615#1514189299tail -f /var/log/nginx/log/wish-host.access.log #1514189394tail -f /var/log/nginx/log/wish-host.access.log |grep 538612#1514441552tail -f /var/log/nginx/log/storybookbeta-host.access.log #1514524986ps -ef#1514524993ps -ef|grep logstash#1514525803cat /etc/logstash/patterns#1514525826vi /etc/logstash/patterns/nginx#1514525319cd /etc/logstash/conf.d/#1514525319ls#1514525391pwd#1514525406ls#1514525420vi logstash.conf #1514525452ls#1514525455cat logstash.conf #1514525937ps -ef|grep logs#1514525979cat /chroot/howToUse/logstash.sh #1514527296ls#1514527309cd /var/log/nginx/log/wish#1514527310ls#1514527315rm 322979.log #1514527318rm 424010.log #1514527322rm user190110.log #1514527405ls#1514527408cd ..#1514527408ls#1514514197crontab -e#1514514288crontab -l#1514514656cd /data/www#1514543112tail -f /var/log/nginx/log/storybook-host.access.log #1514543135tail -f /var/log/nginx/log/storybook-host.access.log |grep 2369e66032d34a79ae7aba617bff619a#1514546916tail -f /var/log/nginx/log/storybook-host.access.log |grep getRecommendStorys#1514566939cd /etc/nginx/conf.d/#1514566940ls#1514566973cd /etc/logstash/#1514566973ls#1514566976cd conf.d/#1514566976ls#1514566979vi logstash.conf #1514794593ԉּ#1514794606cd /var/log/nginx/log/wish#1514794610ls#1514794625sed -i &quot;s/\\&quot;\\&quot;/\\&quot; \\&quot;/g&quot; ./wish-host_2017-09-*.log#1514795191sed -i &quot;s/\\&quot;\\&quot;/\\&quot; \\&quot;/g&quot; ./wish-host_2017-10-*.log#1514795882sed -i &quot;s/\\&quot;\\&quot;/\\&quot; \\&quot;/g&quot; ./wish-host_2017-11-*.log#1514796494/chroot/howToUse/osslog.sh #1514878742cd /var/log/nginx/log/storybook#1514878742ls#1514878751rm storybook_936.log #1514878752ls#1514878765cat storybook-host_2017-08-01.log #1514878770tail storybook-host_2017-08-01.log #1514878786ll#1514878801sed -i &quot;s/\\&quot;\\&quot;/\\&quot; \\&quot;/g&quot; ./2017-08-*.log#1514878819sed -i &quot;s/\\&quot;\\&quot;/\\&quot; \\&quot;/g&quot; ./storybook-host_2017-08-*.log#1514878829sed -i &quot;s/\\&quot;\\&quot;/\\&quot; \\&quot;/g&quot; ./storybook-host_2017-09-*.log#1514878837sed -i &quot;s/\\&quot;\\&quot;/\\&quot; \\&quot;/g&quot; ./storybook-host_2017-10-*.log#1514878847sed -i &quot;s/\\&quot;\\&quot;/\\&quot; \\&quot;/g&quot; ./storybook-host_2017-11-*.log#1514878861crontab -e#1514878873vi /chroot/howToUse/osslog.sh#1514878881/chroot/howToUse/osslog.sh#1514878911ls#1514878916cat storybook-host_2018-01-01.log #1514943545cd /etc/logstash/#1514943545ls#1514943547cd conf.d/#1514943547ls#1514943548vi logstash.conf #1515043683cd /etc/nginx/#1515043684ls#1515043686vi nginx.conf #1515052254tail /var/log/nginx/log/storybook-host.access.log #1515138461ls#1515138473pwd#1515138477cd /data/#1515138477ls#1515146671tail -f /var/log/nginx/log/wish-host.access.log #1515146687tail -f /var/log/nginx/log/storybook-host.access.log #1515167790cd /var/log/nginx/log/storybook-host.access.log |grep /api/pay/iospayNotify#1515167801cat /var/log/nginx/log/storybook-host.access.log |grep &quot;/api/pay/iospayNotify&quot;#1515168979cat /var/log/nginx/log/storybook-host.access.log |grep &quot;1fe626292fdf434d641feaf5d3bf44e4&quot;#1515168993cd /var/log/nginx/log/storybook#1515168993ls#1515169003cat storybook-host_2018-01-05.log #1515169009cat storybook-host_2018-01-05.log |grep 1fe626292fdf434d641feaf5d3bf44e4#1515169021cat storybook-host_2018-01-05.log |grep 164657aa9894dc6f2e42cd209ab71770#1515169089cat /var/log/nginx/log/storybook-host.access.log |grep &quot;/api/pay/iospayNotify&quot;#1515169102cat storybook-host_2018-01-05.log |grep &quot;/api/pay/iospayNotify&quot;#1515213287cd /var/log/nginx/log/storybook/#1515213288ls#1515213304cat storybook-host_2017-12-07.log |grep iospayNotify#1515295688cd /var/log/nginx/log/wish#1515295689ls#1515295705cat wish-host_2017-10-06.log |grep Ios#1515295710cat wish-host_2017-10-06.log |grep iOS#1515295718cat wish-host_2017-10-06.log |grep iOS|grep like#1515322594tail -f /var/log/nginx/log/wish-host.access.log #1515322605tail -f /var/log/nginx/log/wish-host.access.log |grep php#1515416263cd /etc/nginx/conf#1515416264ls#1515416269cd /etc/nginx/conf.d/#1515416269ls#1515416292vi dongman.conf#1515516492tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1515576934curl http://storybook.ifneghui.com#1515576947curl http://storybook.ifenghui.com#1515576950curl https://storybook.ifenghui.com#1515640110tail -f /var/log/nginx/log/admin.videoapi.access.log #1515640133tail -f /var/log/nginx/log/215.videoapi.access.log #1515640138tail -f /var/log/nginx/log/215.videoapi.access.log |grep php#1515683978curl -d &quot;appStoreMsg=MIIT4gYJKoZIhvcNAQcCoIIT0zCCE88CAQExCzAJBgUrDgMCGgUAMIIDgwYJKoZIhvcNAQcBoIIDdASCA3AxggNsMAoCARQCAQEEAgwAMAsCAQMCAQEEAwwBNTALAgETAgEBBAMMATUwCwIBGQIBAQQDAgEDMAwCAQoCAQEEBBYCNCswDAIBDgIBAQQEAgIAnjANAgELAgEBBAUCAwgfnDANAgENAgEBBAUCAwGuFjAOAgEBAgEBBAYCBEdFuKwwDgIBCQIBAQQGAgRQMjUwMA4CARACAQEEBgIEMTHYSTAQAgEPAgEBBAgCBkGDfDW6GDAUAgEAAgEBBAwMClByb2R1Y3Rpb24wGAIBBAIBAgQQuGMZCzYmLJw3DMz2ejkaTDAcAgEFAgEBBBTHih8HILNOmqVOKIBHwDsMWUgciTAeAgEIAgEBBBYWFDIwMTgtMDEtMTFUMTQ6Mzg6MDFaMB4CAQwCAQEEFhYUMjAxOC0wMS0xMVQxNDozODowMVowHgIBEgIBAQQWFhQyMDE3LTExLTMwVDAzOjE0OjQ0WjAgAgECAgEBBBgMFmNvbS5pZmVuZ2h1aS5zdG9yeXNoaXAwQAIBBwIBAQQ4tFUXCqxDxUJnumeXS6VHHrPFsQcCkLk/m3p72jZLbiRBZHOQqx9ldUk4GQTEODZ5dR7wUNsPWJ8wUAIBBgIBAQRIH9zhWe6ag9GRU5oSFEmuNSPNJx8hu8EIhUGacngtnXmHvc6ifdXTBHvctam2Sl/ZqGaurNo+ZhpQILpHsPB8paoqlvS3xX9zMIIBVQIBEQIBAQSCAUsxggFHMAsCAgasAgEBBAIWADALAgIGrQIBAQQCDAAwCwICBrACAQEEAhYAMAsCAgayAgEBBAIMADALAgIGswIBAQQCDAAwCwICBrQCAQEEAgwAMAsCAga1AgEBBAIMADALAgIGtgIBAQQCDAAwDAICBqUCAQEEAwIBATAMAgIGqwIBAQQDAgEBMAwCAgavAgEBBAMCAQAwDAICBrECAQEEAwIBADAPAgIGrgIBAQQGAgRIL0pdMBoCAgamAgEBBBEMD3N0b3J5c2hpcF82X2J1eTAaAgIGpwIBAQQRDA8zMjAwMDAzNTU0OTY4OTAwGgICBqkCAQEEEQwPMzIwMDAwMzU1NDk2ODkwMB8CAgaoAgEBBBYWFDIwMTgtMDEtMTFUMTQ6Mzg6MDFaMB8CAgaqAgEBBBYWFDIwMTgtMDEtMTFUMTQ6Mzg6MDFaoIIOZTCCBXwwggRkoAMCAQICCA7rV4fnngmNMA0GCSqGSIb3DQEBBQUAMIGWMQswCQYDVQQGEwJVUzETMBEGA1UECgwKQXBwbGUgSW5jLjEsMCoGA1UECwwjQXBwbGUgV29ybGR3aWRlIERldmVsb3BlciBSZWxhdGlvbnMxRDBCBgNVBAMMO0FwcGxlIFdvcmxkd2lkZSBEZXZlbG9wZXIgUmVsYXRpb25zIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MB4XDTE1MTExMzAyMTUwOVoXDTIzMDIwNzIxNDg0N1owgYkxNzA1BgNVBAMMLk1hYyBBcHAgU3RvcmUgYW5kIGlUdW5lcyBTdG9yZSBSZWNlaXB0IFNpZ25pbmcxLDAqBgNVBAsMI0FwcGxlIFdvcmxkd2lkZSBEZXZlbG9wZXIgUmVsYXRpb25zMRMwEQYDVQQKDApBcHBsZSBJbmMuMQswCQYDVQQGEwJVUzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKXPgf0looFb1oftI9ozHI7iI8ClxCbLPcaf7EoNVYb/pALXl8o5VG19f7JUGJ3ELFJxjmR7gs6JuknWCOW0iHHPP1tGLsbEHbgDqViiBD4heNXbt9COEo2DTFsqaDeTwvK9HsTSoQxKWFKrEuPt3R+YFZA1LcLMEsqNSIH3WHhUa+iMMTYfSgYMR1TzN5C4spKJfV+khUrhwJzguqS7gpdj9CuTwf0+b8rB9Typj1IawCUKdg7e/pn+/8Jr9VterHNRSQhWicxDkMyOgQLQoJe2XLGhaWmHkBBoJiY5uB0Qc7AKXcVz0N92O9gt2Yge4+wHz+KO0NP6JlWB7+IDSSMCAwEAAaOCAdcwggHTMD8GCCsGAQUFBwEBBDMwMTAvBggrBgEFBQcwAYYjaHR0cDovL29jc3AuYXBwbGUuY29tL29jc3AwMy13d2RyMDQwHQYDVR0OBBYEFJGknPzEdrefoIr0TfWPNl3tKwSFMAwGA1UdEwEB/wQCMAAwHwYDVR0jBBgwFoAUiCcXCam2GGCL7Ou69kdZxVJUo7cwggEeBgNVHSAEggEVMIIBETCCAQ0GCiqGSIb3Y2QFBgEwgf4wgcMGCCsGAQUFBwICMIG2DIGzUmVsaWFuY2Ugb24gdGhpcyBjZXJ0aWZpY2F0ZSBieSBhbnkgcGFydHkgYXNzdW1lcyBhY2NlcHRhbmNlIG9mIHRoZSB0aGVuIGFwcGxpY2FibGUgc3RhbmRhcmQgdGVybXMgYW5kIGNvbmRpdGlvbnMgb2YgdXNlLCBjZXJ0aWZpY2F0ZSBwb2xpY3kgYW5kIGNlcnRpZmljYXRpb24gcHJhY3RpY2Ugc3RhdGVtZW50cy4wNgYIKwYBBQUHAgEWKmh0dHA6Ly93d3cuYXBwbGUuY29tL2NlcnRpZmljYXRlYXV0aG9yaXR5LzAOBgNVHQ8BAf8EBAMCB4AwEAYKKoZIhvdjZAYLAQQCBQAwDQYJKoZIhvcNAQEFBQADggEBAA2mG9MuPeNbKwduQpZs0+iMQzCCX+Bc0Y2+vQ+9GvwlktuMhcOAWd/j4tcuBRSsDdu2uP78NS58y60Xa45/H+R3ubFnlbQTXqYZhnb4WiCV52OMD3P86O3GH66Z+GVIXKDgKDrAEDctuaAEOR9zucgF/fLefxoqKm4rAfygIFzZ630npjP49ZjgvkTbsUxn/G4KT8niBqjSl/OnjmtRolqEdWXRFgRi48Ff9Qipz2jZkgDJwYyz+I0AZLpYYMB8r491ymm5WyrWHWhumEL1TKc3GZvMOxx6GUPzo22/SGAGDDaSK+zeGLUR2i0j0I78oGmcFxuegHs5R0UwYS/HE6gwggQiMIIDCqADAgECAggB3rzEOW2gEDANBgkqhkiG9w0BAQUFADBiMQswCQYDVQQGEwJVUzETMBEGA1UEChMKQXBwbGUgSW5jLjEmMCQGA1UECxMdQXBwbGUgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkxFjAUBgNVBAMTDUFwcGxlIFJvb3QgQ0EwHhcNMTMwMjA3MjE0ODQ3WhcNMjMwMjA3MjE0ODQ3WjCBljELMAkGA1UEBhMCVVMxEzARBgNVBAoMCkFwcGxlIEluYy4xLDAqBgNVBAsMI0FwcGxlIFdvcmxkd2lkZSBEZXZlbG9wZXIgUmVsYXRpb25zMUQwQgYDVQQDDDtBcHBsZSBXb3JsZHdpZGUgRGV2ZWxvcGVyIFJlbGF0aW9ucyBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMo4VKbLVqrIJDlI6Yzu7F+4fyaRvDRTes58Y4Bhd2RepQcjtjn+UC0VVlhwLX7EbsFKhT4v8N6EGqFXya97GP9q+hUSSRUIGayq2yoy7ZZjaFIVPYyK7L9rGJXgA6wBfZcFZ84OhZU3au0Jtq5nzVFkn8Zc0bxXbmc1gHY2pIeBbjiP2CsVTnsl2Fq/ToPBjdKT1RpxtWCcnTNOVfkSWAyGuBYNweV3RY1QSLorLeSUheHoxJ3GaKWwo/xnfnC6AllLd0KRObn1zeFM78A7SIym5SFd/Wpqu6cWNWDS5q3zRinJ6MOL6XnAamFnFbLw/eVovGJfbs+Z3e8bY/6SZasCAwEAAaOBpjCBozAdBgNVHQ4EFgQUiCcXCam2GGCL7Ou69kdZxVJUo7cwDwYDVR0TAQH/BAUwAwEB/zAfBgNVHSMEGDAWgBQr0GlHlHYJ/vRrjS5ApvdHTX8IXjAuBgNVHR8EJzAlMCOgIaAfhh1odHRwOi8vY3JsLmFwcGxlLmNvbS9yb290LmNybDAOBgNVHQ8BAf8EBAMCAYYwEAYKKoZIhvdjZAYCAQQCBQAwDQYJKoZIhvcNAQEFBQADggEBAE/P71m+LPWybC+P7hOHMugFNahui33JaQy52Re8dyzUZ+L9mm06WVzfgwG9sq4qYXKxr83DRTCPo4MNzh1HtPGTiqN0m6TDmHKHOz6vRQuSVLkyu5AYU2sKThC22R1QbCGAColOV4xrWzw9pv3e9w0jHQtKJoc/upGSTKQZEhltV/V6WId7aIrkhoxK6+JJFKql3VUAqa67SzCu4aCxvCmA5gl35b40ogHKf9ziCuY7uLvsumKV8wVjQYLNDzsdTJWk26v5yZXpT+RN5yaZgem8+bQp0gF6ZuEujPYhisX4eOGBrr/TkJ2prfOv/TgalmcwHFGlXOxxioK0bA8MFR8wggS7MIIDo6ADAgECAgECMA0GCSqGSIb3DQEBBQUAMGIxCzAJBgNVBAYTAlVTMRMwEQYDVQQKEwpBcHBsZSBJbmMuMSYwJAYDVQQLEx1BcHBsZSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTEWMBQGA1UEAxMNQXBwbGUgUm9vdCBDQTAeFw0wNjA0MjUyMTQwMzZaFw0zNTAyMDkyMTQwMzZaMGIxCzAJBgNVBAYTAlVTMRMwEQYDVQQKEwpBcHBsZSBJbmMuMSYwJAYDVQQLEx1BcHBsZSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTEWMBQGA1UEAxMNQXBwbGUgUm9vdCBDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAOSRqQkfkdseR1DrBe1eeYQt6zaiV0xV7IsZid75S2z1B6siMALoGD74UAnTf0GomPnRymacJGsR0KO75Bsqwx+VnnoMpEeLW9QWNzPLxA9NzhRp0ckZcvVdDtV/X5vyJQO6VY9NXQ3xZDUjFUsVWR2zlPf2nJ7PULrBWFBnjwi0IPfLrCwgb3C2PwEwjLdDzw+dPfMrSSgayP7OtbkO2V4c1ss9tTqt9A8OAJILsSEWLnTVPA3bYharo3GSR1NVwa8vQbP4++NwzeajTEV+H0xrUJZBicR0YgsQg0GHM4qBsTBY7FoEMoxos48d3mVz/2deZbxJ2HafMxRloXeUyS0CAwEAAaOCAXowggF2MA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBQr0GlHlHYJ/vRrjS5ApvdHTX8IXjAfBgNVHSMEGDAWgBQr0GlHlHYJ/vRrjS5ApvdHTX8IXjCCAREGA1UdIASCAQgwggEEMIIBAAYJKoZIhvdjZAUBMIHyMCoGCCsGAQUFBwIBFh5odHRwczovL3d3dy5hcHBsZS5jb20vYXBwbGVjYS8wgcMGCCsGAQUFBwICMIG2GoGzUmVsaWFuY2Ugb24gdGhpcyBjZXJ0aWZpY2F0ZSBieSBhbnkgcGFydHkgYXNzdW1lcyBhY2NlcHRhbmNlIG9mIHRoZSB0aGVuIGFwcGxpY2FibGUgc3RhbmRhcmQgdGVybXMgYW5kIGNvbmRpdGlvbnMgb2YgdXNlLCBjZXJ0aWZpY2F0ZSBwb2xpY3kgYW5kIGNlcnRpZmljYXRpb24gcHJhY3RpY2Ugc3RhdGVtZW50cy4wDQYJKoZIhvcNAQEFBQADggEBAFw2mUwteLftjJvc83eb8nbSdzBPwR+Fg4UbmT1HN/Kpm0COLNSxkBLYvvRzm+7SZA/LeU802KI++Xj/a8gH7H05g4tTINM4xLG/mk8Ka/8r/FmnBQl8F0BWER5007eLIztHo9VvJOLr0bdw3w9F4SfK8W147ee1Fxeo3H4iNcol1dkP1mvUoiQjEfehrI9zgWDGG1sJL5Ky+ERI8GA4nhX1PSZnIIozavcNgs/e66Mv+VNqW2TAYzN39zoHLFbr2g8hDtq6cxlPtdk2f8GHVdmnmbkyQvvY1XGefqFStxu9k0IkEirHDx22TZxeY8hLgBdQqorV2uT80AkHN7B1dSExggHLMIIBxwIBATCBozCBljELMAkGA1UEBhMCVVMxEzARBgNVBAoMCkFwcGxlIEluYy4xLDAqBgNVBAsMI0FwcGxlIFdvcmxkd2lkZSBEZXZlbG9wZXIgUmVsYXRpb25zMUQwQgYDVQQDDDtBcHBsZSBXb3JsZHdpZGUgRGV2ZWxvcGVyIFJlbGF0aW9ucyBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eQIIDutXh+eeCY0wCQYFKw4DAhoFADANBgkqhkiG9w0BAQEFAASCAQBWpTIjhmuPxKuJv0r1wYwsM4Bnnrr3+WgEprPgoWT3f9SAtP+5ajJ3Vfv30sWsWnz8j6W5MYxV7eIj6R8SvSR8kMI6k9C6FueYJFaY9QH1LOlxUqKd+2cJMR51cK+a/7iRHtlSjc2WDnUnJ9w5U8Aok1M4ZcfjaJANbts+VcmaUhkWOp0JP194fogBuXvYw2zHKl9P44LqY4LyIJXKVtVER2ERzgByNNISKy1kFvwfub8RZhrCb6+HESQxdrJaWFIcuQKMNR81jk0QNXzieHcKWTVnLKbSmfQ8NnU1dD00RgDz+KDWKYU9fIXug1jSrCkAGnsTIRzgOKot20v7pHb6&amp;device=iPhone 8 Plus&amp;isSandbox=0&amp;priceId=4&amp;token=86c5e92aa7a7c2556cdfec4b03095388&amp;ver=1.6.1&quot; &quot;storybook.ifenghui.com/api/pay/iospayNotify&quot;#1515684559cat /var/log/nginx/log/storybook-host.access.log |grep iospayNotify|grep 500#1515684571cat /var/log/nginx/log/storybook-host.access.log |grep iospayNotify|grep &quot; 500 &quot;#1515634512ܴail #1515634526tail -f /var/log/nginx/log/storybook-host.access.log #1515737464cd /etc/nginx/conf#1515737464ls#1515737478cd /var/log/nginx/log/wish#1515737478ls#1515737492cat wish-host_2018-01-01.log |grep 717fa79afafb48f48efcd551a708a136#1515747618cd /etc/logstash/#1515747619ls#1515747620cd conf.d/#1515747620ls#1515747623vi wish_medal_record.sql#1515746350cd /etc/logstash/#1515746350ls#1515746352cd conf.d/#1515746352ls#1515746356vi mysql_bbs.sql #1515746360ls#1515746373cp mysql_bbs.sql wish_medal_record.sql#1515746377vi wish_medal_record.sql #1515746387ls#1515746410vi logstash.conf #1515746728ps -ef|grep logstash#1515746735kill 20168#1515746812ps -ef|grep logstash#1515746838cat /chroot/howToUse/logstash.sh #1515746845/chroot/howToUse/logstash.sh #1515746887ps -ef|grep logstash#1515746942cd /etc/logstash/conf.d/#1515746942ls#1515746943vi logstash.conf #1515747112ps -ef|grep logstash#1515747117kill 19648#1515747229/chroot/howToUse/logstash.sh #1515747305ps -ef|grep logstash#1515747308pwd#1515747309ll#1515747313cat wish_medal_record.sql #1515747357ls#1515747360vi logstash.conf #1515747455ps -ef|grep logstash#1515747467kill 19946#1515747481cat /chroot/howToUse/logstash.sh #1515747505/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf#1515748159/chroot/howToUse/logstash.sh #1515748399ps -ef|grep logstash#1515748406kill 20733#1515748619kill -9 20733#1515748682/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf#1515748891/chroot/howToUse/logstash.sh #1515755690cd /etc/logstash/#1515755690ls#1515755693cd conf.d/#1515755693ls#1515755752cp wish_medal_record.sql wish_follow.sql#1515755756vi wish_follow.sql#1515755788ls#1515755882cp wish_follow.sql wish_like_other.sql#1515755888vi wish_like_other.sql#1515770129df#1515770139cd /var/log/nginx/#1515770139ls#1515770141ll#1515770159rm error.log-201*-rf#1515770171rm error.log-201* -rf#1515770173ll#1515770173df#1515770183rm access.log-201* -rf#1515770184ll#1515770186cd log/#1515770206ll#1515770222rm img2.ifenghui.com.access.log #1515770223ll#1515770230rm fenxiao-host.access.log #1515770238rm admin-comic-host.access.log #1515770245cd ifenghui/#1515770246ls#1515770247ll#1515770257/etc/init.d/nginx configtest#1515770261/etc/init.d/nginx reload#1515770263df#1515770270cd ..#1515770271ls#1515770279cd open#1515770282cd openvista#1515770282ls#1515770353ps -ef|grep oss#1515770363vi openvista-host#1515770380cat /chroot/howToUse/osslog.sh #1515770393/chroot/howToUse/osslog.sh #1515770409df#1515770413ls#1515770414ll#1515770441vi /chroot/howToUse/osslog.sh #1515770468/chroot/howToUse/osslog.sh #1515770567ls#1515770569ll#1515770591rm openvista-host_2017-11-*.log -rf#1515770592df#1515770595cd ..#1515770595ls#1515770601cd wish#1515770601ls#1515770602ll#1515770635rm wish-host_2017-09-* -rf#1515770763df#1515919706cd /var/log/nginx/log/#1515919707ls#1515919709cd wish#1515919710ll#1515925072cd /var/log/nginx/log/storybook/#1515925073ls#1515925092cd ..#1515925093ls#1515925105cat storybook-host.access.log |grep 952e3484305aa854bdc01e8a12e70464#1515925147cd storybook#1515925147ls#1515925157cat storybook-host_2018-01-13.log |grep 23.91.130.43&quot; &quot;0.053&quot; &quot;-&quot; &quot;-&quot; &quot;952e3484305aa854bdc01e8a12e70464&quot; &quot;-&quot;#1515925169cat storybook-host_2018-01-13.log |grep 952e3484305aa854bdc01e8a12e70464#1515925241cat storybook-host_2018-01-*.log |grep 952e3484305aa854bdc01e8a12e70464#1515943540ls#1515943546top#1515943589ls#1515943649cd /var/log/nginx/log/storybook/#1515943650ls#1515943652ll#1515943682ls#1515943689ll#1516000637tail -f /var/log/nginx/log/wish-host.access.log #1516000644tail -f /var/log/nginx/log/wish-host.access.log |grep iOS#1516004460tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1516071065tail -f /var/log/nginx/log/storybook-host.access.log #1516073495cd /var/log/nginx/log/storybook#1516073495ll#1516073543cat storybook-host_2017-08-04.log|grep iospayNotify#1516101662tail -f /var/log/nginx/log/storybookbeta-host.access.log #1516108138cd /home/#1516108183cd /etc/nginx/conf#1516108186cd /etc/nginx/conf.d#1516108186ld#1516108187ls#1516108199vi wx.storybook.conf #1516108218cd /chroot/api/#1516108219ls#1516108221pwd#1516108228svn up#1516108238pwd#1516108398ʊ#1516108399䴶n #1516108401svn up#1516156647cd /var/log/nginx/log/wish#1516156647ls#1516156680cd ..#1516156680ls#1516156685cd storybook#1516156685ls#1516156699cat storybook-host_2017-08-04.log |grep iospayNotify#1516159445cd /var/log/nginx/log/storybook/storybook-host_2017-08-04.log |grep 94f42daff9b85a4ba3a9532783783696#1516159454cat /var/log/nginx/log/storybook/storybook-host_2017-08-04.log |grep 94f42daff9b85a4ba3a9532783783696#1516164902cd /var/log/nginx/log/storybook#1516164902ls#1516164908cat *|grep b146da488fe11023ebcaa8ec13689db1#1516165145cat *|grep b9098a7d23317bc453cdebb201de0de9#1516165160cat *|grep b146da488fe11023ebcaa8ec13689db1#1516165183cat *|grep b146da488fe11023ebcaa8ec13689db1|grep Notify#1514855580tail -f /var/log/nginx/log/storybook-host.access.log |grep getRecommendStorys#1514856678tail -f /var/log/nginx/log/storybook-host.access.log |grep 4c9a9ce9a8775b270f2f7f0d15a387c3#1516156096tail -f /var/log/nginx/log/storybook-host.access.log #1514870923tail -f /var/log/nginx/log/wish-host.access.log |grep 2603#1514885510tail -f /var/log/nginx/log/wish-host.access.log |grep v2#1514963203tail -f /var/log/nginx/log/wish-host.access.log |grep eventAnalytics -A 2#1514963235tail -f /var/log/nginx/log/wish-host.access.log #1514968743tail -f /var/log/nginx/log/wish-host.access.log |grep getCategory#1514972531tail -f /var/log/nginx/log/wish-host.access.log |grep getIndexGroup#1515050680tail -f /var/log/nginx/log/wish-host.access.log |grep addTaskValue#1515460501tail -f /var/log/nginx/log/storybook-host.access.log#1515461885tail -f /var/log/nginx/log/wish-host.access.log #1515463170tail -f /var/log/nginx/log/wish-host.access.log |grep 538612#1515648899tail -f /var/log/nginx/log/wish-host.access.log |grep 246881#1515648918tail -f /var/log/nginx/log/wish-host.access.log #1515648974tail -f /var/log/nginx/log/wish-host.access.log |grep 538615#1515649063tail -f /var/log/nginx/log/wish-host.access.log |grep 246881#1515650203tail -f /var/log/nginx/log/storybookbeta-host.access.log#1515668140tail -f /var/log/nginx/log/storybook-host.access.log|grep 5b26bf1634bfa618e75a45b9ba725753#1515668209tail -f /var/log/nginx/log/storybook-host.access.log|grep f7a4e12a831ab86bfffd23b3ea4e2f7e#1515725718tail -f /var/log/nginx/log/wish-host.access.log #1515725730tail -f /var/log/nginx/log/wish-host.access.log |grep delStatus#1515726717tail -f /var/log/nginx/log/wish-host.access.log |grep 538612#1515983075tail -f /var/log/nginx/log/storybook-host.access.log #1516108236cd /chroot/api/#1516108236ls#1516108245cd public/#1516108246svn up#1516241385cd /usr/local/#1516241385ls#1516245180cd /var/log/nginx/log/storybook#1516245181ls#1516245199cat storybook-host_2018-01-17.log |grep b9707d79ea94d4eaf13b5dda3f17eece#1516610129cd /etc/nginx/#1516610129ls#1516610131cd conf#1516610133cd conf.d#1516610133l#1516610134ls#1516610139vi storybook.conf #1516610148vi storyship.conf #1516610255/etc/init.d/nginx configtest#1516610259/etc/init.d/nginx reload#1516612998ls#1516613012df#1516613016cd /chroot#1516613016ls#1516613034cd web#1516613035ls#1516613036cd ..#1516613037ls#1516613052cat p.php #1516613101ls#1516613195cd api#1516613195ls#1516615873tail -f /var/log/nginx/log/storyship-host.access.log #1516689785ls#1516689800tail -f /etc/nginx/nginx.conf #1516689820cat tail -f /etc/nginx/nginx.conf#1516689824cat /etc/nginx/nginx.conf#1516689833cd /etc/nginx#1516689834ls#1516689836cd conf#1516689838cd conf.d/#1516689839ls#1516689853cat storybook.conf #1516689874cat storyship#1516689876cat storyship.conf #1516697067cd /data/www#1516697067ls#1516697070cd /data/www#1516697071ls#1516241612tail -f /var/log/nginx/log/wish-host.access.log #1516241639tail -f /var/log/nginx/log/wish-host.access.log |grep 425582#1516241673tail -f /var/log/nginx/log/wish-host.access.log#1516241723tail -f /var/log/nginx/log/wish-host.access.log|grep getUserStatus#1516261729tail -f /var/log/nginx/log/storybook-host.access.log#1516261768tail -f /var/log/nginx/log/storybookbeta-host.access.log#1516265100tail -f /var/log/nginx/log/storybook-host.access.log#1516265376tail -f /var/log/nginx/log/storybook-host.access.log|grep 76fe858b3981ee5880f155c196d19f2e#1516266509tail -f /var/log/nginx/log/storybook-host.access.log#1516266644tail -f /var/log/nginx/log/storybook-host.access.log|grep 76fe858b3981ee5880f155c196d19f2e#1516267303tail -f /var/log/nginx/log/storybook-host.access.log#1516267782tail -f /var/log/nginx/log/storybook-host.access.log|grep 76fe858b3981ee5880f155c196d19f2e#1516357324tail -f /var/log/nginx/log/wish-host.access.log#1516357349tail -f /var/log/nginx/log/wish-host.access.log|grep getPerson#1516357366tail -f /var/log/nginx/log/wish-host.access.log|grep 537654#1516357423tail -f /var/log/nginx/log/wish-host.access.log|grep getPerson#1516357482tail -f /var/log/nginx/log/wish-host.access.log#1516357609tail -f /var/log/nginx/log/wish-host.access.log|getMessageBy#1516357618tail -f /var/log/nginx/log/wish-host.access.log|grep getMessageBy#1516698274tail -f /var/log/nginx/log/wish-host.access.log#1516756200cd /etc/nginx#1516756200ls#1516756204cd conf.d/#1516756204ls#1516756221cat cat storyship#1516756223cat cat storyship.conf #1516756574ls#1516756582vim storyship.conf #1516756723/etc/init.d/nginx restart#1516756799ping http://storyship.ifenghui.com/activityapi/#1516756807ping storyship.ifenghui.com/activityapi/#1516756810ping storyship.ifenghui.com/activityapi#1516756814ping storyship.ifenghui.com#1516756847vim storyship.conf #1516757255/etc/init.d/nginx restart#1516757435vim storyship.conf #1516757677cat storyship.conf #1516757736/etc/init.d/nginx restart#1516757767ping http://storyship.ifenghui.com/activityapi#1516757810tal -f /var/log/nginx/log/#1516757815tal -f /var/log/nginx/log/247-host.access.log #1516757820tail -f /var/log/nginx/log/247-host.access.log #1516757890cat wish.conf#1516757966cat storyship.conf #1516760402ls#1516760408vim storyship.conf #1516760566/etc/init.d/nginx restart#1516760876vim storyship.conf #1516761617/etc/init.d/nginx restart#1516782543cd /chroot#1516782544ls#1516782546cd api#1516782546ls#1516782550svn up#1516782559/etc/init.d/php56-php-fpm#1516782562/etc/init.d/php56-php-fpm restart#1516785057svn up#1516785060/etc/init.d/php56-php-fpm restart#1516790173svn up#1516790177/etc/init.d/php56-php-fpm restart#1516790274svn up#1516790277/etc/init.d/php56-php-fpm restart#1516790457svn up#1516790459/etc/init.d/php56-php-fpm restart#1516790700svn up#1516790702/etc/init.d/php56-php-fpm restart#1516791012svn up#1516791014/etc/init.d/php56-php-fpm restart#1516791071svn up#1516791072/etc/init.d/php56-php-fpm restart#1516791107svn up#1516791109/etc/init.d/php56-php-fpm restart#1516791204svn up#1516791205/etc/init.d/php56-php-fpm restart#1516791247svn up#1516791248/etc/init.d/php56-php-fpm restart#1516791324svn up#1516791325/etc/init.d/php56-php-fpm restart#1516791488svn up#1516791490/etc/init.d/php56-php-fpm restart#1516791521svn up#1516791523/etc/init.d/php56-php-fpm restart#1516791673svn up#1516791674/etc/init.d/php56-php-fpm restart#1516791825svn up#1516791826/etc/init.d/php56-php-fpm restart#1516791936svn up#1516791938/etc/init.d/php56-php-fpm restart#1516792053svn up#1516792054/etc/init.d/php56-php-fpm restart#1516791495cd /chroot/wishroot/v2/#1516791495ls#1516791499cd ..#1516791499ls#1516791503cd queue/#1516791503ls#1516791512cd Interface/#1516791514cd Lib/#1516791515snv up#1516791516svn up#1516881411cd /var/log/nginx/log/#1516881412ls#1516881426tail -f /wish-host.access #1516881463tail -f /215.videoapi.access.log #1516881490tail -f /wish-host.access.log#1516881494tail -f wish-host.access.log#1516881519tail -f wish-host.access.log |grep 2603#1516961921cd /etc/nginx#1516961921ls#1516961925cd conf.d#1516961926ls#1516961932cat storybook.conf #1516962621ls #1516962629cat storyship.conf#1516962645vim storyship.conf #1516962736/etc/init.d/nginx restart#1516963342ls#1516963357cat storybookbeta.conf #1516963471cat ./storybook.conf #1517197694cd /etc/nginx/conf#1517197694ls#1517197698cd /etc/nginx/conf.d/#1517197698ls#1517197728cp openvista.conf hitchhiker.conf#1517197730vi hitchhiker.conf #1517197834/etc/init.d/nginx configtest#1517197838/etc/init.d/nginx reload#1517197872vi hitchhiker.conf #1517197883/etc/init.d/nginx configtest#1517197885/etc/init.d/nginx reload#1517197978vi hitchhiker.conf #1517197992/etc/init.d/nginx configtest#1517197993/etc/init.d/nginx reload#1517199478vi hitchhiker.conf #1517199497/etc/init.d/nginx configtest#1517199501/etc/init.d/nginx relopad#1517199506/etc/init.d/nginx reload#1517224854tail -f /var/log/nginx/log/wish-host.access.log #1517224869tail -f /var/log/nginx/log/wish-host.access.log |grep 124.204.41.3#1517224874tail -f /var/log/nginx/log/wish-host.access.log |grep 124.204.41.3|grep getVer#1517224924cat /var/log/nginx/log/wish-host.access.log |grep 124.204.41.3|grep getVer#1517224958tail -f /var/log/nginx/log/wish-host.access.log |grep 124.204.41.3|grep getVer#1516886153tail -f /var/log/nginx/log/wish-host.access.log #1516886203tail -f /var/log/nginx/log/wish-host.access.log |grep 434060#1516944940tail -f /var/log/nginx/log/wish-host.access.log |grep lesson#1517194797tail -f /var/log/nginx/log/wish-host.access.log |grep 489085#1517205297tail -f /var/log/nginx/log/wish-host.access.log |grep 583649#1517274939tail -f /var/log/nginx/log/storybook-host.access.log #1517289824cd /etc/logstash/#1517289824ls#1517289828cd conf.d/#1517289829ls#1517289831vi logstash.conf #1517289871ps -ef|grep nginx#1517289881ps -ef|grep logstash#1517289887kill 21310#1517289923/chroot/howToUse/logstash.sh #1517299374tail -f /var/log/nginx/log/wish-host.access.log #1517299389tail -f /var/log/nginx/log/wish-host.access.log |grep &quot;.3&quot;#1517299413tail -f /var/log/nginx/log/wish-host.access.log |grep &quot;Company Haifeng python log&quot;#1517364023df#1517364039docker ps#1517364053cd /usr/local/#1517364053ls#1517364057cd elasticsearch/#1517364057ls#1517364064ps -ef|grep elastic#1517364071curl localhost:9200#1517364419ps -ef|grep kibana#1517364422cd ..#1517364422ls#1517364430cd ./kibana/#1517364431ls#1517364432cd bin/#1517364433ls#1517364435./kibana#1517451622cd /etc/nginx#1517451623ls#1517451626cd conf.d/#1517451627ls#1517451635cat storyship.conf #1517472883crontab -l#1517535082crontab -e#1517365186tail -f /var/log/nginx/log/storybook-host.access.log #1517377620tail -f /var/log/nginx/log/wish-host.access.log #1517377625tail -f /var/log/nginx/log/wish-host.access.log 161#1517619971df#1517619982cd /var/log#1517619983ls#1517619991cd nginx/#1517619992ls#1517619999pwd#1517620000cd log#1517620000ls#1517620002ll#1517620016rm dongman.ifenghui.com-host.access.log #1517620054rm img2.ifenghui.com.access.log #1517620062/etc/init.d/nginx configtest#1517620066/etc/init.d/nginx reload#1517620070df#1517620077cd ifenghui/#1517620078ls#1517620080ll#1517620098rm www.ifenghui.com-host_2017-* -rf#1517620141df#1517620150cd ..#1517620150ls#1517620156cd openvista#1517620156ls#1517620157ll#1517620182rm openvista-host_2017-* -rf#1517620187df#1517620200cd /usr/local/src/#1517620200ls#1517620202ll#1517620280rm apache-tomcat-8.5.6.tar.gz#1517620287rm apache-maven-3.3.9-bin.tar.gz#1517620289df#1517620300rm apache-activemq-5.11.1#1517620304rm apache-activemq-5.11.1 -rf#1517620306df#1517620313cd /usr/local/src/#1517620314ls#1517620315ll#1517620350df#1517620356cd /var/log/nginx/log/#1517620357ls#1517620429cd storybook#1517620430l#1517620430ls#1517620609ll#1517620611cd ..#1517620612ls#1517620617cd wish#1517620618ls#1517620661ll#1517620682rm wish-host_2017-10-* -rf#1517620715df#1517819020cd /etc/nginx#1517819020ls#1517819022cd conf#1517819026cd conf.d/#1517819026ls#1517819034cat storyship.conf #1517832537cd /etc/nginx/#1517832538ls#1517832540cd conf#1517832540ls#1517832543cd conf.d#1517832543ls#1517832549vi wish.conf#1517832553ls#1517832567vi storyship.conf #1517832619/etc/init.d/nginx configtest#1517832623/etc/init.d/nginx reload#1517833487vi storyship.conf #1517833598/etc/init.d/nginx configtest#1517833600/etc/init.d/nginx reload#1517881140cd /etc/nginx/conf#1517881144cd /etc/nginx/#1517881144ls#1517881147vi nginx.conf #1517881153ls#1517881164cat *|grep timeout#1517881388cd conf.d/#1517881388ls#1517881392vi storybook.conf #1517881400vi storyship.conf #1517881448/etc/init.d/nginx configtest#1517881453/etc/init.d/nginx reload#1517881511/etc/init.d/nginx restart#1517881808ls#1517881813cd ..#1517881813ls#1517881820cd stream_conf.d/#1517881820ls#1517881823cd ..#1517881824ls#1517881839cd scgi_params #1517881839ls#1517881844cd modules/#1517881845ls#1517881846cd ..#1517881846ls#1517881850cd conf#1517881853cd conf.d/#1517881854ls#1517881861vi storyship.conf #1517797161cd /etc/nginx/conf.d/#1517797162sl#1517797163ls#1517797172cat storyship.conf #1517808700tail -f /var/log/nginx/log/storybook-host.access.log #1517822417tail -f /var/log/nginx/log/storybookbeta-host.access.log #1517823413tail -f /var/log/nginx/log/storybook-host.access.log #1517823873tail -f /var/log/nginx/log/storybookbeta-host.access.log #1517880923tail -f /var/log/nginx/log/wish-host.access.log #1517880945tail -f /var/log/nginx/log/wish-host.access.log |grep detail#1517881006tail -f /var/log/nginx/log/wish-host.access.log |grep 586373#1517887414tail -f /var/log/nginx/log/wish-host.access.log |grep 309886#1517968885cd /etc/nginx/#1517968885ls#1517968887cd conf#1517968887ls#1517968889cd conf.d/#1517968889ls#1517968899vi storyship.conf #1517969281/etc/init.d/nginx configtest#1517969285/etc/init.d/nginx reload#1517983737޴#1517983744cd /var/log/nginx/log/#1517983744ls#1517983748tail -f storyship-host.access.log #1517983756tail -f storyship-host.access.log |grep mp4#1517983776cat storyship-host.access.log |grep mp4#1517983782cat storyship-host.access.log |grep Mp4#1517983791tail -f storyship-host.access.log |grep Mp4#1517991309cd /etc/nginx/#1517991309ls#1517991318vi passwd.db #1517991321ls#1517991345/etc/init.d/nginx restart#1517993663tail -f /var/log/nginx/log/wish-host.access.log |grep Mp4#1517993695tail -f /var/log/nginx/log/storyship-host.access.log |grep Mp4#1517995071top#1518069630ޣd #1518069632cd /etc/nginx/conf#1518069633ls#1518069636cd /etc/nginx/conf.d/#1518069636ls#1518069641vi wish.conf#1518070430cd /chroot/howToUse/#1518070430ls#1518070483cd ..#1518070484ls#1518070494cd msgcount_py/#1518070494ls#1518070500./start.sh #1518070513ps -ef|grep python#1518070523cd /etc/nginx/conf#1518070524ls#1518070526cd /etc/nginx/conf.d/#1518070527ls#1518070540vi storyship.conf #1518070592ls#1518070596vi game.conf #1518080874cd /etc/logstash/#1518080874ls#1518080876cd conf.d/#1518080876ls#1518080879vi logstash.conf #1518142281df#1518142311cd /usr/local/src/#1518142311ls#1518142313ll#1518142318rm webalizer-2.23-05-src.tgz#1518142325rm pthreads-2.0.10.tgz#1518142338rm iftop-0.17.tar.gz#1518142345ls#1518144659tail -f /var/log/nginx/log/storybook-host.access.log #1518145128tail -f /var/log/nginx/log/storybook-host.access.log |grep SE#1518145640cat /var/log/nginx/log/storybook-host.access.log |grep POST#1518146247cat /var/log/nginx/log/storybook-host.access.log |grep GET#1518146535cat /var/log/nginx/log/storybook-host.access.log |grep getStoryDetailById#1518146558cat /var/log/nginx/log/storybook-host.access.log |grep GET#1518155754cat /var/log/nginx/log/storybook-host.access.log |grep getStoryDetailById#1518157585tail -f /var/log/nginx/log/wish-host.access.log |grep 515181#1518159448cat /var/log/nginx/log/wish-host.access.log |grep 551408#1518230163tail -f /var/log/nginx/log/storyship-host.access.log |grep Mp4#1518231730cd /etc/nginx/conf#1518231732cd /etc/nginx/conf.d#1518231732ls#1518231738vi storyship.conf #1518231760/etc/init.d/nginx configtest#1518231763/etc/init.d/nginx reload#1518252929cd /var/log/nginx#1518252930ls#1518252935cd log#1518252935ls#1518252690cd /etc/nginx#1518252691ls#1518252694cd conf.d#1518252695ls#1518252714cat storyship.conf #1518252723ls#1518252729cat storybook.conf #1518252751cat storyship.conf #1518252761ls#1518252769cd /var/log/nginx/#1518252769ls#1518252773cd log#1518252773ls#1518252811crontab#1518252816crontab -l#1518252844cd /chroot/howToUse/#1518252845ls#1518252865cat log_cut.sh#1518252890vim log_cut.sh #1518253075cd /var/log/nginx#1518253075ls#1518253077cd log#1518253077ls#1518253082mkdir storyship#1518253083ls#1518314267cd /etc/nginx/conf#1518314278cd /var/log/nginx/log/#1518314278ls#1518314292ll storyship-host.access.log #1518314902ll /var/log/nginx/log/storyship-host.access.log#1518312721tail -f /var/log/nginx/log/storyship-host.access.log #1518312752tail -f /var/log/nginx/log/storyship-host.access.log |grep activityapi#1518312903tail -f /var/log/nginx/log/wish-host.access.log #1518312923tail -f /var/log/nginx/log/storybook-host.access.log #1518312965cd /etc/nginx/conf.d/#1518312966ls#1518312967cd ..#1518312970vi nginx.conf #1518313432tail -f /var/log/nginx/log/storyship-host.access.log |grep activityapi#1518314207ޣd #1518314219cd /etc/logstash/conf.d/#1518314219ls#1518314223vi logstash.conf #1518314554top#1518314583ps -ef|grep 11501#1518314627ps -ef|grep logstash#1518314634kill 11501#1518314645cd /chroot/howToUse/#1518314646ls#1518314648cat log#1518314652ll logs*#1518314660cat ./logstash.sh #1518314667./logstash.sh #1518314677ps -ef|grep logstash#1518314881cd /etc/logstash/#1518314881ls#1518314883cd conf.d/#1518314884ls#1518314886vi logstash.conf #1518316998tail -f /var/log/nginx/log/storyship-host.access.log |grep activityapiactivityapi#1518317009tail -f /var/log/nginx/log/storyship-host.access.log |grep acti#1518228735cat /var/log/nginx/log/wish-host.access.log |grep 490736#1518228756cd /var/log/nginx/log/#1518228756ls#1518228762cd wish#1518228765ls#1518228795cat wish-host_2018-02-09.log |grep 490736#1518231823tail -f /var/log/nginx/log/wish-host.access.log |grep 489086#1518253246cat /var/log/nginx/log/storybook-host.access.log |grep d6f22b869f6bbeec7302ff1bf50b3578#1518253460cat /var/log/nginx/log/storybook-host.access.log |grep pay#1518253563cat /var/log/nginx/log/storybook-host.access.log |grep zhijianStory#1518253688cat /var/log/nginx/log/storybook-host.access.log |grep zhijianWxpayNotify#1518317151tail -f /var/log/nginx/log/wish-host.access.log |grep 489086#1518311281cd /var/log#1518311283ls#1518311288cd nginx/#1518311289ls#1518311291cd log#1518311291ls#1518311297cd storyship#1518311298ls#1518311304tail storyship-host_2018-02-10.log #1518311346cd ../#1518311347ks#1518311348ls#1518311364tail storyship-host.access.log #1518311405tail -f storyship-host.access.log #1518324614tail -f storyship-host.access.log |grep activityapi#1519369613top#1519369630df#1519369637vnstat -l -i eth1#1519369763vnstat -m -i eth1#1519369768vnstat -d -i eth1#1519369774vnstat -l -i eth1#1519369778df#1519369782cd /usr/local/src/#1519369782ls#1519369784ll#1519369807rm rpmforge-release-0.5.2-2.el6.rf.x86_64.rpm #1519369815rm awstats-7.4.tar.gz #1519369824rm logtail-linux64.tar.gz #1519369833rm memcache-2.2.7.tgz #1519369835ll#1519369844rm procps-3.2.8-36.el6.i686.rpm #1519369857df#1519369865cd /var/www/html/#1519369865ls#1519369870cd openvista/#1519369871ls#1519369875cat fileauth.txt #1519369877cd ..#1519369878ls#1519369882cd biaoqing/#1519369883ls#1519369891ll#1519369906cd ..#1519369906ls#1519369921mv biaoqing biaoqing_bk#1519369925cd /etc/nginx/conf#1519369925ls#1519369931cd /etc/nginx/conf.d/#1519369932ls#1519622142crontab -e#1519634464tail -f /var/log/nginx/log/storyship-host.access.log #1519630146cat /var/log/nginx/log/storybook-host.access.log #1519630226cat /var/log/nginx/log/storybook-host.access.log |grep fed170a017032ca734c498db784e7f58#1519630236tail -f /var/log/nginx/log/storybook-host.access.log |grep fed170a017032ca734c498db784e7f58#1519630261tail -f /var/log/nginx/log/storybook-host.access.log |grep 161#1519630283tail -f /var/log/nginx/log/storybook-host.access.log |grep 44c71046ae7f6cdab8accd2068bc7364#1519637508tail -f /var/log/nginx/log/wish-host.access.log |grep getMessage#1519695106cd /var/log/nginx#1519695106sl#1519695107ls#1519695110cd log#1519695111sl#1519695112ls#1519695672cd storybook#1519695672ls#1519695675cd ../#1519695675lkls#1519695676ls#1519695707tail -f storybook-host.access.log #1519783414cd#1519783438tail -f /var/log/nginx/log/storybook-host.access.log #1519783460tail -f /var/log/nginx/log/storybook-host.access.log |grep 7e734e58296883fc0d3e6f8cd798e513#1519813571df#1519813586cd /var/logs/storybookapi/#1519813587ls#1519813592pwd#1519813599ll#1519813619cd /var/log/nginx/#1519813620ls#1519813621cd log/#1519813622ls#1519813622ll#1519813642cd ifenghui/#1519813642ll#1519813657cd ..#1519813658ls#1519813661cd openvista#1519813661ls#1519813664cd ..#1519813664ls#1519813669cd wish#1519813669ls#1519813671ll#1519693813vnstat -l -i eth1#1519813326tail -f /var/log/nginx/log/storybook-host.access.log#1519814577cd /etc/nginx/conf.d/#1519814577ls#1519814581vi wish.conf#1519814589ls#1519814592cd ..#1519814594vi nginx.conf #1519896475cd /var/log/nginx/log/#1519896475ls#1519896489tail -f ./storybook-host.access.log #1519896517tail -f ./storybook-host.access.log |grep 3acb3c54e5511c822599bf3fce387c46#1519956891cd /etc/nginx/conf.d/#1519956892ls#1519956897cd ..#1519956897ls#1519956900cd sslkey/#1519956900ls#1519956902pwd#1519956925ls#1519958325cd /etc/nginx/conf.d/#1519958325ls#1519958332vi wish.conf#1519958730vi dongman.conf#1519958745ls#1519958759vi fenghuicomic.conf #1519958768ls#1519958774vi wx.storybook.conf #1519958842/etc/init.d/nginx configtest#1519958846/etc/init.d/nginx reload#1519960591ls#1519960599vi wx.storybook.conf #1519960613/etc/init.d/nginx configtest#1519960616/etc/init.d/nginx reload#1519971146tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1519955335cd /var/log/nginx/log#1519955336ls#1519955357tail -f ./storybook-host.access.log #1519955469tail -f ./storybook-host.access.log |grep 7c36dc0a698c3f5e2278e5762ceadc61#1519976250cd /etc/nginx/conf#1519976254cd /etc/nginx/conf.d/#1519976254ls#1519976269vi wx.storybook.ssl.conf #1519976297/etc/init.d/nginx configtest#1519976314tail -f /var/log/nginx/log/wish-host-ssl.access.log #1519976379tail -f /var/log/nginx/log/fenxiao-host-ssl.access.log #1519976516ls#1519976526vi wx.storybook.ssl.conf #1519976555/etc/init.d/nginx configtest#1519976558/etc/init.d/nginx restart#1519976562tail -f /var/log/nginx/log/fenxiao-host-ssl.access.log #1519976369tail -f /var/log/nginx/log/fenxiao-host.access.log #1520301459cd /etc/nginx/conf#1520301459ls#1520301479cd /var/log/nginx/log/storybook#1520301480ls#1520301493cat storybook-host_2018-03-03.log |grep 3110#1520301603cat storybook-host_2018-03-02.log |grep 3110#1520301640cat storybook-host_2018-03-03.log |grep 4b049b2b2ee735522bd05a94bb23f300#1520301649cat storybook-host_2018-03-02.log |grep 4b049b2b2ee735522bd05a94bb23f300#1520301654cat storybook-host_2018-03-02.log#1520301663cat storybook-host_2018-03-02.log |grep 4b049b2b2ee735522bd05a94bb23f300\\#1520301666cat storybook-host_2018-03-02.log |grep 4b049b2b2ee735522bd05a94bb23f300#1520301672cat storybook-host_2018-03-03.log |grep 4b049b2b2ee735522bd05a94bb23f300#1520301690cat storybook-host_2018-03-03.log |grep a14668bf3f6177212d2a753a9dcb1f4c#1520301695cat storybook-host_2018-03-04.log |grep 4b049b2b2ee735522bd05a94bb23f300#1520301701cat storybook-host_2018-03-05.log |grep 4b049b2b2ee735522bd05a94bb23f300#1520303826cd /var/log/nginx/log/#1520303833cat storybook-host.access.log |grep 1298837178#1519955321tail -f /var/log/nginx/log/storybook-host.access.log #1519955335cat /var/log/nginx/log/storybook-host.access.log |grep createMp4#1519955338cat /var/log/nginx/log/storybook-host.access.log |grep create#1519955341cat /var/log/nginx/log/storybook-host.access.log |grep cre#1519955361cat /var/log/nginx/log/storyship-host.access.log |grep mp4#1519955367cat /var/log/nginx/log/storyship-host.access.log |grep create#1519955372cat /var/log/nginx/log/storyship-host.access.log |grep createMp4#1519956784cd /etc/nginx/conf#1519956785ls#1519956790cd /etc/nginx/conf.d/#1519956790ls#1519956799vi wx.storybook.conf #1519956813ls#1519956822cp wx.storybook.ssl.conf #1519956835cp wx.storybook.conf wx.storybook.ssl.conf #1519956837vi wx.storybook.#1519956842vi wx.storybook.ssl.conf #1519956969/etc/init.d/nginx configtest#1519956977vi wx.storybook.ssl.conf #1519956992/etc/init.d/nginx configtest#1519956998/etc/init.d/nginx reload#1519957176cd /chroot/api#1519957177ls#1519957193vi zGXVvrp9hQ.txt#1519958185vnstat -l -i eth1#1520392909tail -f /var/log/nginx/log/storybook-host.access.log #1520392919tail -f /var/log/nginx/log/storybook-host.access.log |grep b1f45f9d8f0702307f3333742ce7f0f8#1520404134tail -f /var/log/nginx/log/wish-host.access.log |grep #1520404221tail -f /var/log/nginx/log/storybook-host.access.log |grep b1f45f9d8f0702307f3333742ce7f0f8#1520471461tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1520473824getRankList#1520473828݊#1520473830ccd \\\\\\\\#1520473837cd /etc/nginx/conf.d/#1520473837ls#1520473845vi wx.storybook.conf #1520486138cd /etc/nginx/conf#1520486143cd /etc/nginx/conf.d/#1520486143ls#1520486149vi elastic.ifenghui.com.conf #1520486312cd /etc/nginx/conf#1520486314cd /etc/nginx/conf.d/#1520486315ls#1520486321vi wx.storybook.conf #1520478657tail -f /var/log/nginx/log/storybook-host.access.log #1520478672tail -f /var/log/nginx/log/storybook-host.access.log |grep getIndex161#1520493884tail -f /var/log/nginx/log/wish-host.access.log #1520493901tail -f /var/log/nginx/log/wish-host.access.log |grep php#1520493934tail -f /var/log/nginx/log/wish-host.access.log |grep v3#1520493964tail -f /var/log/nginx/log/wish-host.access.log |grep b07f56416dcf9294dda56b7306e39ab9#1520494129tail -f /var/log/nginx/log/wish-host.access.log |grep v3#1520494165tail -f /var/log/nginx/log/wish-host.access.log |grep 586373#1520494182tail -f /var/log/nginx/log/wish-host.access.log |grep b79d2135a1acb31845b0498de1008ba2#1520495439tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1520497025cd /usr/local/coreseek#1520497026ls#1520497032cd etc#1520497033ls#1520497037vi sphinx.conf#1520488541cd /var/log/nginx/log#1520488541ls#1520488571tail -f ./wish-host.access.log |grep 4977#1520488587tail ./wish-host.access.log |grep 4977#1520488592tail -100 ./wish-host.access.log |grep 4977#1520488614tail -f ./wish-host.access.log |grep 4977#1520492545cd /chroot/api#1520492545ls#1520492546svn up#1520492556/etc/init.d/php56-php-fpm restart#1520492819cd /var/log/nginx/log#1520492819ls#1520492833tail -f ./wish-host.access.log #1520493100tail -f ./wish-host.access.log |grep 586373#1520492163cd /chroot#1520492164ls#1520492176cd api#1520492178ls#1520492182svn up#1520492196/etc/init.d/php56-php-fpm restart#1520510410tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1520557727ps -ef|grep kibana#1520557731cd /usr/local/kibana/#1520557732ls#1520557733cd bin/#1520557733ls#1520557737./kibana#1520561692cd /usr/local/coreseek#1520561692ls#1520561694cd etc/#1520561695ls#1520561698vi sphinx.conf#1520588001ls#1520588004cd /etc/nginx/conf#1520588008cd /etc/nginx/conf.d/#1520588009ls#1520588040cd /usr/local/coreseek#1520588040ls#1520588043cd etc/#1520588043ls#1520588047vi sphinx.conf#1520589361ssh root@215.ifenghui.com#1520589385tail -f /var/log/nginx/log/wish-host.access.log #1520590106cd /etc/logstash/#1520590107ls#1520590110cd conf.d/#1520590110ls#1520590113vi logstash.conf #1520587129tail -f /var/log/nginx/log/storybook-host.access.log #1520843460cd /etc/nginx/#1520843460ls#1520843462cd conf#1520843462ls#1520843464cd conf.d/#1520843464ls#1520843483vi storybook_ssl.conf#1520843675ls#1520843683ll *ssl*#1520843695vi wx.storybook.ssl.conf #1520852297df#1520852304cd /var/log/nginx/log/#1520852304ls#1520852312cd storybook#1520852312ls#1520852313ll#1520852346rm storybook-host_2017-08-*.log -rf#1520852351ll#1520852352df#1520852354cd ..#1520852355ls#1520852364cd wish#1520852365ls#1520852366ll#1520852386rm wish-host_2017-11-*.log -rf#1520852410df#1520856274df#1520856286cd /var/log/nginx/log/#1520856286ls#1520856292cd ifenghui/#1520856292ls#1520856294ll#1520856312rm www.ifenghui.com-host_2018-01-*.log -rf#1520856323df#1520856333rm www.ifenghui.com-host_2018-02-*.log -rf#1520856341df#1520903643cd /var/log#1520903643ls#1520903646df#1520903657cd ..#1520903660cd /var/logs/#1520903661ls#1520903662cd sp#1520903666cd storybookapi/#1520903666ls#1520903668cd ..#1520903670cd log#1520903670ls#1520903672cd ..#1520903673cd log#1520903675cd nginx/#1520903675ls#1520903682rm *.gz -rf#1520903684ls#1520903687cd log#1520903687ls#1520903688ll#1520903693rm img2.ifenghui.com.access.log #1520903724/etc/init.d/nginx configtest#1520903728/etc/init.d/nginx reload#1520903730df#1520903764du -h --max-depth=1 c/b#1520903770du -h --max-depth=1 ./#1520903783cd wish#1520903783ls#1520903794rm wish-host_2017-12-*.log -rf#1520903821ls#1520903822df#1521000366cd /etc/nginx/conf#1521000366ls#1521000377cd /usr/local/coreseek#1521000378ls#1521000384cd etc/#1521000385ls#1521000393vi sphinx.conf#1521000407ls#1521000416cp sphinx.conf sphinx.conf.180314#1521000418vi sphinx.conf#1521000655crontab -e#1521000665/usr/local/coreseek/indexAll.sh#1521014513cd /etc/nginx/conf.d/#1521014513ls#1521014525vi storyship.conf #1520992461cd /var/log/nginx/log#1520992461ls#1520992478tail -f ./storybook-host.access.log #1521019138tail -f /var/log/nginx/log/storyship-host.access.log #1521019151tail -f /var/log/nginx/log/storyship-host.access.log |grep wechat#1521022786cd /etc/nginx/conf#1521022786ls#1521022789cd /etc/nginx/conf.d/#1521022789ls#1521022833vi storyship.conf #1521022974/etc/init.d/nginx configtest#1521022979/etc/init.d/nginx reload#1521023365tail -f /var/log/nginx/log/storyship-host.access.log #1521102856/usr/local/kibana/bin/kibana#1521103419ll#1521103438cd /usr/local/kibana/bin/kibana#1521103445cd /usr/local/kibana/bin#1521103447#1521103454cd kibana#1521103458vi kibana#1521103466cat kibana#1521105618/usr/local/kibana/bin/kibana#1521183961tail -f /var/log/nginx/log/storyship-host.access.log #1521185835cat /etc/nginx/conf.d/storyship.conf #1521189888tail -f /var/log/nginx/log/storyship-host.access.log #1521192968cd /etc/nginx/conf#1521192971cd /etc/nginx/conf.d/#1521192972ls#1521192980vi storyship.conf #1521197906cd /usr/local/coreseek#1521197907ls#1521197910cd etc/#1521197910ls#1521197925cp sphinx.conf.clear180316#1521197935cp sphinx.conf sphinx.conf.clear180316#1521197938ls#1521197948cp sphinx.conf.180314 sphinx.conf#1521197955cat sphinx.conf#1521197969ls#1521197974ps -ef|grep sphinx#1521197984kill 30750#1521198010/usr/local/coreseek/bin/searchd -c /usr/local/coreseek/etc/sphinx.conf#1521198079crontab -e#1521198088/usr/local/coreseek/indexAll.sh#1521199812tail -f /var/log/nginx/log/storyship-host.access.log #1521200932tail -f /var/log/nginx/log/storyship-host.access.log |grep Decode#1521200945cat /var/log/nginx/log/storyship-host.access.log |grep Decode#1521200952cat /var/log/nginx/log/storyship-host.access.log |grep decode#1521200973tail -f /var/log/nginx/log/storyship-host.access.log |grep decode#1521444981ܴail #1521444995tail -f /var/log/nginx/log/wish-host.access.log #1521445007tail -f /var/log/nginx/log/storyship-host.access.log #1521445303tail -f /var/log/nginx/log/storyship-host.access.log |grep decodeUserInfo#1521448220df#1521448233cd /usr/local/src/#1521448234ls#1521448239ll#1521448252rm apache-tomcat-8.5.6.tar.gz.1 #1521448262cd /usr/local/#1521448262ls#1521448278rm tomcat-cas-server -rf#1521448281df#1521448291rm tomcat-simplecms -rf#1521448297df#1521448325ll#1521448334cd ossutil_output/#1521448335ls#1521448336ll#1521448339cd ..#1521448339ls#1521448343cd tomcat7/#1521448343ls#1521448345cd logs/#1521448345ls#1521448347cd ..#1521448349ls#1521448370cd coreseek#1521448373cd ..#1521448373ll#1521451468tail -f /var/log/nginx/log/storyship-host.access.log #1521452546vnstat -l -i eth1#1521454503tail -f /var/log/nginx/log/*.log#1521455242tail -f /var/log/nginx/log/wish-host.access.log |grep Search#1521457214tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1521518207tail -f /var/log/nginx/log/wish-host.access.log #1521518215tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1521536443񰳠#1521536444ps#1521536453ps -ef|grep sphinx#1521536460kill 15390#1521536525crontab -e#1521614452ll#1521614455ls#1521614480cd /#1521614482ll#1521614497ps -ef|grep sphinx#1521614500cd#1521614616ls#1521614646ps -ef|grep kibana#1521618307cat /var/log/nginx/log/storyship-host.access.log |grep getCouponByShare#1521618322cat /var/log/nginx/log/storybook-host.access.log |grep getCouponByShare#1521618333cd /var/log/nginx/log/storybook#1521618334ls#1521618339cat *|grep getCouponByShare#1521698017ܴail#1521698030tail -f /var/log/nginx/log/storyship-host.access.log #1521701455tail -f /var/log/nginx/log/storybook-host.access.log |grep 13667236819#1521701465cat /var/log/nginx/log/storybook-host.access.log |grep 13667236819#1521702874cat /var/log/nginx/log/storybook-host.access.log |grep 13800138000#1521702881tail /var/log/nginx/log/storybook-host.access.log |grep 13800138000#1521702886tail /var/log/nginx/log/storybook-host.access.log -f |grep 13800138000#1521708716tail -f /var/log/nginx/log/storyship-host.access.log #1521767543crontab -e#1522031240cd /var/log/nginx/log#1522031241ls#1522031251tail storybookbeta-host.access.log #1522031259tail -f storybookbeta-host.access.log #1522031308tail -f storybookbeta-host.access.log |grep 4ef8b16e25598b032d66f20deba212e7#1522043192tail -f /var/log/nginx/log/storybook-host.access.log |grep @JsonProperty(&quot;icon&quot;)#1522043192 String getIconUrl()&#123;#1522043192 return MyEnv.env.getProperty(&quot;cmsconfig.oss.url&quot;)+&quot;groupIcon/&quot;+icon;#1522043192 &#125;#1522043192 public void setIcon(String icon) &#123;#1522043192 this.icon = icon;#1522043223tail -f /var/log/nginx/log/storybook-host.access.log |grep 4ef8b16e25598b032d66f20deba212e7#1522060293tail -f /var/log/nginx/log/247-host.access.log #1522062540tail /var/log/nginx/log/storybook-host.access.log #1522062583tail /var/log/nginx/log/storybook-beta.access.log #1522062595tail /var/log/nginx/log/storybookbeta-host.access.log #1522062601tail -f /var/log/nginx/log/storybookbeta-host.access.log #1522052854tail -f /var/log/nginx/log/#1522052869tail -f /var/log/nginx/log/storybook-host.access.log #1522052882tail -f /var/log/nginx/log/storybookbeta-host.access.log #1522127371tail -f /var/log/nginx/log/openvista-host.access.log #1522115188cd /var/log/nginx/log#1522115189ls#1522115200tail -f ./storybookbeta-host.access.log #1522116623tail -f ./storybookbeta-host.access.log |grep 4ef8b16e25598b032d66f20deba212e7#1522157838vnstat -l -i eth1#1522157855tail -f /var/log/nginx/log/*.log#1522157867tail -f /var/log/nginx/log/www.ifenghui.com-host.access.log #1522157878tail -f /var/log/nginx/log/www.ifenghui.com-host.access.log |grep 117.30.61.51#1522157939vnstat -l -i eth1#1522141111tail -f /var/log/nginx/log/wish-host.access.log #1522141125tail -f /var/log/nginx/log/storyship-host.access.log #1522150919tail -f /var/log/nginx/log/openvista-host.access.log #1522150941tail -f /var/log/nginx/log/openvista-host.access.log |grep 124.204.41.3#1522151065vnstat -l -i eth1#1522306803tail -f#1522306835tail -f /var/log/nginx/log/storybook-host.access.log#1522199241vnstat -l -i eth1#1522199276tail -f /var/log/nginx/log/*.log#1522199297tail -f /var/log/nginx/log/dongman.ifenghui.com-host.access.log #1522199307tail -f /var/log/nginx/log/dongman.ifenghui.com-host.access.log |grep 117.30.208.63#1522199421vnstat -l -i eth1#1522199462tail -f /var/log/nginx/log/dongman.ifenghui.com-host.access.log |grep 117.30.208.63#1522199518vnstat -l -i eth1#1522309517ls#1522309523cd /etc/ngin#1522309524xls#1522309531cd /etc/nginx#1522309532ls#1522309543cat nginx.conf #1522309557ls#1522309562cd conf.d/#1522309562ls#1522309571cat admin.storybook.conf #1522309625tail -f /var/log/nginx/log/admin-storybook-host.access.log #1522309712ls#1522309957cd /var/log/nginx/log#1522309957ls#1522313916tail -f /var/log/nginx/log/*.log#1522313937tail -f /var/log/nginx/log/*.log|grep 10_11_6#1522314011tail -f /var/log/nginx/log/dongman.ifenghui.com-host.access.log |grep 120.41.160.62#1522314038tail -f /var/log/nginx/log/dongman.ifenghui.com-host.access.log #1522314169vnstat -l -i eth1#1522314182tail -f /var/log/nginx/log/*.log#1522314222vnstat -l -i eth1#1522314610tail -f /var/log/nginx/log/*.log#1522314641df#1522314648cd /var/log/nginx/log/#1522314649ls#1522314650ll#1522314665rm dongman.ifenghui.com-host.access.log #1522314679/etc/init.d/nginx configtest#1522314684/etc/init.d/nginx reload#1522314686df#1522315284vnstat -l -i eth1#1522315314tail -f /var/log/nginx/log/*.log#1522316513c#1522316531cd /chroot/dongman#1522316532ls#1522316542pwd#1522316703cd ..#1522151510tail -f /var/log/nginx/log/*.log#1522151707tail -f /var/log/nginx/log/dongman.ifenghui.com-host.access.log#1522151783tail -f /var/log/nginx/log/dongman.ifenghui.com-host.access.log|grep 264792#1522151794tail -f /var/log/nginx/log/dongman.ifenghui.com-hos#1522151812tail -f /var/log/nginx/log/dongman.ifenghui.com-host.access.log|grep 117.30.209.106#1522151947tail -f /var/log/nginx/log/dongman.ifenghui.com-host.access.log#1522151981tail -f /var/log/nginx/log/dongman.ifenghui.com-host.access.log|grep 117.30.209.106#1522152003vnstat -l -i eth1#1522152569tail -f /var/log/nginx/log/dongman.ifenghui.com-host.access.log#1522152626vnstat -l -i eth1#1522152638tail -f /var/log/nginx/log/dongman.ifenghui.com-host.access.log#1522152663vnstat -l -i eth1#1522152677tail -f /var/log/nginx/log/*.log#1522152744vnstat -l -i eth1#1522152830tail -f /var/log/nginx/log/*.log#1522152855tail -f /var/log/nginx/log/www.ifenghui.com-host.access.log#1522152889tail -f /var/log/nginx/log/www.ifenghui.com-host.access.log|grep 117.28.112.91#1522153008tail -f /var/log/nginx/log/www.ifenghui.com-host.access.log#1522153017vnstat -l -i eth1#1522214145cd /var/log/nginx/log/#1522214151tail *.log -f#1522214171tail -f www.ifenghui.com-host.access.log |grep 117.30.208.63#1522214244tail -f www.ifenghui.com-host.access.log #1522214267vnstat -l -i eth1#1522319627cd /etc/nginx/conf#1522319627ls#1522319631cd /etc/nginx/conf.d/#1522319632ls#1522319646vi storybook.conf #1522319775/etc/init.d/nginx configtest#1522319780/etc/init.d/nginx reload#1522320573vnstat -l -i eth1#1522406488tail -f /var/log/nginx/log/storybook-host.access.log #1522406515tail -f /var/log/nginx/log/storybook-host.access.log |grep 1f1a469545ee3b2f525fccd93ba3a2b3#1522327602vnstat -l -i eth1#1522402756tail -f /var/log/nginx/log/*.log#1522403833vnstat -l -i eth1#1522636162ܴail #1522636176tail -f /var/log/nginx/log/storyship-host.access.log #1522641768vnstat -l -i eth1#1522648909ܴa#1522648929tail -f /var/log/nginx/log/wish-host.access.log #1522648936tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1522650070tail -f /var/log/nginx/log/wish-host.access.log |grep getRank#1522651528tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1522652978tail -f /var/log/nginx/log/215-host.access.log #1522653027tail -f /var/log/nginx/log/wish-host.access.log #1522653035tail -f /var/log/nginx/log/wish-host.access.log |grep admin#1522653056cat /etc/nginx/conf.d/admin.videoapi.conf #1522653070tail -f /var/log/nginx/log/admin.videoapi.access.log #1522653082ls#1522653088cd /etc/nginx/conf.d/#1522653088ls#1522653104vi wish_admin.conf #1522653116tail -f /var/log/nginx/log/215.videoapi.access.log #1522653134cat /var/log/nginx/log/215.videoapi.access.log |grep 591513#1522653159ls#1522653172cd /var/log/nginx/log/#1522653172ls#1522653188tail 215.videoapi.access.log #1522653212tail 215.videoapi.access.log -A 10#1522653216tail 215.videoapi.access.log --10#1522653245head 215.videoapi.access.log #1522653341cat 215.videoapi.access.log|grep 591513#1522660763df#1522660772cd /var/log#1522660772ls#1522660778cd nginx/#1522660779lss#1522660780ls#1522660780ll#1522660786cd log#1522660786ls#1522660787ll#1522660797rm img2.ifenghui.com.access.log #1522660808cd openvista#1522660809ls#1522660809ll#1522661004ls#1522661006cd ..#1522661007ls#1522661017ll#1522733705vnstat -l -i eth1#1522733716tail -f /var/log/nginx/log/*.log#1522733899tail -f /var/log/nginx/log/www.ifenghui.com-host.access.log #1522733944tail -f /var/log/nginx/log/www.ifenghui.com-host.access.log |grep 117.30.61.38#1522734045vnstat -l -i eth1#1522734055tail -f /var/log/nginx/log/*.log#1522734111tail -f /var/log/nginx/log/www.ifenghui.com-host.access.log#1522734179vnstat -l -i eth1#1522735096tail -f /var/log/nginx/log/*.log#1522735127vnstat -l -i eth1#1522664136vnstat -l -i eth1#1522753336tail -f /var/log/nginx/log/*.log#1522753388vnstat -l -i eth1#1522753400tail -f /var/log/nginx/log/*.log#1522753417vnstat -l -i eth1#1522803624tail -f /var/log/nginx/log/*.log#1522803888vnstat -l -i eth1#1522804979tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1522825003ܴail -f #1522825021tail -f /var/log/nginx/log/openvista-host.access.log #1522825032tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1522841602cat /var/log/nginx/log/storybook-host.access.log |grep createOrder#1522841622cat /var/log/nginx/log/storybook/*|grep createOrder#1522856418vnstat -l -i eth1#1522856431tail -f /var/log/nginx/log/*.log#1522856531tail -f /var/log/nginx/log/www.ifenghui.com-host.access.log #1522856888vnstat -l -i eth1#1522856899tail -f /var/log/nginx/log/www.ifenghui.com-host.access.log #1522857051vnstat -l -i eth1#1522857060tail -f /var/log/nginx/log/*.log#1522857103vnstat -l -i eth1#1522945429vnstat -l -i etgh1#1522945432vnstat -l -i eth1#1522945445tail -v /var/log/nginx/log/*.log#1522945456tail -f /var/log/nginx/log/*.log#1522945516vnstat -l -i eth1#1523026523tail -f /var/log/nginx/log/*.log120.41.129.4#1523026579tail -f /var/log/nginx/log/*.log#1523026647vnstat -l -i eth1#1523104067cd /var/log/nginx/log/#1523104067ls#1523104101cat dongman.ifenghui.com-host.access.log |grep 5262#1523104260tail -f dongman.ifenghui.com-host.access.log |grep SELECT#1523104796vnstat -l -i eth1#1523104805tail -f dongman.ifenghui.com-host.access.log#1523104813tail -f *.log#1523104852vnstat -l -i eth1#1523104876tail -f *.log#1523104900tail -f *.log|grep SELECT#1523104982vnstat -l -i eth1#1523105568tail -f dongman.ifenghui.com-host.access.log#1523105951vnstat -l -i eth1#1523112506tail -f /var/log/nginx/log/wish-host.access.log |grep ad#1523112534tail -f /var/log/nginx/log/wish-host.access.log |grep getAdByLoadingPage#1523112598tail -f /var/log/nginx/log/wish-host.access.log |grep /v2/interface.php#1523149950vnstat -l -i eth1#1523150032tail -f /var/log/nginx/log/*.log#1523165666cd /var/log/nginx/log#1523165666ls#1523165695tail -f ./storybookbeta-host.access.log #1523165714tail -f ./storybook-host.access.log #1523183708tail -f /var/log/nginx/log/storybook-host.access.log |grep 24266cd8a0850bb9510784f6f5597900#1523183718cat /var/log/nginx/log/storybook-host.access.log |grep 24266cd8a0850bb9510784f6f5597900#1523183013crontab -e#1523409112cd data#1523409116cd /data#1523239621vnstat -l -i eth1#1523361544cat /var/log/nginx/log/storybook-host.access.log |grep 5576#1523362644vnstat -l -i eth1#1523411030tail -f /var/log/nginx/log/*.log#1523411046tail -f /var/log/nginx/log/*.log|grep png#1523411055tail -f /var/log/nginx/log/*.log|grep jpg#1523411294tail -f /var/log/nginx/log/*.log#1523415375tail -f /var/log/nginx/log/storyship-host.access.log #1523418024tail -f /var/log/nginx/log/storybook-host.access.log #1523426851cdcd#1523426857cd /var/log/nginx/log/storybook#1523426858ls#1523426869cat storybook-host_2018-04-10.log |grep 5576#1523427267cat storybook-host_2018-04-10.log |grep huaweiPayNotify#1523427913cd /var/log/nginx/log/#1523427914ls#1523427942cat admin-storybook-host.access.log |grep 5576#1523427963cat admin-storybook-host.access.log |grep 5576|grep POST#1523428069ll#1523428082df#1523428995tail -f /var/log/nginx/log/storybook-host.access.log #1523429008tail -f /var/log/nginx/log/storybook-host.access.log |grep 5a94b2e694dffe0d38a4c935d6c8a569#1523443794vnstat -l -i eth1#1523604545tail -f /var/log/nginx/log/storyship-host.access.log #1523717521tail -f /var/log/nginx/log/wish-host.access.log |grep eventAnalytics#1523719068tail -f /var/log/nginx/log/wish-host.access.log |grep Index#1523719094tail -f /var/log/nginx/log/wish-host.access.log |grep Index201711#1523726756tail -f /var/log/nginx/log/wish-host.access.log |grep 500#1523878317tail -f /var/log/nginx/log/storyship-host.access.log #1523962112vnstat -l -i eth1#1524018550tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1524030204top#1524030213vnstat -l -i eth1#1524106717tail -f /var/log/nginx/log/*.log#1524109786crontab -e#1524127341cd /var/www/html/#1524127341ls#1524127351cd ..#1524127352ls#1524127354cd html/#1524127355ls#1524127357cd tmp/#1524127358ls#1524127359cd ..#1524127359ls#1524127371cd /chroot/web/#1524127372ls#1524127382cd ..#1524127389cd web#1524127390ls#1524127411vi MP_verify_uXIW6UaF6LJDtX6y.txt#1524127423ls#1524127440vi /etc/nginx/conf.d/storybook.conf #1524127507pwd#1524127513/etc/init.d/nginx configtest#1524127521/etc/init.d/nginx reload#1524133412cd /var/#1524133413ll#1524133420cd log#1524133421ll#1524133429cd nginx#1524133431ll#1524133433cd log/#1524133434ll#1524133464tail -f fenxiao-host.access.log #1524133532cat storybook-host.access.log #1524133545cd /etc/nginx/conf.d/#1524133545ls#1524133554cat wx.storybook.conf #1524133572q#1524133580tail -f /var/log/nginx/log/fenxiao-host.access.log#1524133622tail -f /var/log/nginx/log/fenxiao-host-ssl.access.log#1524138332tail -f /var/log/nginx/log/storyship-host.access.log #1524195748/etc/init.d/nginx restart#1524196068top#1524197063crontab -e#1524205539top#1524206134cd /etc/nginx/conf#1524206134ls#1524206137cd /etc/nginx/conf.d/#1524206137ls#1524206144vi wx.storybook.ssl.conf #1524206172cd /chroot/ww#1524206191cd /chroot/api/#1524206192ls#1524206274cd /etc/nginx/conf.d/#1524206275ls#1524206280vi wx.storybook.ssl.conf #1524206410/etc/init.d/nginx configtest#1524206413/etc/init.d/nginx reload#1524206455vi wx.storybook.ssl.conf #1524206542/etc/init.d/nginx reload#1524219133cd /etc/nginx/conf#1524219135cd /etc/nginx/conf.d/#1524219135sl#1524219136ls#1524219159cd /etc/nginx/conf.d/#1524219159ls#1524219193vi wx.storybook.conf #1524219209vi wx.storybook.ssl.conf #1524219250/etc/init.d/nginx configtest#1524219255/etc/init.d/nginx reload#1524219615tail -f /var/log/nginx/log/fenxiao-host-ssl.access.log #1524195696cd /var/#1524195697ll#1524195701cd ;pg#1524195703cd log#1524195704ll#1524195709cd nginx#1524195710;;#1524195712cd ..#1524195713ll#1524195719cd logs#1524195727cd var/#1524195728ll#1524195732cd logs#1524195732ll#1524195736cd ..#1524195740cd log#1524195741ll#1524195746cd nginx/#1524195747ll#1524195750cd log#1524195751ll#1524195781tail -f fenxiao-host-ssl.access.log #1524227134tail -f /var/log/nginx/log/storybook-host.access.log #1524276060vnstat -l -i eth1#1524276082tail -f /var/log/nginx/log/*.log#1524276232cd /chroot/msgcount_py/#1524276232ls#1524276236./start.sh #1524276249tail -f /var/log/nginx/log/*.log#1524276283/etc/init.d/nginx configtest#1524276287/etc/init.d/nginx reload#1524276294ls#1524276299ps -ef|grep py#1524276305cat start.sh #1524276312python runMsgCount.py #1524276329python3 runMsgCount.py #1524276333python runMsgCount.py #1524276387yum install python3#1524276459yum search python3#1524276484python runMsgCount.py #1524276529yum install python34#1524276549ls#1524276555cat start.sh #1524276566python3 runMsgCount.py #1524276586pip3 install bmemcached#1524276698pip3 install python3-memcached#1524290913cd /var/#1524290914ll#1524290918cd log#1524290919ll#1524290921cd nginx/#1524290922ll#1524290923cd log/#1524290925ll#1524290939tail -f fenxiao-host-ssl.access.log #1524324836ll#1524324866cd /var/#1524324867ll#1524324871cd logs#1524324871ll#1524324877cd storybookapi/#1524324878ll#1524324887cd ..#1524324890ll#1524324905cd log#1524324907ll#1524324924cd nginx/#1524324924ll#1524324928cd log/#1524324930ll#1524322911cd /etc/nginx/conf#1524322911ls#1524322914cd /etc/nginx/conf.d/#1524322914ls#1524322924vi wx.storybook.ssl.conf #1524323064/etc/init.d/nginx configtest#1524323067/etc/init.d/nginx reload#1524323097vi wx.storybook.ssl.conf #1524323129/etc/init.d/nginx reload#1524323159vi wx.storybook.ssl.conf #1524323183/etc/init.d/nginx reload#1524323258vi wx.storybook.ssl.conf #1524323288/etc/init.d/nginx reload#1524323305vi wx.storybook.ssl.conf #1524323369/etc/init.d/nginx reload#1524323416vi wx.storybook.ssl.conf #1524323528/etc/init.d/nginx reload#1524323609vi wx.storybook.ssl.conf #1524323900/etc/init.d/nginx reload#1524323906vi wx.storybook.conf #1524323934tail -f /var/log/nginx/log/fenxiao-host-ssl.access.log #1524323987vi wx.storybook.ssl.conf #1524324034/etc/init.d/nginx configtest#1524324037/etc/init.d/nginx reload#1524324047vi wx.storybook.ssl.conf #1524324063/etc/init.d/nginx reload#1524325085/etc/init.d/nginx configtest#1524325090/etc/init.d/nginx restart#1524325097ls#1524325108vi wx.storybook.ssl.conf #1524325218/etc/init.d/nginx configtest#1524325221/etc/init.d/nginx reload#1524325229vi wx.storybook.ssl.conf #1524325240/etc/init.d/nginx reload#1524325263q#1524325264ls#1524325346vi wx.storybook.ssl.conf #1524328836cd /etc/nginx/conf.d/#1524328837ls#1524328850vi wx.storybook.ssl.conf #1524329176tail -f /var/log/nginx/error.log#1524330148cd /etc/nginx/conf#1524330151cd /etc/nginx/conf.d/#1524330152ls#1524330164vi wish.conf#1524330247/etc/init.d/nginx configtest#1524330251/etc/init.d/nginx reload#1524330263tail -f /var/log/nginx/error.log#1524330397tail -f /var/log/nginx/error.log|grep api_web#1524330566vi wish.conf#1524330577ls#1524330594vi wx.storybook.ssl.conf #1524330812vi wx.storybook.conf #1524330845/etc/init.d/nginx configtest#1524330849/etc/init.d/nginx reload#1524330883vi wx.storybook.ssl.conf #1524330907vi wx.storybook.conf #1524330935/etc/init.d/nginx reload#1524374506cd /etc/logstash/#1524374506ls#1524374508cd conf.d/#1524374509ls#1524374514vi logstash.conf #1524374586ps -ef|grep logs#1524389072cd /etc/nginx/conf.d/#1524389072ls#1524389084vi wx.storybook.ssl.conf #1524389119vi wx.storybook.conf #1524389280curl http://101.37.174.227/api_web/index.html#1524389283vi wx.storybook.conf #1524389457/etc/init.d/nginx configtest#1524389468/etc/init.d/nginx reload#1524389492vi wx.storybook.conf #1524389525tail -f /var/log/nginx/log/fenxiao-host.access.log #1524389536vi wx.storybook.conf #1524389626/etc/init.d/nginx configtest#1524389629vi wx.storybook.conf #1524389648/etc/init.d/nginx configtest#1524389651/etc/init.d/nginx reload#1524389744curl 10.30.205.78/api_web/index.html#1524389751vi wx.storybook.conf #1524389789/etc/init.d/nginx configtest#1524389805vi wx.storybook.ssl.conf #1524389832/etc/init.d/nginx configtest#1524389835/etc/init.d/nginx reload#1524389852vi wx.storybook.ssl.conf #1524389860vi wx.storybook.conf #1524389890/etc/init.d/nginx configtest#1524389894/etc/init.d/nginx reload#1524390090vi wx.storybook.conf #1524390106vi wx.storybook.ssl.conf #1524390111vi wx.storybook.conf #1524390207/etc/init.d/nginx configtest#1524390212vi wx.storybook.conf #1524390245/etc/init.d/nginx configtest#1524390248/etc/init.d/nginx reload#1524390285vi wx.storybook.conf #1524390309/etc/init.d/nginx configtest#1524390312/etc/init.d/nginx reload#1524390341vi wx.storybook.conf #1524390361/etc/init.d/nginx configtest#1524390363/etc/init.d/nginx reload#1524390394vi wx.storybook.conf #1524390416/etc/init.d/nginx configtest#1524390418/etc/init.d/nginx reload#1524390459vi wx.storybook.conf #1524392060/etc/init.d/nginx reload#1524392083vi wx.storybook.conf #1524392199curl http://test.ifenghui.com/apiwebtest/index.html#1524392216tail -f /var/log/nginx/error.log#1524392269tail -f /var/log/nginx/log/fenxiao-host.access.log #1524392289/etc/init.d/nginx configtest#1524392292/etc/init.d/nginx reload#1524392362vi wx.storybook.conf #1524392418/etc/init.d/nginx reload#1524392628vi wx.storybook.conf #1524392820/etc/init.d/nginx configtest#1524392868vi wx.storybook.conf #1524392902/etc/init.d/nginx configtest#1524392924cat *|grep apiweb#1524392936vi wx.storybook.conf #1524392961/etc/init.d/nginx configtest#1524392982vi wx.storybook.ssl.conf #1524393009/etc/init.d/nginx configtest#1524393013/etc/init.d/nginx reload#1524393202vi wx.storybook.conf #1524393248cd /chroot/api/#1524393248ls#1524393262mkdir apiwebtest#1524393267cd apiwebtest/#1524393267ls#1524393270vi index.html#1524393283pwd#1524393286ls#1524393295cd ..#1524393295ls#1524393634vi wx.storybook.conf #1524393640pwd#1524393647cd /etc/nginx/conf.d/#1524393647ls#1524393654vi wx.storybook.conf #1524393708/etc/init.d/nginx configtest#1524393712/etc/init.d/nginx reload#1524393738tail -f /var/log/nginx/log/fenxiao-host.error.log #1524394125cd /etc/nginx/conf.d/#1524394126ls#1524394136vi wx.storybook.conf #1524394156/etc/init.d/nginx reload#1524394190vi wx.storybook.ssl.conf #1524394206/etc/init.d/nginx reload#1524394249vi wx.storybook.ssl.conf #1524394272/etc/init.d/nginx reload#1524394450vi wx.storybook.ssl.conf #1524394462/etc/init.d/nginx reload#1524410575vnstat -l -i eth1#1524410607vnstat -l -i eth0#1524416269tail -f /var/log/nginx/log/wish-host.access.log #1524416278vnstat -l -i eth0#1524416291vnstat -l -i eth1#1524416305tail -f /var/log/nginx/log/*.log#1524417838tail -f /var/log/nginx/log/*.log|grep 563331#1524418005tail -f /var/log/nginx/log/*.log#1524418047vnstat -l -i eth1#1524418376tail -f /var/log/nginx/log/*.log#1524452884ps -ef|grep logstash#1524452906whereis logstash#1524453015cat /chroot/howToUse/logstash.sh #1524453033/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf#1524453077vi /etc/logstash/conf.d/logstash.conf #1524453124/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf#1524456848ps -ef|grep logstash#1524457011ƶɊ#1524457013Ѕ򉊣1524457016аs #1524457019ps -ef|grep logstash#1524457180top#1524457400ps -ef|grep logstash#1524457423cd /usr/share/logstash/vendor/#1524457423ls#1524457425ll#1524457432cd jruby/#1524457433ls#1524457434ll#1524457447cd bin/#1524457447ls#1524457449ll#1524457478cat jruby.bat #1524457495ls#1524457498cd ..#1524457499ls#1524457500ll#1524457505cd ..#1524457506ls#1524457508ll#1524457518cd bin/#1524457519ll#1524457527cd ..#1524457528ls#1524457533cd vendor/#1524457533ls#1524457534ll#1524457542mv jruby jruby_bak#1524457544ll#1524457558ps -ef|grep jruby#1524457561top#1524457581ps -ef|grep logstash#1524457602cat /chroot/howToUse/logstash.sh #1524457609/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf#1524457619ls#1524457626mv jruby_bak jruby#1524457631ps -ef|grep logstash#1524457650/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf#1524458086/chroot/howToUse/logstash.sh #1524453835ps -ef|grep logstash#1524453876cd /etc/logstash/#1524453876ls#1524453880cd conf.d/#1524453880ls#1524453887vi logstash.conf #1524454112ps -ef|grep logs#1524454121kill 12693#1524454124ps -ef|grep logs#1524454137kill 12736#1524454147ps -ef|grep logs#1524454213kill 12981#1524454214ps -ef|grep logs#1524454235top#1524454256ps -ef|grep logs#1524454316kill -9 13138#1524454322top#1524454380/etc/init.d/logstash #1524455500top#1524455597ls#1524455599vi logstash.conf #1524455846df#1524455854cd /var/log/nginx/log/#1524455855ls#1524455857ll#1524455891docker ps#1524455898ps -ef|grep logstash#1524455905kill 17461#1524455913ps -ef|grep logstash#1524455925kill 17505#1524455931ps -ef|grep logstash#1524455936kill 17550#1524455938ps -ef|grep logstash#1524455942top#1524455975yum search logstash#1524456010yum install logstash#1524456092ps -ef|grep logstash#1524456105whereis logstash#1524456122vi /etc/logstash/startup.options#1524456157cd /etc/logstash/#1524456158ls#1524456171cd conf.d/#1524456171ls#1524456174cd ..#1524456175ls#1524456200ps -ef|grep logs#1524456257top#1524456452ps -ef|grep logs#1524456632top#1524456709whereis kafka#1524456729whereis logstash#1524456735cd /usr/share/logstash/#1524456736ls#1524456770./bin/logstash-plugin list --verbose kafka#1524456802./bin/logstash-plugin restart#1524456814./bin/logstash-plugin --help#1524456827./bin/logstash #1524456834./bin/logstash -h#1524457241su logstash#1524457663top#1524457712ps -ef|grep logstash#1524457913ls#1524457915cd config/#1524457915ls#1524457923cd /etc/logstash/#1524457923ls#1524457924cd conf.d/#1524457925ls#1524457927vi logstash.conf #1524457969ps -ef|grep logstash#1524458054top#1524471952cd /chroot/howToUse/#1524471952ls#1524471966cd /chroot/msgcount_py/#1524471966ls#1524471970./start.sh #1524471974ps -ef|grep py#1524471982cat start.sh #1524471989python runMsgCount.py#1524471994python2 runMsgCount.py#1524471997python3 runMsgCount.py#1524472011pip3 search bmemcached#1524472028pip3 sea#1524472090pip3 search bmemcached#1524472115pip3 install django-bmemcached#1524472122python3 runMsgCount.py#1524472179pip3 install python3-memcached#1524472191python3 runMsgCount.py#1524450455cd /var/log/nginx/#1524450456ls#1524450460cd log#1524450461ls#1524450479cd storybook#1524450480ls#1524450514tail -f ./storybook-host_2018-04-22.log |grep 1906a2bcf2703ab72ea4ab4fba24abb2#1524489830tail -f /var/log/nginx/log/wish-host.access.log #1524489926cd /etc/nginx/conf.d/#1524489926ls#1524489934vi wish.conf#1524489961/etc/init.d/nginx configtest#1524489966/etc/init.d/nginx reload#1524489983tail -f /var/log/nginx/log/wish-host.access.log #1524490029tail -f /var/log/nginx/log/wish-host.access.log |grep aa5b6d5614aa454d00440808c35f4608#1524481040cd /var/#1524481041l#1524481044ll#1524481048cd log#1524481049ll#1524481052cd nginx/#1524481053ll#1524481057cd log/#1524481058ll#1524481086cd storybook#1524481087ll#1524481103cd ..#1524481105ll#1524502767cd /chroot/wwww#1524502769cd /chroot/www#1524502775cd /chroot/web#1524502775ls#1524502281tail -f /var/log/nginx/log/wish-host.access.log #1524502296tail -f /var/log/nginx/log/wish-host.access.log |grep c79dcda8d5bdb27d835595b#1524502622cd /chroot/api/#1524502622ls#1524502630vi 404.html#1524502636ls#1524502669cd /etc/nginx/conf.d/#1524502669ls#1524502671vi wish.conf#1524502801/etc/init.d/nginx configtest#1524502804/etc/init.d/nginx reload#1524502810cd /chroot/web#1524502810ls#1524502815vi 404.html#1524502868ls#1524502876cd /etc/nginx/conf#1524502878cd /etc/nginx/conf.d/#1524502878ls#1524502881vi wish.conf#1524503246tail -f /var/log/nginx/error.log#1524503260cd /chroot/web/#1524503266vi interfacepy#1524503275tail -f /var/log/nginx/error.log#1524503293tail -f /var/log/nginx/log/wish-host.access.log #1524503505tail -f /var/log/nginx/log/*.log#1524503525df#1524555809cd /etc/nginx/conf#1524555811cd /etc/nginx/conf.d/#1524555811ls#1524555816vi wx.storybook.ssl.conf #1524555821ls#1524555825vi wx.storybook.conf #1524555864ls#1524555876vi storybook.conf #1524556009/etc/init.d/nginx configtest#1524556013vi storybook.conf #1524556031/etc/init.d/nginx configtest#1524556033vi storybook.conf #1524556058/etc/init.d/nginx configtest#1524556062/etc/init.d/nginx reload#1524557462ls#1524557476vi storybook.conf #1524557490/etc/init.d/nginx configtest#1524557494/etc/init.d/nginx reload#1524564366cd /etc/nginx/conf#1524564368cd /etc/nginx/conf.d/#1524564369ls#1524564377vi wx.storybook.ssl.conf #1524566458cd /etc/nginx/conf#1524566460cd /etc/nginx/conf.d/#1524566460ls#1524566475vi wx.storybook.ssl.conf #1524566503/etc/init.d/nginx configtest#1524566510/etc/init.d/nginx reload#1524566527vi wx.storybook.ssl.conf #1524566567/etc/init.d/nginx reload#1524566904vi wx.storybook.ssl.conf #1524567150/etc/init.d/nginx configtest#1524567156vi wx.storybook.ssl.conf #1524567192/etc/init.d/nginx configtest#1524567196/etc/init.d/nginx reload#1524567319vi wx.storybook.ssl.conf #1524567342/etc/init.d/nginx reload#1524573847cd /etc/nginx/conf.d/#1524573847ls#1524573853vi storybook.conf #1524573904cd /chroot/web#1524573907vi MP_verify_6kGrGdLdoP2qzQuz.txt#1524573933/etc/init.d/nginx configtest#1524573940vi storybook.conf #1524573952vi /etc/nginx/conf.d/storybook.conf #1524573963/etc/init.d/nginx configtest#1524573966/etc/init.d/nginx reload#1524545843cd /opt#1524545844ll#1524624231cd /var#1524624232ll#1524624234cd log#1524624236ll#1524624238cd nginx/#1524624239ll#1524624241cd log/#1524624241ll#1524624249cd ..#1524624251ll#1524624254cd log/#1524624254ll#1524624279tail storybook-host.access.log #1524624300cat storybook-host.access.log #1524676003tail -f /var/log/nginx/log/wish-host.access.log #1524676013tail -f /var/log/nginx/log/wish-host.access.log |grep v3#1524676572cd /etc/nginx/conf.d/#1524676572ls#1524676585vi wish.conf#1524714076cd /etc/nginx/conf.d/storybook.conf #1524714081vi /etc/nginx/conf.d/storybook.conf #1524714100vi /etc/nginx/conf.d/storybook_ssl.conf#1524714261/etc/init.d/nginx configtest#1524714264vi /etc/nginx/conf.d/storybook_ssl.conf#1524714297/etc/init.d/nginx configtest#1524714301/etc/init.d/nginx reload#1524714389vi /etc/nginx/conf.d/storybook_ssl.conf#1524714402/etc/init.d/nginx reload#1524714496vi /etc/nginx/conf.d/storybook_ssl.conf#1524714519/etc/init.d/nginx configtest#1524714521/etc/init.d/nginx reload#1524714544vi /etc/nginx/conf.d/storybook_ssl.conf#1524714596vi /etc/nginx/conf.d/storybook.conf#1524714614/etc/init.d/nginx configtest#1524714616/etc/init.d/nginx reload#1524714943vi /etc/nginx/conf.d/storybook.conf#1524715071/etc/init.d/nginx configtest#1524715072/etc/init.d/nginx reload#1524715324/etc/init.d/nginx configtest#1524715326/etc/init.d/nginx reload#1524721639cd /etc/nginx/conf.d/#1524721647vi wish.conf#1524721733/etc/init.d/nginx configtest#1524721741/etc/init.d/nginx reload#1524721966tail -f /var/log/nginx/log/wish-host.access.log #1524739522cd /var/log/nginx#1524739522ls#1524739527cd log#1524739527ls#1524739542tail -f admin.videoapi.access.log #1524730754̫#1524730757ܴail #1524730771tail -f /var/log/nginx/log/admin-storybook-host.access.log #1524732002tail -f /var/log/nginx/log/storyship-host.access.log #1524739146cd /etc/nginx/conf.d/#1524739147ls#1524739323cd /etc/nginx/conf.d/#1524739324l#1524739325ls#1524739332cat admin.storybook.conf #1524800300cd /chroot/api#1524800301ls#1524800304svn up#1524800318/etc/init.d/php56-php-fpm restart#1524817708tail -f /var/log/nginx/log/wish-host.access.log #1524817728tail -f /var/log/nginx/log/wish-host.access.log |grep v3#1524920511cd /var#1524920511ll#1524920513cd log#1524920514ll#1524920516cd nginx/#1524920517ll#1524920540cd log/#1524920541ll#1524920595tail -f storybook-host.access.log #1524920921tail -f storybook-host.access.log |grep get_gift_list#1524920986tail -f storyship-host.access.log | grep get_gift_list#1524916641cd /etc/nginx/conf.d/#1524916642ls#1524916690vi storyship.conf #1524916998df#1524917008cd /var/log/nginx/log/wish-host.access.log #1524917014tail -f /var/log/nginx/log/wish-host.access.log #1524919099cd /etc/nginx/conf.d/#1524919100ls#1524919107vi wish.conf#1524919111ls#1524919115vi storyship.conf #1524919202/etc/init.d/nginx configtest#1524919205vi storyship.conf #1524919227/etc/init.d/nginx configtest#1524919230/etc/init.d/nginx reload#1524919285vi storyship.conf #1524919299/etc/init.d/nginx reload#1524919451vi storyship.conf #1524919562ls#1524919573vi vi admin.storybook.conf #1524919587ls#1524919599vi admin.storybook.conf #1524919622ls#1524919630vi storyship.conf #1524919646/etc/init.d/nginx configtest#1524919649/etc/init.d/nginx reload#1524919728vi storyship.conf #1524919751vi admin.storybook.conf #1524919758lv#1524919765vi storyship.conf #1524919843/etc/init.d/nginx configtest#1524919846/etc/init.d/nginx reload#1524920086vi storyship.conf #1524920114/etc/init.d/nginx configtest#1524920118/etc/init.d/nginx reload#1524985341vnstat -l -i eth1#1524986029tail -f /var/log/nginx/log/wish-host.access.log |grep v3#1524993014tail -f /var/log/nginx/log/wish-host.access.log #1524993017tail -f /var/log/nginx/log/wish-host.access.log |grep 500#1524996653vnstat -l -i eth1#1524997561tail -f /var/log/nginx/log/wish-host.access.log |grep paihang#1524997570tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1524998013vnstat -l -i eth1#1525136841tail -f /var/log/nginx/log/storybook-host.access.log #1525136848tail -f /var/log/nginx/log/storybook-host.access.log |grep yizhi#1525137080cd /etc/nginx/conf#1525137082cd /etc/nginx/conf.d/#1525137083ls#1525137098vi /etc/nginx/conf.d/#1525137104cd /etc/nginx/conf.d/#1525137105ls#1525137110vi storybook.conf #1525137207/etc/init.d/nginx configtest#1525137210/etc/init.d/nginx reload#1525149452ta#1525149465tail -f /var/log/nginx/log/storybook-host.access.log #1525175286vnstat -l -i eth1#1525224047tail -f /var/log/nginx/log/storybook-host.access.log #1525234115cd /var#1525234116lll#1525234117ll#1525234120cd lo#1525234123cd log#1525234124ll#1525234129cd nginx/#1525234130ll#1525234134cd log/#1525234135ll#1525234151tail -f storybook-host.access.log #1525236696tail -f storybook-host.access.log | yizhi#1525236704tail -f storybook-host.access.log#1525258862cd /data#1525258865cd /var/#1525258866ll#1525258868cd log#1525258870ll#1525258872cd nginx/#1525258873ll#1525258875cd log/#1525258876ll#1525258886tail -f storybook-host.access.log #1525259550cd /var #1525259553ll#1525259554cd log#1525259555ll#1525259557cd nginx/#1525259558ll#1525259561cd log/#1525259563ll#1525259578tail -f storybook-host.access.log #1525255315tail -f /var/log/nginx/log/storybook-host.access.log #1525255360tail -f /var/log/nginx/log/storybook-host.access.log |grep yizhi#1525255390tail -f /var/log/nginx/log/storybook-host.access.log |grep index#1525331623cd /var/log/nginx/log#1525331624l#1525331626los#1525331627ls#1525331646tail -f storybookbeta-host.access.log #1524923598cd /etc/nginx/conf.d/#1524923598ls#1524923606vi storybook.conf #1524923634/etc/init.d/nginx configtest#1524923637/etc/init.d/nginx reload#1524923665tail -f /var/log/nginx/log/storybook-host.access.log #1524923783tail -f /var/log/nginx/log/storybook-host.access.log#1524924734vnstat -l -i eth1#1525343138tail -f /var/log/nginx/log/storybook-host.access.log #1525343156tail -f /var/log/nginx/log/storybook-host.access.log |grep yizhi#1525333999cd /var/log/nginx/log#1525333999l#1525334001ls#1525334011tail -f ./storybookbeta-host.access.log #1525320349cd /var/#1525320350ll#1525320352cd log#1525320353LL#1525320357ll#1525320361cd nginx/#1525320362ll#1525320365cd log#1525320374tail -f storybook-host.access.log #1525340456̫#1525340458ܴail #1525340468tail -f /var/log/nginx/log/wish-host.access.log #1525340500tail -f /var/log/nginx/log/storybook-host.access.log #1525340506tail -f /var/log/nginx/log/storybook-host.access.log |grep yizhi#1525424290tail -f /var/log/nginx/log#1525424310tail -f /var/log/nginx/log/storybook-host.access.log #1525424337tail -f /var/log/nginx/log/storybook-host.access.log |grep 1a74657d43e4750e2bf49605aaae123f#1525431370tail -f /var/log/nginx/log/storybook-host.access.log |grep 39b4e9a3ccb0ffb5aca44247a237d561#1525431437tail -f /var/log/nginx/log/storybookbeta-host.access.log |grep 39b4e9a3ccb0ffb5aca44247a237d561#1525396135cd /var#1525396136ll#1525396138cd log#1525396139ll#1525396141cd nginx/#1525396142ll#1525396143cd log/#1525396144ll#1525396155tail -f storybook-host.access.log #1525430440ta#1525430462tail -f /var/log/nginx/log/storyship-host.access.log #1525430624Mozilla/5.0 (Linux; Android 8.0; MHA-AL00 Build/HUAWEIMHA-AL00; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/57.0.2987.132 MQQBrowser/6.2 TBS/044028 Mobile Safari/537.36 MicroMessenger/6.6.6.1300(0x26060636) NetType/WIFI Language/zh_CN#1525430626tail -f /var/log/nginx/log/storyship-host.access.log #1525534042vnstat -l -i eth1#1525674763̫#1525674765ܴail #1525674779tail -f /var/log/nginx/log/storybook-host.access.log #1525674783tail -f /var/log/nginx/log/storybook-host.access.log |grep yizhi#1525655549cd /var #1525655553cd log#1525655554ll#1525655556cd nginx/#1525655557ll#1525655560cd log/#1525655561ll#1525655572tail -f storybook-host.access.log #1525679847tail -f /var/log/nginx/log/storybook-host.access.log |grep yizhi#1525681220vnstat -l -i eth1#1525742896tail -f /var/log/nginx/log/storybook-host.access.log #1525742923tail -f /var/log/nginx/log/storyship-host.access.log #1525746193ls#1525746204cd /etc/nginx/conf#1525746204ls./#1525746209cd /etc/nginx/conf.d/#1525746209sl#1525746210ls#1525746216vi storybook.conf #1525746335ls#1525746341cat storyship.conf #1525746371:q#1525746371ls#1525746376vi storybook.conf #1525746394/etc/init.d/nginx configtest#1525746401/etc/init.d/nginx reload#1525744632cd /var #1525744633ll#1525744634cd lgo#1525744636cd log#1525744637ll#1525744639cd nginx/#1525744640ll#1525744642cd lgo#1525744645cd log/#1525744645ll#1525744655tail -f storybook-host.access.log #1525767459tail -f /var/log/nginx/log/storybook-host.access.log #1525767463tail -f /var/log/nginx/log/storybook-host.access.log |grep yizhi#1525851507cd /etc/nginx/conf#1525851509cd /etc/nginx/conf.d/#1525851510ls#1525851516cat wish.conf#1525851527cat elastic.ifenghui.com.conf#1525851558vi storybook.conf #1525851650cat /etc/nginx/passwd.db#1525851660/etc/init.d/nginx configtest#1525851663/etc/init.d/nginx reload#1525851744vi storybook.conf #1525851760/etc/init.d/nginx configtest#1525851762/etc/init.d/nginx reload#1525858975tail -f /var/log/nginx/log/storybookbeta-host.access.log |grep be41899478dbea2f1c7c177215353be7#1525924069do#1525924070df#1525922794cd /etc/nginx#1525922795ls#1525922798cd conf.d#1525922798ls#1525922813cat wish.conf#1525922817ls#1525922830cat storybook.conf #1525922926vi storybook.conf #1525923010cat admin.storybook.conf #1525923038vi admin.storybook.conf#1525923167/etc/init.d/nginx restart#1526022225ls#1526022230cd /etc/nginx/conf.d/#1526022230ls#1526022763cd /etc/logstash/#1526022765ls#1526022771cd conf.d/#1526022773ls#1526022791cat mysql_bbs.sql #1526022818la#1526022819ls#1526022829cat logstash.conf #1526023428ps -ef|grep log#1526023440ps -ef|grep logs#1526023461cd /chroot/howToUse/#1526023461ls#1526023469cat log#1526023472cat logstash.sh #1526023640exit#1526005603cd /var/log#1526005604ls#1526005606cd nginx#1526005607ls#1526005610cd log#1526005610ls#1526005626tail -f storybookbeta-host.access.log #1526005650tail -f storybookbeta-host.access.log |grep d23416408de728b6e93e17218d70d4e4#1526024605cd /etc#1526024606ll#1526024610cd logstash/#1526024611ll#1526024614cd conf.d/#1526024614ll#1526024615ls#1526024616ll#1526024636cat logstash.conf #1526041857vnstat -l -i eth1#1526276664tail -f /var/log/nginx/log/storybook-host.access.log #1526276679tail -f /var/log/nginx/log/storybook-host.access.log |grep yizhi#1526265207ls#1526265223cd /var/www/html/#1526265223ls#1526265245docker ps#1526265249docker ps -a#1526265262ps -ef|grep elas#1526265285top#1526265322ps -ef|grep 22639#1526265341cd /usr/local/src/#1526265341ls#1526265344cd ..#1526265345ls#1526265353cd elasticsearch/#1526265353ls#1526265366./bin/elasticsearch#1526265383su elasticsearch#1526265388su elastic#1526266040ls#1526266044cd /usr/local/kibana/#1526266044ls#1526266046./bin/kibana#1526266299sudo ./bin/kibana &gt;&gt; /var/logs/kibana.log &amp;#1526266301docker ps#1526266303top#1526283347cd#1526283351cd /etc/nginx/conf.d/#1526283351ls#1526283355vi storybook.conf #1526283524/etc/init.d/nginx configtest#1526283527/etc/init.d/nginx reload#1526283971vi storybook.conf #1526284030/etc/init.d/nginx configtest#1526284035/etc/init.d/nginx reload#1526284081vi storybook.conf #1526284095/etc/init.d/nginx configtest#1526284098/etc/init.d/nginx reload#1526284104vi storybook.conf #1526292362cd /etc/logstash/conf.d/#1526292362ls#1526292366vi logstash.conf #1526260858cd /etc/logstash/#1526260859ll#1526260867cd conf.d/#1526260867ll#1526260878cat logstash.conf #1526261006cd ..#1526261007ll#1526261032cd /usr/share/logstash/#1526261033ll#1526261036cd lib/#1526261037ll#1526261211cd /etc/logstash/#1526261212ll#1526261217cd conf.d/#1526261218ll#1526261226cat mysql_bbs.sql #1526261252cat wish_like_other.sql #1526261287cat wish_medal_record.sql #1526292041cd /var/log#1526292042ll#1526292045cd nginx/#1526292046ll#1526292050cd log/#1526292050ll#1526292243cd /etc/logstash/#1526292246lll#1526292247ll#1526292251cd conf.d/#1526292252ll#1526292257cat wish_follow.sql #1526292272pwed#1526292274pwd#1526292309cat mysql_bbs.sql #1526292341cat wish_like_other.sql #1526292347cat wish_medal_record.sql #1526365829cd /etc/logstash/#1526365830ll#1526365832cd conf.d/#1526365832ll#1526365835cat logstash.conf #1526366100cd ..#1526366101ll#1526366103cd conf.d/#1526366104ll#1526366111cat mysql_bbs.sql #1526366218ll#1526366497cat mysql_bbs.sql #1526366789vi mysql_bbs.sql #1526366878ll#1526370129cd /rtq#1526370131cd /etc/#1526370133ll#1526370142cd logstash/#1526370143ll#1526370149cd patterns/#1526370150ll#1526370188cat nginx #1526370193ll#1526370200cat nohup.out #1526370479cat /#1526370481;;#1526370481ll#1526370486cd ..#1526370488ll#1526370492cat \\#1526370502ll#1526370524vi \\#1526371964ll#1526371968cd ..#1526371973cd logstash/#1526371974;;#1526371975ll#1526385162cd /var/log#1526385163ls#1526385173cd /var/log/nginx#1526385173ls#1526385176cd log#1526385176ls#1526385229cd storybook#1526385230ls#1526385239cd ../#1526385241ls#1526385381tail -f ./storybook-host.access.log |grep 4b7cd4a79018053d588f3f74ae612623#1526351750̫#1526351752ܴai#1526351762tail -f /var/log/nginx/log/wish-host.access.log #1526452925ט־#1526452928cd /etc/nginx/conf#1526452928ls#1526452931cd /etc/nginx/conf.d/#1526452932ls#1526452942cd storybook.conf #1526452944vi storybook.conf #1526453008ls#1526453012vi storyship.conf #1526433490vnstat -l -i eth1#1526457285cd /etc/nginx/conf.d/#1526457285ls#1526457294vi storyship.conf #1526457328vi storybook.conf #1526457522ls#1526457543cp storyship.conf storyship20180516.conf #1526457438cd /etc/ngin#1526457440cd /etc/nginx#1526457441ls#1526457449cd conf.d#1526457449ls#1526457484vim storyship.conf#1526458101/etc/init.d/nginx restart#1526458225mv storyship20180516.conf storyship20180516.conf.bk#1526458227/etc/init.d/nginx restart#1526458240/etc/init.d/nginx configtest#1526459650vim storyship.conf #1526459745/etc/init.d/nginx configtest#1526459750/etc/init.d/nginx restart#1526437735cd /etc/#1526437736ls#1526437757cd logstash/#1526437758ll#1526437760cd ..#1526437769ps -ef | gerp elastic#1526437777ps -ef | gerp kibana#1526437785cd /#1526437787ll#1526437794ls kibana#1526437806cd var/#1526437807ll#1526437811cd ..#1526437820cd /etc/logstash/#1526437821ll#1526437830cat conf.d/logstash.conf #1526528421crontab -l#1526522246cd /var#1526522248ll#1526522249cd lo#1526522252cd log#1526522253ll#1526522256cd nginx/#1526522257ll#1526522259cd log/#1526522260ll#1526522279tail -f storybook-host.access.log #1526524838cd /etc/logstash/#1526524840ll#1526524849cat conf.d/logstash.conf #1526641773cd /etc/nginx#1526641773ls#1526641777cd conf,d#1526641777ls#1526641779cd conf#1526641781cd conf.d/#1526641782ls#1526641793cat storyship.conf #1526608736cd /var/#1526608738ll#1526608741cd log#1526608744cd nginx/#1526608745ll#1526608746cd log/#1526608747lll#1526608748ll#1526608760tail -f storybook-host.access.log #1526624029cd /var#1526624030ll#1526624039cd log#1526624040ll#1526624041cd nginx/#1526624042l#1526624043ll#1526624051cd ..#1526624053ls#1526624065ls nginx/#1526624071ls nginx#1526624112cd logstash#1526624118cd logs#1526624120cd log#1526624124cd /var #1526624126ll#1526624130cd opt/#1526624131ll#1526624134cd ..#1526624135ll#1526624143cd logs/#1526624143ll#1526624152cd storybookapi/#1526624153ll#1526624156cd ..#1526624157ll#1526624158cd..#1526624159cd ..#1526624161ll#1526624167cd log#1526624168ll#1526624186cd nginx/#1526624188ll#1526624192cat access.log#1526624195cd ..#1526624195ll#1526624198cd nginx/#1526624199ll#1526624203cd log/#1526624204ll#1526624321cd /var/log/nginx/#1526624347cd log/#1526624348;;#1526624349l#1526624350ll#1526624411tail -f storyship-host.access.log #1526624838cd /etc/nginx/#1526624839ll#1526624846cat nginx.conf #1526624870cd conf#1526624871ll#1526624875cd conf.d/#1526624879ll#1526624902cat storyship.conf #1526624944ll#1526624951cat storyship20180516.conf.bk #1526625029ll#1526625036cd ..#1526625036ll#1526625043cat conf_bk_2017-4-6/#1526625044ll#1526625057cd conf_bk_2017-4-6/#1526625059ll#1526625070cat storybook.conf #1526625078cd ..#1526625081cd conf.d/#1526625082ll#1526625108ls storyship#1526625126ls -l | grep storyship#1526625140cat storyship_v.conf #1526625152cat storyship.conf #1526625707ll#1526625712cd /etc/#1526625714ll#1526625716cd nginx/#1526625717ll#1526625725cd log/#1526625725ll#1526625728cd ..#1526625729ll#1526625737cat nginx.conf #1526625751cd conf.d/#1526625752ll#1526625767cat storyship.conf #1526625872vi storyship.conf #1526625926source storyship.conf #1526625937cat storyship.conf #1526626057/etc/init.d/nginx configtest#1526626077/etc/init.d/nginx reload#1526627782ll#1526627804cat storyship_v.conf #1526627837cat storyship20180516.conf.bk #1526627859vi storyship20180516.conf.bk #1526627945/etc/init.d/nginx configtest#1526627971/etc/init.d/nginx reload#1526633273cd /usr/share/logstash/#1526633274ll#1526633276cd config/#1526633277ll#1526633291cd ..#1526633292ll#1526633298cd bin/#1526633298ll#1526633304cd ..#1526633305ll#1526633309cat config/#1526633315cd config/#1526633315ll#1526633325cat log4j2.properties #1526633327ll#1526633340cd /etc/logstash/#1526633341ll#1526633344cd conf.d/#1526633344ll#1526633378cat logstash.conf #1526634380cd /etc/logstash/patterns/#1526634380ll#1526634388cat nginx #1526638156cat logstash.conf #1526638159cd ..#1526638161cat logstash.conf #1526638166cd conf.d/#1526638168cat logstash.conf #1526638219cd ..#1526638220ll#1526638227cd /usr/share/logstash/#1526638227ll#1526638232cd lib/#1526638233ll#1526638518cd ..#1526638522cat logstash.conf #1526638526cd config/#1526638527cat logstash.conf #1526638533ll#1526638542cat /etc/logstash/conf.d/logstash.conf #1526827300tail -f /var/log/nginx/log/wish-host.access.log #1526827311vnstat -l -i eth1#1526827332tail -f /var/log/nginx/log/wish-host.access.log #1526827378tail -f /var/log/nginx/log/wish-host.access.log |grep status#1526827383tail -f /var/log/nginx/log/wish-host.access.log#1526883961df#1526896799太累#1526896811tail -f /var/log/nginx/log/#1526896815cd /var/log/nginx/log#1526896815ls#1526896944tail -f /var/log/nginx/log/storybook-host.access.log |grep 603cc85dc5f0ddcbf8f6932c3eafb0b3#1526868100cd /usr/share/logstash/#1526868100ll#1526868102cd config/#1526868103ll#1526868123cat /etc/logstash/conf.d/mysql_bbs.sql #1526868278cat /etc/logstash/conf.d/wish_like_other.sql #1526868290cat /etc/logstash/conf.d/wish_medal_record.sql #1526902044cd /usr/share/logstash/#1526902045ll#1526902057cat /etc/logstash/conf.d/logstash.conf #1526902103cat /etc/logstash/conf.d/wish_medal_record.sql#1526974447vnstat -l -i eth1#1526974460tail -f /var/log/nginx/log/*.log#1526974489vnstat -l -i eth1#1526974501iftop #1526974544iftop -i eth1#1526974574vnstat -l -i eth1#1526974666iptraf#1527079101tail -f /var/log/nginx/log/storyship-host.access.log #1527081173tail -f /var/log/nginx/log/wish-host.access.log #1527081179tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1527081202tail -f /var/log/nginx/log/wish-host.access.log#1527081219tail -f /var/log/nginx/log/wish-host.access.log|grep getStatusDetail#1527081779ls#1527132498cd /chroot/web/#1527132498ls#1527132534vi fileauth.txt#1527140753whereis kibana#1527140761whereis elastic#1527140778cd /usr/local/kibana/#1527140779ll#1527140782cd ..#1527140783ll#1527140791cd elasticsearch/#1527140792ll#1527140809ps -ef |grep elasticsearch#1527140816ll#1527134989cd /chroot/web#1527134990ls#1527135008cd ./.well-known/pki-validation/#1527135009ls#1527135011cat fileauth.txt #1527135018vi fileauth.txt #1527242901cd /etc/nginx/#1527242906cat conf.d/#1527242914cat nginx.conf #1527242956cd /etc/nginx/#1527242956ll#1527242962cd conf.d/#1527242962ll#1527242969cat wx.storybook.ssl.conf #1527242976pwd#1527240831cd /etc/nginx/conf.d/#1527240832ls#1527240839cat wx.storybook.ssl.conf #1527240899vi wx.storybook.conf #1527240913vi wx.storybook.ssl.conf #1527241320/etc/init.d/nginx configtest#1527241323/etc/init.d/nginx reload#1527241440vi wx.storybook.ssl.conf #1527241476/etc/init.d/nginx configtest#1527241477/etc/init.d/nginx reload#1527242520vi wx.storybook.ssl.conf #1527242562pwd#1527249209Ӥ֊#1527249211ɣd #1527249214cd /etc/nginx/conf.d/#1527249215ls#1527249224vi admin.storybook.conf #1527249682cd /etc/nginx/conf.d/#1527249682ls#1527249686vi storyship.conf #1527251311tail -f /var/log/nginx/log/storyship-host.access.log #1527251610tail -f /var/log/nginx/log/storyship-host.access.log |grep 1341122#1527253873cd /etc/nginx/conf#1527253875cd /etc/nginx/conf.d/#1527253875ls#1527253884vi storyship.conf #1527254732tail -f /var/log/nginx/log/wish-host.access.log #1527254736tail -f /var/log/nginx/log/wish-host.access.log |grep cos#1527477594cd /etc/nginx/conf.d/#1527477594ls#1527477600vi storyship.conf #1527477631vi storybook.conf #1527480398tail -f /var/log/nginx/log/storyship-host.access.log #1527487349tail -f /var/log/nginx/log/wish-host.access.log #1527487361tail -f /var/log/nginx/log/wish-host.access.log |grep cos#1527487381tail -f /var/log/nginx/log/storyship-host.access.log |grep cos#1527493603cd /chroot#1527493604ls#1527493606cd web#1527493606ls#1527493610pwd#1527493481ɣd#1527493488cd /etc/nginx/conf.d/#1527493489ls#1527493506vi storyship.conf #1527493625q#1527493627vi storyship.conf #1527493634ls#1527493639cd /chroot/web/#1527493639ls#1527493643vi DWWE8vwR2T.txt#1527493655/etc/init.d/nginx configtest#1527493659/etc/init.d/nginx reload#1527477138cd /var/log/nginx/#1527477139ll#1527477140cd lgo#1527477145cd log/#1527477145ll#1527477156tail -f storybook-host.access.log #1527477229tail -f storybook-host.access.log |grep notice#1527487076tail -f storybook-host.access.log #1527505787cd /etc/#1527505802ll#1527506006cd nginx/conf.d/#1527506007ll#1527506014cat wx.storybook.ssl.conf #1527506020cat wx.storybook.ssl#1527506023ls#1527506070cat wx.storybook.ssl.conf #1527506516vi wx.storybook.ssl.conf #1527506768cat wx.storybook.#1527506771cat wx.storybook.ssl.conf #1527507171vi wx.storybook.ssl.conf #1527507445history#1527507487/etc/init.d/nginx configtest#1527507502vi wx.storybook.ssl.conf #1527507528/etc/init.d/nginx configtest#1527507550/etc/init.d/nginx reload#1527507560cat wx.storybook.ssl.conf #1527508079vi wx.storybook.ssl.conf #1527508251/etc/init.d/nginx configtest#1527508254/etc/init.d/nginx reload#1527508270cat wx.storybook.ssl.conf #1527508391vi wx.storybook.ssl.conf #1527508419/etc/init.d/nginx configtest#1527508425/etc/init.d/nginx reload#1527510678cat /etc/logstash/#1527510679ll#1527510690cat wish_ssl.conf.bk #1527510692cd ..#1527510693ls#1527510696cd conf#1527510698cd conf.d/#1527510699ll#1527510702ls#1527510718cd ..#1527510719ll#1527510723cd /etc/logstash/#1527510724ll#1527510728cd conf.d/#1527510729ll#1527510731cat mysql_bbs.sql #1527492680cd ../#1527492681ls#1527492686cd /etc/ngins#1527492686ls#1527492689cd /etc/nginx#1527492690ls#1527492695cat nginx.conf #1527492707cd ../#1527492709ls#1527492711cd /nginx#1527492712ls#1527492716cd nginx/#1527492717ls#1527492720cd conf#1527492723cd conf.d/#1527492724ls#1527492730cat storyship.conf #1527560745tail -f /var/log/nginx/log/wish-host.access.log #1527560750tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1527560759tail -f /var/log/nginx/log/wish-host.access.log |grep iOSgetNewUserWorks#1527561015tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1527561042tail -f /var/log/nginx/log/wish-host.access.log |grep 200408#1527584335Ӥ֊#1527584337ɣd #1527584343cd /etc/nginx/conf.d/#1527584343ls#1527584348vi storyship.conf #1527584491/etc/init.d/nginx configtest#1527584494/etc/init.d/nginx reload#1527584638ls#1527584642crontab -l#1527584676crontab -e#1527572823cd /etc/nginx/conf.d/#1527572824ll#1527572825ls#1527572831vi wx.storybook.ssl.conf #1527572929/etc/init.d/nginx configtest#1527572946/etc/init.d/nginx reload#1527572953cat wx.storybook.ssl.conf #1527581137vi wx.storybook.ssl.conf #1527581165/etc/init.d/nginx configtest#1527581171/etc/init.d/nginx reload#1527583726vi wx.storybook.ssl.conf #1527583748/etc/init.d/nginx configtest#1527583752/etc/init.d/nginx reload#1527583800vi wx.storybook.ssl.conf #1527574162̫#1527574164ܴail #1527574174tail -f /var/log/nginx/log/wish-host.access.log #1527574184tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1527666552cd /etc/nginx/#1527666553ll#1527666555cd conf#1527666558cd conf.d/#1527666559ll#1527666573cat wx.storybook.ssl.conf #1527669573cd /var/log/nginx/#1527669574l#1527669575ll#1527669576cd log/#1527669592tail -f storybook-host.access.log #1527669602tail -f storybook-host.access.log | grep sale#1527675430ls#1527675435cd /etc/nginx#1527675436ls#1527675443cd conf.d#1527675444ls#1527675454cat wx.storybook.conf #1527675587ls#1527675596cd ../#1527675596ls#1527675600cd ../#1527675600ls#1527675607cd nginx#1527675607ls#1527675612cd conf.d#1527675613ls#1527675633cat wx.storybook.conf #1527675659cd /chroot#1527675659ls#1527675661cd api#1527675661ls#1527675676cat weidian_open.json #1527675881cd /etc/nginx#1527675881ls#1527675885cd conf.d#1527675885ls#1527675892cat wish.conf#1527675924ls#1527675989cat fenghuicomic.conf |gerp ifenghui.com#1527675995cat fenghuicomic.conf |grep ifenghui.com#1527676015cat fenghuicomic.conf #1527676152ls#1527676181vim fenghuicomic.conf #1527676365/etc/init.d/nginx -t#1527676387/etc/init.d/nginx configtest#1527676393/etc/init.d/nginx restart#1527823182cd /var/log/nginx/#1527823183lll#1527823185ll#1527823186cd log/#1527823187ll#1527823203cat storybook-host.access.log | grep sale#1527823382cat storybook-host.access.log | grep &#x27;2010-09-07&#x27;#1527823390cat storybook-host.access.log | egrep &#x27;2010-09-07&#x27;#1527823395cat storybook-host.access.log | grep &#x27;2010-09-07&#x27;#1527823398cat storybook-host.access.log | grep sale#1527824630ll#1527824642cd storybook#1527824643l#1527824644ll#1527824735cat storybook-host_2018-05-30.log storybook-host_201#1528093536cd /etc/nginx/conf.d/#1528093537ls#1528093545vi storybook.conf #1528081577cd /var/log/nginx/log/#1528081578;;#1528081579ll#1528081590tail -f storybook-host.access.log #1528081597tail -f storybook-host.access.log | grep sale#1528094664cd /etc/nginx/#1528094665ll#1528094667cd conf#1528094672cd conf.d/#1528094673ll#1528094679cat wx.storybook.ssl.conf #1528102629tail -f /var/log/nginx/log/wish-host.access.log |grep 4977&#x27;#1528102632tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1528103463tail -f /var/log/nginx/log/wish-host.access.log |grep 4977|getStatusDetail#1528103475tail -f /var/log/nginx/log/wish-host.access.log |&#x27;grep 4977|getStatusDetail&#x27;#1528103502tail -f /var/log/nginx/log/wish-host.access.log |grep 4977|grep getStatusDetail#1528103520tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1528115570tail -f /var/log/nginx/log/storybook-host.access.log #1528181993whereis logstash#1528181998cd /etc/logstash/#1528181998ls#1528182000cd conf.d/#1528182000ls#1528182063cp wish_follow.sql story_share_reg.sql#1528182065vi story_share_reg.sql #1528182100ls#1528182134cp story_share_reg.sql story_share_read.sql #1528182139vi story_share_read.sql #1528182189ls#1528182217cp story_share_reg.sql story_share_recharge.sql#1528182221vi story_share_recharge.sql #1528182287ls#1528182289cd ..#1528182290ls#1528182299cd conf.d/#1528182300ls#1528182301vi logstash.conf #1528184542cd /etc/nginx/conf.d/#1528184543ls#1528184557cat dongman.conf#1528184564ls#1528184694vi fenghuicomic.conf #1528184377cd /etc/nginx/conf#1528184380cd /etc/nginx/conf.d/#1528184380ls#1528184394vi storyship.conf #1528184898/etc/init.d/nginx configtest#1528184902/etc/init.d/nginx reload#1528185335vi storyship.conf #1528185348/etc/init.d/nginx configtest#1528185350/etc/init.d/nginx reload#1528185484vi storyship.conf #1528185512/etc/init.d/nginx configtest#1528185514/etc/init.d/nginx reload#1528185691vi storyship.conf #1528185881/etc/init.d/nginx configtest#1528185883/etc/init.d/nginx reload#1528186073vi storyship.conf #1528186111/etc/init.d/nginx configtest#1528186113/etc/init.d/nginx reload#1528189897whereis logstash#1528189902cd /etc/logstash/#1528189902ls#1528189905cd conf.d/#1528189905ls#1528189913cat story_share_reg.sql #1528189916ls#1528189920cat logstash.conf #1528182596cd /etc/logstash/conf.d/#1528182597ls#1528183373vi story_share_reg.sql #1528183391ls#1528183398vi story_share_read.sql #1528183424ls#1528183456cat story_share_read.sql #1528183469vi story_share_recharge.sql #1528183490ls#1528183785vi story_share_reg.sql #1528183815ls#1528183820vi story_share_read.sql #1528183837ls#1528183846vi story_share_recharge.sql #1528183865ls#1528183880docker ps#1528183890top#1528183906ps -ef|grep logstash#1528183998 whereis logstash#1528184026cat /chroot/howToUse/logstash.sh #1528184040cd /chroot/howToUse/#1528184041ls#1528184053ps -ef|grep logstash#1528184060kill 22639#1528184077ps -ef|grep logstash#1528184085cat ./logstash.sh #1528184092/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf#1528190221ls#1528190229./logstash.sh #1528271058򒠣1528271060րcd #1528271363cd logs#1528271368cd /etc/log#1528271378cd /etc/logstash/#1528271378ls#1528271380cd conf.d/#1528271380ls#1528271387cat story_share_read.sql #1528271418ls#1528271421cd ..#1528271421ls#1528271430whereis logstash#1528271433cd /usr/share/logstash/#1528271434ls#1528271446cd tail -f nohup.out #1528271452tail -f nohup.out #1528273991򒠣1528273993րcd #1528274001cd /etc/logstash/#1528274002ls#1528274004cd conf.d/#1528274004ls#1528274015cat story_share_read.sql #1528274149ls#1528274151cd ..#1528274152ls#1528274157cat startup.options #1528274253ls#1528274262whereis logstash#1528274266cd /usr/share/lo#1528274268cd /usr/share/logstash/#1528274268ls#1528274294cd data/#1528274295ls#1528274303cd queue/#1528274303ls#1528274305cd ..#1528274305ls#1528274311cd ..#1528274312ls#1528274325cd bin/#1528274325ls#1528274333ll#1528274340cd ..#1528274341ls#1528274396pwd#1528274402ls#1528274404cd data/#1528274404ls#1528274411cd ..#1528274411ls#1528274415cd data/#1528274418cd dead_letter_queue/#1528274419ls#1528274420cd ..#1528274421ls#1528274428cd logstash-core#1528274429ls#1528274433cd ..#1528274435pwd#1528274436ls#1528274441cd config/#1528274442ls#1528274443cd ..#1528274444ls#1528274451cd config/#1528274451ls#1528274454cd ..#1528274455cd data/#1528274455ls#1528274457cd queue/#1528274458ls#1528274459cd ..#1528274701ls#1528274702cd ..#1528274703pwd#1528274711cd /etc/logstash/conf.d/#1528274711ls#1528274716vi logstash.conf #1528274750ls#1528274754cat story_share_re*#1528340753cd /etc/logstash/conf.d/#1528340754ls#1528340761vi story_share_read.sql #1528340770ls#1528340776vi story_share_reg.sql #1528340784ls#1528340800vi story_share_recharge.sql #1528339126cd /etc/logstash/#1528339126ls#1528339127cd conf.d/#1528339128ls#1528339317vi story_read_record_log.sql#1528339340ls#1528339356cat story_share_read.sql #1528339892vi story_read_record_log.sql#1528339967ls#1528339984vi logstash.conf #1528340207ps -ef|grep logs#1528340212kill 27412#1528340220cd /chroot/howToUse/#1528340220ls#1528340224kill 27412#1528340304cat ./logstash.sh #1528340312/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf#1528340410vi /etc/logstash/conf.d/story_read_record_log.sql #1528340422/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf#1528340449vi /etc/logstash/conf.d/logstash.conf #1528340468/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf#1528340532vi /etc/logstash/conf.d/logstash.conf #1528340548/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf#1528340627vi /etc/logstash/conf.d/logstash.conf #1528340635vi /etc/logstash/conf.d/story_read_record_log.sql #1528340649ls#1528340651vi /etc/logstash/conf.d/logstash.conf #1528340667/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf#1528341354vi /etc/logstash/conf.d/story_read_record_log.sql #1528341374ls#1528341384vi /etc/logstash/conf.d/story_share_reg.sql #1528341401vi /etc/logstash/conf.d/story_share_read.sql #1528341425vi /etc/logstash/conf.d/story_share_recharge.sql #1528341443/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf#1528341595vi /etc/logstash/conf.d/story_share_recharge.sql #1528341604vi /etc/logstash/conf.d/story_share_reg.sql #1528341613vi /etc/logstash/conf.d/story_share_read.sql #1528341630./logstash.sh #1528341722vi /etc/logstash/conf.d/story_share_reg.sql #1528341964vi /etc/logstash/conf.d/story_share_recharge.sql #1528422311Ӥ֊#1528422313Ȋ#1528422317cd /etc/nginx/conf.d/#1528422318ls#1528424926cd /etc/nginx/conf#1528424929cd /etc/nginx/conf.d/#1528424930ls#1528424939cd /etc/logstash/conf.d/#1528424940ls#1528424951vi story_read_record_log.sql #1528424968ls#1528424989cd /chroot/howToUse/#1528424990ls#1528424995ps -ef|grep logstash.sh #1528425003ps -ef|grep logstash#1528425007kill 2015#1528425010kill 5012#1528425033./logstash.sh #1528425200cd /etc/logstash/conf.d/#1528425200ls#1528425209vi story_read_record_log.sql #1528425228cd /chroot/howToUse/#1528425239ps -ef|grep logstash#1528425246kill 27946#1528425491ls#1528425497cat logstash.sh #1528425504/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf#1528425760./logstash.sh #1528429015ɣd #1528429020cd /etc/logstash/conf.d/#1528429021ls#1528429028vi story_read_record_log.sql #1528429036ls#1528429041cd /chroot#1528429042ls#1528429048ps -ef|grep logstash#1528429052kill 28341#1528429057cd howToUse/#1528429060kill 28341#1528429064./logstash.sh #1528685205tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1528686975tail -f /var/log/nginx/log/storybook-host.access.log #1528713534tail -f /var/log/nginx/log/wish-host.access.log #1528713540tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1528698985tail -f /var/log/nginx/log/openvista-host.access.log #1528738993cd /etc/logstash/#1528738993ls#1528739001cd conf.d/#1528739001ls#1528739036cd ..#1528739037ls#1528739045cd conf.d/#1528739045ls#1528739055vi logstash.conf #1528739328ls#1528739350cp logstash.conf logstash-liucun.conf#1528739357vi logstash-liucun.conf #1528735325cd /etc/logstash/#1528735326ls#1528735328cd conf.d/#1528735328ls#1528735354mkdir read_liucun#1528735356cd read_liucun/#1528735369mkdir recharge.sql#1528735371ls#1528735376rm recharge.sql -rf#1528735381vi recharge.sql#1528736425desc#1528736425SELECT distinct CONCAT(&#x27;recharge&#x27;, o.id) AS id,#1528736425 #select distinct o.id,#1528736425 u.`create_time` AS user_reg_time,#1528736425 u.id AS uid,#1528736425 u.nick AS unick,#1528736425 eu.id AS pid,#1528736425 eu.nick AS pnick,#1528736425 rl.`create_time` as read_time,#1528736425 o.`create_time` as log_time,#1528736425 u.`channel`,#1528736425 # e.`user_parent_id`,#1528736425 DATEDIFF(o.`create_time`, u.`create_time`) AS days,#1528736425 #,u.`create_time`,o.`create_time`#1528736425 rl.freecount,#1528736425 &#x27;recharge&#x27; as action_type,#1528736425 o.amount,#1528736425 o.type as otype#1528736425 FROM `story_pay_recharge_order` AS o,#1528736425 story_user AS u#1528736425 LEFT JOIN story_user_extend AS e ON u.id= e.`user_id`#1528736425 LEFT JOIN story_user AS eu ON e.`user_parent_id`= eu.id,#1528736425 ( select user_id, max(create_time) as create_time, count(distinct story_id) as freecount#1528736425 from story_user_read_record_log#1528736425 where story_id in(295, 296, 298, 300)#1528736425 and create_time&lt;= &#x27;2018-5-20&#x27;#1528736425 group by user_id) AS rl#1528736425 WHERE o.status= 1#1528736425 AND o.user_id= u.id#1528736425 AND rl.user_id= u.id#1528736425 AND rl.`create_time`&lt; o.`create_time`#1528736425 AND DATEDIFF(o.`create_time`, u.`create_time`)&lt;= 30#1528736425 and o.`is_test`= 0#1528736936ls#1528736938vi recharge.sql #1528771839cd /etc/conf.d#1528771871ɣd#1528771986cd /etc/logstash/#1528771987ls#1528771989cd conf.d/#1528771989ls#1528771992cd read_liucun/#1528771992ls#1528771994cat recharge.sql #1528775987cd /etc/logstash/conf.d/#1528775987ls#1528775993cat logstash-liucun.conf #1528776149ls#1528774549cd /etc/logstash/conf.d/#1528774549sl#1528774550ls#1528774552cd read_liucun/#1528774552ls#1528774554vi recharge.sql #1528774687ls#1528774688cd ..#1528774690la#1528774690ls#1528774696cat story_share_read.sql #1528774704ls#1528774706cd read_liucun/#1528774708ls#1528774710vi recharge.sql #1528774759ls#1528774761cd ..#1528774763ls#1528774770cat logstash-liucun.conf #1528774785ls#1528774788vi logstash-liucun.conf #1528774821ls#1528774899cd /chroot/howToUse/#1528774900ls#1528774907ps -ef|grep logstash#1528774913kill 29350#1528774932cat ./logstash.sh#1528774940/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/#1528774988/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/logstash-liucun.conf #1528775017/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/*.conf#1528775213/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/#1528775410ls#1528775418cd /etc/logstash/conf.d/#1528775418ls#1528775437mkdir wish#1528775453mv wish*.sql wish/#1528775455ls#1528775469mkdir story#1528775478mv story*.sql story/#1528775479ls#1528775485mv mysql_bbs.sql wish/#1528775486ls#1528775491vi logstash.conf #1528775567/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/#1528775932ls#1528775939cd read_liucun/#1528775941ls#1528775942vi recharge.sql #1528775965/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/#1528776135vi recharge.sql #1528776161cd /chroot/howToUse/#1528776161ls#1528776166vi logstash.sh #1528786598cd /etc/logstash/conf.d/#1528786598ls#1528786601cd read_liucun/#1528786601ls#1528786602vi recharge.sql #1528787462cd /etc/nginx/conf.d/#1528787462ls#1528787471vi openvista.conf #1528787505cd /var/www/html/openvista/#1528787505ls#1528787510vi fileauth.txt #1528791792cd /chroot/web/.well-known/#1528791792ls#1528791795cd pki-validation/#1528791795ls#1528791796cat fileauth.txt #1528791885cat /etc/nginx/conf.d/openvista.conf #1528791901cd /var/www/html/openvista#1528791902ls#1528791915cat fileauth.txt #1528791933/etc/init.d/nginx configtest#1528791937/etc/init.d/nginx reload#1528791945ls#1528791946cat fileauth.txt #1528791974ls#1528792010mkdir .well-known#1528792013cd .well-known/#1528792013ls#1528792015cd pki-validation/#1528792016ls#1528792017vi fileauth.txt #1528792186ps -ef|grep lostash#1528792192ps -ef|grep logstash#1528792197ps -ef|grep logs#1528792206cd /chroot/howToUse/#1528792207ls#1528792211cat logstash.sh #1528792230/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/#1528792328vi /etc/logstash/conf.d/logstash-liucun.conf #1528792336vi /etc/logstash/conf.d/read_liucun/recharge.sql #1528792349./logstash.sh #1528792378ls#1528792393ps -ef|grep logstash#1528784033cd /var/log/nginx/log/#1528784034ll#1528784043tail -f storybook-host.access.log #1528804222cd /etc/logstash/conf.d/#1528804222ls#1528804225cd read_liucun/#1528804226ls#1528804236cat trylesson.sql#1528800566ɣd #1528800571cd /etc/nginx/conf.d/#1528800572ls#1528800585cd /etc/logstash/conf.d/#1528800586ls#1528800594vi read_liucun/#1528800596ls#1528800598cd read_liucun/#1528800598ls#1528800614cp recharge.sql trylesson.sql#1528800616vi trylesson.sql #1528800817tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1528803419ls#1528803421vi recharge.sql #1528803479ls#1528803599vi recharge.sql #1528803804ls#1528803811cp recharge.sql bystory.sql#1528803820mv bystory.sql buystory.sql#1528803822vi buystory.sql #1528803845ls#1528803850vi trylesson.sql #1528803878ps -ef|grep logstash#1528803883kill 32732#1528803907cat /chroot/howToUse/logstash.sh #1528803913/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/#1528804063ls#1528804066cd ..#1528804066lv#1528804068ls#1528804072vi logstash-liucun.conf #1528804171/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/#1528804379ls#1528804385cd read_liucun/#1528804386ls#1528804388vi trylesson.sql #1528804426/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/#1528804644ls#1528804646vi trylesson.sql #1528804788/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/#1528805913ls#1528805923cp buystory.sql buylesson.sql#1528805926vi buylesson.sql #1528805939ls#1528805940cd ..#1528805940ls#1528805946vi logstash-liucun.conf #1528805996/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/#1528806076vi logstash-liucun.conf #1528806102/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/#1528806131vi logstash-liucun.conf #1528806161/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/#1528806225vi logstash-liucun.conf #1528806280/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/#1528806758lv#1528806760ls#1528806764cd read_liucun/#1528806764ls#1528806772vi trylesson.sql #1528806779ls#1528806784vi buystory.sql #1528806796ls#1528806799vi buylesson.sql #1528806817ls#1528806821vi buystory.sql #1528806864ls#1528806868vi recharge.sql #1528806888/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/#1528806981/chroot/howToUse/logstash.sh #1528864167cd /etc/logstash/conf.d/#1528864168ls#1528864210cd read_liucun/#1528864210ls#1528864216vi buystory.sql #1528867434Ԉ#1528867437ccdcd#1528867442cd /etc/logstash/conf.d#1528867443ld#1528867444ls#1528867451cd read_liucun/#1528867451ls#1528867462rm &#x27;#1528867466ll#1528867472rm &#x27;&#x27;&#x27;#1528867476rm &#x27;\\&#x27;&#x27;#1528867478ls#1528867480ll#1528867486vi buystory.sql #1528867583ls#1528867595vi trylesson.sql #1528868066ls#1528868071vi buystory.sql #1528868106ls#1528868111vi buystory.sql #1528868142ls#1528868145cat buylesson.sql #1528868148ls#1528868150vi buystory.sql #1528868350ls#1528868352vi recharge.sql #1528868427ls#1528868430cat trylesson.sql #1528868514/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/#1528868542ls#1528868546cat buylesson.sql #1528868560ls#1528868563vi buylesson.sql #1528868684ls#1528868687cat buylesson.sql #1528868691ls#1528868694cat recharge.sql #1528868695ls#1528868698cat trylesson.sql #1528868700ls#1528868702cat buylesson.sql #1528868885ls#1528868889vi buylesson.sql #1528868896ls#1528868899vi buystory.sql #1528868905ls#1528868910vi recharge.sql #1528868917ls#1528868919vi trylesson.sql #1528868945ls#1528855987cd /etc/logstash/conf.d/#1528855988ls#1528855993cd read_liucun/#1528855994ls#1528856007vi buylesson.sql #1528856022ls#1528856025vi trylesson.sql #1528856783ls#1528856788vi buystory.sql #1528856880ps -ef|grep logstash#1528856885kill 5286#1528856905/chroot/howToUse/logstash.sh #1528856916ps -ef|grep logstash#1528856921kill 19214#1528856934cat /chroot/howToUse/logstash.sh #1528856939/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/#1528857640vi buystory.sql #1528857653/chroot/howToUse/logstash.sh #1528857831vi buystory.sql #1528857851ps -ef|grep logstash#1528857948ls#1528857963cd ..#1528857964ls#1528857967vi logstash-liucun.conf #1528858112cat /chroot/howToUse/logstash.sh #1528858118/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/#1528858176ps -ef|grep logstash#1528858180kill 19558#1528858190/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/#1528858441ls#1528858653vi logstash-liucun.conf #1528858673ls#1528858696vi ./read_liucun/buystory.sql #1528858802ls#1528858809vi ./read_liucun/buylesson.sql #1528858845/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/#1528869078/chroot/howToUse/logstash.sh #1528880839ps -ef|grep vi#1528880850cd /etc/logstash/conf.d/#1528880850ls#1528880854cd read_liucun/#1528880854ls#1528880856vi buylesson.sql #1528880863ls#1528880866vi buystory.sql #1528880872ls#1528880873vi recharge.sql #1528880880ls#1528880882vi trylesson.sql #1528878604cd /etc/logstash/conf.d/#1528878604ls#1528878607cd read_liucun/#1528878608ls#1528878613vi buylesson.sql #1528879340ls#1528879343vi buystory.sql #1528879368ls#1528879370vi recharge.sql #1528879400ls#1528879402vi trylesson.sql #1528879427ps -ef#1528879432ps -ef|grep lostash#1528879435ps -ef|grep logstash#1528879439kill 23282#1528879461cat /chroot/howToUse/logstash.sh #1528879467/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/#1528880902/chroot/howToUse/logstash.sh #1528883014Ȋ#1528883019cd /etc/logstash/#1528883020ls#1528883021cd conf.d/#1528883022ls#1528883025cd read_liucun/#1528883026ls#1528883028cat trylesson.sql #1528853939cd /var/log/nginx/log/#1528853940ll#1528853949tail -f storybook-host.access.log #1528883555ll#1528883579tail -f dongman.ifenghui.com-host.access.log #1528885332cd /etc/logstash/conf.d/#1528885332ls#1528885338cd read_liucun/#1528885339ls#1528885341cat trylesson.sql #1528884991cd /etc/logstash/conf.d/#1528884991ls#1528884994cd read_liucun/#1528884994ls#1528885001vi trylesson.sql #1528885109ls#1528885115ps -ef|grep logstash#1528885122kill 26789#1528885158cat /chroot/howToUse/logstash.sh #1528885165/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/#1528887679vi trylesson.sql #1528887694/chroot/howToUse/logstash.sh #1528900584cd /etc/logstash/conf.d/#1528900586ls#1528900588cd read_liucun/#1528900589ls#1528900593vi buylesson.sql #1528900602ls#1528900604vi buystory.sql #1528900613ls#1528900614vi recharge.sql #1528901037ls#1528901090vi recharge.sql #1528901097ls#1528901099vi buystory.sql #1528901438ls#1528901441vi recharge.sql #1528901487ls#1528901496ps -ef|grep logstash#1528901502kill 28935#1528901546cat /chroot/howToUse/logstash.sh #1528901553/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/#1528902410ls#1528902412vi recharge.sql #1528902532/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/#1528907270vi recharge.sql #1528907287vi buylesson.sql #1528907296vi buystory.sql #1528907305vi recharge.sql #1528907314/chroot/howToUse/logstash.sh #1528939266cd /chroot/howToUse/#1528939266ls#1528939285cat logstash.sh #1528939291cd /etc/logstash/conf.d/#1528939291ls#1528939297cd read_liucun/#1528939297ls#1528939299vi buylesson.sql #1528939306ls#1528939386vi buystory.sql #1528939394ls#1528939395vi recharge.sql #1528939402ls#1528939404vi trylesson.sql #1528939425ls#1528939467ps -ef|grep logstash#1528939470kill 2337#1528939501/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/#1528939802ls#1528939806vi buylesson.sql #1528939811ls#1528939813vi buystory.sql #1528939820ls#1528939822vi recharge.sql #1528939827ls#1528939829vi trylesson.sql #1528939845/chroot/howToUse/logstash.sh #1528942019cd /etc/logstash/#1528942019ls#1528942021cd conf.d/#1528942021ls#1528942024cd read_liucun/#1528942024ls#1528942028vi buystory.sql #1528942314ps -ef|grep logstash#1528942318kill 11610#1528942332cat /chroot/howToUse/#1528942338cat /chroot/howToUse/logstash.sh #1528942343/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/#1528942631vi buystory.sql #1528942644/chroot/howToUse/logstash.sh #1528946852cd /etc/logstash/conf.d/#1528946852ls#1528946855cd read_liucun/#1528946855ls#1528946860vi buylesson.sql #1528950202cd /etc/logstash/#1528950203ls#1528950205cd conf.d/#1528950205ls#1528950213mkdir activity#1528950213ls#1528950216vi activity/#1528950219sl#1528950219ls#1528950221cd activity/#1528950222ls#1528950281in_activity.sql#1528950289vi in_activity.sql#1528950296ls#1528950407cd ..#1528950408ls#1528950430cp logstash-liucun.conf logstash-activity.conf#1528950585ls#1528950591vi logstash-activity.conf #1528950720ls#1528961712cd /etc/logstash/#1528961712ls#1528961713cd conf.d/#1528961713ls#1528961718cd story/#1528961718ls#1528962023vi finish_free_lesson.sql#1528962033ls#1528962067cat story_share_read.sql #1528962073ls#1528962075vi finish_free_lesson.sql #1528962088ls#1528962090cd ..#1528962090ls#1528962112vi logstash-liucun.conf #1528962126ls#1528962156cp logstash-liucun.conf logstash-finish-free-lesson.conf#1528962160vi logstash-finish-free-lesson.conf #1528962388ls#1528962391cd story/#1528962423ls#1528962424cd story_#1528962428ls#1528962437cd ..#1528962438ls#1528962442vi logstash-finish-free-lesson.conf #1528954452ps -ef|grep logstash#1528954455kill 12613#1528954481ps -ef|grep logstash#1528954488cat /chroot/howToUse/logstash.sh #1528954494/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/#1528965872/chroot/howToUse/logstash.sh #1528965953ps -ef|grep lostash#1528965955ps -ef|grep logstash#1528965963kill 19549#1528965975/chroot/howToUse/logstash.sh #1528965813ɣd #1528965816cd /etc/logstash/#1528965817ls#1528965818cd conf.d/#1528965819ls#1528965824cd story/#1528965824ls#1528965827vi finish_free_lesson.sql #1528965877cd ..#1528965877sl#1528965878ls#1528965883cd activity/#1528965883ls#1528965887vi in_activity.sql #1529029011cd /etc/logstash/#1529029012ls#1529029013cd conf.d/#1529029013ls#1529029020vi logstash-liucun.conf #1529029692ls#1529029695cd read_liucun/#1529029696ls#1529029699vi buylesson.sql #1529030582ls#1529030584vi buystory.sql #1529030593ls#1529030595vi recharge.sql #1529030604ls#1529030606vi trylesson.sql #1529030612ls#1529030614vi buylesson.sql #1529026582ӊ#1529026584ɣd #1529026595cd /etc/logstash/conf.d/#1529026595ls#1529026613cd read_liucun/#1529026613ls#1529026633cd recharge.sql #1529026637ls#1529026641vi buylesson.sql #1529026676ls#1529026678vi buystory.sql #1529026710ls#1529026711vi recharge.sql #1529026739ls#1529026742vi buystory.sql #1529026746ls#1529026749vi trylesson.sql #1529026780ls#1529026782vi recharge.sql #1529026787ls#1529026791vi buystory.sql #1529026795ls#1529026797cd ..#1529026798ls#1529026803vi logstash.conf #1529026923ls#1529027023vi logstash-liucun.conf #1529028386ls#1529028392ps -ef|grep logstash#1529028397kill 19698#1529028402cd /chroot/howToUse/#1529028402ls#1529028407ps -ef|grep logstash#1529028413kill 19698#1529028421cat ./logstash.sh #1529028426/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/#1529030634./logstash.sh #1529030608cd /var/log/nginx/#1529030609ll#1529030613cd log/#1529030614ll#1529030625tail -f dongman.ifenghui.com-host.access.log #1529032958ll#1529032979tail -f dongmana1-host.access.log #1529032996ll#1529033031tail -f wish-host.access.log #1529052569cd /etc/nginx/conf.d/#1529052607vi wx.storybook.ssl.conf #1529052669vi storybook_ssl.conf#1529052750ls#1529052753vi storybook.conf #1529052827/etc/init.d/nginx configtest#1529053151ls#1529053158vi storybook.conf #1529053177ls#1529053185vi storybook_ssl.conf#1529053331ls#1529053335vi storybook.conf #1529053365/etc/init.d/nginx configtest#1529053368/etc/init.d/nginx reload#1529057916ܴail#1529057929tail -f /var/log/nginx/log/storybook-host.access.log #1529249590vnstat -l -i eth1#1529374016̫#1529374018ܴail #1529374028tail -f /var/log/nginx/log/wish-host.access.log #1529374046tail -f /var/log/nginx/log/wish-host.access.log |grep 4977#1529408876cd /etc/nginx/conf#1529408878cd /etc/nginx/conf.d/#1529408879ls#1529408899vi wx.storybook.ssl.conf #1529409037/etc/init.d/nginx configtest#1529409040/etc/init.d/nginx reload#1529489536cd /etc/nginx/#1529489537ll#1529489540cd conf#1529489541ll#1529489546cd conf.d/#1529489547ll#1529489557cat wx.storybook.conf #1529489618cd ..#1529489619ll#1529489670cd conf.d/#1529489671ll#1529489674cat wx.storybook.ssl.conf #1529544356ޣd#1529544367cd /etc/logstash/conf.d/#1529544367ls#1529544374cd activity/#1529544374ls#1529544378cd ..#1529544379cd story/#1529544379ls#1529544382vi finish_free_lesson.sql #1529544899cd /chroot/howToUse/#1529544899ls#1529544904ps -ef|grep logstash#1529544926kill 5716#1529544965./logstash.sh #1529544975ps -ef|grep logstash#1529544980kill 17896#1529544995vi /etc/logstash/conf.d/logstash-finish-free-lesson.conf #1529545006./logstash.sh #1529545291ps -ef|grep logstash#1529545297kill 17937#1529545309cat ./logstash.sh #1529545315/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/#1529545336vi /etc/logstash/conf.d/logstash-finish-free-lesson.conf #1529545345/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/#1529545827vi /etc/logstash/conf.d/logstash-finish-free-lesson.conf #1529546177vi /etc/logstash/conf.d/story/finish_free_lesson.sql #1529546209./logstash.sh #1529546924vi /etc/logstash/conf.d/story/finish_free_lesson.sql #1529547039ps -ef|grep logstash#1529547044kill 18525#1529547076/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/#1529547228vi /etc/logstash/conf.d/story/finish_free_lesson.sql #1529547242/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/#1529547320vi /etc/logstash/conf.d/story/finish_free_lesson.sql #1529547330./logstash.sh #1529563834cd /var#1529563835ll#1529563838cd log#1529563838ll#1529563842cd nginx/#1529563842l#1529563844ll#1529563846cd log/#1529563847ll#1529544237cd /etc/nginx/#1529544238ll#1529544245cd conf.d/#1529544246ll#1529544260cat wish.conf#1529544278cat wish_ssl.conf.bk #1529583412cd /etc/logstash/#1529583413ls#1529583414cd conf.d/#1529583415ls#1529583424cd read_liucun/#1529583424ls#1529583442rm &#x27;#1529583448rm &quot;&#x27;&quot;#1529583454ls#1529583458vi buylesson.sql #1529583480ls#1529583482vi buystory.sql #1529583490ls#1529583492vi recharge.sql #1529583497ls#1529583500vi trylesson.sql #1529583519cat /chroot/howToUse/logstash.sh #1529583526ps -ef|grep logstash#1529583531kill 19184#1529583547/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/#1529583934ls#1529583937vi buylesson.sql #1529583943ls#1529583946vi buystory.sql #1529583953ls#1529583954vi recharge.sql #1529583960ls#1529583962vi trylesson.sql #1529583982/chroot/howToUse/logstash.sh #1529632739cd /etc/logstash/#1529632740ls#1529632741cd conf.d/#1529632741ls#1529632765cd story/#1529632765ls#1529632815vi story_read_record_log.sql #1529632821ls#1529632826vi story_share_read.sql #1529632832ls#1529632836vi story_share_recharge.sql #1529632842ls#1529632926vi story_share_recharge.sql #1529632928ls#1529632933vi story_share_reg.sql #1529632259ɣd #1529632335cd /etc/logstash/#1529632335ls#1529632339cd conf.d/#1529632339ls#1529632387cd story/#1529632387ls#1529632402vi story_read_record_log.sql #1529632410ls#1529632421vi story_share_read.sql #1529632429ls#1529632436vi story_share_recharge.sql #1529632451ls#1529632455vi story_share_reg.sql #1529632460ls#1529632467ps -ef|grep logstash#1529632471kill 29401#1529632518/chroot/howToUse/logstash.sh #1529632525ps -ef|grep logstash#1529632530kill 10628#1529632535cat /chroot/howToUse/logstash.sh #1529632540/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/#1529632954/chroot/howToUse/logstash.sh #1529646653cd /etc/logstash/conf.d/#1529646653ls#1529646657cd story/#1529646657ls#1529646664vi story_share_read.sql #1529646670ls#1529646678vi story_share_recharge.sql #1529646694ls#1529646711vi story_share_reg.sql #1529646745ls#1529646752vi story_share_recharge.sql #1529646764ls#1529646770vi story_share_read.sql #1529646798cd /chroot/howToUse/#1529646799ls#1529646806ps -ef|grep logstash#1529646811kill 10943#1529646849ps -ef|grep logstash#1529646887ls#1529647400ps -ef|grep logstash#1529647406./logstash.sh #1529647519cd /etc/logstash/conf.d/#1529647520ls#1529647522cd story/#1529647522ls#1529647525vi story_read_record_log.sql #1529647541ls#1529647547vi story_share_recharge.sql #1529653955cd /etc/logstash/conf.d/#1529653955ls#1529653963cd story/#1529653964ls#1529653986cd ..#1529653987ls#1529653992vi logstash.conf #1529652730cd /etc/logstash/#1529652731ls#1529652735cd conf.d/#1529652735ls#1529652738cd story/#1529652739ls#1529652752vi story_share_setphone.sql#1529652792ps -ef|grep logstash#1529652796kill 15052#1529652828cat /chroot/howToUse/logstash.sh #1529652836/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/#1529653092cd ..#1529653092ls#1529653103vi logstash.conf #1529653190ll#1529653193cd story/#1529653193ll#1529653197/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/#1529653778ls#1529653795cd ..#1529653795ls#1529653799vi logstash.conf #1529653816/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/#1529655003ls#1529655006cd story/#1529655007ls#1529655012vi story_share_setphone.sql #1529655029/chroot/howToUse/logstash.sh #1529646206cd /etc/nginx/#1529646207ll#1529646211cd conf.d/#1529646212ll#1529646221cat wish_ssl.conf.bk #1529646224cd ..#1529646225ll#1529646234cd ..#1529646236ll#1529646239cd nginx/#1529646240ll#1529651003cd conf#1529651004ll#1529651009cd conf.d/#1529651009ll#1529651018cat dongman.conf#1529651082ll#1529651101vi dongman.conf#1529651135cat dongman.conf#1529651254vi dongman.conf#1529665149cat dongman.conf#1529666142 /etc/init.d/nginx configtest#1529666222vi dongman.conf#1529666315 /etc/init.d/nginx configtest#1529666323 /etc/init.d/nginx reload#1529667507vi dongman.conf#1529667572vi wx.storybook.ssl.conf #1529667589vi dongman.conf#1529667764caat dongman.conf#1529667768cat dongman.conf#1529668260tail -f /var/log/nginx/log/dongman.ifenghui.com-host.access.log #1529668711 /etc/init.d/nginx configtest#1529668716 /etc/init.d/nginx reload#1529668718tail -f /var/log/nginx/log/dongman.ifenghui.com-host.access.log #1529805428cd /etc/nginx/#1529805429ll#1529805431cd conf#1529805431ll#1529805437cd conf.d/#1529805439ll#1529805451cd wx.storybook.ssl.conf #1529805457cat wx.storybook.ssl.conf #1529805788ll#1529805805cat dongman.conf#1529806299ll#1529806321vi dongman.conf#1529806388ll#1529806400cat dongman.conf.bk #1529806407ll#1529806420cat wx.storybook.ssl.conf #1529806426ll#1529806436cat wish_ssl.conf.bk #1529806439cd ..#1529806446cat dongman.conf#1529806449ll#1529806453cd conf.d/#1529806454ll#1529806459cat dongman.conf#1529807567ls#1529915755cd /etc/logstash/#1529915755ll#1529915757cd conf.d/#1529915758ll#1529915760cd story/#1529915761ll#1529915764cat finish_free_lesson.sql #1529889883cd /etc/nginx/#1529889884ll#1529889888cd conf.d/#1529889889ll#1529889894cat dongman.conf#1529891375 cd /usr/share/logstash/#1529891376ll#1529891378cd config/#1529891378ll#1529891427cd ..#1529891428ll#1529891439cd config/#1529891440ll#1529891442cd ..#1529891442ll#1529891444cd ..#1529891445ll#1529891447cd logstash/#1529891448ll#1529891451cd data/#1529891452ll#1529891453cd ..#1529891454ll#1529893103cd logstash-core#1529893104ll#1529893106cd ..#1529893108ll#1529893111cd config/#1529893113ll#1529893117cd ..#1529893119ll#1529893555cd config/#1529893556ll#1529893557cd ..#1529893572whereis logstash#1529893580cd /etc/logstash/#1529893581ll#1529893583cd conf.d/#1529893583ll#1529893594cat logstash-finish-free-lesson.conf #1529893642ll#1529893652cd ..#1529893653ll#1529893655cd conf.d/#1529893655ll#1529893657cat story/#1529893658ll#1529893670cd story/#1529893670ll#1529893674cat finish_free_lesson.sql #1529893701vi finish_free_lesson.sql #1529893794ll#1529893800cd ..#1529893801ll#1529893820cd /usr/share/logstash/#1529893822ll#1529893829cd config/#1529893830ll#1529893832cd ..#1529893833ll#1529893839cd bin/#1529893840ll#1529893842cd ..#1529893844ll#1529894567ps -ef |grep logstash#1529894761cd config/#1529894762ll#1529894771cat log4j2.properties #1529894784ll#1529894865cd ..#1529894871ps -ef |grep logstash#1529897991ll#1529898002cd config/#1529898002ll#1529898005cd ..#1529898006ll#1529898014cd vendor/#1529898014ll#1529898016cd .#1529898016ll#1529898020cd ..#1529898021ll#1529898034pwd#1529898052cd /etc/logstash/#1529898053lll#1529898054ll#1529898056cd conf.d/#1529898056ll#1529898066cd ..#1529898072d /usr/share/logstash/#1529898074ll#1529898081cd conf.d/#1529898081ll#1529898087cd /usr/share/logstash/#1529898088ll#1529898098ps -ef | grep logstash-core#1529898104ps -ef | grep logstash#1529898257ll#1529898284bin/logstash -f /etc/logstash/conf.d/#1529898360ps -ef | grep logstash#1529898369kill 1722#1529898372ps -ef | grep logstash#1529898388kill -9 17722#1529898391ps -ef | grep logstash#1529898396bin/logstash -f /etc/logstash/conf.d/#1529902906cd /etc/nginx/#1529902907ll#1529902909cd conf.d/#1529902909ll#1529902911cat dongman#1529902913cat dongman.conf#1529902941vi dongman.conf#1529903009 /etc/init.d/nginx configtest#1529903015 /etc/init.d/nginx reload#1529903042vi dongman.conf#1529903059 /etc/init.d/nginx configtest#1529903062 /etc/init.d/nginx reload#1529903105vi dongman.conf#1529903168 /etc/init.d/nginx configtest#1529903171 /etc/init.d/nginx reload#1529903201 /etc/init.d/nginx configtest#1529903203 /etc/init.d/nginx reload#1529903231cat dongman.conf#1529914323vi dongman.conf#1529914354 /etc/init.d/nginx configtest#1529914357 /etc/init.d/nginx reload#1529893164tail -f /var/log/nginx/log/dongman.ifenghui.com-host.access.log #1529981150cd /var/log/nginx#1529981151ls#1529981153cd log#1529981154ls#1529981194tail -f ./215.videoapi.access.log |grep 71710#1529981225tail -f ./wish-host.access.log |grep 71710#1530064441ls#1530064465cat /var/log/nginx/log#1530064465ls#1530064470cd /var/log#1530064470ls#1530064472cd nginx#1530064472ls#1530064474cd log#1530064475ls#1530064515tail -f /wish-host.access |grep 598654#1530064523tail /wish-host.access |grep 598654#1530064550tail -f /wish-host.access #1530064563tail -f /wish-host.access.log #1530064569tail -f ./wish-host.access.log #1530064575tail -f ./wish-host.access.log |grep 598654#1530064584tail ./wish-host.access.log |grep 598654#1530064591cat ./wish-host.access.log |grep 598654#1530083015ls#1530083021cd /var/log/nginx/log#1530083022ls#1530083035tail -f ./wish-host.access.log#1530083072tail -f ./wish-host.access.log|grep 495493#1530091669ls#1530091673cd /var/log/nginx#1530091674ls#1530091676cd log#1530091676ls#1530091797tail -f ./storybook-host.access.log |grep 18210699633#1530094159ls#1530094181tail -f /var/log/nginx/log/wish-host.access.log |grep 416156#1530095816tail -f /var/log/nginx/log#1530095816ls#1530096042tail -f /var/log/nginx/log/wish-host.access.log |grep 416156#1530081237top#1530088427cd /data#1530088429ll#1530088431cd /#1530088432ll#1530088436cd chroot#1530088436ll#1530088448cd ..#1530088449ll#1530095080tail -f /var/log/nginx/log/wish-host.access.log | grep 683590#1530096045tail -f /var/log/nginx/log/wish-host.access.log | grep 46156#1530096657tail -f /var/log/nginx/log/wish-host.access.log | grep 683590#1530097722cd /etc/nginx/#1530097723ll#1530097729cd conf.d/#1530097730ll#1530097735cat dongman.conf#1530103278cd /var/log/nginx/#1530103278ll#1530103281cd log/#1530103282ll#1530103300tail -f wish-host.access.log #1530103463tail -f wish-host.access.log | grep user#1530103506tail -f /var/log/nginx/log/wish-host.access.log | grep 683590#1530103548tail -f /var/log/nginx/log/wish-host.access.log | grep 46156#1530103662tail -f wish-host.access.log #1530103687tail -f wish-host.access.log | grep userservice#1530103885tail -f wish-host.access.log | grep user#1530103898tail -f wish-host.access.log | grep login#1530104015tail -f wish-host.access.log | grep loginregist#1530104044tail -f wish-host.access.log | grep regist#1530107891tail -f wish-host.access.log | grep loginOtherAndReg#1530108227tail -f wish-host.access.log #1530108278tail -f wish-host.access.log | grep addCloudDrafts#1530091644ls#1530154986cd /var/log/nginx/#1530154987ll#1530154989cd log/#1530154990ll#1530155018tail wish-host.access.log | grep getIndex201711#1530155030tail -f wish-host.access.log | grep getIndex201711#1530239379cd /var/log/nginx/#1530239380ll#1530239382cd log/#1530239383ll#1530239396tail -f wish-host.access.log #1530239500tail -f wish-host.access.log | grep 674403#1530499547cd /etc/nginx/conf.d/#1530499548ls#1530499557vi cos.conf#1530529927cd /var/log/nginx/log/#1530529928ll#1530529938tail -f storybook-host.access.log #1530529957tail -f storybook-host.access.log | grep viewrecord#1530420329vnstat -l -i eth1#1530494797tail -f /var/log/nginx/log/*.log#1530494928vnstat -l -i eth1#1530522237tail -f /var/log/nginx/log/*.log#1530522437tail -f /var/log/nginx/log/dongman.ifenghui.com-host.access.log #1530522481vnstat -l -i eth1#1530528949tail -f /var/log/nginx/log/wish-host.access.log #1530528961tail -f /var/log/nginx/log/storybook-host.access.log #1530529101vnstat -l -i eth1#1530529198tail -f /var/log/nginx/log/storybook-host.access.log #1530580828tail -f /var/log/nginx/log/wish-host.access.log #1530589441Ӥ֊#1530589448ɣd #1530589455cd /etc/logstash/#1530589456ls#1530589457cd conf.d/#1530589458ls#1530589463cd story/#1530589463ls#1530589477cd ..#1530589478ls#1530589495cd story/#1530589496ls#1530589500cat story_read_record_log.sql #1530589542ls#1530589543cd ..#1530589544ls#1530589547cd read_liucun/#1530589547ls#1530589551cat trylesson.sql #1530601038cd /etc/nginx/conf#1530601040cd /etc/nginx/conf.d/#1530601040ls#1530601050vi wish.conf#1530601403tail -f /var/log/nginx/log/wish-host.access.log |grep status#1530601410tail -f /var/log/nginx/log/wish-host.access.log |grep cloudmanager#1530601657ls#1530601659cd /etc/nginx/conf#1530601661cd /etc/nginx/conf.d/#1530601661ls#1530601667ll#1530601703ls#1530601704cd ..#1530601704ls#1530601709cd stream_conf.d/#1530601710ls#1530601716cd ..#1530601716ls#1530601720vi mime.types #1530601729ls#1530601730vi nginx.conf #1530601884ld#1530601885ls#1530601892cd conf#1530601894cd conf.d/#1530601895ls#1530601898vi wish.conf#1530601935/etc/init.d/nginx configtest#1530601945/etc/init.d/nginx reload#1530601966vi wish.con#1530601968ls#1530601971vi wish.conf#1530601986/etc/init.d/nginx configtest#1530601988/etc/init.d/nginx reload#1530602485vi wish.conf#1530602497/etc/init.d/nginx configtest#1530602499/etc/init.d/nginx reload#1530586591cd /etc/nginx/#1530586591ll#1530586595cd conf.d/#1530586596ll#1530586599ls#1530586604cat cos.conf #1530581114top#1530581169tail -f /var/log/nginx/log/#1530581169ll#1530581184tail -f /var/log/nginx/log/storybook-host.access.log #1530669388ls#1530682668vnstat -l -i eth1#1530682682tail -f /var/log/nginx/log/*.log#1530682724tail -f /var/log/nginx/log/*.log|grep X11#1530682748tail -f /var/log/nginx/log/*.log|grep 117.28.132.63#1530683035tail -f /var/log/nginx/log/*.log|grep X11#1530683041vnstat -l -i eth1#1530685420tail -f /var/log/nginx/log/*.log|grep X11#1530685428tail -f /var/log/nginx/log/*.log#1530685467tail -f /var/log/nginx/log/dongman.ifenghui.com-host.access.log #1530685558vnstat -l -i eth1#1530685695tail -f /var/log/nginx/log/dongman.ifenghui.com-host.access.log #1530685701tail -f /var/log/nginx/log/*.log#1530686338vnstat -l -i eth1#1530686345top#1530697744vnstat -l -i eth1#1530697757vnstat -d -i eth1#1530697809vnstatd -d#1530697824vnstat#1530697842vnstat --create -i eth1#1530697849vnstat --help#1530697896vnstat -h -i eth1#1530697906vnstat -i eth1 -u#1530697933vnstat -m#1530697939vnstat -m -i eth1#1530697993vnstat -h -i eth1#1530698017vnstat -l -i eth1#1530698153vnstat -h -i eth1#1530698202vnstat -m -i eth1#1530698205vnstat -s -i eth1#1530698216vnstat --help -i eth1#1530698229vnstat -q -i eth1#1530698232vnstat -q -i eth0#1530698235vnstat -q -i eth1#1530699492vnstat -u -i eth1#1530668113cd /var/log/nginx/log/#1530668113ll#1530668118tail -f storybook-host.access.log #1530684755tail -f wish-host.access.log #1530685070tail -f wish-host.access.log | grep resetPassword#1530757018vnstat -d -i eth1#1530757033cd /var/log/nginx/log/#1530757048cat dongman.ifenghui.com-host.access.log |grep UNION#1530754218tail -f /var/log/nginx/log/storybook-host.access.log #1530774385tail -f /var/log/nginx/log/wish-host.access.log #1530774405tail -f /var/log/nginx/log/wish-host.access.log | grep follow#1531054935tail -f /var/log/nginx/log/wish-host.access.log |grep SE#1531062499cd /etc/nginx/conf.d/#1531062501vi wish.conf#1531062576vnstat -l -i eth1#1531276963tail -f /var/log/nginx/log/storyship-host.access.log #1531276982tail -f /var/log/nginx/log/storybook-host.access.log #1530762420vnstat -l -i eth1#1530762735vnstat -h -i eth1#1530762755time#1530762756date#1530762768vnstat -d -i eth1#1530762790vnstat -m -i eth1#1530762793vnstat -h -i eth1#1530762809tail -f /var/log/nginx/log/*.log#1530762842tail -f /var/log/nginx/log/*.log |grep X11#1530762858tail -f /var/log/nginx/log/*.log |grep X10#1530762862tail -f /var/log/nginx/log/*.log |grep X11#1530762882tail -f /var/log/nginx/log/dongman.ifenghui.com-host.access.log #1530964732/etc/init.d/memcached status#1530964772yum update memcached#1530964853vnstat -d -i eth1#1530964864vnstat -l -i eth1#1530985078tail -f /var/log/nginx/log/dongman.ifenghui.com-host.access.log #1530985256vnstat -l -i eth1#1531275958tail -f /var/log/nginx/log/storybook-host.access.log #1531277506cd /var/log/nginx/log/#1531277507ls#1531277510cd storybook#1531277511ls#1531277523cat storybook-host_2017-12-15.log |grep ios#1531294602cd /etc/nginx/#1531294602ll#1531294606cd conf.d/#1531294606ll#1531294621cat storybook.conf #1531294756ll#1531294768cat storybook_ssl.conf#1531362061tail -f /var/log/nginx/log/storyship-host.access.log |grep sstoken#1531362564tail -f /var/log/nginx/log/storybook-host.access.log #1531362570tail -f /var/log/nginx/log/storybook-host.access.log |grep sstoken#1531471145tail -f /var/log/nginx/log/storybook-host.access.log #1531471964tail -f /var/log/nginx/log/storybook-host.access.log |grep Android#1531472171tail -f /var/log/nginx/log/storybook-host.access.log |grep iOS#1531472191tail -f /var/log/nginx/log/storybook-host.access.log |grep ios#1531467995cd /etc/nginx/conf.d/#1531467996ls#1531468007vi wish.conf#1531468060ls#1531468069vi storybook.conf #1531468104vi storybook_ssl.conf#1531468168ls#1531468172cd ..#1531468173ls#1531468174vi nginx.conf #1531469019/etc/init.d/nginx configtest#1531469020ls#1531469023cd conf.d/#1531469023ls#1531469025ll#1531469061mv hitchhiker.conf hitchhiker.conf.bk#1531469084cat cos.conf #1531469128cat storyship.conf #1531469170ls#1531469227cd ..#1531469228ls#1531469230vi nginx.conf #1531470033tail -f /var/log/nginx/log/storybook-host.access.log #1531470120tail -f /var/log/nginx/log/storybook-host.access.log |grep Plus#1531470171cd /var/log/nginx/log/storyship-host.access.log #1531470179tail -f /var/log/nginx/log/storyship-host.access.log #1531459093cd /var/log/nginx/log/#1531459093ll#1531459103tail -f storybook-host.access.log #1531459111tail -f storybook-host.access.log | grep sale#1531484904tail -f /var/log/nginx/log/storybook-host.access.log |grep SE#1531480867tail -f /var/log/nginx/log/storybook-host.access.log #1531480871tail -f /var/log/nginx/log/storybook-host.access.log |grep SE#1531539088ps -ef|grep lostash#1531539095ps -ef|grep logstash#1531539105cd /etc/logstash/conf.d/#1531539106ls#1531593029crontab -e#1531789825cd /var/log/nginx/log/#1531789827ll#1531789857tail -f wish-host.access.log #1531799008tail -f wish-host.access.log | grep 20797#1531811073tail -f wish-host.access.log #1531811083tail -f wish-host.access.log | grep cloud#1531822778cd /etc/nginx/#1531822779lll#1531822781ll#1531822783cd conf#1531822786cd conf.d/#1531822787lll#1531822788ll#1531822811cat wx.storybook.ssl.conf #1531884391cd /etc/nginx/#1531884391ll#1531884393cd conf#1531884396cd conf.d/#1531884396ll#1531884406cat storybook.conf #1531884418ll#1531884427cat wx.storybook.conf #1531884435cat wx.storybook.ssl.conf #1531884459vi wx.storybook.ssl.conf #1531967985cd /usr/local/src/#1531967985ls#1531967987pip install aliyuncli#1531967996pip3 -v#1531968014pip3 install aliyun-python-sdk-cms#1531968144aliyuncli -v#1531969539aliyuncli cms#1531969849python3 aliyuncli #1531969865aliyuncli #1531970621python3 aliyuncli #1531964063cd /var/log/nginx/log#1531964063ll#1531964076tail -f storybook-host.access.log | grep sale #1531964306tail -f storybook-host.access.log | grep e25ccdc6cf3452e1fc50d89124b3e19#1531964154cd /var#1531964155ll#1531964156cd log#1531964157ll#1531964163cd nginx/#1531964164ll#1531964166cd log/#1531964167ll#1531964181cd storybook#1531964182ll#1531964185cd ..#1531964187ll#1532050117tail -f /var/log/nginx/log/storybook-host.access.log |grep sale#1532076307tail -f /var/log/nginx/log/wish-host.access.log |grep wallet#1532078744tail -f /var/log/nginx/log/storybook-host.access.log | grep sale#1532262335ܴa#1532262366tail -f /var/log/nginx/log/wish-host.access.log #1532262375vnstat -l -i eth1#1532262385tail -f /var/log/nginx/log/*.log#1532262486tail -f /var/log/nginx/log/*.log|grep Mac#1532262507tail -f /var/log/nginx/log/*.log|grep Baidu#1532262515tail -f /var/log/nginx/log/*.log|grep Chrome#1532262554tail -f /var/log/nginx/log/*.log|grep 120.32.40.62#1532262688vnstat -l -i eth1#1532325866cd /var/log/nginx/#1532325867ll#1532325870cd log/#1532325870ll#1532325889tail -f wish-host.access.log | grep status#1532325922tail -f wish-host.access.log | grep 433266#1532325944tail -f wish-host.access.log | grep status#1532325974tail -f wish-host.access.log | grep 439410#1532326004tail -f wish-host.access.log | grep getStatusDetail#1532326029tail -f wish-host.access.log | grep 697687#1532332740tail -f wish-host.access.log | grep 20797#1532496875cd /etc/nginx/conf.d/#1532496875ls#1532496887vi fenghuicomic.conf #1532498043cd ..#1532498043ls#1532498049cd conf#1532498051cd conf.d/#1532498053vi fenghuicomic.conf #1532498106/etc/init.d/nginx configtest#1532498112/etc/init.d/nginx reload#1532498124vi fenghuicomic.conf #1532498172/etc/init.d/nginx configtest#1532498174vi fenghuicomic.conf #1532498201/etc/init.d/nginx configtest#1532498517/etc/init.d/nginx reload#1532507299df#1532507310cd /var/log/nginx/log/wish/#1532507311ls#1532507324rm wish-host_2018-03-* -rf#1532507355df#1532507369rm wish-host_2018-04-* -rf#1532481047cd /var/log/nginx/#1532481048;;#1532481049ll#1532481053cd log#1532481053ll#1532481072tail -f wish-host.access.log | follow#1532481078tail -f wish-host.access.log | grep follow#1532510700df#1532510715cd /usr/local/#1532510716ls#1532510717cd src/#1532510718ls#1532510720ll#1532510732rm libmemcached-1.0.18.tar.gz #1532510734df#1532510745cd /usr/local/coreseek#1532510746ls#1532510865du -a./ --max-depth=1#1532510922du -h --max-depth=1 c/#1532510926du -h --max-depth=1 ./#1532510932ls#1532510933cd var/#1532510933ls#1532510937cd log/#1532510937ls#1532510940cd ..#1532510944ps -ef|grep core#1532510948ps -ef|grep corese#1532510951ps -ef|grep sphinx#1532510953ls#1532510954cd ..#1532510954ls#1532510957cd ..#1532510967cd va#1532510969cd ./va#1532510973cd coreseek#1532510973ls#1532510975cd var/#1532510975ls#1532510978cd data#1532510979ls#1532510980cd ..#1532510981ls#1532510989rm * -rf#1532511000cd ..#1532511001ls#1532511010cd ..#1532511010ls#1532511013df#1532511021cd awstats/#1532511021ls#1532511028du -h --max-depth=1 ./#1532511034cd ..#1532511034ls#1532511045cd activemq/#1532511045ls#1532511048du -h --max-depth=1 ./#1532511054cd ..#1532511054ls#1532511061du -h --max-depth=1 ./#1532511107cd ./elasticsearch/#1532511108ls#1532511258du -h --max-depth=1 ./#1532511263df#1532511598ޣd#1532511604cd /var/log/nginx/log/#1532511604ls#1532511606cd wish#1532511606ls#1532511612rm wish-host_2018-05-* -rf#1532511649rm wish-host_2018-06-* -rf#1532569410cd /var/log/nginx/log/wish#1532569411ls#1532569419cat * |grep momo#1532569425cd ..#1532569425ls#1532569432cat wish-host.access.log |grep momo#1532569463cat 215-host.access.log |grep momo#1532569551cat 215-host.access.log |grep 236403#1532569559cat wish-host.access.log |grep 236403#1532569575ls#1532569578cd wish#1532595326where is geoip#1532595336ps -ef|grep geoip#1532595353cd /etc/logstash/#1532595354ls#1532595356cd conf.d/#1532595356ls#1532595364vi logstash-liucun.conf #1532595370ls#1532595373cd ..#1532595373ls#1532595383cat *|grep geoip#1532595468yum -y install GeoIP-update#1532595524ls#1532595775cd /etc/cron.weekly/#1532595777ls#1532595781./geoipupdate #1532595793/usr/share/#1532595793ls#1532595797cat geoipupdate #1532595809cd /etc/GeoIP.conf #1532595813vi /etc/GeoIP.conf #1532595872cd /usr/share/logstash/#1532595872ls#1532595882cd logstash-core#1532595883ls#1532595885cd ..#1532595886ls#1532595889cd modules/#1532595889ls#1532595892cd ..#1532595893ls#1532595894cd tools/#1532595895ls#1532595896cd ..#1532595923/etc/cron.weekly#1532595932cd /etc/cron.weekly#1532595932ls#1532595935./geoipupdate #1532595952geoipupdate#1532595970yum list getop#1532595973yum list getip#1532595978yum list GeoIp#1532595993yum install GeoIp#1532596009yum install GeoIP#1532596029GeoIp#1532596032geoipupdate#1532596159/etc/cron.weekly/geoipupdate#1532567958cd /var/log/nginx/log/#1532567959ll#1532568022tail -f wish-host.access.log | grep 683699#1532569374tail -f wish-host.access.log | grep momo#1532590642cd /data/ww#1532590645cd /data/www#1532590646ll#1532590652cd /data/www#1532590653ll#1532949581cd /etc/nginx/#1532949581ll#1532949584cd conf.d/#1532949585ll#1532949588cat wx.storybook.#1532949592cat wx.storybook.ssl.conf #1532949670vi wx.storybook.ssl.conf #1532949846cat wx.storybook.ssl.conf #1532950908vi wx.storybook.ssl.conf #1533003814ls#1533003828/etc/init.d/nginx reload#1533016070top#1531561570vnstat -l -i eth1#1533182996tail -f /var/log/nginx/log/storybook-host.access.log #1533196656cd /var/log/nginx/log/#1533196657ll#1533196672tail -f storybook-host.access.log #1533286386cd /etc/nginx/conf#1533286386ls#1533286390cd /etc/nginx/conf.d/#1533286390ls#1533286395cd ..#1533286396vi nginx.conf #1533286468ls#1533286737cd conf#1533286739cd conf.d/#1533286739ls#1533286753vi fenghuicomic.conf #1533281568contab -e#1533281573crontab -e#1533261232tail -f /var/log/nginx/log/storybook-host.access.log | grep sale#1533262933tail -f /var/log/nginx/log/storybook-host.access.log | grep cc74c7feb73dc5cb13d75399fa9a74a1#1533534408cd /var #1533534408ll#1533534411cd log#1533534412ll#1533534414cd nginx/#1533534415ll#1533534417cd log/#1533534418ll#1533534468tail -f wish-host.access.log #1533534529tail -f wish-host.access.log | grep 20797#1533535830ssh root@101.37.174.227#1533536070ssh://root@101.37.174.227#1533536075ssh://root@101.37.174.227:22#1533536112clear#1533565745vnstat -l -i eth1#1533565765tail -f /var/log/nginx/log/dongman.ifenghui.com-host.access.log #1533565771tail -f /var/log/nginx/log/www.ifenghui.com-host.access.log #1533565807tail -f /var/log/nginx/log/www.ifenghui.com-host.access.log |grep 122.112.226.94#1533566015vnstat -l -i eth1#1533620135tail -f /var/log/nginx/log/storybook-host.access.log #1533620141tail -f /var/log/nginx/log/storybook-host.access.log |grep html#1533637689crontab -e#1533691465vnstat -l -i eth1#1533691572tail -f /var/log/nginx/log/www.ifenghui.com-host.access.log #1533728423cd /etc/#1533728424ll#1533728427ls#1533728431cd nginx/#1533728432ll#1533728436cd conf.d/#1533728437ll#1533728444cat storybook.conf #1533728455ls#1533728469ll#1533728494cat wx.storybook.ssl.conf #1533199730vnstat -l -i eth1#1533199750tail -f /var/log/nginx/log/*.log#1533199833vnstat -l -i eth1#1533199867tail -f /var/log/nginx/log/dongmana1-host.access.log #1533199873tail -f /var/log/nginx/log/dongman.ifenghui.com-host.access.log #1533199882tail -f /var/log/nginx/log/www.ifenghui.com-host.access.log #1533199939vnstat -l -i eth1#1533779748cd /etc/#1533779749ll#1533779752cd nginx/#1533779752ll#1533779756cd conf.d/#1533779757ll#1533779764cat wx.storybook.ssl.conf #1533780349vi wx.storybook.ssl.conf #1533780783/etc/init.d/nginx configtest#1533780793/etc/init.d/nginx reload#1533780824cat wx.storybook.ssl.conf #1533781091vi wx.storybook.ssl.conf #1533781133/etc/init.d/nginx configtest#1533781137/etc/init.d/nginx reload#1533781144cat wx.storybook.ssl.conf #1533781319vi wx.storybook.ssl.conf #1533781341/etc/init.d/nginx configtest#1533781343/etc/init.d/nginx reload#1533781417cat wx.storybook.ssl.conf #1533781538vi wx.storybook.ssl.conf #1533781596cat wx.storybook.ssl.conf #1533781601/etc/init.d/nginx configtest#1533781605/etc/init.d/nginx reload#1533784629/etc/init.d/nginx configtest#1533784631/etc/init.d/nginx reload#1533806772ll#1533806774cd ..#1533806775l#1533806776ll#1533806783cd ..#1533806785ll#1533806787ls#1533806806cd nginx/#1533806807ll#1533806812cd conf.d/#1533806812ll#1533806814ls#1533806822cat admin.storybook.conf #1533806857ll#1533806859ls#1533806871cat storybook.conf #1533808647ll#1533808649ls#1533808678cat storybook_ssl.conf#1533808693whereis static#1533808776grep -w static files#1533808899ll#1533808902cd ..#1533808903ll#1533808907ls#1533808908cd ..#1533808909ll#1533808911ls#1533809069cd nginx#1533809072ll#1533809108cat nginx.conf#1533809111ll#1533809131cd conf.d#1533809132ll#1533809135ls#1533809170cat admin.storybook.conf #1533809183static#1533809206find static#1533809216cat admin.storybook.conf #1533809219/static#1533809247ll#1533809249ls#1533809276cat img2.ifenghui.conf #1533809281ls#1533809292cat storybookbeta.conf #1533809353ls#1533809368cat storybook.conf #1533809454ls#1533809630cat storybook.conf #1533887216tail -f /var/log/nginx/log/storybook-host.access.log | grep sale#1534273361cd /etc/nginx/conf#1534273365cd /etc/nginx/conf.d/#1534273366ls#1534273377vi openvista.conf #1534352065טՊ#1534352070cd /etc/nginx/conf.d/#1534352070ls#1534352076vi openvista.conf #1534352134/etc/init.d/nginx configtest#1534352142/etc/init.d/nginx restart#1534404473ls#1534404481cd /etc/nginx/conf#1534404483cd /etc/nginx/conf.d/#1534404483ls#1534404495ll#1534404506cd storybookbeta.conf #1534404511vi storybookbeta.conf #1534404530ls#1534405021vi storybookbeta.conf #1534405026ls#1534405030vi storybook.conf #1534405092/etc/init.d/nginx configtest#1534405097/etc/init.d/nginx reload#1534405255vi storybook.conf #1534405276/etc/init.d/nginx configtest#1534405278/etc/init.d/nginx reload#1534405303vi storybook.conf #1534405384/etc/init.d/nginx configtest#1534405386/etc/init.d/nginx reload#1534406195cd /etc/nginx/#1534406195ll#1534406197cd conf.d/#1534406198ll#1534406202cat wx.storybook.ssl.conf #1534406216vi wx.storybook.ssl.conf #1534406288 /etc/init.d/nginx configtest#1534406299 /etc/init.d/nginx reload#1534406322cat wx.storybook.ssl.conf #1534406382 /etc/init.d/nginx configtest#1534406385 /etc/init.d/nginx reload#1534406568vi wx.storybook.ssl.conf #1534406617cat wx.storybook.ssl.conf #1534406655 /etc/init.d/nginx configtest#1534406657 /etc/init.d/nginx reload#1534406659cat wx.storybook.ssl.conf #1534407056 /etc/init.d/nginx configtest#1534407060 /etc/init.d/nginx reload#1534407099vi wx.storybook.ssl.conf #1534407122 /etc/init.d/nginx configtest#1534407124 /etc/init.d/nginx reload#1534407128cat wx.storybook.ssl.conf #1534413947vi wx.storybook.ssl.conf #1534413978cat wx.storybook.ssl.conf #1534413984 /etc/init.d/nginx configtest#1534413987 /etc/init.d/nginx reload#1534414599vi wx.storybook.ssl.conf #1534414628 /etc/init.d/nginx configtest#1534414630 /etc/init.d/nginx reload#1534414631 /etc/init.d/nginx configtest#1534414634 /etc/init.d/nginx reload#1534415192vi wx.storybook.ssl.conf #1534415255 /etc/init.d/nginx configtest#1534415258 /etc/init.d/nginx reload#1534415260 /etc/init.d/nginx configtest#1534415262 /etc/init.d/nginx reload#1534415489cat wx.storybook.ssl.conf #1534415920 /etc/init.d/nginx configtest#1534415924 /etc/init.d/nginx reload#1534416130 /etc/init.d/nginx configtest#1534416132 /etc/init.d/nginx reload#1534416133 /etc/init.d/nginx configtest#1534416135 /etc/init.d/nginx reload#1534416145cat wx.storybook.ssl.conf #1534425174cd /etc/nginx/#1534425178cd conf.d/#1534425179ll#1534425184cat wx.storybook.ssl.conf #1534403177cd /var/log/nginx/log/#1534403178ll#1534403192tail -f storybook-host.access.log #1534403210ll#1534403220tail -f storybookbeta-host.access.log #1534422924tail -f storybook-host.access.log #1534423343tail -f storybook-host.access.log | grep 6745#1534423733curl https://storybook.ifenghui.com/api/sharer/wxShare?userId=6745&amp;code=0118yeq71MSNaS1S3ds71sy3q718yeqs&amp;state=STATE#1534423743curl http://storybook.ifenghui.com/api/sharer/wxShare?userId=6745&amp;code=0118yeq71MSNaS1S3ds71sy3q718yeqs&amp;state=STATE#1534423803wget http://storybook.ifenghui.com/api/sharer/wxShare?userId=6745&amp;code=0118yeq71MSNaS1S3ds71sy3q718yeqs&amp;state=STATE ./a1#1534423809ls#1534423812cat a1#1534423825wget http://storybook.ifenghui.com/api/sharer/wxShare?userId=6745&amp;code=0118yeq71MSNaS1S3ds71sy3q718yeqs&amp;state=STATE ./a1.txt#1534423829ls#1534423832ll#1534423839cat wxShare\\?userId\\=6745#1534424704tail -f storybook-host.access.log | grep 6745#1534424711tail -f storybook-host.access.log #1534424768tail -f storybook-host.access.log #1534425999tail -f storybook-host.access.log | grep 6745#1534426010tail -f storybook-host.access.log#1534426020tail -f storybook-host.access.log | grep 500#1534427354tail -f storybook-host.access.log #1534428386tail -f storybook-host.access.log | grep pay_refund#1534423076tail -f /var/log/nginx/log/storybook-host.access.log #1534423107tail -f /var/log/nginx/log/storybook-host.access.log |grep c8bfd96336cd1f2e40c2f498558b4ba8#1534423509tail -f /var/log/nginx/log/storybook-host.access.log#1534423554tail -f /var/log/nginx/log/storybook-host.access.log |grep e1fc9115c8f0f75f1b28320834acb962#1534423626tail -f /var/log/nginx/log/storybook-host.access.log #1534423665tail -f /var/log/nginx/log/storybook-host.access.log |grep 91bfd0b54521a04be36886cef6df0947#1534423748tail -f /var/log/nginx/log/storybook-host.access.log#1534423781tail -f /var/log/nginx/log/storybook-host.access.log |grep d#1534423870tail -f /var/log/nginx/log/storybook-host.access.log |grep 91bfd0b54521a04be36886cef6df0947#1534423879tail -f /var/log/nginx/log/storybook-host.access.log#1534423893tail -f /var/log/nginx/log/storybook-host.access.log|grep d74fe4b4b85e37ca6d37f6f99a809e67#1534425943tail -f /var/log/nginx/log/storybook-host.access.log|grep 500#1534428627tail -f /var/log/nginx/log/storybook-host.access.log#1534428665docker ps#1534470961cd /etc/nginx/conf.d/#1534470962ls#1534470971cd /etc/logstash/conf.d/#1534470971ls#1534470974cd wish/#1534470974ls#1534470979cat mysql_bbs.sql #1534470989ls#1534470991cd ..#1534470991ls#1534470999vi logstash.conf #1534471033ls#1534471037vi logstash-liucun.conf #1534471088ls#1534471090cd wish/#1534471090ls#1534471096cat wish_follow.sql #1534498467cd /var/log/nginx/log/admin-storybook-host.access.log |grep /order/user/settestmember#1534498472cd /var/log/nginx/log/admin-storybook-host.access.log |grep settestmember#1534498478cat /var/log/nginx/log/admin-storybook-host.access.log |grep settestmember#1534498487cat /var/log/nginx/log/admin-storybook-host.access.log |grep settestmember|grep POST#1534499342ls#1534499345pwd#1534499375cd /var/log/nginx/log/storybook#1534499375ls#1534499392cat storybook-host_2018-08-16.log |grep BOOK_6150#1534499432cat storybook-host_2018-08-16.log |grep mtkA#1534499435cat storybook-host_2018-08-16.log |grep mtk#1534499441cat storybook-host_2018-08-16.log #1534499454cat storybook-host_2018-08-16.log |ali#1534499458cat storybook-host_2018-08-16.log |grep ali#1534499556cat storybook-host_2018-08-16.log |grep BOOK#1534499633cat storybook-host_2018-08-16.log |grep BOOK_6#1534499637cat storybook-host_2018-08-15.log |grep BOOK_6#1534487719tail -f /var/log/nginx/log/storybook-host.access.log #1534588946cd /var/log/nginx/log/#1534588947ll#1534588967tail -f storybook-host.access.log #1534589281tail -f storybook-host.access.log | grep sale#1534639124/etc/init.d/nginx configtest#1534639129/etc/init.d/nginx reload#1534727944tail -f /var/log/nginx/log/storybook-host.access.log #1534728091ls#1534728094cd ..#1534728094ls#1534728110vi /etc/nginx/conf.d/storybook.conf #1534728191docker ps#1534728504ls#1534728543vi /etc/nginx/conf.d/storybook.conf #1534728585/etc/init.d/nginx configtest#1534728588/etc/init.d/nginx reload#1534730056curl 10.142.160.202//apiweb/js/shipsdk/demo.html#1534730059curl 10.142.160.202/apiweb/js/shipsdk/demo.html#1534730247ls#1534730255vi /etc/nginx/conf.d/storybook.conf #1534730276/etc/init.d/nginx configtest&#x27;#1534730279/etc/init.d/nginx configtest#1534730284/etc/init.d/nginx reload#1534990274cd //etc/nginx/conf.d/#1534990274ls#1534990300vi admin.storybook.conf #1534990365/etc/init.d/nginx configtest#1534990368/etc/init.d/nginx reload#1535013457cd /etc/nginx/conf#1535013459cd /etc/nginx/conf.d/#1535013460ls#1535013472vi wx.storybook.conf #1535013478vi wx.storybook.ssl.conf #1535004446cd /data/opt#1535004451cd /opt/#1535004452ll#1535008451cd /etc/nginx/nginx.conf #1535008457cd /etc/#1535008457ll#1535008461cd nginx/#1535008462ll#1535008468cat nginx.conf #1535008480cd conf.d/#1535008481ll#1535008485cat wish.conf#1535008538ll#1535008545cat storybook.conf #1535008769vi storybook.conf #1535008841cat storybook.conf #1535008876/etc/init.d/nginx configtest#1535008889/etc/init.d/nginx reload#1535009218cat storybook.conf #1535011861vi storybook.conf #1535012026cat storybook.conf #1535012035/etc/init.d/nginx configtest#1535012039/etc/init.d/nginx reload#1535013959ll#1535013973cat wx.storybook.ssl.conf #1535012798cd /var/log/nginx/#1535012799ll#1535012801cd log/#1535012802ll#1535012816tail -f storybook-host.access.log #1535012825tail -f storybook-host.access.log | gerp fenxiao#1535012835tail -f storybook-host.access.log | grep fenxiao#1535013216tail -f storybook-host.access.log | grep get_award#1535013259ll#1535013277tail -f storybook-host.access.log | grep get_award#1535436873tail -f /var/log/nginx/log/storybook-host.access.log #1535436890tail -f /var/log/nginx/log/storybook-host.access.log |grep fenxiao#1535438108cd /etc/nginx/conf.d/#1535438109ls#1535438132vi storyship.conf #1535438219/etc/init.d/nginx configtest#1535438223/etc/init.d/nginx reload#1535438243q#1535438244ls#1535438251cd storybook.conf #1535438254vi storybook.conf #1535438282/etc/init.d/nginx configtest#1535438285/etc/init.d/nginx reload#1535425303cd /etc/nginx/#1535425303ll#1535425306cd conf.d/#1535425307ll#1535425313cat storybook.conf #1535467614tail -f /var/log/nginx/log/wish-host.access.log #1535467619tail -f /var/log/nginx/log/wish-host.access.log |grep v2#1535468723tail -f /var/log/nginx/log/fenxiao-host-ssl.access.log #1535507862传递#1535507870cd /var/log/nginx/log/#1535507871ls#1535507894cat storybook-host.access.log |grep tradeno_226#1535528760cd /data/www#1535528790cd /var/log/nginx/log/#1535528790ls#1535528803cat 215-host.access.log #1535528816tail -f 215-host.access.log #1535528827tail -f 215.videoapi.access.log #1535528849cat 215.videoapi.access.log |grep 758574#1535529288cat wish-host.access.log |grep 758574#1535529926cat wish-host.access.log |grep deleteStatus#1535529965cat wish-host.access.log |grep 758574#1535529974cat wish-host.access.log |grep 106.11.144.140#1535529983cat wish-host.access.log |grep 758574#1535529993cat wish-host.access.log |grep 106.11.144.140#1535530358cat wish-host.access.log |grep 758574#1535530961tail -f /var/log/nginx/log/storybook-host.access.log |grep fenxiao#1536043329ip#1536043333dongman.ifenghui.com#1536043341vnstat -l -i eth#1536043342vnstat -l -i eth1#1536043434vnstat -d -i eth1#1536049848cd /etc/nginx/conf#1536049849ls#1536049852cd /etc/nginx/conf.d/#1536049852ls#1536049903cd dongman.conf#1536049907vi dongman.conf#1536049934vi fenghuicomic.conf #1536050006/etc/init.d/nginx configtest#1536050009/etc/init.d/nginx reload#1536050034vnstat -l -i eth1#1536050272vi fenghuicomic.conf #1536050312/etc/init.d/nginx configtest#1536050315/etc/init.d/nginx reload#1536050351tail -f /var/log/nginx/error.log#1536050385tail -f /var/log/nginx/log/www.ifenghui.com-host.access.log #1536050406ls#1536050414vi dongman.conf#1536050423ls#1536050435ll |grep tv#1536050437ll#1536050442ll|grep help#1536050446ll|grep tv#1536050453ll|grep fenghui#1536050462ll|grep dm#1536050475ll|grep dongman#1536050479vi dongman.conf#1536050566vi fenghuicomic.conf #1536050617/etc/init.d/nginx configtest#1536050622/etc/init.d/nginx reload#1536050629/etc/init.d/nginx restart#1536050648vi fenghuicomic.conf #1536050681/etc/init.d/nginx reload#1536050688vi fenghuicomic.conf #1536050780/etc/init.d/nginx configtest#1536050784/etc/init.d/nginx reload#1536050790vi fenghuicomic.conf #1536112564cd /etc/nginx/#1536112566ll#1536112568cd conf.d/#1536112570ll#1536112577cat storybook.conf #1536127858vi storybook.conf #1536127993/etc/init.d/nginx configtest#1536128006/etc/init.d/nginx reload#1536125774nethogs eth0 #1536125781nethogs eth1#1536282987ԉ֊#1536282989ɣd#1536282994cd /etc/nginx/conf.d/#1536282994ls#1536283005vi fenghuicomic.conf #1536283021/etc/init.d/nginx configtest#1536283025/etc/init.d/nginx reload#1536310866cd /etc/nginx/conf.d/#1536310867ls#1536310878vi dongman.conf#1536311005q#1536311006ls#1536311012vi storyship.conf #1536320346tail -f /var/log/nginx/log/#1536320361tail -f /var/log/nginx/log/storybook-host.access.log #1536320416tail -f /var/log/nginx/log/storybook-host.access.log| grep xiaochengxu #1536318601tail -f /var/log/nginx/log/storybook-host.access.log #1536318710tail -f /var/log/nginx/log/storybook-host.access.log |grep audio#1536319037tail -f /var/log/nginx/log/storybook-host.access.log |grep story#1536319069tail -f /var/log/nginx/log/storybook-host.access.log |grep scroll#1536319615tail -f /var/log/nginx/log/storybook-host.access.log |grep read_fin#1536321017tail -f /var/log/nginx/log/storybook-host.access.log |grep audio#1536321165tail -f /var/log/nginx/log/storybook-host.access.log |grep read_fin#1536399280̫#1536399282ܴail #1536399296tail -f /var/log/nginx/log/storybook-host.access.log #1536399443df#1536399447cd /etc/nginx/conf#1536399449cd /etc/nginx/conf.d#1536399449ls#1536399453vi storybook.conf #1536399484/etc/init.d/nginx configtest#1536399489/etc/init.d/nginx restart#1536399532vi storybook.conf #1536544213cd /etc/nginx/conf.d/#1536544214ls#1536544242vi openvista.conf #1536543842cd /etc/nginx/conf.d/#1536543843ls#1536654507cd /var/log/nginx#1536654508ls#1536654511cd log#1536654511ls#1536654642tail -f ./215.videoapi.access.log |grep 789929#1536654653cat ./215.videoapi.access.log |grep 789929#1536654658ls#1536654667cd wish#1536654667ls#1536654675cd ../#1536654720ls#1536654722cd wish#1536654722ls#1536654738cat ./wish-host_2018-09-10.log |grep 789929#1536655020cat ./wish-host_2018-09-10.log |grep count=-#1536657103cat ./wish-host_2018-09-01.log |grep count=-#1536661063tail -f /var/log/nginx/log/storybook-host.access.log #1536804072cd /var/log/nginx/log/#1536804073ll#1536808814cd /data/www/#1536808816lll#1536808820cd /data#1536808821;;#1536808823lll#1536808824ll#1536808827cd /data#1537186189tail -f /var/log/nginx/log/storybook-host.access.log |grep 500#1537186215tail -f /var/log/nginx/log/storybook-host.access.log #1537186985tail -f /var/log/nginx/log/storybook-host.access.log |grep fenxiao#1537244907tail -f /var/log/nginx/log/storybook-host.access.log |grep SE#1537264576tail -f /var/log/nginx/log/storybook-host.access.log #1537492758ԉ֊#1537492760ɣd #1537492781cd /var/log/nginx/#1537492787ls#1537492789cd log/#1537492793cd storybook#1537492793ls#1537492807cat storybook-host_2018-09-20.log |grep xiaochengxu#1537492923cat storybook-host_2018-09-20.log |grep xiaochengxu|grep HUAWEINEO#1537493046cat storybook-host_2018-09-20.log |grep xiaochengxu|grep 500#1537493064cat storybook-host_2018-09-20.log |grep xiaochengxu|grep HUAWEINEO#1537492688cd /var/log/nginx/#1537492690cd log/#1537492722tail -f storybook-host.access.log | grep my_coupons#1537720162cd /var/log/nginx/log/#1537720163ls#1537720166cd wish#1537720167ls#1537720181cat wish-host_2018-09-22.log |grep trans#1537720195cat wish-host_2018-09-22.log |grep giftPayByFhCoin#1537720751cat wish-host_2018-09-22.log |grep addStatusTradeCreate#1537720804cat wish-host_2018-09-22.log |grep sendRedPacket#1537721828cat wish-host_2018-09-22.log |grep addStatusTradeCreate#1537721843cat wish-host_2018-09-22.log |grep trans|grep POST#1537721864cat wish-host_2018-09-22.log |grep 803895|grep POST#1537721869cat wish-host_2018-09-21.log |grep 803895|grep POST#1537721881cat wish-host_2018-09-20.log |grep 803895|grep POST#1537721893cat wish-host_2018-09-20.log |grep 803895#1537721908cat wish-host_2018-09-2*.log |grep 803895#1537721914cat wish-host_2018-09-2*.log |grep 803895|grep POST#1537721925cat wish-host_2018-09-*.log |grep 803895|grep POST#1537928993tail -f /var/log/nginx/log/storybook-host.access.log #1537930691/sale/experience/get_experience_status?token=3acb3c54e5511c822599bf3fce387c46&amp;activityId=3&amp;tt=1537929045981#1537930696tail -f /var/log/nginx/log/storybook-host.access.log #1537965988cd /etc/nginx/conf.d/#1537965988ls#1538032552cd /etc/nginx/conf.d/#1538032552ls#1538032555cd ..#1538032555ls#1538032558vi nginx.conf #1538120182tail -f /var/lo#1538120211tail -f /var/log/nginx/log/storybook-host.access.log #1538120332tail -f /var/log/nginx/log/storybook-host.access.log |grep apiweb#1538187091tail -f /var/log/nginx/log/storybook-host.access.log #1538187113cat /var/log/nginx/log/storybook-host.access.log |grep 24e#1538187116cat /var/log/nginx/log/storybook-host.access.log |grep 24e160#1538187195%0A#1538187237cat /var/log/nginx/log/storybook-host.access.log |grep cln#1538187245tail -f /var/log/nginx/log/storybook-host.access.log |grep cln#1538187585cat /var/log/nginx/log/storybook-host.access.log |grep 24e160#1538187593tail -f /var/log/nginx/log/storybook-host.access.log |grep 24e160#1538208774df#1538208776top#1538285244tail -f /var/log/nginx/log/wish-host.access.log #1538285252tail -f /var/log/nginx/log/wish-host.access.log |grep 500#1538285259cat /var/log/nginx/log/wish-host.access.log |grep 500#1538285268cat /var/log/nginx/log/wish-host.access.log |grep 500|grep POST#1538285288cat /var/log/nginx/log/wish-host.access.log |grep &quot; 500 &quot;|grep POST#1538285357cat /var/log/nginx/log/wish-host.access.log |grep &quot; price &quot;|grep POST#1538285363cat /var/log/nginx/log/wish-host.access.log |grep &quot;price&quot;|grep POST#1538285383cat /var/log/nginx/log/wish-host.access.log |grep &quot;Price&quot;|grep POST#1538293018Ӂͷ#1538293032cat /var/log/nginx/log/wish-host.access.log |grep 58391b678a2d4bd60124a224c992ef66#1538293045cat /var/log/nginx/log/wish-host.access.log |grep 58391b678a2d4bd60124a224c992ef66 |grep POST#1538293054cat /var/log/nginx/log/wish-host.access.log |grep 58391b678a2d4bd60124a224c992ef66 |grep add#1538293061cat /var/log/nginx/log/wish-host.access.log |grep 58391b678a2d4bd60124a224c992ef66 |grep Price#1538293080cat /var/log/nginx/log/wish-host.access.log |grep 58391b678a2d4bd60124a224c992ef66 |grep Price|grep add#1538293083cat /var/log/nginx/log/wish-host.access.log |grep 58391b678a2d4bd60124a224c992ef66 |grep Price|grep POST#1538293514cat /var/log/nginx/log/wish-host.access.log |grep 58391b678a2d4bd60124a224c992ef66 |grep addStatusTradeApply#1538293545cat /var/log/nginx/log/wish/wish-host_2018-09-* |grep 58391b678a2d4bd60124a224c992ef66 |grep addStatusTradeApply#1538294546tail -f /var/log/nginx/log/storybook-host.access.log |grep addStatusTradeApply#1538294584tail -f /var/log/nginx/log/wish-host.access.log |grep addStatusTradeApply#1538364215tail -f /var/log/nginx/log/storybook-host.access.log |grep plan#1538824030tail -f /var/log/nginx/log/wish-host.access.log #1538824035tail -f /var/log/nginx/log/wish-host.access.log |gerp v2#1538824041tail -f /var/log/nginx/log/wish-host.access.log |grep v2#1538824696cd /etc/nginx/conf.d/#1538824696ls#1538824712vi wish.conf#1538824817/etc/init.d/nginx configtest#1538824906vi wish.conf#1538825427/etc/init.d/nginx configtest#1538825432/etc/init.d/nginx reload#1538825635vi wish.conf#1538825651/etc/init.d/nginx configtest#1538825655/etc/init.d/nginx restart#1538825818vi wish.conf#1538825865/etc/init.d/nginx configtest#1538825871/etc/init.d/nginx reload#1538825993ls#1538825996vi wish.conf#1538826047/etc/init.d/nginx configtest#1538826059/etc/init.d/nginx reload#1538826085vi wish.conf#1538826119/etc/init.d/nginx configtest#1538826123/etc/init.d/nginx reload#1538826392vi wish.conf#1538826476/etc/init.d/nginx configtest#1538826479/etc/init.d/nginx reload#1538826499vi wish.conf#1538826634/etc/init.d/nginx configtest#1538826637/etc/init.d/nginx reload#1538826662vi wish.conf#1538826692/etc/init.d/nginx configtest#1538826693/etc/init.d/nginx reload#1538826888/etc/init.d/nginx configtest#1538826891vi wish.conf#1538826951/etc/init.d/nginx configtest#1538826955/etc/init.d/nginx reload#1538826964vi wish.conf#1538826992/etc/init.d/nginx configtest#1538826994/etc/init.d/nginx reload#1538827176vi wish.conf#1538827631/etc/init.d/nginx configtest#1538827636/etc/init.d/nginx reload#1538827675vi wish.conf#1538827771/etc/init.d/nginx configtest#1538827773/etc/init.d/nginx reload#1538828033vi wish.conf#1538828107/etc/init.d/nginx configtest#1538828113/etc/init.d/nginx reload#1538828143vi wish.conf#1538828304/etc/init.d/nginx configtest#1538828306/etc/init.d/nginx reload#1538828347vi wish.conf#1538828362/etc/init.d/nginx configtest#1538828364/etc/init.d/nginx reload#1538828744vi wish.conf#1538828772/etc/init.d/nginx configtest#1538828774/etc/init.d/nginx reload#1538828850vi wish.conf#1538828867/etc/init.d/nginx configtest#1538828869/etc/init.d/nginx reload#1538828904vi wish.conf#1538828944/etc/init.d/nginx configtest#1538828947/etc/init.d/nginx reload#1538829458vi wish.conf#1538829553/etc/init.d/nginx configtest#1538829556/etc/init.d/nginx reload#1538829588vi wish.conf#1538829615/etc/init.d/nginx configtest#1538829617/etc/init.d/nginx reload#1538829776vi wish.conf#1538829801/etc/init.d/nginx configtest#1538829803/etc/init.d/nginx reload#1538850252vi wish.conf#1538850262cd /etc/nginx/conf.d/#1538850263vi wish.conf#1538825035tail -f /var/log/nginx/log/wish-host.access.log #1538825039tail -f /var/log/nginx/log/wish-host.access.log |grep User#1538825603ls#1538825610cd /etc/nginx/conf.d/#1538825610ls#1538825614vi dongman.conf#1538825673tail -f /var/log/nginx/log/#1538825980vi img2.ifenghui.conf #1538826716top#1538827517ls#1538827523vi dongman.conf#1538828402tail -f /var/log/nginx/log/wish-host.access.log |grep 2get#1538828664tail -f /var/log/nginx/log/wish-host.access.log |grep User#1538828668tail -f /var/log/nginx/log/wish-host.access.log |grep Home#1538829089tail -f /var/log/nginx/log/wish-host.access.log |grep v2#1538829140tail -f /var/log/nginx/log/wish-host.access.log |grep getHotRecommend#1538829199tail -f /var/log/nginx/log/wish-host.access.log |grep v2#1538829564tail -f /var/log/nginx/log/wish-host.access.log |grep getNewLabelWorks#1538830365tail -f /var/log/nginx/log/wish-host.access.log |grep v2#1538840717tail -f /var/log/nginx/log/wish-host.access.log |grep addTaskValue#1538841628tail -f /var/log/nginx/log/wish-host.access.log |grep v2|grep POST#1538852389tail -f /var/log/nginx/log/wish-host.access.log |grep v2|grep GET#1539048543tail -f /var/log/nginx/log/storybook-host.access.log #1539048551tail -f /var/log/nginx/log/storybook-host.access.log |grep GET#1539051039tail -f /var/log/nginx/log/storybook-host.access.log |grep 3acb3c54e5511c822599bf3fce387c46#1539053957tail -f /var/log/nginx/log/storybook-host.access.log #1539053971tail -f /var/log/nginx/log/storybook-host.access.log |grep SE#1539313902tail -f /var/log/nginx/log/storybookbeta-host.access.log #1539313983 cd /etc/nginx/conf.d/#1539313984ls#1539314036vi storybookbeta.conf #1539320520cd /etc/nginx/conf.d/#1539320532cd /var/log/nginx/log/storybook#1539320533ls#1539320547cat * |grep addDayTaskRecord#1539320588cat storybook-host_2018-06-* |grep &quot;/api/task&quot;#1539320600cat storybook-host_2018-07-* |grep &quot;/api/task&quot;#1539320609cat storybook-host_2018-08-* |grep &quot;/api/task&quot;#1539320632cat storybook-host_2018-08-* |grep &quot;getDayTask&quot;#1539320637cat storybook-host_2018-06-* |grep &quot;getDayTask&quot;#1539320655cat storybook-host_2018-05-* |grep &quot;getDayTask&quot;#1539320734cat storybook-host_2018-06-* |grep &quot;getDayTask&quot;#1539320740cat storybook-host_2018-07-* |grep &quot;getDayTask&quot;#1539320780cat storybook-host_2018-07-* |grep &quot;addDayTaskRecord&quot;#1539320785cat storybook-host_2018-06-* |grep &quot;addDayTaskRecord&quot;#1539321011cd ..#1539321132tail -f /var/log/nginx/log/storybook-host.access.log #1539321152tail -f /var/log/nginx/log/storybook-host.access.log |grep SE#1539320430crontab -e#1539326127crontab -e#1539330802cd /var/log/nginx/log/wish#1539330802ls#1539330813cat wish-host_2018-10-11.log |grep 7c5d5caba4abd0b96c471decdf132980#1539330855cat wish-host_2018-10-11.log |grep 7c5d5caba4abd0b96c471decdf132980 &gt;&gt;z1.log#1539330857ls#1539330865cat z1.log |grep like#1539330893cat z1.log |grep 794993#1539330922cat z1.log |grep &quot;2018:22&quot;#1539330944cat z1.log |grep &quot;2018:22:3&quot;#1539330975cat z1.log |grep &quot;2018:22:3&quot; &gt;&gt;z2.log#1539330981vi z2.log #1539339550cd /var/log/nginx/log/#1539339551ll#1539339581tail -f storybook-host.access.log #1539339641tail -f storybook-host.access.log | grep setting#1539341745tail -f /var/log/nginx/log/wish-host.access.log |grep SE#1539341825cat /var/log/nginx/log/wish-host.access.log |grep 521120#1539341837cat /var/log/nginx/log/wish-host.access.log |grep 5c27f129ddbaff174554f85d17abe6e1|grep sign#1539341875cd /var/log/nginx/log/wish#1539341875ls#1539341919cat ./wish-host_2018-09-*.log |grep 5c27f129ddbaff174554f85d17abe6e1|grep sign#1539341972cat ./wish-host_2018-09-*.log |grep 521120|grep sign#1539574961tail -f /var/log/nginx/log/wish-host.access.log #1539575616tail -f /var/log/nginx/log/wish-host.access.log |grep userTradeProtocol#1539591570cd /var/log/nginx/log/storybook#1539591571ls#1539591581cat storybook-host_2018-10-*|grep addActivityViewRecord#1539597454cd /var/log/nginx/log/storybook/storybook-host_2018-10-*.log|grep &quot;1.6&quot;#1539597462cd /var/log/nginx/log/storybook#1539597475cat ./storybook-host_2018-10-*.log|grep &quot;1.6&quot;#1539597493cat ./storybook-host_2018-10-*.log|grep &quot;version:1.6&quot;#1539597978cat ./storybook-host_2018-10-*.log|grep &quot;version:1.3&quot;#1539597982cat ./storybook-host_2018-10-*.log|grep &quot;version:1.6&quot;#1539598024cat ./storybook-host_2018-10-*.log|grep &quot;1.6.6&quot;#1539598053cat ./storybook-host_2018-10-*.log|grep &quot;1.6.&quot;#1539598153cat ./storybook-host_2018-10-*.log|grep &quot;storyship/1.6&quot;#1539602554tail -f /var/log/nginx/log/storybook-host.access.log |grep apiweb#1539602569tail -f /var/log/nginx/log/storybook-host.access.log |grep html#1539602626tail -f /var/log/nginx/log/storybook-host.access.log #1539602673tail -f /var/log/nginx/log/storybook-host.access.log |grep html#1539657193tail -f /var/log/nginx/log/storybook-host.access.log #1539657335cd /var/log/nginx/log/#1539657337cd storybook#1539657338ls#1539657361cat storybook-host_2017-09-*|grep getIndex#1539657377cat storybook-host_2017-09-*|grep &quot;getIndex?&quot;#1539670490crontab -e#1539670524cat /chrootnas/storybook/log_nginx.sh#1539670817crontab -e#1539670830cat /chroot/howToUse/osslog.sh#1539680986cd /var/log/nginx/log/storybook#1539680986ls#1539681008cat storybook-host_2018-09-* |grep &quot;1.3.1&quot;#1539681032cat storybook-host_2018-09-* |grep &quot;1\\.3\\.1&quot;#1539681042cat storybook-host_2018-09-* |grep &quot;:1\\.3\\.1&quot;#1539681055cat storybook-host_2018-09-* |grep &quot;:1\\.3\\.0&quot;#1539681064cat storybook-host_2018-09-* |grep &quot;:1\\.3&quot;#1539681077cat storybook-host_2018-09-* |grep &quot;:1\\.3.\\2&quot;#1539681082cat storybook-host_2018-09-* |grep &quot;:1\\.3\\.2&quot;#1539681115cat storybook-host_2018-09-* |grep &quot;:1\\.3&quot;#1539681125cat storybook-host_2018-09-* |grep &quot;:1\\.2&quot;#1539681133cat storybook-host_2018-09-* |grep &quot;:1\\.4&quot;#1539681227cat storybook-host_2018-10-* |grep &quot;:1\\.4&quot;#1539681232cat storybook-host_2018-10-* |grep &quot;:1\\.3&quot;#1539681392cat storybook-host_2018-10-* |grep &quot;:1\\.5&quot;#1539681396cat storybook-host_2018-10-* |grep &quot;:1\\.6&quot;#1539681586cat storybook-host_2018-10-* |grep &quot;:1\\.5&quot;#1539681591cat storybook-host_2018-09-* |grep &quot;:1\\.5&quot;#1539682182cd ..#1539682219cd storybook#1539682225cat storybook-host_2018-09-* |grep &quot;getIndexGroupMore&quot;#1539683712cat storybook-host_2018-09-* |grep addUserNewMagazineBuyRecord#1539683719cat storybook-host_2018-06-* |grep addUserNewMagazineBuyRecord#1539683726cat storybook-host_2018-07-* |grep addUserNewMagazineBuyRecord#1539683755cat storybook-host_2018-08-* |grep addUserNewMagazineBuyRecord#1539683792cat storybook-host_2018-09-* |grep addUserNewMagazineBuyRecord#1539683961cat storybook-host_2018-09-* |grep getMoreStorys#1539683980cat storybook-host_2018-10-* |grep getMoreStorys#1539684139cat storybook-host_2018-07-* |grep getMoreStorys#1539684169cat storybook-host_2018-05-* |grep getMoreStorys#1539684206cat storybook-host_2018-04-* |grep getMoreStorys#1539684219ls#1539684224cat storybook-host_2018-03-* |grep getMoreStorys#1539684288cat storybook-host_2018-02-* |grep getMoreStorys#1539684395cat storybook-host_2018-02-* |grep getMoreUserBuyStorys#1539684401cat storybook-host_2018-08-* |grep getMoreUserBuyStorys#1539684455cat storybook-host_2018-07-* |grep getMoreUserBuyStorys#1539684547cat storybook-host_2018-06-* |grep getMoreUserBuyStorys#1539684561cat storybook-host_2018-05-* |grep getMoreUserBuyStorys#1539684760cat storybook-host_2018-09-* |grep user_has_buy_story_lesson#1539684804cat storybook-host_2018-09-* |grep getStoryBookDetail#1539684852cat storybook-host_2018-09-* |grep getSubscriptionSchedules#1539684882cat storybook-host_2018-09-* |grep getUserLastSubscribeInfo#1539684887cat storybook-host_2018-08-* |grep getUserLastSubscribeInfo#1539684906cat storybook-host_2018-07-* |grep getUserLastSubscribeInfo#1539684929cat storybook-host_2018-06-* |grep getUserLastSubscribeInfo#1539684957cat storybook-host_2018-05-* |grep getUserLastSubscribeInfo#1539684997cat storybook-host_2018-05-* |grep getUserStorys#1539685040cat storybook-host_2018-05-* |grep user_has_buy_storys#1539685064cat storybook-host_2018-09-* |grep user_has_buy_storys#1539685072cat storybook-host_2018-09-* |grep getUserStorys#1539685701cat storybook-host_2018-09-* |grep user_has_buy_story_lesson#1539685786cat storybook-host_2018-09-* |grep new_group_story_list#1539685810cat storybook-host_2018-09-* |grep getStorysByPublishDate#1539685839cat storybook-host_2018-08-* |grep getStorysByPublishDate#1539685910cat storybook-host_2018-07-* |grep getStorysByPublishDate#1539685916cat storybook-host_2018-06-* |grep getStorysByPublishDate#1539685920cat storybook-host_2018-05-* |grep getStorysByPublishDate#1539686021cat storybook-host_2018-05-* |grep user_has_buy_storys#1539756673cd /var/log/nginx/log/#1539756694cat storybook-host.access.log |grep &quot;code=&quot;#1539756704cat storybook-host.access.log |grep POST|grep &quot;code=&quot;#1539756767cat storybook-host.access.log |grep POST|grep &quot;vip&quot;#1539756820cat storybook-host.access.log |grep POST|grep &quot;d09dc6b3&quot;#1539756828cat storybook-host.access.log |grep POST|grep &quot;537251b2&quot;#1539756847cat storybook-host.access.log |grep POST|grep &quot;773597b1&quot;#1539756862cd storybook#1539756862ls#1539756875cat storybook-host_2018-10-*|grep d09dc6b3#1539759549tail -f /var/log/nginx/log/storybook-host.access.log #1539759554tail -f /var/log/nginx/log/storybook-host.access.log |grep SE#1539833555crontab -e#1539841507ܴail #1539841519tail -f /var/log/nginx/log/wish-host.access.log #1539841547tail -f /var/log/nginx/log/storybook-host.access.log #1539841559ls#1539841655tail -f /var/log/nginx/log/img2.ifenghui.com.access.log #1540134159tail -f /var/log/nginx/log/storybook-host.access.log #1540134165tail -f /var/log/nginx/log/storybook-host.access.log |grep SE#1540134202tail -f /var/log/nginx/log/storybookbeta-host.access.log #1540134213tail -f /var/log/nginx/log/storybook-host.access.log #1540257785cd /var/log/nginx/log/#1540257786ls#1540257798cat storybook-host.access.log |grep getIndex260#1540257964cat storybook-host.access.log |grep getIndex260|grep iPad#1540344150cd /var/log/nginx/log/#1540344151ls#1540344161cat storybook-host.access.log |grep getIndex#1540344170cat storybook-host.access.log |grep getIndex|grep iPad#1540344255cat storybook-host.access.log |grep &quot;17.200.11.44&quot;#1540350012cd /var/log/nginx/log/#1540350012ls#1540350022cat storybook-host.access.log |grep cb8976fd2c7defeb858dfde2e3387107#1540367298tail -f /var/log/nginx/log/storybook-host.access.log #1540367379tail -f /var/log/nginx/log/storybook-host.access.log |httpimeout#1540367386tail -f /var/log/nginx/log/storybook-host.access.log |grep httpTimeout#1540354052cd /data/#1540354053ll#1540354057cd /data#1540373944tail -f /var/log/nginx/log/storybook-host.access.log #1540373961tail -f /var/log/nginx/log/storybook-host.access.log |grep httpTimeout#1540438022tail -f /var/log/nginx/log/storybook-host.access.log #1540453120cd /etc/nginx/#1540453121ll#1540453125cd conf.d/#1540453125ll#1540453135cat storybook.conf #1540453150ll#1540453155cat storybook_ssl.conf#1540453167ll#1540453185cat storybook.conf #1540468286cd /var/log/nginx/log/#1540468287ll#1540468299tail -f storybook-host.access.log #1540468328tail -f storybook-host.access.log | grep fenxiao#1540647488ta#1540647678tail -f /var/log/nginx/log/openvista-host.access.log |grep &quot;&quot;#1540647707tail -f /var/log/nginx/log/openvista-host.access.log |grep 69203#1540647718cat /var/log/nginx/log/openvista-host.access.log |grep 69203#1540647745cat /var/log/nginx/log/openvista-host.access.log |grep &quot;113.45.64.42&quot;#1540647753tail -f /var/log/nginx/log/openvista-host.access.log |grep &quot;113.45.64.42&quot;#1540776362cat /var/log/nginx/log/storybook/storybook-host_2018-10-28.log |grep timeout#1540776366cat /var/log/nginx/log/storybook/storybook-host_2018-10-28.log |grep http#1540776380cat /var/log/nginx/log/storybook/storybook-host_2018-10-28.log |grep httpTimeout#1540776443cat /var/log/nginx/log/storybook/storybook-host_2018-10-27.log |grep httpTimeout#1540776253cd /var/log/nginx/#1540776254ll#1540776257cd log#1540776258ll#1540776283tail -f wish-host.access.log","categories":[],"tags":[{"name":"logstash","slug":"logstash","permalink":"http://example.com/tags/logstash/"}]},{"title":"history_log","slug":"logstash","date":"2018-10-05T13:20:36.000Z","updated":"2021-09-22T11:19:04.635Z","comments":true,"path":"2018/10/05/logstash/","link":"","permalink":"http://example.com/2018/10/05/logstash/","excerpt":"","text":"历史命令 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283#1510218262yum install logstash#1510218346rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch#1510218356vim /etc/yum.repos.d/logstash.repo#1510218372yum install logstash#1510218681cd /usr/share/logstash#1510218687bin/logstash -e &#x27;input &#123; stdin &#123; &#125; &#125; output &#123; stdout &#123;&#125; &#125;&#x27;#1510307446vi logstash.sh#1510307465/usr/share/logstash/bin/logstash#1510307687 /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/#1510307813 /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/*#1510307866curl 10.xxx.xxx.xx:9200#1510307877curl xx7.xxx.xxx:9200#1510307899curl 10.xx.xx.xx:9200#1510308205 /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf #1510308324chmod 777 logstash.sh #1510469676yum list logstash#1510469733yum update logstash#1510477851ps -ef|grep logstash#1512030585tail -f /var/log/logstash/logstash.log #1512030585tail -f /var/log/logstash/logstash.log #1512037847vi /etc/logstash/patterns/nginx #1512037847vi /etc/logstash/patterns/nginx #1512042051nohup /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf &amp;#1512042051nohup /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf &amp;#1512042057tail -f nohup.out #1512042313nohup /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf &amp;&gt;/dev/null &amp;#1515748682/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf","categories":[],"tags":[{"name":"logstash","slug":"logstash","permalink":"http://example.com/tags/logstash/"}]},{"title":"patterns","slug":"design/patterns","date":"2018-10-05T13:20:36.000Z","updated":"2021-09-22T11:19:04.613Z","comments":true,"path":"2018/10/05/design/patterns/","link":"","permalink":"http://example.com/2018/10/05/design/patterns/","excerpt":"","text":"patterns /etc/nginx/patterns 123NGINXACCESS %&#123;COMBINEDAPACHELOG&#125; &quot;(%&#123;IP:x_forword_for&#125;|-)&quot; &quot;(%&#123;BASE16FLOAT:request_time&#125;|0)&quot; \\&quot;(%&#123;GREEDYDATA:request_body&#125;|-)\\&quot; &quot;(%&#123;WORD:fToken&#125;|-)&quot; &quot;(%&#123;WORD:token&#125;|-)&quot; &quot;(%&#123;DATA:channel&#125;|-)&quot;NGINXACCESS2 %&#123;COMBINEDAPACHELOG&#125; &quot;(%&#123;WORD:x_forword_for&#125;|-)&quot; &quot;(%&#123;BASE16FLOAT:request_time&#125;|-)&quot; &quot;(%&#123;WORD:request_body&#125;|-)&quot; &quot;(%&#123;WORD:fToken&#125;|-)&quot; &quot;(%&#123;WORD:token&#125;|-)&quot; &quot;(%&#123;WORD:channel&#125;|-)&quot;","categories":[],"tags":[{"name":"logstash","slug":"logstash","permalink":"http://example.com/tags/logstash/"}]},{"title":"设计模式-观察者","slug":"design/observer","date":"2018-10-03T13:12:36.000Z","updated":"2021-09-22T11:19:04.613Z","comments":true,"path":"2018/10/03/design/observer/","link":"","permalink":"http://example.com/2018/10/03/design/observer/","excerpt":"","text":"设计模式-观察者 http://www.runoob.com/design-pattern/observer-pattern.html 定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。 使用场景： 一个抽象模型有两个方面，其中一个方面依赖于另一个方面。将这些方面封装在独立的对象中使它们可以各自独立地改变和复用。 一个对象的改变将导致其他一个或多个对象也发生改变，而不知道具体有多少对象将发生改变，可以降低对象之间的耦合度。 一个对象必须通知其他对象，而并不知道这些对象是谁。 需要在系统中创建一个触发链，A对象的行为将影响B对象，B对象的行为将影响C对象……，可以使用观察者模式创建一种链式触发机制。 subject 12345678910111213141516171819202122232425262728import java.util.ArrayList;import java.util.List; public class Subject &#123; private List&lt;Observer&gt; observers = new ArrayList&lt;Observer&gt;(); private int state; public int getState() &#123; return state; &#125; public void setState(int state) &#123; this.state = state; notifyAllObservers(); &#125; public void attach(Observer observer)&#123; observers.add(observer); &#125; public void notifyAllObservers()&#123; for (Observer observer : observers) &#123; observer.update(); &#125; &#125; &#125; Observer 类 1234public abstract class Observer &#123; protected Subject subject; public abstract void update();&#125; 实体观察者类 12345678910111213public class BinaryObserver extends Observer&#123; public BinaryObserver(Subject subject)&#123; this.subject = subject; this.subject.attach(this); &#125; @Override public void update() &#123; System.out.println( &quot;Binary String: &quot; + Integer.toBinaryString( subject.getState() ) ); &#125;&#125; 12345678910111213public class OctalObserver extends Observer&#123; public OctalObserver(Subject subject)&#123; this.subject = subject; this.subject.attach(this); &#125; @Override public void update() &#123; System.out.println( &quot;Octal String: &quot; + Integer.toOctalString( subject.getState() ) ); &#125;&#125; 12345678910111213public class HexaObserver extends Observer&#123; public HexaObserver(Subject subject)&#123; this.subject = subject; this.subject.attach(this); &#125; @Override public void update() &#123; System.out.println( &quot;Hex String: &quot; + Integer.toHexString( subject.getState() ).toUpperCase() ); &#125;&#125; client 1234567891011121314public class ObserverPatternDemo &#123; public static void main(String[] args) &#123; Subject subject = new Subject(); new HexaObserver(subject); new OctalObserver(subject); new BinaryObserver(subject); System.out.println(&quot;First state change: 15&quot;); subject.setState(15); System.out.println(&quot;Second state change: 10&quot;); subject.setState(10); &#125;&#125; 12345678First state change: 15Hex String: FOctal String: 17Binary String: 1111Second state change: 10Hex String: AOctal String: 12Binary String: 1010 观察者接口 123public abstract class Observer &#123; public abstract void update(String msg);&#125; 第一个观察者： 12345public class F_Observer extends Observer &#123; public void update(String msg) &#123; System.out.println(F_Observer.class.getName() + &quot; : &quot; + msg); &#125;&#125; 第二个观察者： 123456public class S_Observer extends Observer &#123; public void update(String msg) &#123; System.out.println(S_Observer.class.getName() + &quot; : &quot; + msg); &#125;&#125; 第三个观察者： 12345public class T_Observer extends Observer &#123; public void update(String msg) &#123; System.out.println(T_Observer.class.getName() + &quot; : &quot; + msg); &#125;&#125; 被观察者： 12345678910111213141516public class Subject &#123; private List&lt;Observer&gt; observers = new ArrayList&lt;&gt;(); //状态改变 public void setMsg(String msg) &#123; notifyAll(msg); &#125; //订阅 public void addAttach(Observer observer) &#123; observers.add(observer); &#125; //通知所有订阅的观察者 private void notifyAll(String msg) &#123; for (Observer observer : observers) &#123; observer.update(msg); &#125; &#125;&#125; client 123456789101112public class Main &#123; public static void main(String[] args) &#123; F_Observer fObserver = new F_Observer(); S_Observer sObserver = new S_Observer(); T_Observer tObserver = new T_Observer(); Subject subject = new Subject(); subject.addAttach(fObserver); subject.addAttach(sObserver); subject.addAttach(tObserver); subject.setMsg(&quot;msg change&quot;); &#125;&#125;","categories":[],"tags":[{"name":"Design Patterns","slug":"Design-Patterns","permalink":"http://example.com/tags/Design-Patterns/"}]},{"title":"设计模式-单例","slug":"design/singleton","date":"2018-10-03T13:12:36.000Z","updated":"2021-09-22T11:19:04.613Z","comments":true,"path":"2018/10/03/design/singleton/","link":"","permalink":"http://example.com/2018/10/03/design/singleton/","excerpt":"","text":"sigleton http://www.runoob.com/design-pattern/singleton-pattern.html Singleton 类 1234567891011121314151617public class SingleObject &#123; //创建 SingleObject 的一个对象 private static SingleObject instance = new SingleObject(); //让构造函数为 private，这样该类就不会被实例化 private SingleObject()&#123;&#125; //获取唯一可用的对象 public static SingleObject getInstance()&#123; return instance; &#125; public void showMessage()&#123; System.out.println(&quot;Hello World!&quot;); &#125;&#125; singleton 类获取唯一的对象 1234567891011121314public class SingletonPatternDemo &#123; public static void main(String[] args) &#123; //不合法的构造函数 //编译时错误：构造函数 SingleObject() 是不可见的 //SingleObject object = new SingleObject(); //获取唯一可用的对象 SingleObject object = SingleObject.getInstance(); //显示消息 object.showMessage(); &#125;&#125; 懒汉式，线程不安全 是否 Lazy 初始化：是 是否多线程安全：否 实现难度：易 描述：这种方式是最基本的实现方式，这种实现最大的问题就是不支持多线程。因为没有加锁 synchronized，所以严格意义上它并不算单例模式。 这种方式 lazy loading 很明显，不要求线程安全，在多线程不能正常工作。 1234567891011public class Singleton &#123; private static Singleton instance; private Singleton ()&#123;&#125; public static Singleton getInstance() &#123; if (instance == null) &#123; instance = new Singleton(); &#125; return instance; &#125; &#125; 懒汉式，线程安全 是否 Lazy 初始化：是 是否多线程安全：是 实现难度：易 描述：这种方式具备很好的 lazy loading，能够在多线程中很好的工作，但是，效率很低，99% 情况下不需要同步。 优点：第一次调用才初始化，避免内存浪费。 缺点：必须加锁 synchronized 才能保证单例，但加锁会影响效率。 getInstance() 的性能对应用程序不是很关键（该方法使用不太频繁）。 12345678910public class Singleton &#123; private static Singleton instance; private Singleton ()&#123;&#125; public static synchronized Singleton getInstance() &#123; if (instance == null) &#123; instance = new Singleton(); &#125; return instance; &#125; &#125; 饿汉式 是否 Lazy 初始化：否 是否多线程安全：是 实现难度：易 描述：这种方式比较常用，但容易产生垃圾对象。 优点：没有加锁，执行效率会提高。 缺点：类加载时就初始化，浪费内存。 它基于 classloader 机制避免了多线程的同步问题，不过，instance 在类装载时就实例化，虽然导致类装载的原因有很多种，在单例模式中大多数都是调用 getInstance 方法， 但是也不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化 instance 显然没有达到 lazy loading 的效果。 1234567public class Singleton &#123; private static Singleton instance = new Singleton(); private Singleton ()&#123;&#125; public static Singleton getInstance() &#123; return instance; &#125; &#125; 双检锁/双重校验锁（DCL，即 double-checked locking） JDK 版本：JDK1.5 起 是否 Lazy 初始化：是 是否多线程安全：是 实现难度：较复杂 描述：这种方式采用双锁机制，安全且在多线程情况下能保持高性能。 getInstance() 的性能对应用程序很关键。 1234567891011121314public class Singleton &#123; private volatile static Singleton singleton; private Singleton ()&#123;&#125; public static Singleton getSingleton() &#123; if (singleton == null) &#123; synchronized (Singleton.class) &#123; if (singleton == null) &#123; singleton = new Singleton(); &#125; &#125; &#125; return singleton; &#125; &#125; 登记式/静态内部类 是否 Lazy 初始化：是 是否多线程安全：是 实现难度：一般 描述：这种方式能达到双检锁方式一样的功效，但实现更简单。对静态域使用延迟初始化，应使用这种方式而不是双检锁方式。这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用。 这种方式同样利用了 classloader 机制来保证初始化 instance 时只有一个线程，它跟第 3 种方式不同的是：第 3 种方式只要 Singleton 类被装载了，那么 instance 就会被实例化（没有达到 lazy loading 效果），而这种方式是 Singleton 类被装载了，instance 不一定被初始化。因为 SingletonHolder 类没有被主动使用，只有通过显式调用 getInstance 方法时，才会显式装载 SingletonHolder 类，从而实例化 instance。想象一下，如果实例化 instance 很消耗资源，所以想让它延迟加载，另外一方面，又不希望在 Singleton 类加载时就实例化，因为不能确保 Singleton 类还可能在其他的地方被主动使用从而被加载，那么这个时候实例化 instance 显然是不合适的。这个时候，这种方式相比第 3 种方式就显得很合理。 123456789public class Singleton &#123; private static class SingletonHolder &#123; private static final Singleton INSTANCE = new Singleton(); &#125; private Singleton ()&#123;&#125; public static final Singleton getInstance() &#123; return SingletonHolder.INSTANCE; &#125; &#125;","categories":[],"tags":[{"name":"Design Patterns","slug":"Design-Patterns","permalink":"http://example.com/tags/Design-Patterns/"}]},{"title":"设计模式-工厂(泛型)","slug":"design/设计模式-工厂(泛型)","date":"2018-10-03T13:12:36.000Z","updated":"2021-09-22T11:19:04.614Z","comments":true,"path":"2018/10/03/design/设计模式-工厂(泛型)/","link":"","permalink":"http://example.com/2018/10/03/design/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82(%E6%B3%9B%E5%9E%8B)/","excerpt":"","text":"factory 123456789public interface Human &#123; // 颜色 public void getColor(); //说话 public void talk();&#125; 1234567891011121314public class WhiteHuman implements Human &#123; @Override public void getColor() &#123; System.out.println(&quot;白色=+++++&quot;); &#125; @Override public void talk() &#123; System.out.println(&quot;白English 单字节+++++&quot;); &#125;&#125; 12345public abstract class AbstractHumanFactory &#123; public abstract &lt;T extends Human&gt;T createuman(Class&lt;T&gt; c);&#125; 123456789101112131415161718public class HumanFactory extends AbstractHumanFactory &#123; @Override public &lt;T extends Human&gt; T createuman(Class&lt;T&gt; c) &#123; //生产的人种 Human human = null; try&#123; //产生人种 human = (T)Class.forName(c.getName()).newInstance(); &#125;catch (Exception e)&#123; e.printStackTrace(); &#125; return (T)human; &#125;&#125; 1234567891011public static void main(String[] args) &#123; // AbstractHumanFactory abstractHumanFactory = new HumanFactory(); // white System.out.println(&quot;白色&quot;); Human whiteHuman = abstractHumanFactory.createuman(WhiteHuman.class); whiteHuman.getColor(); whiteHuman.talk(); &#125;","categories":[],"tags":[{"name":"Design Patterns","slug":"Design-Patterns","permalink":"http://example.com/tags/Design-Patterns/"}]},{"title":"设计模式-模板","slug":"template","date":"2018-10-01T03:12:36.000Z","updated":"2021-09-22T11:19:04.649Z","comments":true,"path":"2018/10/01/template/","link":"","permalink":"http://example.com/2018/10/01/template/","excerpt":"","text":"设计模式-模板 http://www.runoob.com/design-pattern/template-pattern.html 创建一个抽象类，它的模板方法被设置为 final 123456789101112131415161718public abstract class Game &#123; abstract void initialize(); abstract void startPlay(); abstract void endPlay(); //模板 public final void play()&#123; //初始化游戏 initialize(); //开始游戏 startPlay(); //结束游戏 endPlay(); &#125;&#125; 实体类 1234567891011121314151617public class Cricket extends Game &#123; @Override void endPlay() &#123; System.out.println(&quot;Cricket Game Finished!&quot;); &#125; @Override void initialize() &#123; System.out.println(&quot;Cricket Game Initialized! Start playing.&quot;); &#125; @Override void startPlay() &#123; System.out.println(&quot;Cricket Game Started. Enjoy the game!&quot;); &#125;&#125; 1234567891011121314151617public class Football extends Game &#123; @Override void endPlay() &#123; System.out.println(&quot;Football Game Finished!&quot;); &#125; @Override void initialize() &#123; System.out.println(&quot;Football Game Initialized! Start playing.&quot;); &#125; @Override void startPlay() &#123; System.out.println(&quot;Football Game Started. Enjoy the game!&quot;); &#125;&#125; client 12345678910public class TemplatePatternDemo &#123; public static void main(String[] args) &#123; Game game = new Cricket(); game.play(); System.out.println(); game = new Football(); game.play(); &#125;&#125; out: 1234567Cricket Game Initialized! Start playing.Cricket Game Started. Enjoy the game!Cricket Game Finished!Football Game Initialized! Start playing.Football Game Started. Enjoy the game!Football Game Finished!","categories":[],"tags":[{"name":"Design Patterns","slug":"Design-Patterns","permalink":"http://example.com/tags/Design-Patterns/"}]},{"title":"设计模式-工厂","slug":"design/设计模式-工厂","date":"2018-10-01T03:12:36.000Z","updated":"2021-09-22T11:19:04.614Z","comments":true,"path":"2018/10/01/design/设计模式-工厂/","link":"","permalink":"http://example.com/2018/10/01/design/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82/","excerpt":"","text":"设计模式-工厂 简单工厂 123456public interface Shape &#123; public void draw(); &#125; 123456789public class Circle implements Shape &#123; @Override public void draw() &#123; System.out.println(&quot;Inside Circle::draw() method.&quot;); &#125; &#125; 123456789public class Rectangle implements Shape &#123; @Override public void draw() &#123; System.out.println(&quot;Inside Rectangle::draw() method.&quot;); &#125; &#125; 12345678public class Square implements Shape &#123; @Override public void draw() &#123; System.out.println(&quot;Inside Square::draw() method.&quot;); &#125; &#125; 1234567891011121314151617public class ShapeFactory &#123; public Shape getShape(String type) &#123; if (&quot;circle&quot;.equals(type)) &#123; return new Circle(); &#125; else if (&quot;rectangle&quot;.equals(type)) &#123; return new Rectangle(); &#125; else if (&quot;square&quot;.equals(type)) &#123; return new Square(); &#125; else &#123; return null; &#125; &#125; &#125; 123456789101112public class FactoryPatternDemo &#123; public static void main(String[] args) &#123; ShapeFactory shapeFactory = new ShapeFactory(); shapeFactory.getShape(&quot;circle&quot;).draw(); shapeFactory.getShape(&quot;rectangle&quot;).draw(); shapeFactory.getShape(&quot;square&quot;).draw(); &#125; &#125; 抽象工厂 123456public interface Button &#123; public void processEvent(); &#125; 123456public interface Text &#123; public void getWholeText(); &#125; 12345678910public class LinuxButton implements Button &#123; @Override public void processEvent() &#123; System.out.println(&quot;Inside LinuxButton::processEvent() method.&quot;); &#125; &#125; 12345678910public class WindowsButton implements Button &#123; @Override public void processEvent() &#123; System.out.println(&quot;Inside WindowsButton::processEvent() method.&quot;); &#125; &#125; 12345678910public class LinuxText implements Text &#123; @Override public void getWholeText() &#123; System.out.println(&quot;Inside LinuxText::getWholeText() method.&quot;); &#125; &#125; 123456789public class WindowsText implements Text &#123; @Override public void getWholeText() &#123; System.out.println(&quot;Inside WindowsText::getWholeText() method.&quot;); &#125; &#125; 12345678public interface AbstractFactory &#123; public Button createButton(); public Text createText(); &#125; 1234567891011121314public class LinuxFactory implements AbstractFactory &#123; @Override public Button createButton() &#123; return new LinuxButton(); &#125; @Override public Text createText() &#123; return new LinuxText(); &#125; &#125; 1234567891011121314public class WindowsFactory implements AbstractFactory &#123; @Override public Button createButton() &#123; return new WindowsButton(); &#125; @Override public Text createText() &#123; return new WindowsText(); &#125; &#125; 12345678910111213public class AbstractFactoryDemo &#123; public static void main(String[] args) &#123; AbstractFactory linuxFactory = new LinuxFactory(); linuxFactory.createButton().processEvent(); linuxFactory.createText().getWholeText(); AbstractFactory windowsFactory = new WindowsFactory(); windowsFactory.createButton().processEvent(); windowsFactory.createText().getWholeText(); &#125; &#125;","categories":[],"tags":[{"name":"Design Patterns","slug":"Design-Patterns","permalink":"http://example.com/tags/Design-Patterns/"}]},{"title":"基数排序(RadixSort)","slug":"sort/基数排序(RadixSort)","date":"2018-09-25T05:12:37.000Z","updated":"2021-09-22T11:19:04.644Z","comments":true,"path":"2018/09/25/sort/基数排序(RadixSort)/","link":"","permalink":"http://example.com/2018/09/25/sort/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F(RadixSort)/","excerpt":"","text":"http://www.runoob.com/w3cnote/sort-algorithm-summary.html 动图 ：https://www.cnblogs.com/onepixel/articles/7674659.html 排序算法 时间复杂度 冒泡排序 O(n2) 选择排序 O(n2) 插入排序 O(n2) 希尔排序 O(n1.5) 快速排序 O(N*logN) 归并排序 O(N*logN) 堆排序 O(N*logN) 基数排序 O(d(n+r)) 基数排序(RadixSort) BinSort 基本思想： BinSort想法非常简单，首先创建数组A[MaxValue]；然后将每个数放到相应的位置上（例如17放在下标17的数组位置）；最后遍历数组，即为排序后的结果。 问题： 当序列中存在较大值时，BinSort 的排序方法会浪费大量的空间开销。 RadixSort 基本思想： 基数排序是在BinSort的基础上，通过基数的限制来减少空间的开销。 1234567891011121314151617181920212223242526272829303132public static void RadixSort(int A[],int temp[],int n,int k,int r,int cnt[])&#123; //A:原数组 //temp:临时数组 //n:序列的数字个数 //k:最大的位数2 //r:基数10 //cnt:存储bin[i]的个数 for(int i=0 , rtok=1; i&lt;k ; i++ ,rtok = rtok*r)&#123; //初始化 for(int j=0;j&lt;r;j++)&#123; cnt[j] = 0; &#125; //计算每个箱子的数字个数 for(int j=0;j&lt;n;j++)&#123; cnt[(A[j]/rtok)%r]++; &#125; //cnt[j]的个数修改为前j个箱子一共有几个数字 for(int j=1;j&lt;r;j++)&#123; cnt[j] = cnt[j-1] + cnt[j]; &#125; for(int j = n-1;j&gt;=0;j--)&#123; //重点理解 cnt[(A[j]/rtok)%r]--; temp[cnt[(A[j]/rtok)%r]] = A[j]; &#125; for(int j=0;j&lt;n;j++)&#123; A[j] = temp[j]; &#125; &#125;&#125;","categories":[],"tags":[{"name":"Sort","slug":"Sort","permalink":"http://example.com/tags/Sort/"}]},{"title":"堆排序(HeapSort)","slug":"sort/堆排序(HeapSort)","date":"2018-09-25T05:12:36.000Z","updated":"2021-09-22T11:19:04.645Z","comments":true,"path":"2018/09/25/sort/堆排序(HeapSort)/","link":"","permalink":"http://example.com/2018/09/25/sort/%E5%A0%86%E6%8E%92%E5%BA%8F(HeapSort)/","excerpt":"","text":"http://www.runoob.com/w3cnote/sort-algorithm-summary.html 动图 ：https://www.cnblogs.com/onepixel/articles/7674659.html 排序算法 时间复杂度 冒泡排序 O(n2) 选择排序 O(n2) 插入排序 O(n2) 希尔排序 O(n1.5) 快速排序 O(N*logN) 归并排序 O(N*logN) 堆排序 O(N*logN) 基数排序 O(d(n+r)) 堆排序(HeapSort) 平均时间复杂度：O(NlogN) 由于每次重新恢复堆的时间复杂度为O(logN)，共N - 1次重新恢复堆操作，再加上前面建立堆时N / 2次向下调整，每次调整时间复杂度也为O(logN)。二次操作时间相加还是O(N * logN)。 12345678910111213141516171819202122232425262728293031//构建最小堆public static void MakeMinHeap(int a[], int n)&#123; for(int i=(n-1)/2 ; i&gt;=0 ; i--)&#123; MinHeapFixdown(a,i,n); &#125;&#125;//从i节点开始调整,n为节点总数 从0开始计算 i节点的子节点为 2*i+1, 2*i+2 public static void MinHeapFixdown(int a[],int i,int n)&#123; int j = 2*i+1; //子节点 int temp = 0; while(j&lt;n)&#123; //在左右子节点中寻找最小的 if(j+1&lt;n &amp;&amp; a[j+1]&lt;a[j])&#123; j++; &#125; if(a[i] &lt;= a[j]) break; //较大节点下移 temp = a[i]; a[i] = a[j]; a[j] = temp; i = j; j = 2*i+1; &#125;&#125; 1234567891011public static void MinHeap_Sort(int a[],int n)&#123; int temp = 0; MakeMinHeap(a,n); for(int i=n-1;i&gt;0;i--)&#123; temp = a[0]; a[0] = a[i]; a[i] = temp; MinHeapFixdown(a,0,i); &#125; &#125;","categories":[],"tags":[{"name":"Sort","slug":"Sort","permalink":"http://example.com/tags/Sort/"}]},{"title":"归并排序(Merge Sort)","slug":"sort/归并排序(Merge Sort)","date":"2018-09-25T05:12:35.000Z","updated":"2021-09-22T11:19:04.645Z","comments":true,"path":"2018/09/25/sort/归并排序(Merge Sort)/","link":"","permalink":"http://example.com/2018/09/25/sort/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F(Merge%20Sort)/","excerpt":"","text":"http://www.runoob.com/w3cnote/sort-algorithm-summary.html 动图 ：https://www.cnblogs.com/onepixel/articles/7674659.html 排序算法 时间复杂度 冒泡排序 O(n2) 选择排序 O(n2) 插入排序 O(n2) 希尔排序 O(n1.5) 快速排序 O(N*logN) 归并排序 O(N*logN) 堆排序 O(N*logN) 基数排序 O(d(n+r)) 归并排序(Merge Sort) 基本思想：参考 归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法的一个非常典型的应用。 首先考虑下如何将2个有序数列合并。这个非常简单，只要从比较2个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可。 123456789101112131415161718192021//将有序数组a[]和b[]合并到c[]中void MemeryArray(int a[], int n, int b[], int m, int c[])&#123; int i, j, k; i = j = k = 0; while (i &lt; n &amp;&amp; j &lt; m) &#123; if (a[i] &lt; b[j]) c[k++] = a[i++]; else c[k++] = b[j++]; &#125; while (i &lt; n) c[k++] = a[i++]; while (j &lt; m) c[k++] = b[j++];&#125; 解决了上面的合并有序数列问题，再来看归并排序，其的基本思路就是将数组分成2组A，B，如果这2组组内的数据都是有序的，那么就可以很方便的将这2组数据进行排序。如何让这2组组内数据有序了？ 可以将A，B组各自再分成2组。依次类推，当分出来的小组只有1个数据时，可以认为这个小组组内已经达到了有序，然后再合并相邻的2个小组就可以了。这样通过先递归的分解数列，再合并数列就完成了归并排序。 平均时间复杂度：O(NlogN) 归并排序的效率是比较高的，设数列长为N，将数列分开成小数列一共要logN步，每步都是一个合并有序数列的过程，时间复杂度可以记为O(N)，故一共为O(N*logN)。 12345678910public static void merge_sort(int a[],int first,int last,int temp[])&#123; if(first &lt; last)&#123; int middle = (first + last)/2; merge_sort(a,first,middle,temp);//左半部分排好序 merge_sort(a,middle+1,last,temp);//右半部分排好序 mergeArray(a,first,middle,last,temp); //合并左右部分 &#125; &#125; 123456789101112131415161718192021222324252627282930313233//合并 ：将两个序列a[first-middle],a[middle+1-end]合并public static void mergeArray(int a[],int first,int middle,int end,int temp[])&#123; int i = first; int m = middle; int j = middle+1; int n = end; int k = 0; while(i&lt;=m &amp;&amp; j&lt;=n)&#123; if(a[i] &lt;= a[j])&#123; temp[k] = a[i]; k++; i++; &#125;else&#123; temp[k] = a[j]; k++; j++; &#125; &#125; while(i&lt;=m)&#123; temp[k] = a[i]; k++; i++; &#125; while(j&lt;=n)&#123; temp[k] = a[j]; k++; j++; &#125; for(int ii=0;ii&lt;k;ii++)&#123; a[first + ii] = temp[ii]; &#125;&#125;","categories":[],"tags":[{"name":"Sort","slug":"Sort","permalink":"http://example.com/tags/Sort/"}]},{"title":"html-input","slug":"html_input","date":"2018-09-20T07:15:25.000Z","updated":"2021-09-22T11:19:04.620Z","comments":true,"path":"2018/09/20/html_input/","link":"","permalink":"http://example.com/2018/09/20/html_input/","excerpt":"","text":"Input输入框验证 过滤空格 1&lt;input type=&quot;text&quot; onkeyup=&quot;this.value=this.value.replace(/^ +| +$/g,&#x27;&#x27;)&quot;&gt; 不能输入空格及英文状态下的逗号 1&lt;input type=&quot;text&quot; onkeyup=&quot;this.value=this.value.replace(/[, ]/g,&#x27;&#x27;)&quot;&gt; 只能输入数字 1&lt;input type=&quot;text&quot; maxlength=&quot;11&quot; onkeyup=&quot;value=value.replace(/[^\\d]/g,&#x27;&#x27;) &quot;onbeforepaste=&quot;clipboardData.setData(&#x27;text&#x27;,clipboardData.getData(&#x27;text&#x27;).replace(/[^\\d]/g,&#x27;&#x27;))&quot;/&gt; 只能输入英文及数字 1&lt;input type=&#x27;text&#x27; maxlength=&quot;17&quot; onkeyup=&quot;value=value.replace(/[\\W]/g,&#x27;&#x27;) &quot;onbeforepaste=&quot;clipboardData.setData(&#x27;text&#x27;,clipboardData.getData(&#x27;text&#x27;).replace(/[^\\d]/g,&#x27;&#x27;))&quot;/&gt; input输入数字 11、onkeyup = &quot;value=value.replace(/[^\\d]/g,&#x27;&#x27;)&quot; 使用 onkeyup 事件，有 bug ，那就是在中文输入法状态下，输入汉字之后直接回车，会直接输入字母 12、onchange = &quot;value=value.replace(/[^\\d]/g,&#x27;&#x27;)&quot; 使用 onkeyup 事件，有 bug ，那就是在中文输入法状态下，输入汉字之后直接回车，会直接输入字母 13、oninput = &quot;value=value.replace(/[^\\d]/g,&#x27;&#x27;)&quot; 使用 oninput 事件，完美的解决了以上两种问题，测试暂时还没有出现其它问题。 1234567891011&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;title&gt;input&lt;/title&gt;&lt;/head&gt;&lt;body&gt; 只能输入纯数字的输入框:&lt;input type=&quot;text&quot; name=&quot;&quot; oninput=&quot;value=value.replace(/[^\\d]/g,&#x27;&#x27;)&quot;&gt;&lt;/body&gt;&lt;/html&gt;","categories":[],"tags":[{"name":"Html","slug":"Html","permalink":"http://example.com/tags/Html/"}]},{"title":"插入排序(Insertion Sort)","slug":"sort/插入排序(Insertion Sort)","date":"2018-09-11T11:43:32.000Z","updated":"2021-09-22T11:19:04.646Z","comments":true,"path":"2018/09/11/sort/插入排序(Insertion Sort)/","link":"","permalink":"http://example.com/2018/09/11/sort/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F(Insertion%20Sort)/","excerpt":"","text":"http://www.runoob.com/w3cnote/sort-algorithm-summary.html 动图 ：https://www.cnblogs.com/onepixel/articles/7674659.html 排序算法 时间复杂度 冒泡排序 O(n2) 选择排序 O(n2) 插入排序 O(n2) 希尔排序 O(n1.5) 快速排序 O(N*logN) 归并排序 O(N*logN) 堆排序 O(N*logN) 基数排序 O(d(n+r)) 插入排序(Insertion Sort) 基本思想： 在要排序的一组数中，假定前n-1个数已经排好序，现在将第n个数插到前面的有序数列中，使得这n个数也是排好顺序的。如此反复循环，直到全部排好顺序。 平均时间复杂度：O(n2) 1234567891011121314151617public static void insert_sort(int array[],int lenth)&#123; int temp; for(int i=0;i&lt;lenth-1;i++)&#123; for(int j=i+1;j&gt;0;j--)&#123; if(array[j] &lt; array[j-1])&#123; temp = array[j-1]; array[j-1] = array[j]; array[j] = temp; &#125;else&#123; //不需要交换 break; &#125; &#125; &#125;&#125;","categories":[],"tags":[{"name":"Sort","slug":"Sort","permalink":"http://example.com/tags/Sort/"}]},{"title":"希尔排序(Shell Sort)","slug":"sort/希尔排序(Shell Sort)","date":"2018-09-11T11:39:43.000Z","updated":"2021-09-22T11:19:04.645Z","comments":true,"path":"2018/09/11/sort/希尔排序(Shell Sort)/","link":"","permalink":"http://example.com/2018/09/11/sort/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F(Shell%20Sort)/","excerpt":"","text":"http://www.runoob.com/w3cnote/sort-algorithm-summary.html 动图 ：https://www.cnblogs.com/onepixel/articles/7674659.html 排序算法 时间复杂度 冒泡排序 O(n2) 选择排序 O(n2) 插入排序 O(n2) 希尔排序 O(n1.5) 快速排序 O(N*logN) 归并排序 O(N*logN) 堆排序 O(N*logN) 基数排序 O(d(n+r)) 希尔排序(Shell Sort) 前言： 数据序列1： 13-17-20-42-28 利用插入排序，13-17-20-28-42. Number of swap:1; 数据序列2： 13-17-20-42-14 利用插入排序，13-14-17-20-42. Number of swap:3; 如果数据序列基本有序，使用插入排序会更加高效。 基本思想： 在要排序的一组数中，根据某一增量分为若干子序列，并对子序列分别进行插入排序。 然后逐渐将增量减小,并重复上述过程。直至增量为1,此时数据序列基本有序,最后进行插入排序。 123456789101112131415161718192021222324252627282930public static void shell_sort(int array[],int lenth)&#123; int temp = 0; int incre = lenth; while(true)&#123; incre = incre/2; for(int k = 0;k&lt;incre;k++)&#123; //根据增量分为若干子序列 for(int i=k+incre;i&lt;lenth;i+=incre)&#123; for(int j=i;j&gt;k;j-=incre)&#123; if(array[j]&lt;array[j-incre])&#123; temp = array[j-incre]; array[j-incre] = array[j]; array[j] = temp; &#125;else&#123; break; &#125; &#125; &#125; &#125; if(incre == 1)&#123; break; &#125; &#125;&#125;","categories":[],"tags":[{"name":"Sort","slug":"Sort","permalink":"http://example.com/tags/Sort/"}]},{"title":"冒泡排序(BubbleSort)","slug":"sort/冒泡排序(BubbleSort)","date":"2018-09-05T04:39:46.000Z","updated":"2021-09-22T11:19:04.644Z","comments":true,"path":"2018/09/05/sort/冒泡排序(BubbleSort)/","link":"","permalink":"http://example.com/2018/09/05/sort/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F(BubbleSort)/","excerpt":"","text":"http://www.runoob.com/w3cnote/sort-algorithm-summary.html 动图 ：https://www.cnblogs.com/onepixel/articles/7674659.html 排序算法 时间复杂度 冒泡排序 O(n2) 选择排序 O(n2) 插入排序 O(n2) 希尔排序 O(n1.5) 快速排序 O(N*logN) 归并排序 O(N*logN) 堆排序 O(N*logN) 基数排序 O(d(n+r)) 冒泡排序(BubbleSort) 基本思想：两个数比较大小，较大的数下沉，较小的数冒起来。 过程： 比较相邻的两个数据，如果第二个数小，就交换位置。 从后向前两两比较，一直到比较最前两个数据。最终最小数被交换到起始的位置，这样第一个最小数的位置就排好了。 继续重复上述过程，依次将第2.3…n-1个最小数排好位置。 平均时间复杂度：O(n2) 123456789101112131415public static void BubbleSort(int [] arr)&#123; int temp;//临时变量 for(int i=0; i&lt;arr.length-1; i++)&#123; //表示趟数，一共arr.length-1次。 for(int j=arr.length-1; j&gt;i; j--)&#123; if(arr[j] &lt; arr[j-1])&#123; temp = arr[j]; arr[j] = arr[j-1]; arr[j-1] = temp; &#125; &#125; &#125; &#125; 优化： 针对问题： 数据的顺序排好之后，冒泡算法仍然会继续进行下一轮的比较，直到arr.length-1次，后面的比较没有意义的。 方案： 设置标志位flag，如果发生了交换flag设置为true；如果没有交换就设置为false。 这样当一轮比较结束后如果flag仍为false，即：这一轮没有发生交换，说明数据的顺序已经排好，没有必要继续进行下去。 12345678910111213141516171819public static void BubbleSort1(int [] arr)&#123; int temp;//临时变量 boolean flag;//是否交换的标志 for(int i=0; i&lt;arr.length-1; i++)&#123; //表示趟数，一共arr.length-1次。 flag = false; for(int j=arr.length-1; j&gt;i; j--)&#123; if(arr[j] &lt; arr[j-1])&#123; temp = arr[j]; arr[j] = arr[j-1]; arr[j-1] = temp; flag = true; &#125; &#125; if(!flag) break; &#125;&#125;","categories":[],"tags":[{"name":"Sort","slug":"Sort","permalink":"http://example.com/tags/Sort/"}]},{"title":"选择排序(SelctionSort)","slug":"sort/选择排序(SelctionSort)","date":"2018-09-05T04:39:46.000Z","updated":"2021-09-22T11:19:04.647Z","comments":true,"path":"2018/09/05/sort/选择排序(SelctionSort)/","link":"","permalink":"http://example.com/2018/09/05/sort/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F(SelctionSort)/","excerpt":"","text":"http://www.runoob.com/w3cnote/sort-algorithm-summary.html 动图 ：https://www.cnblogs.com/onepixel/articles/7674659.html 排序算法 时间复杂度 冒泡排序 O(n2) 选择排序 O(n2) 插入排序 O(n2) 希尔排序 O(n1.5) 快速排序 O(N*logN) 归并排序 O(N*logN) 堆排序 O(N*logN) 基数排序 O(d(n+r)) 选择排序(SelctionSort) 基本思想： 在长度为N的无序数组中，第一次遍历n-1个数，找到最小的数值与第一个元素交换； 第二次遍历n-2个数，找到最小的数值与第二个元素交换； 。。。 第n-1次遍历，找到最小的数值与第n-1个元素交换，排序完成。 平均时间复杂度：O(n2) 12345678910111213141516171819public static void select_sort(int array[],int lenth)&#123; for(int i=0;i&lt;lenth-1;i++)&#123; int minIndex = i; for(int j=i+1;j&lt;lenth;j++)&#123; if(array[j]&lt;array[minIndex])&#123; minIndex = j; &#125; &#125; if(minIndex != i)&#123; int temp = array[i]; array[i] = array[minIndex]; array[minIndex] = temp; &#125; &#125;&#125;","categories":[],"tags":[{"name":"Sort","slug":"Sort","permalink":"http://example.com/tags/Sort/"}]},{"title":"内存泄漏","slug":"内存泄漏","date":"2018-07-29T13:26:41.000Z","updated":"2021-09-22T11:19:04.650Z","comments":true,"path":"2018/07/29/内存泄漏/","link":"","permalink":"http://example.com/2018/07/29/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/","excerpt":"","text":"内存泄漏 1.全局集合 在大的应用程序中有某种全局的数据储存库是很常见的，例如，一个JNDI树或一个会话表。在这些情况下，必须注意管理储存库的大小。必须有某种机制使得从储存库中移除不再需要的数据。 这可能有多种方法，但是最常见的一种是周期性运行的某种清除任务，该任务将验证储存库中的数据，并移除任何不再需要的数据。 另一种管理储存库的方法是使用反向链接（referrer）计数，然后集合负责统计集合中每个入口的反向链接的数目。这要求反向链接告诉集合何时会退出入口。当反向链接数目为零时，该元素就可以从集合中移除了。 2.缓存 缓存是一种数据结构，用于快速查找已经执行的操作结果。因此，如果一个操作执行起来很慢，对于常用的输入数据就可以将操作的结果缓存，并在下次调用该操作时使用缓存的数据。 缓存通常都是以动态方式实现的，其中新的结果是在执行时添加到缓存中的。典型的算法如下： （1）检查结果是否在缓存中，如果在，就返回结果。 （2）如果结果不在缓存中，就进行计算。 （3）将计算出来的结果添加到缓存中，以便以后对该操作的调用可以使用。 该算法的问题（或者说是潜在的内存泄漏）出在最后一步。如果调用该操作时有相当多的不同的输入，就将有相当多的结果存储在缓存中。很明显，这不是正确的方法。 为了预防这种具有潜在破坏性的设计，程序必须确保对于缓存所使用的内存容量有一个上限。因此，更好的算法如下： （1）检查结果是否在缓存中，如果在，就返回结果。 （2）如果结果不在缓存中，就进行计算。 （3）如果缓存所占的空间过大，就移除缓存最久的结果。 （4）将计算出来的结果添加到缓存中，以便以后对该操作的调用可以使用。 通过始终移除缓存最久的结果，我们实际上进行了这样的假设：在将来，比起缓存最久的数据，最近输入的数据更有可能用到。这通常是一个不错的假设。 新算法将确保缓存的容量处于预定义的内存范围之内。确切的范围可能很难计算，因为缓存中的对象在不断变化，而且它们的引用包罗万象。为缓存设置正确的大小是一项非常复杂的任务，需要将所使用的内存容量与检索数据的速度加以平衡。 解决这个问题的另一种方法是使用java.lang.ref.SoftReference类跟踪缓存中的对象。如果虚拟机的内存用尽而需要更多的堆，那么这种方法可保证这些引用能够被移除。 3.ClassLoader Java中ClassLoader结构的使用为内存泄漏提供了许多可乘之机。正是该结构本身的复杂性使ClassLoader在内存泄漏方面存在如此多的问题。ClassLoader的特别之处在于它不仅涉及“常规”的对象引用，还涉及元对象引用，比如字段、方法和类。这意味着只要有对字段、方法、类或ClassLoader对象的引用，ClassLoader就会驻留在JVM中，因为ClassLoader本身可以关联许多类及其静态字段，所以就有许多内存被泄漏。 确定内存泄漏位置 发生内存泄漏的第一个迹象通常是：在应用程序中出现了OutOfMemoryError。这通常发生在你最不愿意它发生的生产环境中，此时几乎不能进行调试。有可能是因为测试环境运行应用程序的方式与生产系统不完全相同，因而导致泄漏只出现在生产中。在这种情况下，需要使用一些开销较低的工具来监控和查找内存泄漏，还需要能够无须重启系统或修改代码就可以将这些工具连接到正在运行的系统上。可能最重要的是，当进行分析时，需要能够断开工具而保持系统不受干扰。 虽然OutOfMemoryError通常都是内存泄漏的信号，但是也有可能因为应用程序确实正在使用这么多的内存。对于后者，或者必须增加JVM可用的堆的数量，或者对应用程序进行某种更改，使它使用较少的内存。但是，在许多情况下，OutOfMemoryError都是内存泄漏的信号。一种查明方法是不间断地监控GC的活动，确定内存使用量是否随着时间增加，如果确实如此，就可能发生了内存泄漏。","categories":[],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"WXPayUtil","slug":"WXPayUtil","date":"2018-07-02T12:09:32.000Z","updated":"2021-09-22T11:19:04.610Z","comments":true,"path":"2018/07/02/WXPayUtil/","link":"","permalink":"http://example.com/2018/07/02/WXPayUtil/","excerpt":"","text":"WXPayUtil 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300package com.ifenghui.storybookapi.util.weixin;import com.ifenghui.storybookapi.util.weixin.WXPayConstants.SignType;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.w3c.dom.Node;import org.w3c.dom.NodeList;import javax.crypto.Mac;import javax.crypto.spec.SecretKeySpec;import javax.xml.parsers.DocumentBuilder;import javax.xml.parsers.DocumentBuilderFactory;import javax.xml.transform.OutputKeys;import javax.xml.transform.Transformer;import javax.xml.transform.TransformerFactory;import javax.xml.transform.dom.DOMSource;import javax.xml.transform.stream.StreamResult;import java.io.ByteArrayInputStream;import java.io.InputStream;import java.io.StringWriter;import java.security.MessageDigest;import java.util.*;public class WXPayUtil &#123; /** * XML格式字符串转换为Map * * @param strXML XML字符串 * @return XML数据转换后的Map * @throws Exception */ public static Map&lt;String, String&gt; xmlToMap(String strXML) throws Exception &#123; try &#123; Map&lt;String, String&gt; data = new HashMap&lt;String, String&gt;(); DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance(); DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder(); InputStream stream = new ByteArrayInputStream(strXML.getBytes(&quot;UTF-8&quot;)); org.w3c.dom.Document doc = documentBuilder.parse(stream); doc.getDocumentElement().normalize(); NodeList nodeList = doc.getDocumentElement().getChildNodes(); for (int idx = 0; idx &lt; nodeList.getLength(); ++idx) &#123; Node node = nodeList.item(idx); if (node.getNodeType() == Node.ELEMENT_NODE) &#123; org.w3c.dom.Element element = (org.w3c.dom.Element) node; data.put(element.getNodeName(), element.getTextContent()); &#125; &#125; try &#123; stream.close(); &#125; catch (Exception ex) &#123; // do nothing &#125; return data; &#125; catch (Exception ex) &#123; WXPayUtil.getLogger().warn(&quot;Invalid XML, can not convert to map. Error message: &#123;&#125;. XML content: &#123;&#125;&quot;, ex.getMessage(), strXML); throw ex; &#125; &#125; /** * 将Map转换为XML格式的字符串 * * @param data Map类型数据 * @return XML格式的字符串 * @throws Exception */ public static String mapToXml(Map&lt;String, String&gt; data) throws Exception &#123; DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance(); DocumentBuilder documentBuilder= documentBuilderFactory.newDocumentBuilder(); org.w3c.dom.Document document = documentBuilder.newDocument(); org.w3c.dom.Element root = document.createElement(&quot;xml&quot;); document.appendChild(root); for (String key: data.keySet()) &#123; String value = data.get(key); if (value == null) &#123; value = &quot;&quot;; &#125; value = value.trim(); org.w3c.dom.Element filed = document.createElement(key); filed.appendChild(document.createTextNode(value)); root.appendChild(filed); &#125; TransformerFactory tf = TransformerFactory.newInstance(); Transformer transformer = tf.newTransformer(); DOMSource source = new DOMSource(document); transformer.setOutputProperty(OutputKeys.ENCODING, &quot;UTF-8&quot;); transformer.setOutputProperty(OutputKeys.INDENT, &quot;yes&quot;); StringWriter writer = new StringWriter(); StreamResult result = new StreamResult(writer); transformer.transform(source, result); String output = writer.getBuffer().toString(); //.replaceAll(&quot;\\n|\\r&quot;, &quot;&quot;); try &#123; writer.close(); &#125; catch (Exception ex) &#123; &#125; return output; &#125; /** * 生成带有 sign 的 XML 格式字符串 * * @param data Map类型数据 * @param key API密钥 * @return 含有sign字段的XML */ public static String generateSignedXml(final Map&lt;String, String&gt; data, String key) throws Exception &#123; return generateSignedXml(data, key, SignType.MD5); &#125; /** * 生成带有 sign 的 XML 格式字符串 * * @param data Map类型数据 * @param key API密钥 * @param signType 签名类型 * @return 含有sign字段的XML */ public static String generateSignedXml(final Map&lt;String, String&gt; data, String key, SignType signType) throws Exception &#123; String sign = generateSignature(data, key, signType); data.put(WXPayConstants.FIELD_SIGN, sign); return mapToXml(data); &#125; /** * 判断签名是否正确 * * @param xmlStr XML格式数据 * @param key API密钥 * @return 签名是否正确 * @throws Exception */ public static boolean isSignatureValid(String xmlStr, String key) throws Exception &#123; Map&lt;String, String&gt; data = xmlToMap(xmlStr); if (!data.containsKey(WXPayConstants.FIELD_SIGN) ) &#123; return false; &#125; String sign = data.get(WXPayConstants.FIELD_SIGN); return generateSignature(data, key).equals(sign); &#125; /** * 判断签名是否正确，必须包含sign字段，否则返回false。使用MD5签名。 * * @param data Map类型数据 * @param key API密钥 * @return 签名是否正确 * @throws Exception */ public static boolean isSignatureValid(Map&lt;String, String&gt; data, String key) throws Exception &#123; return isSignatureValid(data, key, SignType.MD5); &#125; /** * 判断签名是否正确，必须包含sign字段，否则返回false。 * * @param data Map类型数据 * @param key API密钥 * @param signType 签名方式 * @return 签名是否正确 * @throws Exception */ public static boolean isSignatureValid(Map&lt;String, String&gt; data, String key, SignType signType) throws Exception &#123; if (!data.containsKey(WXPayConstants.FIELD_SIGN) ) &#123; return false; &#125; String sign = data.get(WXPayConstants.FIELD_SIGN); return generateSignature(data, key, signType).equals(sign); &#125; /** * 生成签名 * * @param data 待签名数据 * @param key API密钥 * @return 签名 */ public static String generateSignature(final Map&lt;String, String&gt; data, String key) throws Exception &#123; return generateSignature(data, key, SignType.MD5); &#125; /** * 生成签名. 注意，若含有sign_type字段，必须和signType参数保持一致。 * * @param data 待签名数据 * @param key API密钥 * @param signType 签名方式 * @return 签名 */ public static String generateSignature(final Map&lt;String, String&gt; data, String key, SignType signType) throws Exception &#123; Set&lt;String&gt; keySet = data.keySet(); String[] keyArray = keySet.toArray(new String[keySet.size()]); Arrays.sort(keyArray); StringBuilder sb = new StringBuilder(); for (String k : keyArray) &#123; if (k.equals(WXPayConstants.FIELD_SIGN)) &#123; continue; &#125; if (data.get(k).trim().length() &gt; 0) // 参数值为空，则不参与签名 sb.append(k).append(&quot;=&quot;).append(data.get(k).trim()).append(&quot;&amp;&quot;); &#125; sb.append(&quot;key=&quot;).append(key); if (SignType.MD5.equals(signType)) &#123; return MD5(sb.toString()).toUpperCase(); &#125; else if (SignType.HMACSHA256.equals(signType)) &#123; return HMACSHA256(sb.toString(), key); &#125; else &#123; throw new Exception(String.format(&quot;Invalid sign_type: %s&quot;, signType)); &#125; &#125; /** * 获取随机字符串 Nonce Str * * @return String 随机字符串 */ public static String generateNonceStr() &#123; return UUID.randomUUID().toString().replaceAll(&quot;-&quot;, &quot;&quot;).substring(0, 32); &#125; /** * 生成 MD5 * * @param data 待处理数据 * @return MD5结果 */ public static String MD5(String data) throws Exception &#123; MessageDigest md = MessageDigest.getInstance(&quot;MD5&quot;); byte[] array = md.digest(data.getBytes(&quot;UTF-8&quot;)); StringBuilder sb = new StringBuilder(); for (byte item : array) &#123; sb.append(Integer.toHexString((item &amp; 0xFF) | 0x100).substring(1, 3)); &#125; return sb.toString().toUpperCase(); &#125; /** * 生成 HMACSHA256 * @param data 待处理数据 * @param key 密钥 * @return 加密结果 * @throws Exception */ public static String HMACSHA256(String data, String key) throws Exception &#123; Mac sha256_HMAC = Mac.getInstance(&quot;HmacSHA256&quot;); SecretKeySpec secret_key = new SecretKeySpec(key.getBytes(&quot;UTF-8&quot;), &quot;HmacSHA256&quot;); sha256_HMAC.init(secret_key); byte[] array = sha256_HMAC.doFinal(data.getBytes(&quot;UTF-8&quot;)); StringBuilder sb = new StringBuilder(); for (byte item : array) &#123; sb.append(Integer.toHexString((item &amp; 0xFF) | 0x100).substring(1, 3)); &#125; return sb.toString().toUpperCase(); &#125; /** * 日志 * @return */ public static Logger getLogger() &#123; Logger logger = LoggerFactory.getLogger(&quot;wxpay java sdk&quot;); return logger; &#125; /** * 获取当前时间戳，单位秒 * @return */ public static long getCurrentTimestamp() &#123; return System.currentTimeMillis()/1000; &#125; /** * 获取当前时间戳，单位毫秒 * @return */ public static long getCurrentTimestampMs() &#123; return System.currentTimeMillis(); &#125; /** * 生成 uuid， 即用来标识一笔单，也用做 nonce_str * @return */ public static String generateUUID() &#123; return UUID.randomUUID().toString().replaceAll(&quot;-&quot;, &quot;&quot;).substring(0, 32); &#125;&#125;","categories":[],"tags":[{"name":"util","slug":"util","permalink":"http://example.com/tags/util/"}]},{"title":"SortedMap 集合转化成 xml格式","slug":"SortedMap转化成 xml格式","date":"2018-07-02T11:09:35.000Z","updated":"2021-09-22T11:19:04.608Z","comments":true,"path":"2018/07/02/SortedMap转化成 xml格式/","link":"","permalink":"http://example.com/2018/07/02/SortedMap%E8%BD%AC%E5%8C%96%E6%88%90%20xml%E6%A0%BC%E5%BC%8F/","excerpt":"","text":"SortedMap&lt;Object,Object&gt; 集合转化成 xml格式 12345678910111213141516171819202122/* * 将SortedMap&lt;Object,Object&gt; 集合转化成 xml格式 */public static String getRequestXml(SortedMap&lt;Object,Object&gt; parameters)&#123; StringBuffer sb = new StringBuffer(); sb.append(&quot;&lt;xml&gt;&quot;); Set es = parameters.entrySet(); Iterator it = es.iterator(); while(it.hasNext()) &#123; Map.Entry entry = (Map.Entry)it.next(); String k = (String)entry.getKey(); String v = (String)entry.getValue(); if (&quot;attach&quot;.equalsIgnoreCase(k)||&quot;body&quot;.equalsIgnoreCase(k)||&quot;sign&quot;.equalsIgnoreCase(k)) &#123; sb.append(&quot;&lt;&quot;+k+&quot;&gt;&quot;+&quot;&lt;![CDATA[&quot;+v+&quot;]]&gt;&lt;/&quot;+k+&quot;&gt;&quot;); &#125;else &#123; sb.append(&quot;&lt;&quot;+k+&quot;&gt;&quot;+v+&quot;&lt;/&quot;+k+&quot;&gt;&quot;); &#125; &#125; sb.append(&quot;&lt;/xml&gt;&quot;); return sb.toString();&#125;","categories":[],"tags":[{"name":"util","slug":"util","permalink":"http://example.com/tags/util/"}]},{"title":"XML格式字符串转换为Map","slug":"XML格式字符串转换为Map","date":"2018-07-02T11:09:35.000Z","updated":"2021-09-22T11:19:04.610Z","comments":true,"path":"2018/07/02/XML格式字符串转换为Map/","link":"","permalink":"http://example.com/2018/07/02/XML%E6%A0%BC%E5%BC%8F%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E4%B8%BAMap/","excerpt":"","text":"XML格式字符串转换为Map 12345678910111213141516171819202122232425262728293031323334353637 /** * XML格式字符串转换为Map * * @param strXML XML字符串 * @return XML数据转换后的Map * @throws Exception */public static Map&lt;String, String&gt; xmlToMap(String strXML) throws Exception &#123; try &#123; Map&lt;String, String&gt; data = new HashMap&lt;String, String&gt;(); DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance(); DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder(); InputStream stream = new ByteArrayInputStream(strXML.getBytes(&quot;UTF-8&quot;)); org.w3c.dom.Document doc = documentBuilder.parse(stream); doc.getDocumentElement().normalize(); NodeList nodeList = doc.getDocumentElement().getChildNodes(); for (int idx = 0; idx &lt; nodeList.getLength(); ++idx) &#123; Node node = nodeList.item(idx); if (node.getNodeType() == Node.ELEMENT_NODE) &#123; org.w3c.dom.Element element = (org.w3c.dom.Element) node; data.put(element.getNodeName(), element.getTextContent()); &#125; &#125; try &#123; stream.close(); &#125; catch (Exception ex) &#123; // do nothing &#125; return data; &#125; catch (Exception ex) &#123; WXPayUtil.getLogger().warn(&quot;Invalid XML, can not convert to map. Error message: &#123;&#125;. XML content: &#123;&#125;&quot;, ex.getMessage(), strXML); throw ex; &#125;&#125;","categories":[],"tags":[{"name":"util","slug":"util","permalink":"http://example.com/tags/util/"}]},{"title":"月初和月末","slug":"月初和月末","date":"2018-06-30T12:15:19.000Z","updated":"2021-09-22T11:19:04.654Z","comments":true,"path":"2018/06/30/月初和月末/","link":"","permalink":"http://example.com/2018/06/30/%E6%9C%88%E5%88%9D%E5%92%8C%E6%9C%88%E6%9C%AB/","excerpt":"","text":"月初和月末 12345678910111213141516Calendar cale = Calendar.getInstance(); // 获取当月第一天和最后一天 SimpleDateFormat format = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;) String firstday, lastday; // 获取前月的第一天 cale.add(Calendar.MONTH, 0); cale.set(Calendar.DAY_OF_MONTH, 1); firstday = format.format(cale.getTime()); Date firstDay = format.parse(firstday); // 获取前月的最后一天 cale = Calendar.getInstance(); cale.add(Calendar.MONTH, 1); cale.set(Calendar.DAY_OF_MONTH, 0); lastday = format.format(cale.getTime()); Date lastDay = format.parse(lastday);","categories":[],"tags":[{"name":"util","slug":"util","permalink":"http://example.com/tags/util/"}]},{"title":"Map转换为XML格式","slug":"Map转换为XML格式","date":"2018-06-30T12:10:12.000Z","updated":"2021-09-22T11:19:04.607Z","comments":true,"path":"2018/06/30/Map转换为XML格式/","link":"","permalink":"http://example.com/2018/06/30/Map%E8%BD%AC%E6%8D%A2%E4%B8%BAXML%E6%A0%BC%E5%BC%8F/","excerpt":"","text":"Map转换为XML格式 123456789101112131415161718192021222324252627282930313233343536373839/** * 将Map转换为XML格式的字符串 * * @param data Map类型数据 * @return XML格式的字符串 * @throws Exception */public static String mapToXml(Map&lt;String, String&gt; data) throws Exception &#123; DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance(); DocumentBuilder documentBuilder= documentBuilderFactory.newDocumentBuilder(); org.w3c.dom.Document document = documentBuilder.newDocument(); org.w3c.dom.Element root = document.createElement(&quot;xml&quot;); document.appendChild(root); for (String key: data.keySet()) &#123; String value = data.get(key); if (value == null) &#123; value = &quot;&quot;; &#125; value = value.trim(); org.w3c.dom.Element filed = document.createElement(key); filed.appendChild(document.createTextNode(value)); root.appendChild(filed); &#125; TransformerFactory tf = TransformerFactory.newInstance(); Transformer transformer = tf.newTransformer(); DOMSource source = new DOMSource(document); transformer.setOutputProperty(OutputKeys.ENCODING, &quot;UTF-8&quot;); transformer.setOutputProperty(OutputKeys.INDENT, &quot;yes&quot;); StringWriter writer = new StringWriter(); StreamResult result = new StreamResult(writer); transformer.transform(source, result); String output = writer.getBuffer().toString(); //.replaceAll(&quot;\\n|\\r&quot;, &quot;&quot;); try &#123; writer.close(); &#125; catch (Exception ex) &#123; &#125; return output;&#125;","categories":[],"tags":[{"name":"util","slug":"util","permalink":"http://example.com/tags/util/"}]},{"title":"问题收集2","slug":"java/java_常见问题2","date":"2018-06-29T13:26:41.000Z","updated":"2021-09-22T11:19:04.628Z","comments":true,"path":"2018/06/29/java/java_常见问题2/","link":"","permalink":"http://example.com/2018/06/29/java/java_%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%982/","excerpt":"","text":"基本问题2 例1 ： 输出结果？ 1234567public class test&#123; public static void main(String[] args) &#123; for (int i = 0; i &lt;= 10; i++) Integer k = new Integer(i); System.out.println(&quot;Hello World&quot;); &#125;&#125; A. Hello World B. Hello C. 编译错误 D. 都不对 例2 ： Consider a function which, for a given whole number n, returns the number of ones required when writing out all numbers between 0 and n. For example, f(13)=6. Notice that f(1)=1. What is the next largest n such that f(n)=n？（解释：有一个整数n，写一个函数f(n)，返回0～n之间出现的“1”的个数。比如f(1)=1；f(13)=6（1、10、11、12、13一共6个1），问一个最大的f(n)=n中的n是什么？） 123456789101112131415161718192021222324public class Test &#123; public static void main(String[] args) &#123; int n = 2; int res=1; while((getonly(n)+res) != n) &#123; res+=getonly(n); ++n; &#125; System.out.println(n); &#125; static int getonly(int num)&#123; int number=0; String s=num+&quot;&quot;; int len=s.length(); if(len!=0)&#123; for(int i=0;i＜len;i++)&#123; char a=s.charAt(i); if(a==&#x27;1&#x27;)&#123; number++; &#125; &#125; &#125;return number; &#125;&#125; 例3 ： Which of the choices below correctly describes the amount of time used by the following code(哪个正确描述了代码的调度次数)？ 123456n = 10;for(i=1;i&lt;n;i++) for(j=1;j&lt;n;j+=n/2) for(k=1;k&lt;n;k=2*k) x = x + 1; A. O(n^3) B. O(n2log n) C. O(n(log n)*2) D. O(n log n) 例4 ： 筛选法100以内的素数？ 1234567891011121314151617181920212223 public class Test&#123; public static void main(String argv[])&#123; &#123; int a[101],i,j; for (i=1;i＜101;i++) a[i]=1; /＊根据筛选法求出100以内的所有素数，所谓筛选法，是指从小到大筛去一个已知素数的所有倍数。例如，根据2，我们可筛去4,6,8,...,98,100等数，然后根据3可筛去9,15,... ,99等数(注意此时6、12等数早就被筛去了)，由于4被筛去了，下一个用于筛选的素数是5，以此类推，最后剩余的就是100以内的素数＊/ for ( i=2;i＜101;i++) &#123; if (a[i]!=0) for (j=i+i;j＜101;) &#123; if (j%i==0) a[j]=0; j=j+i; &#125; &#125; for(i=2;i＜101;i++) if (a[i]!=0) System.out.println(i); &#125; 普通算法 123456789private static boolean numberIsPrime(int n) &#123; for (int i = 2; i &lt; n; i++) &#123; if (n % i == 0) &#123; return false; &#125; &#125; return true;&#125; Java内存管理 例2 ： 正确结果？ A. Java虚拟机中的自动垃圾回收机阻止程序运行移除内存 B. 一段程序可以建议垃圾回收执行，但是不能强迫他执行 C. 垃圾回收是一个独立的平台 D. 当一个对象的所有引用都没置为空时，这个对象就可以变为能被垃圾回收 例2 ： 符合垃圾收集器的收集标准？ A. object sobj = new object(); B. object sobj = null; C. object sobj = new object(); D. sobj = new object(); 例3 ： 符合垃圾收集器的收集标准？ A. object aobj = new object(); B. object bobj = new object(); C. object cobj = new object(); D. aobj = bobj; E. aobj = cobj; F. cobj = null; G. aobj = null; ​ 面向对象 例1 ： 编译时会产生错误的？ 1234567891011121314151617181920class reverseIt4 &#123; public static void main(String[] args) &#123; EnclosingClass jb2; //-----1 System.out.println(jb2.m); //-----2 &#125; &#125; class EnclosingClass //--------3 &#123; public int m = 6; class InnerClass //-------4 &#123; int msquare; InnerClass() &#123; msquare = m＊m; &#125; &#125; &#125; A.语句1 B.语句2 C.语句3 D.语句4 例2 ： 不是Object类所定义的public method？ A. finalize() B. clone() C. wait() D. sleep() 例3 ： The code output（下列代码输出结果是什么？） 123456789101112131415161718192021222324252627import java.util.＊;public class Test &#123;private String value = null;public Test(String v) &#123; value = v; &#125; public boolean equals(Test o) &#123; if (o == this) return true; if (o instanceof Test) &#123; Test test = (Test) o; return value.equals(test.value); &#125; return false; &#125; public static void main(String[] args) &#123; List list = new ArrayList(); Test test1 = new Test(&quot;object&quot;); Test test2 = new Test(&quot;object&quot;); Test test3 = new Test(&quot;object&quot;); object test4 = new Test(&quot;object&quot;); list.add(test1); System.out.println(list.contains(test2)); System.out.println(test2.equals(test3)); System.out.println(test3.equals(test4)); &#125;&#125; A.false true false B.true true true C.false false false D.false true true","categories":[],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"问题收集1","slug":"java/java_常见问题","date":"2018-06-29T13:26:41.000Z","updated":"2021-09-22T11:19:04.627Z","comments":true,"path":"2018/06/29/java/java_常见问题/","link":"","permalink":"http://example.com/2018/06/29/java/java_%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/","excerpt":"","text":"基本问题 例1 ： 下面给出的java中ClassLoader中的描述，哪些描述是正确的？ A. ClassLoader没有层次关系 B. 所有类中的ClassLoader都是AppClassLoader C. 通过Class.forName(String className),能够动态加载一个类 D. 不同的ClassLoader加载同一个Class文件，所得的类是相同的 例2 ： Which characters does JVM use(JVM 用哪种字符表示)？ A. ASCII characters B. Unicode characters C. Cp1252 D. UTF-8 例3 ： 程序的输出结果？ 1234567891011121314public class Test&#123; static&#123; int x = 5; &#125; static int x,y; public static void main(String[] arg)&#123; x--; myMethod(); System.out.println(x + y++ + x); &#125; public static void myMethod()&#123; y = x++ + ++x; &#125;&#125; 例4 ： Given the following class :(给定下面的类：)？ 1234567public class ZeroPrint&#123; public static void main(String argv[])&#123; int i = 0; //Here &#125;&#125; 例5 ： 下列程序的输出结果是（）。 1234567891011import java.util.＊;public class Test &#123; public static void main(String[] args) &#123; int j = 0; for (int i = 0; i ＜ 100; i++) &#123; j = j++; &#125; System.out.println(j); &#125;&#125; A.0 B.99 C.100 D.101 例6 ： If there are &quot; int a=5，b=3;&quot;，the values of a and b are __ and __ after execute&quot; if(！(a== b)&amp;&amp;(a== 1+b++)){};&quot;.（假 如 “int a=5，b=3；”，则 执 行 &quot;if(！(a== b)&amp;&amp;(a==1+b++)){}; &quot;后a和b的值分别为__和__。） A.5,3 B.0,1 C.0,3 D.5,4 例7 ： 以下代码的执行结果是多少？ 12345678910111213141516171819202122232425import java.util.＊;public class Test3&#123; public static void main(String[] args) &#123; int i=0; i=i++ + ++i; int j=0; j=++j + j++ + j++ + j++; int k=0; k=k++ + k++ + k++ + ++k; int h=0; h=++h + ++h; int p1=0,p2=0; int q1=0,q2=0; q1=++p1; q2=p2++; System.out.println(&quot;i &quot;+i); System.out.println(&quot;j &quot;+j); System.out.println(&quot;k &quot;+k); System.out.println(&quot;h &quot;+h); System.out.println(&quot;p1 &quot;+p1); System.out.println(&quot;p2 &quot;+p2); System.out.println(&quot;q1 &quot;+q1); System.out.println(&quot;q2 &quot;+q2); &#125;&#125; 例8 ： 输出结果？ 1234int i = 012;int j = 034;int k = (int)056L;int l = 078; A. 输出12,34,56 B. int K = (int)056L 编译错误 C. 输出10,28,46 D. int l = 078 编译错误 ​ 例9 ： 程序错误的——？ A. short s = 1; s = s+1;; B. short s = 1; s+=1; ​ ​ 例10 ： Which declaration for the main() method in a stand-alone program are NOT valid (哪一个main函数声明是不合法)？ A. public static voif main(); B. public static void main(String[] string); C. public static void main(String[] exp) throws FileNot FoundException; D. static void main(String[] args); ​ 例11 ： 输出结果？ 123456public class Test&#123; public static void main(String[] args)&#123; boolean b = true?false:true == true?false:true; System.out.println(b); &#125;&#125; A. true; B. false; C. null; D. 以上都不对; 例12 ： 输出结果？Which of the following lines if placed after the comment //Here will print out is not 0?(哪一个选项替换掉类中的Here不会输出0？) A. System.out.print(i++); B. System.out.print(i); C. System.out.print(i+'0'); D. System.out.print(i--); 例13 ： Which of the following will compile correctly？ A. Short myshort = 99S; B. foloat z = 1.0; C. int t = &quot;abc&quot;.length(); D.char c = 17c; 例14 ： 输出结果？ 123456public class Test&#123; public static void main(String[] args)&#123; int a = 5; System.out.println(&quot;value is&quot;+ ((a&lt;5)?10.9:9)); &#125;&#125; A. 编译错误; B. 10.9; C. 9; D. 以上不对; 例15 ： 输出结果？ 12345678public class Test&#123; public static void main(String[] args)&#123; char x = &#x27;x&#x27;; int i = 10; System.out.println(false ? i : x); System.out.println(false ? 10 : x); &#125;&#125; A. 120 x; B. 120 120; C. x 120; D. 以上不对; 例16 ： What does the following program print (输出结果)？ 12345678910111213141516171819public calss Test &#123; public static void main(String[] args)&#123; int m =5 ,n=5; if((m != 5) &amp;&amp; (n++ == 5))&#123;&#125; System.out.println(&quot;a.&quot; + n); m = n = 5; if((m != 5) &amp; (n++ == 6))&#123;&#125; System.out.println(&quot;b.&quot; + n); m = n = 5; if((m == 5) || (n++ == 5))&#123;&#125; System.out.println(&quot;c.&quot; + n); m = n = 5; if((m==5) | (n++ == 6))&#123;&#125; System.out.println(&quot;d.&quot; + n); int a =1,b = 2; int c = a &amp; b; System.out.println(&quot;a&amp;b&quot; + c); &#125;&#125; 例17 ： 输出结果？ 123456public class Test &#123; public static void main(String[] args)&#123; int num = 32; System.out.println(num &gt;&gt; 32); &#125;&#125; A. 32; B. 16; C. 1; D. 0; Exception 例1 ： Which of the following is NOT true regarding to RuntimeException (关于运行时异常不正确的)？ A. RuntimeException is the superclass of those exceptions that must be thrown during the normal operation of the Java VirtulMachine(运行时异常是一个超类，当Java虚拟机正常时一定抛出); B. A method is not required t odeclare in its throws clause any any subclasses of RuntimeExcption that might be thrown during the execution of the method but caught(运行时异常可以不去捕捉); C. An RuntimeException is a subcalss of Throwable that indicates serious problems that a reasonable application should not try to catch(运行时异常是一个子类，当出现严重运行问题时也不会抛出); D. NullPointerExcption is one kind of RuntimeException(空异常是一种运行时异常); 例2 ： 定义了如下类和测试方法，请问测试时期待要捕获下面那个选项的异常？ 123456789101112class MyException extends Exceeption&#123; MyException()&#123;&#125; class A&#123; public int format(String str) throws MyException &#123; int i = Integer.valueof(str); return i; &#125; &#125; public void testTester()&#123; new A().format(&quot;1&quot;); &#125;&#125; A. Exception; B. MyException; C. MyException和NumberFormatException; D. RuntimeException; 例3 ： try{}里有一个return语句，那么紧跟在这个try后面的finally{}里的code会不会被执行，什么时候被执行那个，在return前还是后？ A. 在return前执行; B. 在return后执行; C. 不会执行; D. 抛出异常; ​ 例4 ： 下面四段Java程序中哪些不能被编译通过？ 程序1： import java.io.＊; public class Test &#123; public static void main(String[] args) &#123; try &#123; test(); &#125; catch (Exception ex) &#123; ex.printStackTrace(); &#125; &#125; static void test() &#123; try &#123; throw new Exception(&quot;test&quot;); &#125; catch (Exception ex) &#123; ex.printStackTrace(); &#125; &#125; &#125; 程序2： import java.io.＊; public class Test &#123; public static void main(String[] args) &#123; try &#123; test(); &#125; catch (Exception ex) &#123; exprintStackTrace(); &#125; &#125; static void test() &#123; throw new Exception(&quot;test&quot;); &#125; &#125; 程序3： import java.io.＊; public class Test &#123; public static void main(String[] args) &#123; try &#123; test(); &#125; catch (Exception ex) &#123; ex.printStackTrace(); &#125; &#125; static void test() throws Exception &#123; throw new Exception(&quot;test&quot;); &#125; &#125; 程序4： import java.io.＊; public class Test &#123; public static void main(String[] args) &#123; try &#123; test(); &#125; catch (IoException ex) &#123; ex.printStackTrace(); &#125; &#125; static void test() throws Exception &#123; &#125; &#125; A.程序1和程序2 C.程序1和程序3 B.程序3和程序4 D.程序2和程序4 ​ 例5 ： 输出结果？ public class Test&#123; public static void main(String[] args)&#123; try&#123; System.out.println(&quot;condition 1&quot;); &#125;catch(ArrayIndexoutofBoundsException)&#123; System.out.println(&quot;condition 2&quot;); &#125;catch(Exception e)&#123; System.out.println(&quot;condition 3&quot;); &#125;finally&#123; System.out.println(&quot;finally&quot;); &#125; //test(); &#125; static void test()&#123; String str = &quot;cc&quot;; str.compareTo(&quot;abc&quot;); &#125; &#125; 静态变量&amp;私有变量 例1 ： 输出结果？ 123456789101112131415161718192021222324class Value &#123; public int i = 15;&#125;public class Test&#123; public static void main(String[] args)&#123; Test t = new Test(); t.first(); &#125; public void first()&#123; int i = 5; Value v = new Value(); v.i = 25; second(v,i); System.out.println(v.i); &#125; public void second(Value v,int i)&#123; i = 0; v.i = 20; Value val = new Value(); v = val; System.out.println(v.i +&quot; &quot;+ i); &#125;&#125; 例2 ： 静态变量的创建？ A. 一旦一个静态变量被分配，它就不允许改变; B. 一个静态变量在一个方法中创建，它在被调用时候值保持不变; C. 在任意多个类的实例中，一个静态变量的实例只存在一个; D. 一个静态的标识符只能被应用于primitive value; 例3 ： 编译运行下列代码会出现什么情况？ 12345678910public class Sandys&#123; private int court; public static void main(String[] args)&#123; Sandys s = new Sandys(99); System.out.println(s.court); &#125; Sandys(int vallcount)&#123; court = ballcount; &#125;&#125; A. 编译错误，court变量定义的是私有变量; B. 编译错误，当System.out.println方法被调用是s没有被初始化; C. 编译和运行时没有输出结果; D. 编译和运行时输出的结果是99; 例4 ： 编译运行下列代码会出现什么情况？ 123456public class Pvf&#123; static boolean Paddy; public static void main(String[] args)&#123; System.out.println(Paddy); &#125;&#125; A. 编译时错误; B. 编译时通过并输出结果false; C. 编译通过并输出结果true; D. 编译通过并输出结果null; 例5 ： 用命令行参数Java Sytch Jones Diggle 编译和运行程序出现的结果？ 123456public class Sytch&#123; int x = 2000; public static void main(String[] args)&#123; System.out.println(&quot;Ms &quot;+ args[1] + &quot;please pay $&quot; +x); &#125;&#125; A. 编译通过并输出Ms Diggle please pay $2000 结果; B. 编译时错误; C. 编译通过并输出Ms Jones please pay $2000 ; D. 编译通过但是运行是错误; 输入/输出流 例1 ： 假设异常处理已经被创建，下列哪个是创建RandomAccessFile类实例？ A. RandomAccessFile raf = new RandomAccessFile(&quot;myfile.txt&quot;,&quot;rw&quot;); B. RandomAccessFile raf = new RandomAccessFile(new Data ImputStr-eam()); C. RandomAccessFile raf = new RandomAccessFile(&quot;myfile.txt&quot;); D. RandomAccessFile raf = new RandomAccessFile(new File(&quot;myfile.txt&quot;)); 例2 ： 需要读一个比较大的文本文件，这个文件里有很多字节的数据，最适合读这类文件的是？ A. new FileImputStream(&quot;file.name&quot;); B. new InputStreamReader(new FileInputStream(&quot;file.name&quot;)); C. new BufferReader(new ImputStreamReader(new FileInputStream(&quot;file.name&quot;))); D. new RandomAccessFile raf = new RandomAccessFile(&quot;myfile.txt&quot;,&quot;+rw&quot;); 例3 ： 描述字符串写入文件？ 123456789101112import java.io.*;public class Test&#123; public static void main(String args[])&#123; try&#123; FileOutPutStream out = new FileOutStream(&quot;filename.txt&quot;); out.wtite(&quot;字符串写入文件&quot;.getBytes()); out.close; &#125;catch(IOexception e)&#123; &#125; &#125;&#125; 例4 ： 键入俩个整数，输出平方值和立方值？ 12345678910111213141516171819202122232425262728class InputData&#123; static private String s = &quot;&quot;; static public void input()&#123; BufferdReader bu = new BufferedReader(new InputStreamReader(System.in)); try&#123; s = bu.readLine(); &#125;catch(IoException e)&#123;&#125; &#125; static public int getInt()&#123; input(); return Integer.parseInt(s); &#125; &#125; class Result&#123; void print (int d)&#123; System.out.println(d + &quot;的平方：&quot;+d*d); System.out.println(d + &quot;的立方：&quot;+d*d*d); &#125; &#125; public class printResult()&#123; public static void main(String args[])&#123; Result result = new Result(); System.out.println(&quot;请输入一个整数：&quot;); int a = InputData.getInt(); result.print(a); &#125; &#125;&#125; 例5 ： 判断某个整数是否为2的阶次方数？ 12345678910111213141516171819202122232425262728293031 class InputData&#123; static private String s = &quot;&quot;; static public void input()&#123; BufferedReader bu =new BufferedReader(new InputStreamReader(System.in)); try&#123; s = bu.readLine(); &#125;catch (IOException e)&#123;&#125; &#125; static public int getInt()&#123; input(); return Integer.parseInt(s); &#125;&#125;class Result&#123; void print(int d)&#123; if(((d-1)&amp;(d)) == 0 &amp;&amp; (d!=0))&#123; System.out.println(&quot;是2的阶次&quot;); &#125;else&#123; System.out.println(&quot;不是2 的阶次&quot;); &#125; &#125;&#125;public class ttest1 &#123; public static void main(String[] args) &#123; Result result = new Result(); System.out.println(&quot;请输入一个整数：&quot;); int a = InputData.getInt(); result.print(a); &#125;&#125; 递归 例1 ： 数组元素的全部组合？ 123456789101112131415 public static void main(String[] args) &#123; String arr[] = new String[]&#123;&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;&#125;; listAll(Arrays.asList(arr), &quot;&quot;); &#125; public static void listAll(List candidate, String prefix) &#123;// if (candidate.isEmpty()) &#123; System.out.println(prefix);// &#125; for (int i = 0; i &lt; candidate.size(); i++) &#123; List temp = new LinkedList(candidate); listAll(temp,prefix + temp.remove(i)); &#125; &#125; 例2 ： 菲波那切数列？ 1234567891011121314151617 public static int k =0;public static void main(String[] args) &#123; Scanner sc = new Scanner(System.in); long a = sc.nextLong(); System.out.println(test(a)); System.out.println(&quot;共调用了&quot;+k+&quot;次&quot;);&#125;public static long test(long m)&#123; if(m==0 || m==1)&#123; k++; return m; &#125;else &#123; return test(m-1)+test(m-2); &#125;&#125; 1234567891011public static int Recursion(int n)&#123; if(n==1)&#123; return 0; &#125; if(n==2)&#123; return 1; &#125; return Recursion(n-1)+Recursion(n-2);&#125; 例3 ： 一个字符串中可能包含a～z中的多个字符，如有重复，如String data=“aavzcadfdsfsdhshgWasdfasdfdddaaa”，求出现次数最多的那个字母及次数，如有多个重复的则都求出。 （1）引入TreeSet：通过集合快速找到所有出现的字符串。 （2）引入ArrayList：为了快速排序，再通过StringBuffer生成排序后的字符串。 （3）通过String api中的基本方法indexOf lastIndexOf来计算TreeSet中每个字符串的最大值。 （4）如果出现相同的，则把相同的都记录在一个列表中。 （5）记录第一个出现次数最多的字符（为了计算多个字符串相同情况）。 （6）计算最大字符串列表中哪些才是真正出现次数最多的。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859import java.util.ArrayList;import java.util.Collections;import java.util.Iterator;import java.util.TreeSet;public class Test &#123;public static void main(String[] args) &#123; // ToDo Auto-generated method stub String input = &quot;aavzcadfdsfsdhshgwasdfasdfdddaaa&quot;; new Test().doString(input);&#125;public void doString(String input) &#123; char[] chars = input.toCharArray(); ArrayList lists = new ArrayList(); TreeSet set = new TreeSet(); for (int i = 0; i ＜ chars.length; i++) &#123; lists.add(String.valueof(chars[i])); set.add(String.valueof(chars[i])); &#125; System.out.println(set); Collections.sort(lists); System.out.println(lists); StringBuffer sb = new StringBuffer(); for (int i = 0; i ＜ lists.size(); i++) &#123; sb.append(lists.get(i)); &#125; input = sb.toString(); System.out.println(input); int max = 0; String maxString = &quot;&quot;; ArrayList maxlist = new ArrayList(); Iterator its = set.iterator(); while (its.hasNext()) &#123; String os = (String) its.next(); int begin = input.indexof(os); int end = input.lastIndexof(os); int value = end - begin + 1; if (value ＞ max) &#123; max = value; maxString = os; maxlist.add(os); &#125; else if (value == max) &#123; maxlist.add(os); &#125; &#125; int index = 0; for (int i = 0; i ＜ maxlist.size(); i++) &#123; if (maxlist.get(i).equals(maxString)) &#123; index = i; break; &#125; &#125; System.out.print(&quot;max data&quot;); for (int i = index; i ＜ maxlist.size(); i++) &#123; System.out.print(maxlist.get(i) + &quot; &quot;); &#125; System.out.println(); System.out.println(&quot;max&quot; + max); &#125;&#125; 例4 ： 利用1、2、2、3、4这5个数字，用Java写一个main函数，打印出所有不同的排列，如12234、21234等，要求打印出来的不能有重复。 对于任意一个串利用递归进行排列时，循环串中的每个字符到第一个字符进行递归。如果串中字符出现重复，则重复的字符只可以利用递归算法一次，即只要与前面相同的字符循环到第一个字符时，不调用递归就可以避免重复。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354import java.util.＊;public class test123 &#123;static int count=0; public static void main(String[] arg) &#123;//Scanner r=new Scanner(System.in); String s=&quot;1223&quot;; String s2=&quot;1232&quot;; int t = 1&amp;0; System.out.println(t); /＊ int cc=s2.indexof(s2.charAt(1)); int cc2=s2.indexof(s2.charAt(2)); System.out.println(s2.charAt(0)); System.out.println(s2.charAt(1)); System.out.println(s2.charAt(2)); System.out.println(s2.charAt(3)); System.out.println(s2.indexof(s2.charAt(0))); System.out.println(s2.indexof(s2.charAt(1))); System.out.println(s2.indexof(s2.charAt(2))); System.out.println(s2.indexof(s2.charAt(3))); ＊/ int index[]=new int[s.length()]; for(int i=0; i＜s2.length(); i++) //该循环将所有的字符第一次出现的位置记录在数组 //index中 &#123;index[i]=s2.indexof(s2.charAt(i)); //System.out.println(s2.indexof(s2.charAt(i))); &#125; Pailie(s,&quot;&quot;); //System.out.println(&quot;Total:&quot;+count); &#125; static void Pailie(String s,String p) &#123; if(s.length()＜1) &#123; //System.out.println(p); //字符串长度小于1，换行 count++; &#125; else &#123; int index[]=new int[s.length()]; for(int i=0; i＜s.length(); i++) //该循环将所有的字符第一次出现的位置记录在数组index中 &#123;index[i]=s.indexof(s.charAt(i)); //System.out.println(s.charAt(i)); &#125; for(int i=0; i＜s.length(); i++) &#123; if(i==index[i]) //只有当循环数与第一次记录数相等时才递归，保证相同字符 //中的第一个调用 &#123; //System.out.println(&quot;ppp&quot;+index[i]); Pailie(s.substring(1),p+s.substring(0,1)); //递归，打印其他字符 &#125; s=s.substring(1)+s.substring(0,1); //循环移位 &#125; &#125; &#125;&#125; ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​","categories":[],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"LoadJsonUtil","slug":"LoadJsonUtil","date":"2018-06-28T11:10:12.000Z","updated":"2021-09-22T11:19:04.607Z","comments":true,"path":"2018/06/28/LoadJsonUtil/","link":"","permalink":"http://example.com/2018/06/28/LoadJsonUtil/","excerpt":"","text":"LoadJsonUtil 1234567891011121314151617public static String getJSON(String url) &#123; StringBuilder json = new StringBuilder(); try &#123; URL oracle = new URL(url); URLConnection yc = oracle.openConnection(); BufferedReader in = new BufferedReader(new InputStreamReader( yc.getInputStream(),&quot;utf-8&quot;));//防止乱码 String inputLine = null; while ((inputLine = in.readLine()) != null) &#123; json.append(inputLine); &#125; in.close(); &#125; catch (MalformedURLException e) &#123; &#125; catch (IOException e) &#123; &#125; return json.toString(); &#125;","categories":[],"tags":[{"name":"util","slug":"util","permalink":"http://example.com/tags/util/"}]},{"title":"wxUserInfoUtil","slug":"wxUserInfoUtil","date":"2018-06-28T11:09:12.000Z","updated":"2021-09-22T11:19:04.650Z","comments":true,"path":"2018/06/28/wxUserInfoUtil/","link":"","permalink":"http://example.com/2018/06/28/wxUserInfoUtil/","excerpt":"","text":"wxUserInfoUtil 1234567891011121314151617181920212223242526272829303132333435363738394041public static Map&lt;String, String&gt; wxUserInfo(String code) &#123; Map&lt;String, String&gt; map = new HashMap&lt;&gt;(); String appid = &quot;wxxxxxxxxxxxxxxxxxf&quot;; String appsecret = &quot;6xxxxxxxxxxxxxxxxxxxxxxxx1&quot;; String url = &quot;https://api.weixin.qq.com/sns/oauth2/access_token?appid=&quot;+appid+&quot;&amp;secret=&quot;+appsecret+&quot;&amp;code=&quot;+code+&quot;&amp;grant_type=authorization_code&quot;; String loadJson = LoadJsonUtil.getJSON(url); //解析相应内容（转换成json对象） JSONObject json = JSONObject.fromObject(loadJson); //用户的唯一标识（openid） String openid = String.valueOf(json.get(&quot;openid&quot;)); String access_token = String.valueOf(json.get(&quot;access_token&quot;)); map.put(&quot;openid&quot;, openid); map.put(&quot;access_token&quot;, access_token); //https://api.weixin.qq.com/sns/userinfo?access_token=ACCESS_TOKEN&amp;openid=OPENID&amp;lang=zh_CN String requestUrl =&quot;https://api.weixin.qq.com/sns/userinfo?access_token=&quot;+access_token+&quot;&amp;openid=&quot;+openid+&quot;&amp;scope=snsapi_userinfo&quot;+&quot;&amp;lang=zh_CN&quot;; //请求 String userInfoJson =LoadJsonUtil.getJSON(requestUrl); JSONObject userInfo = JSONObject.fromObject(userInfoJson); //nick,phone,type,unionId,openId,icon String nickname = String.valueOf(userInfo.get(&quot;nickname&quot;)); String unionid = String.valueOf(userInfo.get(&quot;unionid&quot;)); //icon 图标 String headimgurl = String.valueOf(userInfo.get(&quot;headimgurl&quot;)); String sex = String.valueOf(userInfo.get(&quot;sex&quot;)); String country = String.valueOf(userInfo.get(&quot;country&quot;)); map.put(&quot;nickname&quot;, nickname); map.put(&quot;unionid&quot;, unionid); map.put(&quot;headimgurl&quot;, headimgurl); map.put(&quot;sex&quot;, sex); map.put(&quot;country&quot;, country); return map; &#125;","categories":[],"tags":[{"name":"util","slug":"util","permalink":"http://example.com/tags/util/"}]},{"title":"时间复杂度","slug":"sort/时间复杂度","date":"2018-06-26T11:20:35.000Z","updated":"2021-09-22T11:19:04.646Z","comments":true,"path":"2018/06/26/sort/时间复杂度/","link":"","permalink":"http://example.com/2018/06/26/sort/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/","excerpt":"","text":"时间复杂度 1.时间频度 一个算法执行所耗费的时间从理论上是不能算出来的，必须上机运行测试才知道。但不可能也没有必要对每个算法都上机测试，只需知道哪个算法花费的时间多，哪个算法花费的时间少就可以了，并且一个算法花费的时间与算法中语句的执行次数成正比例，哪个算法中语句执行次数多，它花费的时间就多。一个算法中的语句执行次数称为语句频度或时间频度，记为T(n)。 2.时间复杂度 在刚才提到的时间频度中，n称为问题的规模，当n不断变化时，时间频度T(n)也会不断变化。但有时我们想知道它变化时呈现什么规律。为此，引入了时间复杂度的概念。 一般情况下，算法中基本操作重复执行的次数是问题规模n的某个函数，用T(n)表示，若有某个辅助函数f(n)，使得当n趋近于无穷大时，T（n）/f(n)的极限值为不等于零的常数，则称f(n)是T(n)的同数量级函数。记为T(n)=O(f(n))，称O(f(n)) 为算法的渐进时间复杂度，简称时间复杂度。 在各种不同的算法中，若语句的执行次数为一个常数，则时间复杂度为O(1)，另外，在时间频度不相同时，时间复杂度有可能相同，如T(n)=n2+3n+4与T(n)=4n2+2n+1，它们的频度不同，但时间复杂度相同，都为O(n^2)。 按数量级递增排列，常见的时间复杂度有： 常数阶o(1) 对数阶o(log(2)n) 线性阶o(n) 线性对数阶o(nlog(2)n) 平方阶o(n^2) 立方阶o(n^3) ... k次方阶o(n^k) 指数阶o(2^n) 随着规模n的不断增大，上述时间复杂度不断增大，算法的执行效率越低。 3.算法的时间复杂度 若要比较不同的算法的时间效率，受限要确定一个度量标准，最直接的办法就是将计算法转化为程序，在计算机上运行，通过计算机内部的计时功能获得精确的时间，然后进行比较。但该方法受计算机的硬件、软件等因素的影响，会掩盖算法本身的优劣，所以，一般采用事先分析估算的算法，即撇开计算机软硬件等因素，只考虑问题的规模（一般用自然数n表示），认为一个特定的算法的时间复杂度只采取于问题的规模，或者说它是问题的规模函数。 为了方便比较，通常的做法是，从算法中选取一种对于所研究的问题（或算法模型）来说是基本运算的操作，以其重复执行的次数作为评价算法时间复杂度的标准。该基本操作多数情况下是由算法最深层环内的语句表示的，基本操作的执行次数实际上就是相应语句的执行次数。 一般来说： T(n)=o(f(n))￼ o(1)＜o(log2n)＜o(n)＜o(n log2 n)＜o(n^2)＜o(n^3)＜o(2^n)","categories":[],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"ClassLoader","slug":"ClassLoader","date":"2018-06-24T11:20:35.000Z","updated":"2021-09-22T11:19:04.603Z","comments":true,"path":"2018/06/24/ClassLoader/","link":"","permalink":"http://example.com/2018/06/24/ClassLoader/","excerpt":"","text":"ClassLoader 基本概念 与C或C++编写的程序不同，Java程序并不是一个可执行文件，而是由许多独立的类文件组成的，每一个文件对应一个Java类。此外，这些类文件并非全部装入内存，而是根据程序需要逐渐载入。ClassLoader是JVM实现的一部分，ClassLoader包括bootstrap classloader（启动类加载器），ClassLoader在JVM运行的时候加载Java核心的API，以满足Java程序最基本的需求，其中就包括用户定义的ClassLoader，这里所谓的用户定义，是指通过Java程序实现的两个ClassLoader：一个是ExtClassLoader，它的作用是用来加载Java的扩展API，也就是/lib/ext中的类；第二个是AppClassLoader，它是用来加载用户机器上CLASSPATH设置目录中的Class的，通常在没有指定ClassLoader的情况下，程序员自定义的类就由该ClassLoader进行加载。 ClassLoader加载流程 当运行一个程序的时候，JVM启动，运行bootstrap classloader，该ClassLoader加载Java核心API（ExtClassLoader和AppClassLoader也在此时被加载），然后调用ExtClassLoader加载扩展API，最后AppClassLoader加载CLASSPATH目录下定义的Class，这就是一个程序最基本的加载流程。 12345678910111213141516171819202122232425protected synchronized Class loadClass(String name, boolean resolve)throws ClassNotFoundException&#123;// 首先检查该name指定的class是否有被加载Class c = findLoadedClass(name);if (c == null) &#123;try &#123;if (parent != null) &#123;//如果parent不为null，则调用parent的loadClass进行加载c = parent.loadClass(name, false);&#125; else &#123;//parent为null，则调用BootstrapClassLoader进行加载c = findBootstrapClass0(name);&#125;&#125; catch (ClassNotFoundException e) &#123;//如果仍然无法加载成功，则调用自身的findClass进行加载c = findClass(name);&#125;&#125;if (resolve) &#123;resolveClass(c);&#125;return c;&#125; 从上面一段代码中可以看出，一个类加载的过程使用了一种父类委托模式。为什么要使用这种父类委托模式呢？ 第1个原因就是这样可以避免重复加载，当父类已经加载了该类的时候，就没有必要子ClassLoader再加载一次。 第2个原因就是考虑到安全因素，如果不使用这种委托模式，那么可以随时使用自定义的String来动态替代Java核心API中定义的类型，这样会存在非常大的安全隐患，而父类委托的方式就可以避免这种情况，因为String已经在启动时被加载，所以，用户自定义类是无法加载一个自定义的ClassLoader。 一些重要的方法 loadClass方法。 ClassLoader.loadClass() 是ClassLoader的入口点。该方法的定义如下： 1Class loadClass(String name,boolean resolve); name是指JVM需要的类的名称，如Foo或java.lang.Object。resolve参数告诉方法是否需要解析类。在准备执行类之前，应考虑类解析。注意：并不总是需要解析，如果JVM只需要知道该类是否存在或找出该类的超类，那么就不需要解析。 defineClass方法。 defineClass方法接受由原始字节组成的数组，并把它转换成Class对象。原始数组包含如从文件系统或网络装入的数据。defineClass管理JVM的许多复杂的实现层面——它把字节码分析成运行时数据结构、校验有效性等。因为defineClass方法被标记成final的，所以也不能覆盖它。 findSystemClass方法。 findSystemClass方法从本地文件系统装入文件。它在本地文件系统中寻找类文件，如果存在，就使用defineClass将原始字节转换成Class对象，以将该文件转换成类。当运行Java应用程序时，这是JVM正常装入类的默认机制。对于定制的ClassLoader，只有在尝试其他方法装入类之后，再使用findSystemClass。这是因为ClassLoader是负责执行装入类的相关步骤，不负责所有类的所有信息。例如，即使ClassLoader从远程的Web站点装入了某些类，仍然需要在本地机器上装入大量的基本Java库。而这些类库不是我们所关心的，所以要JVM以默认方式从本地文件系统装入它们，这就是findSystemClass的用途。 resolveClass方法。 正如前面所提到的，可以不完全地（不带解析）装入类，也可以完全地（带解析）装入类。当编写我们自己的loadClass时，可以调用resolveClass，这取决于loadClass的resolve参数的值。 findLoadedClass方法。 findLoadedClass充当一个缓存：当请求loadClass装入类时，它调用该方法来查看ClassLoader是否已装入这个类，这样可以避免重新装入已存在类所造成的麻烦。 findClass方法。 loadClass默认实现调用这个新方法。findClass的用途包含ClassLoader的所有特殊代码，而无须复制其他代码（例如，当专门的方法失败时，调用系统ClassLoader）。 目的是从本地文件系统使用实现的类装载器装载一个类。为了创建自己的类装载器，应该扩展ClassLoader类，这是一个抽象类。可以创建一个FileClassLoaderextends ClassLoader，然后覆盖ClassLoader中的findClass(String name)方法，这个方法通过类的名字得到一个Class对象。 12345public Class findClass(String name) &#123; byte [] data = loadClassData(name); return defineClass(name, data, 0 , data.length); &#125; getSystemClassLoader方法。 如果覆盖findClass或loadClass，getSystemClassLoader能以实际的ClassLoader对象来访问系统ClassLoader（而不是固定地从findSystemClass调用它）。为了将类请求委托给父类ClassLoader，这个新方法允许ClassLoader获取它的父类Class Loader。当使用特殊方法，定制的ClassLoader不能找到类时，可以使用这种方法。 父类ClassLoader被定义成创建该ClassLoader所包含代码的对象的ClassLoader。 forName方法。 ** Class类中有一个静态方法forName，这个方法和ClassLoader中的loadClass方法的目的一样，都是用来加载class的，但是两者在作用上却有所区别。** 1Class clazz = Class.forName(&quot;something&quot;); 或者 12ClassLoadercl = Thread.currentThread().getContextClassLoader();Class clazz = cl.loadClass(&quot;something&quot;); Class.forName()调用Class.forName(name, initialize, loader)；也就是Class. forName(&quot;something&quot;)；等同于Class.forName (&quot;something&quot;, true, CALLCLASS. class.getClassLoader())； 第二个参数“true”是用于设置加载类的时候是否连接该类，true就连接，否则就不连接。关于连接，在此解释一下，在JVM加载类的时候，需要经过三个步骤：装载、连接、初始化。装载就是找到相应的class文件，读入JVM；初始化就是class文件初始化。这里详述一下连接，连接分三步。 第一步是验证class是否符合规格。 第二步是准备，就是为类变量分配内存的同时设置默认初始值。 第三步就是解释，而这步是可选的，根据上面loadClass方法的第二个参数来判定是否需要解释，这里的解释是指根据类中的符号引用查找相应的实体，再把符号引用替换成一个直接引用的过程。 在Java API文档中，loadClass方法的定义是protected，也就是说，该方法是被保护的，而用户使用的方法是一个参数，一个参数的loadClass方法实际上就是调用了两个参数，第二个参数默认为false。因此，在这里可以看出通过loadClass加载类实际上就是加载的时候并不对该类进行解释，因此不会初始化该类。而Class类的forName方法则相反，使用forName加载的时候就会将Class进行解释和初始化。","categories":[],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"运算符优先级","slug":"运算符优先级","date":"2018-06-21T11:18:59.000Z","updated":"2021-09-22T11:19:04.656Z","comments":true,"path":"2018/06/21/运算符优先级/","link":"","permalink":"http://example.com/2018/06/21/%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7/","excerpt":"","text":"运算符优先级 1级 —— . () 2级 —— ++ -- 3级 —— new 4级 —— ＊ / % 5级 —— + - 6级 —— ＞＞ ＜＜ ＞＞ ＞ 7级 —— ＞ ＜ ＞ = ＜= 8级 —— == != 9级 —— &amp; 10级 —— ^ 11级 —— ! 12级 —— &amp;&amp; 13级 —— || 14级 —— ?: 15级 —— = += -= ＊= /= %= ^= 16级 —— &amp;= ＜＜= ＞＞= 12(a&lt;b)?10.2:3 （14）java会根据运算符的精度类型进行自动类型转换。3-&gt;3.0 java编程规范：当后俩个表达式有一个是常量表达式，另外一个类型是T时，而常量表达式可以被T表示时（representable in type T），输出结果是T类型（15）","categories":[],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"数据类型的转换","slug":"数据类型的转换","date":"2018-06-19T11:18:26.000Z","updated":"2021-09-22T11:19:04.653Z","comments":true,"path":"2018/06/19/数据类型的转换/","link":"","permalink":"http://example.com/2018/06/19/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E8%BD%AC%E6%8D%A2/","excerpt":"","text":"数据类型的转换 Java的数据类型分为三大类，即布尔型、字符型和数值型，其中，数值型又分为整型和浮点型。相对于数据类型，Java的变量类型为布尔型boolean；字符型char；整型byte、short、int、long；浮点型float、double。其中四种整型变量和两种浮点型变量分别对应于不同的精度和范围。此外，编程时还经常用到两种类变量，即String和Date。 数据类型转换的种类 Java数据类型的转换一般分三种，分别是：简单数据类型之间的转换、字符串与其他数据类型的转换、其他实用数据类型的转换。 简单数据类型之间的转换 在Java中，整型、实型、字符型被视为简单数据类型，这些类型由低级到高级分别为(byte，short，char)—int—long—float—double。 简单数据类型之间的转换又可以分为：低级到高级的自动类型转换、高级到低级的强制类型转换、包装类过渡类型能够转换。 2.1. 自动类型转换。 低级变量可以直接转换为高级变量，这叫自动类型转换。例如，下面的语句可以在Java中直接通过： byte b;int i=b;long l=b;float f=b;double d=b; 如果低级类型为char型，向高级类型（整型）转换时，会转换为对应的ASCII码值，例如： char c='c'; int i=c; System.out.println(&quot;output:&quot;+i); 输出：output:99; 对于byte、short、char三种类型而言，它们是相同级别的，因此，不能相互自动转换，可以使用下述的强制类型转换。 short i=99;char c=(char)i;System.out.println(&quot;output:&quot;+c); 输出：output:c; 2.2. 强制类型转换。 将高级变量转换为低级变量时，情况会复杂一些，你可以使用强制类型转换。如： int i=99;byte b=(byte)i;char c=(char)i; 这种转换可能会导致溢出或精度的下降。 2.3. 包装类过渡类型转换。 Java的包装类就是可以直接将简单类型的变量表示为一个类。Java共有六个包装类，分别是Boolean、Character、Integer、Long、Float和Double，从字面上可以看出它们分别对应于boolean、char、int、long、float和double。而String和Date本身就是类，不存在包装类的概念。 在进行简单数据类型之间的转换（自动转换或强制转换）时，可以利用包装类进行中间过渡。一般情况下，首先声明一个变量，然后生成一个对应的包装类，就可以利用包装类的各种方法进行类型转换了。 例1，当希望把float型转换为double型时： float f1=100.00f; Float F1=new float(f1); Double d1=F1.doubleValue(); 例2，当希望把double型转换为int型时： double d1=100.00; Double D1=new Double(d1); int i1=D1.intValue(); 例3，当希望把int型转换为double型时，自动转换： int i1=200; double d1=i1;; 例4，简单类型的变量转换为相应的包装类，可以利用包装类的构造函数。 Boolean(boolean value) Character(char value) Integer(int value) Long(long value) Float(float value) Double(double value) 利用这种方法也可以实现不同数值型变量间的转换，例如，对于一个双精度实型类，int Value()可以得到其对应的整型变量，而double Value()可以得到其对应的双精度实型变量。 字符串型与其他数据类型的转换 通过查阅类库中各个类提供的成员方法可以看到，几乎从java.lang.Object类派生的所有类都提供了toString()方法，即将该类转换为字符串。例如，Characrer、Integer、Float、Double、Boolean、Short等类的toString()方法用于将字符、整数、浮点数、双精度数、逻辑数、短整型等类转换为字符串，如下所示： class Test &#123; public static void main(String args[]) &#123; int i1 = 10; float f1 = 3.14f; double d1 = 3.1415926; Integer I1 = new Integer(i1); Float F1 = new Float(f1) Double D1 = new Double(d1); String si1=I1.toString(); String sf1=F1.toString(); String sd1=D1.toString(); System.out.println(&quot;si1&quot; + si1); System.out.println(&quot;sf1&quot; + sf1); System.out.println(&quot;sd1&quot; + sd1); &#125; &#125; （4）将字符型直接作为数值转换为其他数据类型 将字符型变量转换为数值型变量实际上有两种对应关系：一种是将其转换成对应的ASCII码；另一种是转换关系，例如，'1’就是指数值1，而不是其ASCII码，对于这种转换，可以使用Character的getNumericValue(char ch)方法。","categories":[],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"Java异常","slug":"java/Java异常","date":"2018-06-19T01:18:26.000Z","updated":"2021-09-22T11:19:04.623Z","comments":true,"path":"2018/06/19/java/Java异常/","link":"","permalink":"http://example.com/2018/06/19/java/Java%E5%BC%82%E5%B8%B8/","excerpt":"","text":"Java异常 1.什么是异常 在Java程序运行时，常常会出现一些非正常的现象，这种情况称为运行错误。根据其性质可以分为错误和异常。Java程序中（无论是谁写的代码），所有抛出（throw）的异常都必须从Throwable派生而来。类Throwable有两个直接子类：Error和Exception。 一般来说，最常见的错误有程序进入死循环、内存泄漏等。这种情况下，程序运行时本身无法解决，只能通过其他程序干预。Java对应的类为Error类。Error类对象由Java虚拟机生成并抛弃（通常Java程序不对这类异常进行处理）。 异常是程序执行时遇到的非正常情况或意外行为。以下这些情况一般都可以引发异常：代码或调用的代码（如共享库）中有错误，操作系统资源不可用，公共语言运行库遇到意外情况（如无法验证代码）等。常见的有数组下标越界、算法溢出（超出数值表达范围）、除数为零、无效参数、内存溢出等。这种情况不像错误类那样，程序运行时本身可以解决，由异常代码调整程序运行方向，使程序仍可继续运行，直至正常结束。 Java异常对应的类为Exception类。Exception类对象是Java程序处理或抛弃的对象，它有各种不同的子类分别对应于不同类型的异常。Java编译器要求程序必须捕获或声明所有的非运行时异常，但对运行时异常可以不做处理。其中类RuntimeException代表运行时由Java虚拟机生成的异常，原因是编程错误。其他则为非运行时异常，原因是程序碰到了意外情况，如输入/输出异常IOException等。 2.异常关键字 Java异常处理的关键语句有五个：try、catch、throw、throws、finally。其中，try、catch、finally三个语句块应注意的问题如下。 1）try、catch、finally三个语句块均不能单独使用，三者可以组成try…catch…finally、try…catch、try…finally三种结构，catch语句可以有一个或多个，finally语句最多一个。 2）try、catch、finally三个代码块中变量的作用域为代码块内部，分别独立而不能相互访问。如果要在三个块中都可以访问，则需要将变量定义到这些块的外面。 3）若有多个catch块，只会匹配其中一个异常类并执行catch块代码，而不会再执行别的catch块，并且匹配catch语句的顺序是由上到下的。 throw、throws关键字的区别如下。 throw关键字用于方法体内部，用来抛出一个Throwable类型的异常。如果抛出了检查异常，则还应该在头部声明方法可能抛出的异常类型。该方法的调用者也必须检查处理抛出的异常。如果所有的方法都层层上抛获取的异常，最终JVM会进行处理，处理也很简单，就是打印异常消息和堆栈信息。如果抛出的是Error或RuntimeException，则该方法的调用者可选择处理该异常。 throws关键字用于方法体外部的方法声明部分，用来声明方法可能会抛出某些异常。仅当抛出了检查异常，该方法的调用者才必须处理或者重新抛出该异常。当方法的调用者无力处理该异常的时候，应该继续抛出，而不是囫囵吞枣般地在catch块中打印堆栈信息来做处理。 3.Java异常和C++异常的区别 在C异常处理模型中，它给予程序员最大的自由度和发挥空间，允许程序员抛出任何想要的异常对象，它可以是语言系统中原本所提供的各种简单数据类型（如int 、float 、double等），也可以是用户自定义的抽象数据对象（如class的object实例）。但是C语言规范中并无此约束，况且由于各个子系统（基础运行库）不是一个厂商（某一个人）统一设计的，所以导致每个子系统设计出的异常对象系统彼此相差甚远。这给最终使用（重用）这些库的程序员带来了很大的不一致性，甚至是很大的麻烦，需要花费很多时间来学习和熟悉这些不同的异常对象子系统。更大的问题是，这些不同子系统之间语义上的不一致，从而造成程序员在最终处理这些异常时，将很难把它们统一起来，例如，MFC库系统中，采用CMemoryException来表示一个与内存操作相关的异常；而其他的库系统中很可能就会采用另外一个class来表示内存操作的异常错误。本质上说，缺乏规范和统一所造成的恶劣后果。所以，设计Java语言的时候，就要充分考虑到这些问题，把它们纳入语言的统一规范中，这对广大的程序员来说，无疑是一件好事。 实际的Java编程中，由于JDK平台已经为我们设计好了非常丰富和完整的异常对象分类模型。因此，Java程序员一般不需要重新定义自己的异常对象，而且即便是需要扩展自定义的异常对象，也往往会从Exception派生而来。所以，对于Java程序员而言，它一般只需要在它的顶级函数中用catch (Exception ex)就可以捕获出所有的异常对象，而不必像C++中采用catch (…) 那样的语法。 4.异常处理中常见的问题 （1）过于庞大的try块 某些程序员把大量的代码放入单个try块，试图用一个catch语句捕获所有的异常和处理所有可能出现的异常，实际上这是一个坏习惯。原因就在于为了图省事，不愿花时间分析一大块代码中哪几行代码会抛出异常、异常的具体类型是什么。把大量的语句装入单个巨大的try块就像是出门旅游时把全部家当塞入集装箱带走，虽然东西是带上了，但要找出来可不容易。 对于这种问题，可以设置多个异常抛出点来解决。异常对象从产生点产生后，到被捕捉后终止生命的全过程中，实际上是一个传值过程，所以，应根据实际来合理控制检测异常个数。catch语句表示会出现某种异常，而且希望能够处理该异常。所以在catch语句中就应该尽量指定具体异常类型，也可使用多个catch，用于分别处理不同的异常。例如，要捕获一个最明显的异常是SQLException，这是JDBC操作中常见的异常。另一个可能的异常是IOException，因为它要操作OutputStreamWriter。显然，在同一个catch块中处理这两种截然不同的异常是不合适的。如果用两个catch块分别捕获SQLException和IOException就要好多了。 （2）异常的完整性 在Java语言中，如果一个函数运行时可能会向上层调用者函数抛出一个异常，那么，它就必须在该函数的声明中显式地注明（采用throws关键字）。否则编译器会报出错误信息“must be caught or declared to be thrown”。其中“must be caught”指在Java的异常处理模型中，要求所有被抛出的异常都必须有对应的“异常处理模块”。如果你在程序中利用throw出现一个异常，那么在你的程序（函数）中就必须要用catch处理这个异常。例如下面的例子中，抛出了一个Exception类型的异常，所以在该函数中，就必须有一个catch，并处理此异常。如果没有这个catch，Java语言在编译时就直接拦住这种可能出现错误的情况，不让程序通过。 try &#123; ...... // throw Exception &#125; catch(Exception ex) &#123; // find Exception // hand of it &#125; “declared to be thrown”指的是“必须显式地声明某个函数可能会向外部抛出一个异常”，也即是说，如果一个函数内部，它可能抛出了一种类型的异常，但该函数内部又不想用catch处理这种类型的异常，此时，它就必须（强制性）使用throws关键字来显式地声明该函数可能会向外部抛出一个异常，以便该函数的调用者知晓并能够及时处理这种类型的异常。如下列代码： class MyException extends Exception &#123; MyException() &#123; &#125; &#125; class My1Exception extends Exception &#123; My1Exception() &#123; &#125; &#125; class A &#123; public int format(String str) &#123; int i = Integer.valueof(str); // throw new MyException(); return i; &#125; public static void testTester() throws MyException, My1Exception &#123; new A().format(&quot;S&quot;); &#125; &#125; public class Test &#123; public static void main(String[] args) throws MyException, My1Exception &#123; A.testTester(); &#125; &#125; 5.RuntimeException异常 在Java异常处理中，一般有两类异常：其一，就是通过throw语句，程序员在代码中人为抛出的异常（由于运行时动态地监测到了一个错误）；另外一个是系统运行时异常，例如，“被零除”、“空字符串”、“无效句柄”等，对于这类异常，程序员实际上完全可以避免它，只要我们写代码时足够小心严谨。因此，为了彻底解决这种隐患，提高程序整体可靠性（不至于因为编码时考虑不周或一个小疏忽导致系统运行时崩溃），使用RuntimeException异常就是为了实现这样的功能。 Java语言中的这两种异常中，前者叫checked exception，它是从java.lang. Exception类衍生出来的；后者叫runtime exception，它是从java.lang.Runtime Exception类衍生出来的。 下面就是一个被零除的例子： public class Test &#123; public static void main(String[] args) &#123; test(); &#125; static void test() &#123; int i = 4; int j = 0; //运行时，这里将触发了一个ArithmeticException //ArithmeticException从RuntimeException派生而来 System.out.println(&quot;i / j = &quot; + i / j); &#125; &#125; 运行结果如下： java.lang.ArithmeticException: / by zero at Test.test(Test.java:16) at Test.main(Test.java:8) Exception in thread &quot;main&quot; 下面是一个空String的例子： import java.io.＊; public class Test &#123; public static void main(String[] args) &#123; test(); &#125; static void test() &#123; String str = null; str.compareTo(&quot;abc&quot;); // 运行时，这里将触发了一个NullPointerException // NullPointerException从RuntimeException派生而来 &#125; &#125; 针对RuntimeException类型的异常，javac是无法通过编译时的静态语法检测来判断到底哪些函数（或哪些区域的代码）可能抛出这类异常（这完全取决于运行时状态，或者说运行态所决定的），也正因为如此，Java异常处理模型中的“must be caught or declared to be thrown”规则也不适用于RuntimeException。但是Java虚拟机却需要有效地捕获并处理此类异常。当然，RuntimeException也可以被程序员显式地抛出，而且为了程序的可靠性，对一些可能出现“运行时异常（RuntimeException）”的代码区域，程序员最好能够及时地处理这些意外的异常，即通过catch（RuntimeExcetion）或catch（Exception）来捕获它们。如下面的示例程序，代码如下： import java.io.＊; public class Test &#123; public static void main(String[] args) &#123; try &#123; test(); &#125; catch (Exception e) &#123; System.out.println(&quot;A Exception!&quot;); e.printStackTrace(); &#125; &#125; static void test() throws RuntimeException &#123; String str = null; str.compareTo(&quot;abc&quot;); &#125; &#125;","categories":[],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"final、finally、finalize","slug":"java/java_final_finalize","date":"2018-06-14T07:18:12.000Z","updated":"2021-09-22T11:19:04.625Z","comments":true,"path":"2018/06/14/java/java_final_finalize/","link":"","permalink":"http://example.com/2018/06/14/java/java_final_finalize/","excerpt":"","text":"final、finally、finalize 1.final final可以用于控制成员、方法，或者是一个类是否可被覆写或继承等功能，这些特点使final在Java中拥有了一个不可或缺的地位，也是学习Java时必须要知道和掌握的关键字之一。 （1）final成员 当在类中定义变量时，若在其前面加上final关键字，那就是说，这个变量一旦被初始化，便不可改变，这里不可改变的意思对基本类型来说是其值不可变，而对于对象变量来说是其引用不可变。其初始化可以在两个地方，一是其定义处，二是在构造函数中，两者只能选其一。 还有一种用法是定义方法中的参数为final。对于基本类型的变量，这样做并没有什么实际意义，因为基本类型的变量在调用方法时是传值的，也就是说，你可以在方法中更改这个参数变量而不会影响到调用语句，然而对于对象变量，却显得很实用，因为对象变量在传递时是传递其引用的，这样，你在方法中对对象变量的修改也会影响到调用语句中的对象变量。当你在方法中不需要改变作为参数的对象变量时，明确使用final进行声明，会防止你无意地修改而影响到调用方法。 （2）final方法 将方法声明为final有两个原因，第一就是说明已经知道这个方法提供的功能满足要求，不需要进行扩展，并且也不允许任何从此类继承的类来覆写这个方法，但是仍然可以继承这个方法，也就是说，可以直接使用。第二就是允许编译器将所有对此方法的调用转化为inline（行内）调用的机制，它会在调用final方法时，直接将方法主体插入到调用处，而不是进行例行的方法调用，例如，保存断点、压栈等，这样可能会使程序效率有所提高。然而当方法主体非常庞大时，或在多处调用此方法时，调用主体代码便会迅速膨胀，可能反而会影响效率，所以要慎用final进行方法定义。 （3）final类 当将final用于类时，就需要仔细考虑，因为一个final类是无法被任何人继承的，那也就意味着此类在一个继承树中是一个叶子类，并且此类的设计已被认为很完美，不需要进行修改或扩展。对于final类中的成员，可以定义其为final，也可以不是final。而对于方法，由于所属类为final的关系，自然也就成了final型的。也可以明确地给final类中的方法加上一个final，但这显然没有意义。 2.finally finally关键字是对Java异常处理模型的最佳补充。finally结构使代码总会执行，而不管有无异常发生。使用finally可以维护对象的内部状态，并可以清理非内存资源。如果没有finally，你的代码就会很费解。 3.finalize 根据Java语言规范，JVM保证调用finalize函数之前，这个对象是不可达的，但是JVM不保证这个函数一定会被调用。另外，规范还保证finalize函数最多运行一次。 通常，finalize用于一些不容易控制，并且非常重要的资源的释放，例如，一些I/O的操作、数据的连接。这些资源的释放对整个应用程序是非常关键的。在这种情况下，程序员应该以通过程序本身管理（包括释放）这些资源为主，以finalize函数释放资源方式为辅，形成一种双保险的管理机制，而不应该仅仅依靠finalize来释放资源。 1.final修饰符（关键字） 如果一个类被声明为final，意味着它不能再派生出新的子类，不能作为父类被继承。因此，一个类不能既被声明为abstract，又被声明为final。将变量或方法声明为final，可以保证它们在使用中不被改变。其初始化可以在两个地方：一是其定义处，也就是说，在final变量定义时直接给其赋值；二是在构造函数中。这两个地方只能选其一，要么在定义时给值，要么在构造函数中给值，不能同时既在定义时给了值，又在构造函数中给另外的值，而在以后的引用中只能读取，不可修改。被声明为final的方法也同样只能使用，不能重写（override）。 2.finally 在异常处理时提供finally块来执行任何清除操作。如果抛出一个异常，那么相匹配的catch子句就会执行，然后控制就会进入finally块（如果有的话）。 3.finalize finalize是方法名。Java技术允许使用finalize()方法在垃圾收集器将对象从内存中清除出去之前做必要的清理工作。这个方法是由垃圾收集器在确定这个对象没有被引用时对这个对象调用的。它是在Object类中定义的，因此，所有的类都继承了它。子类覆盖finalize()方法以整理系统资源或者执行其他清理工作。finalize()方法是在垃圾收集器删除对象之前对这个对象调用的。","categories":[],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"HttpUtils","slug":"http/http_utils","date":"2018-05-31T08:19:12.000Z","updated":"2021-09-22T11:19:04.622Z","comments":true,"path":"2018/05/31/http/http_utils/","link":"","permalink":"http://example.com/2018/05/31/http/http_utils/","excerpt":"","text":"HttpUtilspublic class HttpUtils &#123; /** * get * * @param host * @param path * @param method * @param headers * @param querys * @return * @throws Exception */ public static HttpResponse doGet(String host, String path, String method, Map&lt;String, String&gt; headers, Map&lt;String, String&gt; querys) throws Exception &#123; HttpClient httpClient = wrapClient(host); HttpGet request = new HttpGet(buildUrl(host, path, querys)); for (Map.Entry&lt;String, String&gt; e : headers.entrySet()) &#123; request.addHeader(e.getKey(), e.getValue()); &#125; return httpClient.execute(request); &#125; /** * post form * * @param host * @param path * @param method * @param headers * @param querys * @param bodys * @return * @throws Exception */ public static HttpResponse doPost(String host, String path, String method, Map&lt;String, String&gt; headers, Map&lt;String, String&gt; querys, Map&lt;String, String&gt; bodys) throws Exception &#123; HttpClient httpClient = wrapClient(host); HttpPost request = new HttpPost(buildUrl(host, path, querys)); for (Map.Entry&lt;String, String&gt; e : headers.entrySet()) &#123; request.addHeader(e.getKey(), e.getValue()); &#125; if (bodys != null) &#123; List&lt;NameValuePair&gt; nameValuePairList = new ArrayList&lt;NameValuePair&gt;(); for (String key : bodys.keySet()) &#123; nameValuePairList.add(new BasicNameValuePair(key, bodys.get(key))); &#125; UrlEncodedFormEntity formEntity = new UrlEncodedFormEntity(nameValuePairList, &quot;utf-8&quot;); formEntity.setContentType(&quot;application/x-www-form-urlencoded; charset=UTF-8&quot;); request.setEntity(formEntity); &#125; return httpClient.execute(request); &#125; /** * Post String * * @param host * @param path * @param method * @param headers * @param querys * @param body * @return * @throws Exception */ public static HttpResponse doPost(String host, String path, String method, Map&lt;String, String&gt; headers, Map&lt;String, String&gt; querys, String body) throws Exception &#123; HttpClient httpClient = wrapClient(host); HttpPost request = new HttpPost(buildUrl(host, path, querys)); for (Map.Entry&lt;String, String&gt; e : headers.entrySet()) &#123; request.addHeader(e.getKey(), e.getValue()); &#125; if (StringUtils.isNotBlank(body)) &#123; request.setEntity(new StringEntity(body, &quot;utf-8&quot;)); &#125; return httpClient.execute(request); &#125; /** * Post stream * * @param host * @param path * @param method * @param headers * @param querys * @param body * @return * @throws Exception */ public static HttpResponse doPost(String host, String path, String method, Map&lt;String, String&gt; headers, Map&lt;String, String&gt; querys, byte[] body) throws Exception &#123; HttpClient httpClient = wrapClient(host); HttpPost request = new HttpPost(buildUrl(host, path, querys)); for (Map.Entry&lt;String, String&gt; e : headers.entrySet()) &#123; request.addHeader(e.getKey(), e.getValue()); &#125; if (body != null) &#123; request.setEntity(new ByteArrayEntity(body)); &#125; return httpClient.execute(request); &#125; /** * Put String * @param host * @param path * @param method * @param headers * @param querys * @param body * @return * @throws Exception */ public static HttpResponse doPut(String host, String path, String method, Map&lt;String, String&gt; headers, Map&lt;String, String&gt; querys, String body) throws Exception &#123; HttpClient httpClient = wrapClient(host); HttpPut request = new HttpPut(buildUrl(host, path, querys)); for (Map.Entry&lt;String, String&gt; e : headers.entrySet()) &#123; request.addHeader(e.getKey(), e.getValue()); &#125; if (StringUtils.isNotBlank(body)) &#123; request.setEntity(new StringEntity(body, &quot;utf-8&quot;)); &#125; return httpClient.execute(request); &#125; /** * Put stream * @param host * @param path * @param method * @param headers * @param querys * @param body * @return * @throws Exception */ public static HttpResponse doPut(String host, String path, String method, Map&lt;String, String&gt; headers, Map&lt;String, String&gt; querys, byte[] body) throws Exception &#123; HttpClient httpClient = wrapClient(host); HttpPut request = new HttpPut(buildUrl(host, path, querys)); for (Map.Entry&lt;String, String&gt; e : headers.entrySet()) &#123; request.addHeader(e.getKey(), e.getValue()); &#125; if (body != null) &#123; request.setEntity(new ByteArrayEntity(body)); &#125; return httpClient.execute(request); &#125; /** * Delete * * @param host * @param path * @param method * @param headers * @param querys * @return * @throws Exception */ public static HttpResponse doDelete(String host, String path, String method, Map&lt;String, String&gt; headers, Map&lt;String, String&gt; querys) throws Exception &#123; HttpClient httpClient = wrapClient(host); HttpDelete request = new HttpDelete(buildUrl(host, path, querys)); for (Map.Entry&lt;String, String&gt; e : headers.entrySet()) &#123; request.addHeader(e.getKey(), e.getValue()); &#125; return httpClient.execute(request); &#125; private static String buildUrl(String host, String path, Map&lt;String, String&gt; querys) throws UnsupportedEncodingException &#123; StringBuilder sbUrl = new StringBuilder(); sbUrl.append(host); if (!StringUtils.isBlank(path)) &#123; sbUrl.append(path); &#125; if (null != querys) &#123; StringBuilder sbQuery = new StringBuilder(); for (Map.Entry&lt;String, String&gt; query : querys.entrySet()) &#123; if (0 &lt; sbQuery.length()) &#123; sbQuery.append(&quot;&amp;&quot;); &#125; if (StringUtils.isBlank(query.getKey()) &amp;&amp; !StringUtils.isBlank(query.getValue())) &#123; sbQuery.append(query.getValue()); &#125; if (!StringUtils.isBlank(query.getKey())) &#123; sbQuery.append(query.getKey()); if (!StringUtils.isBlank(query.getValue())) &#123; sbQuery.append(&quot;=&quot;); sbQuery.append(URLEncoder.encode(query.getValue(), &quot;utf-8&quot;)); &#125; &#125; &#125; if (0 &lt; sbQuery.length()) &#123; sbUrl.append(&quot;?&quot;).append(sbQuery); &#125; &#125; return sbUrl.toString(); &#125; private static HttpClient wrapClient(String host) &#123; HttpClient httpClient = new DefaultHttpClient(); if (host.startsWith(&quot;https://&quot;)) &#123; sslClient(httpClient); &#125; return httpClient; &#125; private static void sslClient(HttpClient httpClient) &#123; try &#123; SSLContext ctx = SSLContext.getInstance(&quot;TLS&quot;); X509TrustManager tm = new X509TrustManager() &#123; @Override public X509Certificate[] getAcceptedIssuers() &#123; return null; &#125; @Override public void checkClientTrusted(X509Certificate[] xcs, String str) &#123; &#125; @Override public void checkServerTrusted(X509Certificate[] xcs, String str) &#123; &#125; &#125;; ctx.init(null, new TrustManager[] &#123; tm &#125;, null); SSLSocketFactory ssf = new SSLSocketFactory(ctx); ssf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER); ClientConnectionManager ccm = httpClient.getConnectionManager(); SchemeRegistry registry = ccm.getSchemeRegistry(); registry.register(new Scheme(&quot;https&quot;, 443, ssf)); &#125; catch (KeyManagementException ex) &#123; throw new RuntimeException(ex); &#125; catch (NoSuchAlgorithmException ex) &#123; throw new RuntimeException(ex); &#125; &#125;&#125;","categories":[],"tags":[{"name":"Http","slug":"Http","permalink":"http://example.com/tags/Http/"}]},{"title":"HttpRequest","slug":"http/http_request","date":"2018-05-31T08:19:12.000Z","updated":"2021-09-22T11:19:04.622Z","comments":true,"path":"2018/05/31/http/http_request/","link":"","permalink":"http://example.com/2018/05/31/http/http_request/","excerpt":"","text":"HttpRequestimport java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.net.URL;import java.net.URLConnection;import java.util.List;import java.util.Map;private static org.apache.log4j.Logger logger = org.apache.log4j.Logger.getLogger(HttpRequest.class);public class HttpRequest &#123; /** * 向指定URL发送GET方法的请求 * * @param url * 发送请求的URL * @param param * 请求参数，请求参数应该是 name1=value1&amp;name2=value2 的形式。 * @return URL 所代表远程资源的响应结果 */ public static String sendGet(String url, String param) &#123; String result = &quot;&quot;; BufferedReader in = null; try &#123; String urlNameString = url + &quot;?&quot; + param; URL realUrl = new URL(urlNameString); // 打开和URL之间的连接 URLConnection connection = realUrl.openConnection(); // 设置通用的请求属性 connection.setRequestProperty(&quot;accept&quot;, &quot;*/*&quot;); connection.setRequestProperty(&quot;connection&quot;, &quot;Keep-Alive&quot;); connection.setRequestProperty(&quot;user-agent&quot;, &quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)&quot;); // 建立实际的连接 connection.connect(); // 获取所有响应头字段 Map&lt;String, List&lt;String&gt;&gt; map = connection.getHeaderFields(); // 遍历所有的响应头字段 for (String key : map.keySet()) &#123; System.out.println(key + &quot;---&gt;&quot; + map.get(key)); &#125; // 定义 BufferedReader输入流来读取URL的响应 in = new BufferedReader(new InputStreamReader( connection.getInputStream())); String line; while ((line = in.readLine()) != null) &#123; result += line; &#125; &#125; catch (Exception e) &#123; System.out.println(&quot;发送GET请求出现异常！&quot; + e); e.printStackTrace(); &#125; // 使用finally块来关闭输入流 finally &#123; try &#123; if (in != null) &#123; in.close(); &#125; &#125; catch (Exception e2) &#123; e2.printStackTrace(); &#125; &#125; return result; &#125; /** * 向指定 URL 发送POST方法的请求 * * @param url * 发送请求的 URL * @param param * 请求参数，请求参数应该是 name1=value1&amp;name2=value2 的形式。 * @return 所代表远程资源的响应结果 */ public static String sendPost(String url, String param) &#123; PrintWriter out = null; BufferedReader in = null; String result = &quot;&quot;; try &#123; URL realUrl = new URL(url); // 打开和URL之间的连接 URLConnection conn = realUrl.openConnection(); // 设置通用的请求属性 conn.setRequestProperty(&quot;accept&quot;, &quot;*/*&quot;); conn.setRequestProperty(&quot;connection&quot;, &quot;Keep-Alive&quot;); conn.setRequestProperty(&quot;user-agent&quot;, &quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)&quot;); // 发送POST请求必须设置如下两行 conn.setDoOutput(true); conn.setDoInput(true); // 获取URLConnection对象对应的输出流 out = new PrintWriter(conn.getOutputStream()); // 发送请求参数 out.print(param); // flush输出流的缓冲 out.flush(); // 定义BufferedReader输入流来读取URL的响应 in = new BufferedReader( new InputStreamReader(conn.getInputStream())); String line; while ((line = in.readLine()) != null) &#123; result += line; &#125; &#125; catch (Exception e) &#123; System.out.println(&quot;发送 POST 请求出现异常！&quot;+e); e.printStackTrace(); &#125; //使用finally块来关闭输出流、输入流 finally&#123; try&#123; if(out!=null)&#123; out.close(); &#125; if(in!=null)&#123; in.close(); &#125; &#125; catch(IOException ex)&#123; ex.printStackTrace(); &#125; &#125; return result; &#125; /** * 由ip地址分析城市 * @param request * @return */ public static String getAddrByIp(HttpServletRequest request)&#123; String host = &quot;https://dm-81.data.aliyun.com&quot;; String path = &quot;/rest/160601/ip/getIpInfo.json&quot;; String method = &quot;GET&quot;; String appcode = &quot;075e3442a30745969e73e6f2de67c889&quot;; Map&lt;String, String&gt; headers = new HashMap&lt;String, String&gt;(); //最后在header中的格式(中间是英文空格)为Authorization:APPCODE 83359fd73fe94948385f570e3c139105 headers.put(&quot;Authorization&quot;, &quot;APPCODE &quot; + appcode); Map&lt;String, String&gt; querys = new HashMap&lt;String, String&gt;(); // querys.put(&quot;ip&quot;, &quot;0.0.0.0&quot;); String ip = HttpRequest.getIpAddr(request); querys.put(&quot;ip&quot;, ip); String addr = &quot;&quot;; try &#123; /** * 重要提示如下: * HttpUtils请从 * https://github.com/aliyun/api-gateway-demo-sign-java/blob/master/src/main/java/com/aliyun/api/gateway/demo/util/HttpUtils.java * 下载 * * 相应的依赖请参照 * https://github.com/aliyun/api-gateway-demo-sign-java/blob/master/pom.xml */ HttpResponse response = HttpUtils.doGet(host, path, method, headers, querys); System.out.println(response.toString()); //获取response的body //System.out.println(EntityUtils.toString(response.getEntity())); String a = response.toString(); String resString = EntityUtils.toString(response.getEntity()); //jackson json转换工具 ObjectMapper objectMapper = new ObjectMapper(); GetAddrByIp getAddrByIp = new GetAddrByIp(); GetAddrByIp resp = objectMapper.readValue(resString, GetAddrByIp.class); GetAddrByIpInfo addrData = new GetAddrByIpInfo(); addr = resp.getData().getCity(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return addr; &#125; public static GetAddrByIpInfo getAddrByIpInfo(HttpServletRequest request)&#123; String host = &quot;https://dm-81.data.aliyun.com&quot;; String path = &quot;/rest/160601/ip/getIpInfo.json&quot;; String method = &quot;GET&quot;; String appcode = &quot;075e3442a30745969e73e6f2de67c889&quot;; Map&lt;String, String&gt; headers = new HashMap&lt;String, String&gt;(); //最后在header中的格式(中间是英文空格)为Authorization:APPCODE 83359fd73fe94948385f570e3c139105 headers.put(&quot;Authorization&quot;, &quot;APPCODE &quot; + appcode); Map&lt;String, String&gt; querys = new HashMap&lt;String, String&gt;(); // querys.put(&quot;ip&quot;, &quot;0.0.0.0&quot;); String ip = HttpRequest.getIpAddr(request); querys.put(&quot;ip&quot;, ip); try &#123; /** * 重要提示如下: * HttpUtils请从 * https://github.com/aliyun/api-gateway-demo-sign-java/blob/master/src/main/java/com/aliyun/api/gateway/demo/util/HttpUtils.java * 下载 * * 相应的依赖请参照 * https://github.com/aliyun/api-gateway-demo-sign-java/blob/master/pom.xml */ HttpResponse response = HttpUtils.doGet(host, path, method, headers, querys); System.out.println(response.toString()); //获取response的body //System.out.println(EntityUtils.toString(response.getEntity())); String a = response.toString(); String resString = EntityUtils.toString(response.getEntity()); //jackson json转换工具 ObjectMapper objectMapper = new ObjectMapper(); GetAddrByIp resp = objectMapper.readValue(resString, GetAddrByIp.class); return resp.getData(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return null; &#125;&#125;","categories":[],"tags":[{"name":"Http","slug":"Http","permalink":"http://example.com/tags/Http/"}]},{"title":"Map2StringUtil","slug":"Map2StringUtil","date":"2018-05-31T08:09:11.000Z","updated":"2021-09-22T11:19:04.607Z","comments":true,"path":"2018/05/31/Map2StringUtil/","link":"","permalink":"http://example.com/2018/05/31/Map2StringUtil/","excerpt":"","text":"Map2StringUtil 1234567891011121314151617181920public class Map2StringUtil &#123; /** * 方法名称:transMapToString * 传入参数:map * 返回值:String 形如 username&#x27;chenziwen^password&#x27;1234 */ public static String transMapToString(Map map)&#123; java.util.Map.Entry entry; StringBuffer sb = new StringBuffer(); for(Iterator iterator = map.entrySet().iterator(); iterator.hasNext();) &#123; entry = (java.util.Map.Entry)iterator.next(); sb.append(entry.getKey().toString()).append( &quot;&#x27;&quot; ).append(null==entry.getValue()?&quot;&quot;: entry.getValue().toString()).append (iterator.hasNext() ? &quot;^&quot; : &quot;&quot;); &#125; return sb.toString(); &#125;&#125;","categories":[],"tags":[{"name":"util","slug":"util","permalink":"http://example.com/tags/util/"}]},{"title":"SHA1 加密","slug":"SHA1加密","date":"2018-05-31T08:09:11.000Z","updated":"2021-09-22T11:19:04.608Z","comments":true,"path":"2018/05/31/SHA1加密/","link":"","permalink":"http://example.com/2018/05/31/SHA1%E5%8A%A0%E5%AF%86/","excerpt":"","text":"SHA1 加密 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197public class SHA1 &#123; private final int[] abcde = &#123; 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 &#125;; // 摘要数据存储数组 private int[] digestInt = new int[5]; // 计算过程中的临时数据存储数组 private int[] tmpData = new int[80]; // 计算sha-1摘要 private int process_input_bytes(byte[] bytedata) &#123; // 初试化常量 System.arraycopy(abcde, 0, digestInt, 0, abcde.length); // 格式化输入字节数组，补10及长度数据 byte[] newbyte = byteArrayFormatData(bytedata); // 获取数据摘要计算的数据单元个数 int MCount = newbyte.length / 64; // 循环对每个数据单元进行摘要计算 for (int pos = 0; pos &lt; MCount; pos++) &#123; // 将每个单元的数据转换成16个整型数据，并保存到tmpData的前16个数组元素中 for (int j = 0; j &lt; 16; j++) &#123; tmpData[j] = byteArrayToInt(newbyte, (pos * 64) + (j * 4)); &#125; // 摘要计算函数 encrypt(); &#125; return 20; &#125; // 格式化输入字节数组格式 private byte[] byteArrayFormatData(byte[] bytedata) &#123; // 补0数量 int zeros = 0; // 补位后总位数 int size = 0; // 原始数据长度 int n = bytedata.length; // 模64后的剩余位数 int m = n % 64; // 计算添加0的个数以及添加10后的总长度 if (m &lt; 56) &#123; zeros = 55 - m; size = n - m + 64; &#125; else if (m == 56) &#123; zeros = 63; size = n + 8 + 64; &#125; else &#123; zeros = 63 - m + 56; size = (n + 64) - m + 64; &#125; // 补位后生成的新数组内容 byte[] newbyte = new byte[size]; // 复制数组的前面部分 System.arraycopy(bytedata, 0, newbyte, 0, n); // 获得数组Append数据元素的位置 int l = n; // 补1操作 newbyte[l++] = (byte) 0x80; // 补0操作 for (int i = 0; i &lt; zeros; i++) &#123; newbyte[l++] = (byte) 0x00; &#125; // 计算数据长度，补数据长度位共8字节，长整型 long N = (long) n * 8; byte h8 = (byte) (N &amp; 0xFF); byte h7 = (byte) ((N &gt;&gt; 8) &amp; 0xFF); byte h6 = (byte) ((N &gt;&gt; 16) &amp; 0xFF); byte h5 = (byte) ((N &gt;&gt; 24) &amp; 0xFF); byte h4 = (byte) ((N &gt;&gt; 32) &amp; 0xFF); byte h3 = (byte) ((N &gt;&gt; 40) &amp; 0xFF); byte h2 = (byte) ((N &gt;&gt; 48) &amp; 0xFF); byte h1 = (byte) (N &gt;&gt; 56); newbyte[l++] = h1; newbyte[l++] = h2; newbyte[l++] = h3; newbyte[l++] = h4; newbyte[l++] = h5; newbyte[l++] = h6; newbyte[l++] = h7; newbyte[l++] = h8; return newbyte; &#125; private int f1(int x, int y, int z) &#123; return (x &amp; y) | (~x &amp; z); &#125; private int f2(int x, int y, int z) &#123; return x ^ y ^ z; &#125; private int f3(int x, int y, int z) &#123; return (x &amp; y) | (x &amp; z) | (y &amp; z); &#125; private int f4(int x, int y) &#123; return (x &lt;&lt; y) | x &gt;&gt;&gt; (32 - y); &#125; // 单元摘要计算函数 private void encrypt() &#123; for (int i = 16; i &lt;= 79; i++) &#123; tmpData[i] = f4(tmpData[i - 3] ^ tmpData[i - 8] ^ tmpData[i - 14] ^ tmpData[i - 16], 1); &#125; int[] tmpabcde = new int[5]; for (int i1 = 0; i1 &lt; tmpabcde.length; i1++) &#123; tmpabcde[i1] = digestInt[i1]; &#125; for (int j = 0; j &lt;= 19; j++) &#123; int tmp = f4(tmpabcde[0], 5) + f1(tmpabcde[1], tmpabcde[2], tmpabcde[3]) + tmpabcde[4] + tmpData[j] + 0x5a827999; tmpabcde[4] = tmpabcde[3]; tmpabcde[3] = tmpabcde[2]; tmpabcde[2] = f4(tmpabcde[1], 30); tmpabcde[1] = tmpabcde[0]; tmpabcde[0] = tmp; &#125; for (int k = 20; k &lt;= 39; k++) &#123; int tmp = f4(tmpabcde[0], 5) + f2(tmpabcde[1], tmpabcde[2], tmpabcde[3]) + tmpabcde[4] + tmpData[k] + 0x6ed9eba1; tmpabcde[4] = tmpabcde[3]; tmpabcde[3] = tmpabcde[2]; tmpabcde[2] = f4(tmpabcde[1], 30); tmpabcde[1] = tmpabcde[0]; tmpabcde[0] = tmp; &#125; for (int l = 40; l &lt;= 59; l++) &#123; int tmp = f4(tmpabcde[0], 5) + f3(tmpabcde[1], tmpabcde[2], tmpabcde[3]) + tmpabcde[4] + tmpData[l] + 0x8f1bbcdc; tmpabcde[4] = tmpabcde[3]; tmpabcde[3] = tmpabcde[2]; tmpabcde[2] = f4(tmpabcde[1], 30); tmpabcde[1] = tmpabcde[0]; tmpabcde[0] = tmp; &#125; for (int m = 60; m &lt;= 79; m++) &#123; int tmp = f4(tmpabcde[0], 5) + f2(tmpabcde[1], tmpabcde[2], tmpabcde[3]) + tmpabcde[4] + tmpData[m] + 0xca62c1d6; tmpabcde[4] = tmpabcde[3]; tmpabcde[3] = tmpabcde[2]; tmpabcde[2] = f4(tmpabcde[1], 30); tmpabcde[1] = tmpabcde[0]; tmpabcde[0] = tmp; &#125; for (int i2 = 0; i2 &lt; tmpabcde.length; i2++) &#123; digestInt[i2] = digestInt[i2] + tmpabcde[i2]; &#125; for (int n = 0; n &lt; tmpData.length; n++) &#123; tmpData[n] = 0; &#125; &#125; // 4字节数组转换为整数 private int byteArrayToInt(byte[] bytedata, int i) &#123; return ((bytedata[i] &amp; 0xff) &lt;&lt; 24) | ((bytedata[i + 1] &amp; 0xff) &lt;&lt; 16) | ((bytedata[i + 2] &amp; 0xff) &lt;&lt; 8) | (bytedata[i + 3] &amp; 0xff); &#125; // 整数转换为4字节数组 private void intToByteArray(int intValue, byte[] byteData, int i) &#123; byteData[i] = (byte) (intValue &gt;&gt;&gt; 24); byteData[i + 1] = (byte) (intValue &gt;&gt;&gt; 16); byteData[i + 2] = (byte) (intValue &gt;&gt;&gt; 8); byteData[i + 3] = (byte) intValue; &#125; // 将字节转换为十六进制字符串 private static String byteToHexString(byte ib) &#123; char[] Digit = &#123; &#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;, &#x27;9&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27; &#125;; char[] ob = new char[2]; ob[0] = Digit[(ib &gt;&gt;&gt; 4) &amp; 0X0F]; ob[1] = Digit[ib &amp; 0X0F]; String s = new String(ob); return s; &#125; // 将字节数组转换为十六进制字符串 private static String byteArrayToHexString(byte[] bytearray) &#123; String strDigest = &quot;&quot;; for (int i = 0; i &lt; bytearray.length; i++) &#123; strDigest += byteToHexString(bytearray[i]); &#125; return strDigest; &#125; // 计算sha-1摘要，返回相应的字节数组 public byte[] getDigestOfBytes(byte[] byteData) &#123; process_input_bytes(byteData); byte[] digest = new byte[20]; for (int i = 0; i &lt; digestInt.length; i++) &#123; intToByteArray(digestInt[i], digest, i * 4); &#125; return digest; &#125; // 计算sha-1摘要，返回相应的十六进制字符串 public String getDigestOfString(byte[] byteData) &#123; return byteArrayToHexString(getDigestOfBytes(byteData)); &#125;&#125;","categories":[],"tags":[{"name":"util","slug":"util","permalink":"http://example.com/tags/util/"}]},{"title":"ZipUtil","slug":"ZipUtil","date":"2018-05-31T08:09:11.000Z","updated":"2021-09-22T11:19:04.611Z","comments":true,"path":"2018/05/31/ZipUtil/","link":"","permalink":"http://example.com/2018/05/31/ZipUtil/","excerpt":"","text":"ZipUtil 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950public class ZipUtil &#123; static final int BUFFER = 2048; public static void unzip(String filepath,String unzipFolder) &#123; try &#123; String fileName = &quot;E:\\\\test\\\\myfiles.zip&quot;; String filePath = &quot;E:\\\\test\\\\&quot;; fileName=filepath; filePath=unzipFolder; ZipFile zipFile = new ZipFile(fileName); Enumeration emu = zipFile.entries(); int i=0; while(emu.hasMoreElements())&#123; ZipEntry entry = (ZipEntry)emu.nextElement(); //会把目录作为一个file读出一次，所以只建立目录就可以，之下的文件还会被迭代到。 if (entry.isDirectory()) &#123; new File(filePath + entry.getName()).mkdirs(); continue; &#125; BufferedInputStream bis = new BufferedInputStream(zipFile.getInputStream(entry)); File file = new File(filePath + entry.getName()); //加入这个的原因是zipfile读取文件是随机读取的，这就造成可能先读取一个文件 //而这个文件所在的目录还没有出现过，所以要建出目录来。 File parent = file.getParentFile(); if(parent != null &amp;&amp; (!parent.exists()))&#123; parent.mkdirs(); &#125; FileOutputStream fos = new FileOutputStream(file); BufferedOutputStream bos = new BufferedOutputStream(fos,BUFFER); int count; byte data[] = new byte[BUFFER]; while ((count = bis.read(data, 0, BUFFER)) != -1) &#123; bos.write(data, 0, count); &#125; bos.flush(); bos.close(); bis.close(); &#125; zipFile.close(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125;&#125;","categories":[],"tags":[{"name":"util","slug":"util","permalink":"http://example.com/tags/util/"}]},{"title":"linux简单命令","slug":"linux/linux简单命令","date":"2018-05-31T07:09:11.000Z","updated":"2021-09-22T11:19:04.634Z","comments":true,"path":"2018/05/31/linux/linux简单命令/","link":"","permalink":"http://example.com/2018/05/31/linux/linux%E7%AE%80%E5%8D%95%E5%91%BD%E4%BB%A4/","excerpt":"","text":"linux简单命令 ls [选项] [目录名 | 列出相关目录下的所有目录和文件 123456789101112131415-a 列出包括.a开头的隐藏文件的所有文件-A 通-a，但不列出&quot;.&quot;和&quot;..&quot;-l 列出文件的详细信息-c 根据ctime排序显示-t 根据文件修改时间排序---color[=WHEN] 用色彩辨别文件类型 WHEN 可以是&#x27;never&#x27;、&#x27;always&#x27;或&#x27;auto&#x27;其中之一 白色：表示普通文件 蓝色：表示目录 绿色：表示可执行文件 红色：表示压缩文件 浅蓝色：链接文件 红色闪烁：表示链接的文件有问题 黄色：表示设备文件 灰色：表示其它文件 mv [选项] 源文件或目录 目录或多个源文件 | 移动或重命名文件 12345678910-b 覆盖前做备份-f 如存在不询问而强制覆盖-i 如存在则询问是否覆盖-u 较新才覆盖-t 将多个源文件移动到统一目录下，目录参数在前，文件参数在后eg: mv a /tmp/ 将文件a移动到 /tmp目录下 mv a b 将a命名为b mv /home/zenghao test1.txt test2.txt test3.txt cp [选项] 源文件或目录 目录或多个源文件 | 将源文件复制至目标文件，或将多个源文件复制至目标目录。 123456-r -R 递归复制该目录及其子目录内容-p 连同档案属性一起复制过去-f 不询问而强制复制-s 生成快捷方式-a 将档案的所有特性都一起复制 scp [参数] [原路径] [目标路径] | 在Linux服务器之间复制文件和目录 12345678910111213141516171819202122232425-v 详细显示输出的具体情况-r 递归复制整个目录(1) 复制文件： 命令格式： scp local_file remote_username@remote_ip:remote_folder 或者 scp local_file remote_username@remote_ip:remote_file 或者 scp local_file remote_ip:remote_folder 或者 scp local_file remote_ip:remote_file 第1,2个指定了用户名，命令执行后需要输入用户密码，第1个仅指定了远程的目录，文件名字不变，第2个指定了文件名 第3,4个没有指定用户名，命令执行后需要输入用户名和密码，第3个仅指定了远程的目录，文件名字不变，第4个指定了文件名 (2) 复制目录： 命令格式： scp -r local_folder remote_username@remote_ip:remote_folder 或者 scp -r local_folder remote_ip:remote_folder 第1个指定了用户名，命令执行后需要输入用户密码； 第2个没有指定用户名，命令执行后需要输入用户名和密码；eg: 从 本地 复制到 远程 scp /home/daisy/full.tar.gz root@172.19.2.75:/home/root 从 远程 复制到 本地 scp root@/172.19.2.75:/home/root/full.tar.gz /home/daisy/full.tar.gz rm [选项] 文件 | 删除文件 1234-r 删除文件夹-f 删除不提示-i 删除提示-v 详细显示进行步骤 touch [选项] 文件 | 创建空文件或更新文件时间 12345-a 只修改存取时间-m 值修改变动时间-r eg:touch -r a b ,使b的时间和a相同-t 指定特定的时间 eg:touch -t 201211142234.50 log.log -t time [[CC]YY]MMDDhhmm[.SS],C:年前两位 pwd 查看当前所在路径 cd 改变当前目录 1234- ：返回上层目录.. :返回上层目录回车 ：返回主目录/ :根目录 mkdir [选项] 目录… | 创建新目录 123-p 递归创建目录，若父目录不存在则依次创建-m 自定义创建目录的权限 eg:mkdir -m 777 hehe-v 显示创建目录的详细信息 rmdir 删除空目录 12-v 显示执行过程-p 若自父母删除后父目录为空则一并删除 rm [选项] 文件… | 一个或多个文件或目录 1234-f 忽略不存在的文件，不给出提示-i 交互式删除-r 将列出的目录及其子目录递归删除-v 列出详细信息 echo：显示内容 12345-n 输出后不换行-e 遇到转义字符特殊处理 eg: echo &quot;he\\nhe&quot; 显示he\\nhe ehco -e &quot;he\\nhe&quot; 显示he(换行了)he cat [选项] [文件]…| 一次显示整个文件或从键盘创建一个文件或将几个文件合并成一个文件 123-n 编号文件内容再输出-E 在结束行提示$ tac | 反向显示 more | 按页查看文章内容，从前向后读取文件，因此在启动时就加载整个文件 12345+n 从第n行开始显示-n 每次查看n行数据+/String 搜寻String字符串位置，从其前两行开始查看-c 清屏再显示-p 换页时清屏 less | 可前后移动地逐屏查看文章内容，在查看前不会加载整个文件 12345678-m 显示类似于more命令的百分比-N 显示行号/ 字符串：向下搜索“字符串”的功能? 字符串：向上搜索“字符串”的功能n 重复前一个搜索（与 / 或 ? 有关）N 反向重复前一个搜索（与 / 或 ? 有关）b 向后翻一页d 向后翻半页 nl [选项]… [文件]… | 将输出内容自动加上行号 1234-b -b a 不论是否有空行，都列出行号（类似 cat -n) -b t 空行则不列行号（默认） -n 有ln rn rz三个参数，分别为再最左方显示，最右方显示不加0，最右方显示加0 head [参数]… [文件]… | 显示档案开头，默认开头10行 1234-v 显示文件名-c number 显示前number个字符,若number为负数,则显示除最后number个字符的所有内容-number/n (+)number 显示前number行内容，-n number 若number为负数，则显示除最后number行数据的所有内容 tail [必要参数] [选择参数] [文件] | 显示文件结尾内容 123456-v 显示详细的处理信息-q 不显示处理信息-num/-n (-)num 显示最后num行内容-n +num 从第num行开始显示后面的数据-c 显示最后c个字符-f 循环读取 vi 编辑文件 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455:w filename 将文章以指定的文件名保存起来 :wq 保存并退出:q! 不保存而强制退出命令行模式功能键1）插入模式 按「i」切换进入插入模式「insert mode」，按&quot;i&quot;进入插入模式后是从光标当前位置开始输入文件； 按「a」进入插入模式后，是从目前光标所在位置的下一个位置开始输入文字； 按「o」进入插入模式后，是插入新的一行，从行首开始输入文字。2）从插入模式切换为命令行模式 按「ESC」键。3）移动光标 vi可以直接用键盘上的光标来上下左右移动，但正规的vi是用小写英文字母「h」、「j」、「k」、「l」，分别控制光标左、下、上、右移一格。 按「ctrl」+「b」：屏幕往&quot;后&quot;移动一页。 按「ctrl」+「f」：屏幕往&quot;前&quot;移动一页。 按「ctrl」+「u」：屏幕往&quot;后&quot;移动半页。 按「ctrl」+「d」：屏幕往&quot;前&quot;移动半页。 按数字「0」：移到文章的开头。 按「G」：移动到文章的最后。 按「$」：移动到光标所在行的&quot;行尾&quot;。 按「^」：移动到光标所在行的&quot;行首&quot; 按「w」：光标跳到下个字的开头 按「e」：光标跳到下个字的字尾 按「b」：光标回到上个字的开头 按「#l」：光标移到该行的第#个位置，如：5l,56l。4）删除文字 「x」：每按一次，删除光标所在位置的&quot;后面&quot;一个字符。 「#x」：例如，「6x」表示删除光标所在位置的&quot;后面&quot;6个字符。 「X」：大写的X，每按一次，删除光标所在位置的&quot;前面&quot;一个字符。 「#X」：例如，「20X」表示删除光标所在位置的&quot;前面&quot;20个字符。 「dd」：删除光标所在行。 「#dd」：从光标所在行开始删除#行5）复制 「yw」：将光标所在之处到字尾的字符复制到缓冲区中。 「#yw」：复制#个字到缓冲区 「yy」：复制光标所在行到缓冲区。 「#yy」：例如，「6yy」表示拷贝从光标所在的该行&quot;往下数&quot;6行文字。 「p」：将缓冲区内的字符贴到光标所在位置。注意：所有与&quot;y&quot;有关的复制命令都必须与&quot;p&quot;配合才能完成复制与粘贴功能。6）替换 「r」：替换光标所在处的字符。 「R」：替换光标所到之处的字符，直到按下「ESC」键为止。7）回复上一次操作 「u」：如果您误执行一个命令，可以马上按下「u」，回到上一个操作。按多次&quot;u&quot;可以执行多次回复。8）更改 「cw」：更改光标所在处的字到字尾处 「c#w」：例如，「c3w」表示更改3个字9）跳至指定的行 「ctrl」+「g」列出光标所在行的行号。 「#G」：例如，「15G」，表示移动光标至文章的第15行行首。 which 可执行文件名称 | 查看可执行文件的位置，在PATH变量指定的路径中查看系统命令是否存在及其位置 whereis [-bmsu] [BMS 目录名 -f ] 文件名| 定位可执行文件、源代码文件、帮助文件在文件系统中的位置 1234567-b 定位可执行文件。-m 定位帮助文件。-s 定位源代码文件。-u 搜索默认路径下除可执行文件、源代码文件、帮助文件以外的其它文件。-B 指定搜索可执行文件的路径。-M 指定搜索帮助文件的路径。-S 指定搜索源代码文件的路径。 locate | 通过搜寻数据库快速搜寻档案 1-r 使用正规运算式做寻找的条件 find find [PATH] [option] [action] | 在文件树种查找文件，并作出相应的处理 1234567891011121314151617181920212223242526272829303132333435363738394041选项与参数：1. 与时间有关的选项：共有 -atime, -ctime 与 -mtime 和-amin,-cmin与-mmin，以 -mtime 说明 -mtime n ：n 为数字，意义为在 n 天之前的『一天之内』被更动过内容的档案； -mtime +n ：列出在 n 天之前(不含 n 天本身)被更动过内容的档案档名； -mtime -n ：列出在 n 天之内(含 n 天本身)被更动过内容的档案档名。 -newer file ：file 为一个存在的档案，列出比 file 还要新的档案档名2. 与使用者或组名有关的参数： -uid n ：n 为数字，这个数字是用户的账号 ID，亦即 UID -gid n ：n 为数字，这个数字是组名的 ID，亦即 GID -user name ：name 为使用者账号名称！例如 dmtsai -group name：name 为组名，例如 users ； -nouser ：寻找档案的拥有者不存在 /etc/passwd 的人！ -nogroup ：寻找档案的拥有群组不存在于 /etc/group 的档案！3. 与档案权限及名称有关的参数： -name filename：搜寻文件名为 filename 的档案（可使用通配符） -size [+-]SIZE：搜寻比 SIZE 还要大(+)或小(-)的档案。这个 SIZE 的规格有： c: 代表 byte k: 代表 1024bytes。所以，要找比 50KB还要大的档案，就是『 -size +50k 』 -type TYPE ：搜寻档案的类型为 TYPE 的，类型主要有： 一般正规档案 (f) 装置档案 (b, c) 目录 (d) 连结档 (l) socket (s) FIFO (p) -perm mode ：搜寻档案权限『刚好等于』 mode的档案，这个mode为类似chmod的属性值，举例来说，-rwsr-xr-x 的属性为4755！ -perm -mode ：搜寻档案权限『必须要全部囊括 mode 的权限』的档案，举例来说， 我们要搜寻-rwxr--r-- 亦即 0744 的档案，使用-perm -0744，当一个档案的权限为 -rwsr-xr-x ，亦即 4755 时，也会被列出来，因为 -rwsr-xr-x 的属性已经囊括了 -rwxr--r-- 的属性了。 -perm +mode ：搜寻档案权限『包含任一 mode 的权限』的档案，举例来 说，我们搜寻-rwxr-xr-x ，亦即 -perm +755 时，但一个文件属性为 -rw-------也会被列出来，因为他有 -rw.... 的属性存在！4. 额外可进行的动作： -exec command ：command 为其他指令，-exec 后面可再接额外的指令来处理搜寻到的结果。 -print ：将结果打印到屏幕上，这个动作是预设动作！ eg: find / -perm +7000 -exec ls -l &#123;&#125; \\; ,额外指令以-exec开头，以\\;结尾&#123;&#125;代替前面找到的内容 | xargs -i 默认的前面输出用&#123;&#125;代替 eg: find . -name &quot;*.log&quot; | xargs -i mv &#123;&#125; test4 grep ‘正则表达式’ 文件名 | 用正则表达式搜索文本，并把匹配的行打印出来 12345-c 只输出匹配行的计数。-I 不区分大小写(只适用于单字符)。-l 只显示文件名-v 显示不包含匹配文本的所有行。-n 显示匹配行数据及其行号 gzip [-cdtv#] 檔名 | 压缩、解压缩，源文件都不再存在 1234-d 进行解压缩-c 将压缩的数据输出到屏幕上-v :显示原档案/压缩文件案的压缩比等信息-# ：压缩等级，-1最快，但压缩比最差，=9最慢，但压缩比最好 gunzip | 解压缩 bzip2 | 压缩、解压缩 123456-d :解压-z :压缩-k :保留源文件-c ：将压缩的过程产生的数据输出到屏幕上！-v ：可以显示出原档案/压缩文件案的压缩比等信息；-# ：与 gzip 同样的，都是在计算压缩比的参数， -9 最佳， -1 最快！ bzcat 读取数据而无需解压 tar [主选项+辅选项] 文件或者目录 | 多个目录或档案打包、压缩成一个大档案 1234567891011121314151617主选项： -c 建立打包档案，可搭配 -v 来察看过程中被打包的档名(filename) -t 察看打包档案的内容含有哪些档名，重点在察看『档名』就是了； -x 解打包或解压缩的功能，可以搭配 -C (大写) 在特定目录解开辅选项： -j 透过 bzip2 的支持进行压缩/解压缩：此时档名最好为 *.tar.bz2 -z 透过 gzip 的支持进行压缩/解压缩：此时档名最好为 *.tar.gz -v 在压缩/解压缩的过程中，将正在处理的文件名显示出来！ -f filename -f 后面要立刻接要被处理的档名！ -C 目录 这个选项用在解压缩，若要在特定目录解压缩，可以使用这个选项。 --exclude FILE：在压缩打包过程中忽略某文件 eg: tar --exclude /home/zenghao -zcvf myfile.tar.gz /home/* /etc -p 保留备份数据的原本权限与属性，常用于备份(-c)重要的配置文件 -P(大写） 保留绝对路径，亦即允许备份数据中含有根目录存在之意；eg: 压 缩：tar -jcvf filename.tar.bz2 要被压缩的档案或目录名称 查 询：tar -jtvf filename.tar.bz2 解压缩：tar -jxvf filename.tar.bz2 -C 欲解压缩的目录 exit 退出当前shell logout 退出登录shell shutdown -h now users 显示当前登录系统地用户 who 登录在本机的用户与来源 1-H或--heading 显示各栏位的标题信息列。 w 登录在本机的用户及其运行的程序 12-s 使用简洁格式列表，不显示用户登入时间，终端机阶段作业和程序所耗费的CPU时间。-h 不显示各栏位的标题信息列。 write 给当前联机的用户发消息 wall 给所有登录再本机的用户发消息 last 查看用户的登陆日志 lastlog 查看每个用户最后的登陆时间 finger [选项] [使用者] [用户@主机] | 查看用户信息 123-s 显示用户的注册名、实际姓名、终端名称、写状态、停滞时间、登录时间等信息-l 除了用-s选项显示的信息外，还显示用户主目录、登录shell、邮件状态等信息，以及用户主目录下的.plan、.project和.forward文件的内容。-p 除了不显示.plan文件和.project文件以外，与-l选项相同 hostname 查看主机名 alias ii = “ls -l” | 添加别名 unalias ii | 清除别名 useradd [-u UID] [-g 初始群组] [-G 次要群组] [-c 说明栏] [-d 家目录绝对路径] [-s shell] 使用者账号名 | 新增用户 12345-M 不建立用户家目录！(系统账号默认值)-m 建立用户家目录！(一般账号默认值)-r 建立一个系统的账号，这个账号的 UID 会有限制 -e 账号失效日期，格式为『YYYY-MM-DD』-D 查看useradd的各项默认值 passwd | 修改密码 12345678-l 使密码失效-u 与-l相对，用户解锁-S 列出登陆用户passwd文件内的相关参数-n 后面接天数，shadow 的第 4 字段，多久不可修改密码天数-x 后面接天数，shadow 的第 5 字段，多久内必须要更动密码-w 后面接天数，shadow 的第 6 字段，密码过期前的警告天数-i 后面接『日期』，shadow 的第 7 字段，密码失效日期使用管道刘设置密码：echo &quot;zeng&quot; | passwd --stdin zenghao userdel 删除用户 1-r 用户文件一并删除 chage [-ldEImMW] 账号名 | 修改用户密码的相关属性 1234567-l 列出该账号的详细密码参数；-d 后面接日期，修改 shadow 第三字段(最近一次更改密码的日期)，格式YYYY-MM-DD-E 后面接日期，修改 shadow 第八字段(账号失效日)，格式 YYYY-MM-DD-I 后面接天数，修改 shadow 第七字段(密码失效日期)-m 后面接天数，修改 shadow 第四字段(密码最短保留天数)-M 后面接天数，修改 shadow 第五字段(密码多久需要进行变更)-W 后面接天数，修改 shadow 第六字段(密码过期前警告日期) usermod [-cdegGlsuLU] username | 修改用户的相关属性 1234567891011-c 后面接账号的说明，即 /etc/passwd 第五栏的说明栏，可以加入一些账号的说明。-d 后面接账号的家目录，即修改 /etc/passwd 的第六栏；-e 后面接日期，格式是 YYYY-MM-DD 也就是在 /etc/shadow 内的第八个字段数据啦！-f 后面接天数为 shadow 的第七字段。-g 后面接初始群组，修改 /etc/passwd 的第四个字段，亦即是GID的字段！-G 后面接次要群组，修改这个使用者能够支持的群组-l 后面接账号名称。亦即是修改账号名称， /etc/passwd 的第一栏！-s 后面接 Shell 的实际档案，例如 /bin/bash 或 /bin/csh 等等。-u 后面接 UID 数字啦！即 /etc/passwd 第三栏的资料；-L 冻结密码-U 解冻密码 id [username] | 查看用户相关的id信息，还可以用来判断用户是否存在 groups 查看登陆用户支持的群组， 第一个输出的群组为有效群组 newgrp 切换有效群组 groupadd [-g gid] 组名 | 添加组 1-g 设定添加组的特定组id groupmod [-g gid] [-n group_name] 群组名 | 修改组信息 12-g 修改既有的 GID 数字-n 修改既有的组名 groupdel [groupname] | 删除群组 gpasswd | 群组管理员功能 1234567891011root管理员动作： -gpasswd groupname 设定密码 -gpasswd [-A user1,...] [-M user3,...] groupname -A 将 groupname 的主控权交由后面的使用者管理(该群组的管理员) -M 将某些账号加入这个群组当中 -gpasswd [-r] groupname -r 将 groupname 的密码移除群组管理员动作： - gpasswd [-ad] user groupname -a 将某位使用者加入到 groupname 这个群组当中 -d 将某位使用者移除出 groupname 这个群组当中 chfn修改个人信息 mount [-t vfstype] [-o options] device dir 123-ro 采用只读方式挂接设备-rw 采用读写方式挂接设备eg:mount /home/mydisk.iso /tmp/mnt 通过mnt访问mydisk内的内容 umount 取消挂载 cut 1234-b ：以字节为单位进行分割。这些字节位置将忽略多字节字符边界，除非也指定了 -n 标志。-c ：以字符为单位进行分割。-d ：自定义分隔符，默认为制表符。-f ：与-d一起使用，指定显示哪个区域。 sort 12345-n 依照数值的大小排序。-o&lt;输出文件&gt; 将排序后的结果存入指定的文件。-r 以相反的顺序来排序。-t&lt;分隔字符&gt; 指定排序时所用的栏位分隔字符。-k 选择以哪个区间进行排序。 wc 统计指定文件中的字节数、字数、行数, 并将统计结果显示输出 1234-l filename 报告行数-c filename 报告字节数-m filename 报告字符数-w filename 报告单词数 uniq 去除文件中相邻的重复行 123456-c或——count：在每列旁边显示该行重复出现的次数；-d或--repeated：仅显示重复出现的行列；-f&lt;栏位&gt;或--skip-fields=&lt;栏位&gt;：忽略比较指定的栏位；-s&lt;字符位置&gt;或--skip-chars=&lt;字符位置&gt;：忽略比较指定的字符；-u或——unique：仅显示出一次的行列；-w&lt;字符位置&gt;或--check-chars=&lt;字符位置&gt;：指定要比较的字符。 set 显示环境变量和普通变量 env 显示环境变量 export 把普通变量变成环境变量 unset 删除一个环境变量 1aaa()&#123;&#125; 定义函数 read 12-p 接提示字符-t 接等待的秒数 declare、typeset 1234-i 声明为整数-a 声明为数组-f 声明为函数-r 声明为只读 ulimit 限制使用者的某些系统资源 1-f 此 shell 可以建立的最大档案容量 (一般可能设定为 2GB)单位为 Kbytes eg: ulimit -f 1024 限制使用者仅能建立 1MBytes 以下的容量的档案 df [选项] [文件] | 显示指定磁盘文件的可用空间,如果没有文件名被指定，则所有当前被挂载的文件系统的可用空间将被显示 123456 -a 显示全部文件系统-h 文件大小友好显示-l 只显示本地文件系统-i 显示inode信息-T 显示文件系统类型 du [选项] [文件] | 显示每个文件和目录的磁盘使用空间 12-h 方便阅读的方式-s 只显示总和的大小 ln [参数] [源文件或目录] [目标文件或目录] | 某一个文件在另外一个位置建立一个同步的链接 123-s 建立软连接 -v 显示详细的处理过程 diff [参数] [文件1或目录1] [文件2或目录2] | 比较单个文件或者目录内容 12345-b 不检查空格字符的不同。-B 不检查空白行。-i 不检查大小写-q 仅显示差异而不显示详细信息eg: diff a b &gt; parch.log 比较两个文件的不同并产生补丁 date [参数]… [+格式] | 显示或设定系统的日期与时间 12345678910%H 小时(以00-23来表示)。 %M 分钟(以00-59来表示)。 %P AM或PM。%D 日期(含年月日)%U 该年中的周数。date -s “2015-10-17 01:01:01″ //时间设定date +%Y%m%d //显示前天年月日date +%Y%m%d --date=&quot;+1 day/month/year&quot; //显示前一天/月/年的日期date +%Y%m%d --date=&quot;-1 day/month/year&quot; //显示后一天/月/年的日期date -d &#x27;2 weeks&#x27; 2周后的日期 cal [参数] 月份] [年份] | 查看日历 123456-1 显示当月的月历-3 显示前、当、后一个月的日历-m 显示星期一为一个星期的第一天-s （默认）星期天为第一天-j 显示当月是一年中的第几天的日历-y 显示当前年份的日历 ps | 列出当前进程的快照 12345678910a 显示所有的进程-a 显示同一终端下的所有程序e 显示环境变量f 显示进程间的关系-H 显示树状结构r 显示当前终端的程序T 显示当前终端的所有程序-au 显示更详细的信息-aux 显示所有包含其他使用者的行程 -u 指定用户的所有进程 top [参数] | 显示当前系统正在执行的进程的相关信息，包括进程ID、内存占用率、CPU占用率等 kill [参数] [进程号] | 杀死进程 free [参数] | 显示linux系统中空闲的、已用的物理内存及swap内存,及被内核使用的buffer vmstat | 对操作系统的虚拟内存、进程、CPU活动进行监控 iostat [参数] [时间t] [次数n](每隔t时间刷新一次，最多刷新n次）| 对系统的磁盘操作活动进行监视,汇报磁盘活动统计情况，同时也会汇报出CPU使用情况 1-p[磁盘] 显示磁盘和分区的情况 watch [参数] [命令] |重复执行某一命令以观察变化 12-n 时隔多少秒刷新-d 高亮显示动态变化 at [参数] [时间] | 在一个指定的时间执行一个指定任务，只能执行一次 1234HH:MM[am|pm] + number [minutes|hours|days|weeks] 强制在某年某月某日的某时刻进行该项任务atq 查看系统未执行的任务atrm n 删除编号为n的任务at -c n 显示编号为n的任务的内容 crontab | 定时任务调度 1234file 载入crontab -e 编辑某个用户的crontab文件内容 -l 显示某个用户的crontab文件内容 -r 删除某个用户的crontab文件 ifconfig [网络设备] [参数] | 查看和配置网络设备 route | 显示和操作IP路由表 ping [参数] [主机名或IP地址] | 测试与目标主机的连通性 1-q 只显示最后的结果 netstat | 显示与IP、TCP、UDP和ICMP协议相关的统计数据 telnet [参数] [主机] | 用于远程登录，采用明文传送报文，安全性不好 rcp [参数] [源文件] [目标文件] | 远程文件拷贝 1234-r 递归复制-p 保留源文件的属性usage: rcp –r remote_hostname:remote_dir local_dir wget [参数] [URL地址] | 直接从网络上下载文件 12-o FILE 把记录写到FILE文件中 eg : wget -O a.txt URLwget --limit-rate=300k URL 限速下载 awk 12-F 分隔符 以分隔符分隔内容&#123;&#125; 要执行的脚本内容 eg:cat /etc/passwd |awk -F &#x27;:&#x27; &#x27;&#123;print $1&quot;\\t&quot;$7&#125;&#x27; sed 对数据行进行替换、删除、新增、选取等操作 1234a 新增，在新的下一行出现c 取代，取代 n1,n2 之间的行 eg: sed &#x27;1,2c Hi&#x27; abd 删除i 插入，在新的上一行出现 paste 合并文件，需确保合并的两文件行数相同 12-d 指定不同于空格或tab键的域分隔符-s 按行合并，单独一个文件为一行 su [参数] user | 切换登陆 12-l 切换时连同环境变量、工作目录一起改变-c command 执行command变回原来的使用者 sudo | 以特定用户的权限执行特定命令 12-l 列出当前用户可执行的命令-u username#uid 以指定用户执行命令 file | 判断文件类型","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://example.com/tags/linux/"}]},{"title":"算法复杂度","slug":"复杂度","date":"2018-05-30T06:39:45.000Z","updated":"2021-09-22T11:19:04.651Z","comments":true,"path":"2018/05/30/复杂度/","link":"","permalink":"http://example.com/2018/05/30/%E5%A4%8D%E6%9D%82%E5%BA%A6/","excerpt":"","text":"算法复杂度 原文地址： https://www.cnblogs.com/onepixel/articles/7674659.html 排序方法 时间复杂度（平均） 时间复杂度（最坏） 时间复杂度（最好） 空间复杂度 稳定性 插入排序 O(n2) O(n2) O(n) O(1) 稳定 希尔排序 O(n1.3) O(n2) O(n) O(1) 不稳定 选择排序 O(n2) O(n2) O(n2) O(1) 不稳定 堆排序 O(nlogn) O(nlogn) O(nlogn) O(1) 不稳定 冒泡排序 O(n2) O(n2) O(n) O(1) 稳定 快速排序 O(nlogn) O(n2) O(nlogn) O(nlogn) 不稳定 归并排序 O(nlogn) O(nlogn) O(nlogn) O(n) 稳定 演示 插入排序 希尔排序 选择排序 堆排序 冒泡排序 快速排序 归并排序 计数排序 桶排序 基数排序","categories":[],"tags":[{"name":"Sort","slug":"Sort","permalink":"http://example.com/tags/Sort/"}]},{"title":"快速排序(Quicksort)","slug":"sort/快速排序(Quicksort)","date":"2018-05-30T06:39:45.000Z","updated":"2021-09-22T11:19:04.645Z","comments":true,"path":"2018/05/30/sort/快速排序(Quicksort)/","link":"","permalink":"http://example.com/2018/05/30/sort/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F(Quicksort)/","excerpt":"","text":"http://www.runoob.com/w3cnote/sort-algorithm-summary.html 排序算法 时间复杂度 冒泡排序 O(n2) 选择排序 O(n2) 插入排序 O(n2) 希尔排序 O(n1.5) 快速排序 O(N*logN) 归并排序 O(N*logN) 堆排序 O(N*logN) 基数排序 O(d(n+r)) 快速排序(Quicksort) 基本思想：（分治） 先从数列中取出一个数作为key值； 将比这个数小的数全部放在它的左边，大于或等于它的数全部放在它的右边； 对左右两个小数列重复第二步，直至各区间只有1个数。 辅助理解：挖坑填数 初始时 i = 0; j = 9; key=72 由于已经将a[0]中的数保存到key中，可以理解成在数组a[0]上挖了个坑，可以将其它数据填充到这来。 从j开始向前找一个比key小的数。当j=8，符合条件，a[0] = a[8] ; i++ ; 将a[8]挖出再填到上一个坑a[0]中。 这样一个坑a[0]就被搞定了，但又形成了一个新坑a[8]，这怎么办了？简单，再找数字来填a[8]这个坑。 这次从i开始向后找一个大于key的数，当i=3，符合条件，a[8] = a[3] ; j-- ; 将a[3]挖出再填到上一个坑中。 12数组：72 - 6 - 57 - 88 - 60 - 42 - 83 - 73 - 48 - 85 0 1 2 3 4 5 6 7 8 9 此时 i = 3; j = 7; key=72 再重复上面的步骤，先从后向前找，再从前向后找。 从j开始向前找，当j=5，符合条件，将a[5]挖出填到上一个坑中，a[3] = a[5]; i++; 从i开始向后找，当i=5时，由于i==j退出。 此时，i = j = 5，而a[5]刚好又是上次挖的坑，因此将key填入a[5]。 12数组：48 - 6 - 57 - 88 - 60 - 42 - 83 - 73 - 88 - 85 0 1 2 3 4 5 6 7 8 9 可以看出a[5]前面的数字都小于它，a[5]后面的数字都大于它。因此再对a[0…4]和a[6…9]这二个子区间重复上述步骤就可以了。 12&lt;数组：48 - 6 - 57 - 42 - 60 - 72 - 83 - 73 - 88 - 85 0 1 2 3 4 5 6 7 8 9 平均时间复杂度：O(N*logN) 方式一 12345678910111213141516171819202122232425262728293031323334353637public class Quick &#123; public static void sort(int arr[], int low, int high) &#123; int l = low; int h = high; int povit = arr[low]; while (l &lt; h) &#123; while (l &lt; h &amp;&amp; arr[h] &gt;= povit) h--; if (l &lt; h) &#123; int temp = arr[h]; arr[h] = arr[l]; arr[l] = temp; l++; &#125; while (l &lt; h &amp;&amp; arr[l] &lt;= povit) l++; if (l &lt; h) &#123; int temp = arr[h]; arr[h] = arr[l]; arr[l] = temp; h--; &#125; &#125; //打印 for (int i = 0; i &lt; arr.length; i++) &#123; System.out.print(arr[i]); &#125; System.out.println(); // print(arr); System.out.println(&quot;l=&quot; + (l + 1) + &quot;h=&quot; + (h + 1) + &quot;povit=&quot; + povit + &quot;\\n&quot;); if (l &gt; low) sort(arr, low, l - 1); if (h &lt; high) sort(arr, l + 1, high); &#125;&#125; 方式二 runoob 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647public &lt;T extends Comparable&lt;? super T&gt;&gt; T[] quickSort(T[] targetArr, int start, int end) &#123; int i = start + 1; int j = end; T key = targetArr[start]; while (i &lt; j) &#123; /** * 按照j--的方向遍历目标数组，直到比key小的值为止 */ while (j &gt; i &amp;&amp; targetArr[j].compareTo(key) &gt;= 0) &#123; j--; &#125; if (i &lt; j) &#123; /** * targetArr[i]已经保存在key中，可将后面的数填入 */ targetArr[i] = targetArr[j]; i++; &#125; /** * 按照i++的方向遍历目标数组，直到比key大的值为止 */ while (i &lt; j &amp;&amp; targetArr[i].compareTo(key) &lt;= 0) &#123; /** * 此处一定要小于等于零，假设数组之内有一亿个1，0交替出现的话，而key的值又恰巧是1的话，那么这个小于等于的作用就会使下面的if语句少执行一亿次。 */ i++; &#125; if (i &lt; j) &#123; /** * targetArr[j]已保存在targetArr[i]中，可将前面的值填入 */ targetArr[j] = targetArr[i]; j--; &#125; &#125; /** * 此时i==j */ targetArr[i] = key; //递归调用，把key前面的完成排序 this.quickSort(targetArr, start, i - 1); //递归调用，把key后面的完成排序 this.quickSort(targetArr, j + 1, end); return null; &#125;","categories":[],"tags":[{"name":"Sort","slug":"Sort","permalink":"http://example.com/tags/Sort/"}]},{"title":"快速排序JavaScript","slug":"sort/快速排序JavaScript","date":"2018-05-30T06:39:45.000Z","updated":"2021-09-22T11:19:04.646Z","comments":true,"path":"2018/05/30/sort/快速排序JavaScript/","link":"","permalink":"http://example.com/2018/05/30/sort/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8FJavaScript/","excerpt":"","text":"快速排序JavaScript 1234567891011121314151617181920212223242526272829function quickSort(array)&#123; function sort(prev, numsize)&#123; var nonius = prev; var j = numsize -1; var flag = array[prev]; if ((numsize - prev) &gt; 1) &#123; while(nonius &lt; j)&#123; for(; nonius &lt; j; j--)&#123; if (array[j] &lt; flag) &#123; array[nonius++] = array[j]; //a[i] = a[j]; i += 1; break; &#125;; &#125; for( ; nonius &lt; j; nonius++)&#123; if (array[nonius] &gt; flag)&#123; array[j--] = array[nonius]; break; &#125; &#125; &#125; array[nonius] = flag; sort(0, nonius); sort(nonius + 1, numsize); &#125; &#125; sort(0, array.length); return array; &#125;","categories":[],"tags":[{"name":"Sort","slug":"Sort","permalink":"http://example.com/tags/Sort/"}]},{"title":"hql","slug":"mysql/sql_hibernate查询","date":"2018-05-29T06:05:35.000Z","updated":"2021-09-22T11:19:04.636Z","comments":true,"path":"2018/05/29/mysql/sql_hibernate查询/","link":"","permalink":"http://example.com/2018/05/29/mysql/sql_hibernate%E6%9F%A5%E8%AF%A2/","excerpt":"","text":"HQL：hibernate查询语言 from子句 1from Cat as cat 子句可以同时出现多个类，查询结果是产生一个笛卡尔积或产生跨表的连接。 1from Formula as form ,Parameter as param 关联(Association)与连接(Join) 123from Cat as cat inner jon cat.mate as mate left outer cat.kittens as kitten 1from Cat as cat left join cat.mate.kittens as kittens 1from Formula form full jon form.parameter param inner jon (内连接) left outer join (左外连接) right outer join (右外连接) full join (全连接，不常用) 通过HQL的with关键字，你可以提供额外的join条件 12from Cat as cat left join cat.kittens as kitten with kitten.bodyWeight &gt; 10.0 一个&quot;fetch&quot;连接允许仅仅使用一个选择语句就将相关联的对象或一组值的集合随着他们的父对象的初始化而被初始化，这种方法在使用到集合的情况下尤其有用，对于关联和集合来说，它有效的代替了映射文件中的外联接 与延迟声明（lazy declarations）. 123from Cat as cat inner join fetch cat.mate left join fetch cat.kittens 一个fetch连接通常不需要被指定别名, 因为相关联的对象不应当被用在 where 子句 (或其它任何子句)中。同时，相关联的对象 并不在查询的结果中直接返回，但可以通过他们的父对象来访问到他们。 1234from Cat as cat inner join fetch cat.mate left join fetch cat.kittens child left join fetch child.kittens 如果你使用属性级别的延迟获取（lazy fetching）（这是通过重新编写字节码实现的），可以使用 fetch all properties 来强制Hibernate立即取得那些原本需要延迟加载的属性（在第一个查询中）。 1from Document fetch all properties order by name 1from Document doc fetch all properties where lower(doc.name) like &#x27;%cats%&#x27; select 子句 select 子句选择将哪些对象与属性返 回到查询结果集中. 123select mate from Cat as cat inner jon cat.mate as mate 可以更简洁的用以下的查询语句表达相同的含义: 1select cat.mate from Cat cat 查询语句可以返回值为任何类型的属性，包括返回类型为某种组件(Component)的属性: 12select cat.name from DomesticCat cat where cat.name like &#x27;fri%&#x27; 1select cust.name.firstName from Customer as cust 查询语句可以返回多个对象和（或）属性，存放在Object[]队列中， 1234select mother,offspr,mate.name from DomesticCat as mother inner join mother.mate as mate left outer join mother.kittens as offspr 或存放在一个List对象中， 1234select new list(mother,offspr,mate.name) from DomesticCat as mother inner join mother.mate as mate left outer join mother.kittens as offspr 也可能直接返回一个实际的类型安全的Java对象， 1234select new Family(mother,mate,offspr) from DomesticCat as mother join mother.mate as mate left join mother.kittens as offspr 聚集函数 HQL查询甚至可以返回作用于属性之上的聚集函数的计算结果: 12select avg(cat.weight),sum(cat.weight),max(cat.weight),count(cat)from Cat cat 受支持的聚集函数如下： avg(…), sum(…), min(…), max(…) count(*) count(…), count(distinct …), count(all…) 选择子句中使用数学操作符、连接以及经过验证的sql函数： 1234select cat.weight + sum(kitten.weight) from Cat cat join cat.kittens kitten group by cat.id,cat.weight 1select firstName||&#x27; &#x27;||initial||&#x27; &#x27;||upper(lastName) from Person 关键字distinct与all 也可以使用，它们具有与SQL相同的语义. 123select distinct cat.name from Cat catselect count(distinct cat.name), count(cat) from Cat cat where 子句 where 子句允许将返回的实例列表的范围缩小。如果没有指定别名，可以使用属性名直接引用属性 1from Cat where name = &#x27;Fritz&#x27; 如果指派了别名，需要使用完整的属性名： 1from Cat as cat where cat.name = &#x27;Fritz&#x27; 返回名为（属性name等于）’Fritz‘ 的Cat 实例 123select foo from Foo foo ,Bar bar where foo.startDate = bar.date","categories":[],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/tags/mysql/"}]},{"title":"java-io&encode","slug":"java/java-io&encode","date":"2018-05-26T06:05:35.000Z","updated":"2021-09-22T11:19:04.623Z","comments":true,"path":"2018/05/26/java/java-io&encode/","link":"","permalink":"http://example.com/2018/05/26/java/java-io&encode/","excerpt":"","text":"I/O、Encode Reader类是java的I/O中读字符的父类，而InputStream类是读字节的父类，InputStreamReader类就是关联字节到字符的桥梁，负责在I/O过程中读取字节到字符转换，而对具体字节到字符的解码实现是委托StreamDecoder去做。 12345678910graph TD A[InputStream] B[Charset] C[Reader] D(StreamEncoder)--&gt;A D(StreamEncoder)--&gt;B D(StreamEncoder)--&gt;C E[InputStreamWriter]--&gt;D E --&gt;C Writer类： 12345678910graph TD A[OutputStream] B[Charset] C[Writer] D(StreamEncoder)--&gt;A D(StreamEncoder)--&gt;B D(StreamEncoder)--&gt;C E[OutputStreamWriter]--&gt;D E --&gt;C 1234567891011121314151617181920212223 String file = &quot;C:\\\\Users\\\\shy\\\\Desktop\\\\txt.txt&quot;; String charset = &quot;utf-8&quot;; //写字符转换成字节流 FileOutputStream outputStream = new FileOutputStream(file); OutputStreamWriter writer = new OutputStreamWriter(outputStream, charset); writer.write(&quot;2234&quot;); writer.close(); FileInputStream inputStream = new FileInputStream(file); InputStreamReader reader = new InputStreamReader(inputStream,charset); StringBuffer buffer = new StringBuffer(); int read = reader.read(); char[] buf = new char[65]; int count =0; while((count = reader.read(buf))!=-1)&#123; StringBuffer append = buffer.append(buf,0,count); System.out.println(append); //2234 &#125;// System.out.println(read); reader.close(); String类字节转换为字符 1234String s = &quot;this are some chinese string&quot;; byte[] b = s.getBytes(0&quot;utf-8&quot;); String n = new String(b,&quot;utf-8&quot;);","categories":[],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"http_method","slug":"http/http_method","date":"2018-05-14T03:33:06.000Z","updated":"2021-09-22T11:19:04.621Z","comments":true,"path":"2018/05/14/http/http_method/","link":"","permalink":"http://example.com/2018/05/14/http/http_method/","excerpt":"","text":"http_method 一些常见的HTTP方法 HTTP方法 描述 GET 从服务器向客户端发送命名资源 PUT 将来自客户端的数据存储到一个命名的服务器资源中去 DELTET 从服务器中删除命名资源 POST 将客户端数据发送到一个服务器网关应用程序 HEAD 仅发送命名资源响应中的HTTP首部 一些常见的HTTP状态码 HTTP状态码 描述 200 ok,文档正确返回 302 Redirect(重定向)。到其他地方去获取资源 404 Not Found(没找到)。无法找到这个资源 HTTP报文包括以下三个部分。 起始行 报文的第一行就是起始行，在请求报文中用来说明要做些什么，在响应报文中说明出现了什么情况。 首部字段 起始行后面有零个或多个首部字段。每个首部字段都包含一个名字和一个值，为了便于解析，两者之间用冒号（:）来分隔。首部以一个空行结束。添加一个首部字段和添加新行一样简单。 主体 空行之后就是可选的报文主体了，其中包含了所有类型的数据。请求主体中包括了要发送给Web服务器的数据；响应主体中装载了要返回给客户端的数据。起始行和首部都是文本形式且都是结构化的，而主体则不同，主体中可以包含任意的二进制数据（比如图片、视频、音轨、软件程序）。当然，主体中也可以包含文本。","categories":[],"tags":[{"name":"Http","slug":"Http","permalink":"http://example.com/tags/Http/"}]},{"title":"js内置对象Math","slug":"js/js内置对象","date":"2018-05-08T10:06:35.000Z","updated":"2021-09-22T11:19:04.628Z","comments":true,"path":"2018/05/08/js/js内置对象/","link":"","permalink":"http://example.com/2018/05/08/js/js%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/","excerpt":"","text":"js内置对象Math Math对象属性 属性 说明 Math.E 自然对数的底数，常量e值 Math.LN10 10的自然对数 Math.LN2 2的自然对数 Math.LOG2E 以2为底e的对数 Math.LOG2E 以10为底e的对数 Math.PI π的值 Math.SQRT1_2 1/2的平方根（2的平方根的倒数） Math.SQRT2 2的平方根 min()和max()方法 找到数组最值，把Math对象作为apply的第一个参数，从而正确的设置this值，任何数组作为第二个参数。 12var values = [1,2,3,4,5,6,7,8];var max = Math.max.apply(Math,values); 舍入方法 Math.ceil() 向上舍入 Math.floor() 向下舍入 Math.round() 标准舍入（四舍五入） 1234567891011121314alert(Math.ceil(25.9)); //26alert(Math.ceil(25.5)); //26alert(Math.ceil(25.1)); //26alert(Math.round(25.9)); //26alert(Math.round(25.5)); //26alert(Math.round(25.1)); //25alert(Math.floor(25.9)); //25alert(Math.floor(25.5)); //25alert(Math.floor(25.1)); //25 random()方法 值 = Math.floor(Math.random() * 可能的总数 + 第一个可能的值) [Math.floor()方法，Math.random()总返回一个小数值] 123456789101112var num = Math.floor(Math.random() * 10 +1); //1到10 之间的数值var num = Math.floor(Math.random() * 9 + 2); //2到10之间的数值function selectFrom(lowerValue,upperValue)&#123; var choices = upperValue - lowerValue + 1; return Math.floor(Math.random() * choices + lowerValue);&#125;var num = selectFrom(2,10);alert(num); //介于2和10之间（包括2和10）的一个数 其他方法 方法 说明 Math.abs(num) 返回num的绝对值 Math.exp(num) 返回Math.E的num次幂 Math.log(num) 返回num的自然对数 Math.pow(num,power) 返回num的power次幂 Math.sqrt(num) 返回num的平方根 Math.acos(x) 返回x的反余弦值 Math.asin(x) 返回x的反正弦值 Math.atan(x) 返回x的反正切值 Math.atan2(y,x) 返回y/x的反正切值 Math.cos(x) 返回x的余弦值 Math.sin(x) 返回x的正弦值 Math.tan(x) 返回x的正切值","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://example.com/tags/JavaScript/"}]},{"title":"js创建对象","slug":"js/js面向对象","date":"2018-05-08T10:06:35.000Z","updated":"2021-09-22T11:19:04.630Z","comments":true,"path":"2018/05/08/js/js面向对象/","link":"","permalink":"http://example.com/2018/05/08/js/js%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/","excerpt":"","text":"js创建对象 工厂模式 123456789101112131415 function createPerson(name, age, job) &#123; var o = nwe Object(); o.name = name; o.age = age; o.job = job; 0. sayName = function () &#123; alert(this.name) &#125;; return o; &#125;var person1 = createPerson(&quot;Nicholas&quot;,29,&quot;Software Engineer&quot;);var person2 = createPerson(&quot;Greg&quot;,27,&quot;Docker&quot;); 构造函数模式 12345678910111213141516171819202122var person21 = new Person(&quot;Nicholas&quot;, 29, &quot;Software Engineer&quot;);var person22 = new Person(&quot;Greg&quot;, 24, &quot;Docker&quot;);alert(person21.constructor == Person); //truealert(person22.constructor == Person); //truealert(person21 instanceof Object); //truealert(person21 instanceof Person); //truealert(person22 instanceof Object); //truealert(person22 instanceof Person); //true&lt;!-- 2、构造函数--&gt;function Person(name, age, job) &#123; this.name = name; this.age = age; this.job = job; this.sayName = function () &#123; alert(this.name); &#125;;&#125; 将构造函数当做函数 12345678910111213&lt;!--将构造函数当做函数--&gt;//当做构造函数使用var person = new Person(&quot;Nicholas&quot;,24,&quot;Software Engineer&quot;);person.sayName(); //&quot;Nicholas&quot;//当做普通函数调用Person(&quot;Greg&quot;,32,&quot;Docker&quot;);window.sayName(); //&quot;Greg&quot;//在另一个对象的作用域中调用var 丿= new Object();Person .call(o,&quot;Kristen&quot;,32,&quot;Nurse&quot;);o.sayName(); //&quot;Kristen&quot; [ECMAScript中的函数是对象，每定义一个函数，也就是实例化了一个对象 ] 1234567function Person(name,age,job) &#123; this.name=name; this.age=age; this.job=job; this.sayName = new Function(&quot;alert()this.name&quot;); //与声明函数在逻辑上等价&#125; 原型模式 123456789101112131415161718192021&lt;!-- 原型模式--&gt; //创建每个函数都有一个prototype（原型）属性，这个属性是一个指针，指向一个对象，用途是包含可以由特定类型的所有实例共享的属性和方法。 function Person() &#123; &#125; Person.prototype.name = &quot;Nocjolas&quot;; Person.prototype.age = 22; Person.prototype.job = &quot;Soft ware&quot; Person.prototype.sayName = function () &#123; alert(this.name) &#125;; var person31 = new Person(); person31.sayName(); //&quot;Nicholas&quot; var person32= new Person(); person32.sayName(); //&quot;Nicholas&quot; alert(person31.sayName == person32.sayName); //trues hasOwnProperty() 123456789101112131415161718192021222324252627var person41 = new Person(); var person42 = new Person(); alert(person41.hasOwnProperty(&quot;name&quot;)); //false person41.name=&quot;Greg&quot;; //来自实例 alert(person41.hasOwnProperty(&quot;name&quot;)) ; //true alert(person42.name); //&quot;Nicholas&quot; 来自原型 alert(person42.hasOwnProperty(&quot;name&quot;)); //false delete person41.name; alert(person41.name); //&quot;Nicholas&quot; 来自原型 alert(person41.hasOwnProperty(&quot;name&quot;)); //false &lt;!-- 原型模式--&gt; //创建每个函数都有一个prototype（原型）属性，这个属性是一个指针，指向一个对象，用途是包含可以由特定类型的所有实例共享的属性和方法。 function Person() &#123; &#125; Person.prototype.name = &quot;Nocjolas&quot;; Person.prototype.age = 22; Person.prototype.job = &quot;Soft ware&quot; Person.prototype.sayName = function () &#123; alert(this.name) &#125;; 调用构造函数时会为实例添加一个指向最初原型的 [[Prototype]]指针，而把原型修改为另外一个对象就等于切断了构造函数与最初原型之间的联系。 请记住：实例中的指针仅指向原型，而不指向构造函数。 1234567891011121314151617function Person() &#123; &#125; var friend = new Person(); Person.prototype=&#123; constructor:Person, name:&quot;Greg&quot;, aage:21, job:&quot;Docker&quot;, sayName:function () &#123; alert(this.name); &#125; &#125;; friend.sayName(); //error 在这个例子中，我们先创建了 Person 的一个实例，然后又重写了其原型对象。然后在调用 friend.sayName()时发生了错误，因为 friend 指向的原型中不包含以该名字命名的属性。 原型对象的问题 1234567891011121314151617181920212223function Person() &#123;&#125;Person.prototype =&#123; constructor:Person, name:&quot;jack&quot;, age:23, job:&quot;Engineer&quot;, friends :[&quot;Shlby&quot;,&quot;Court&quot;], sayName:function () &#123; alert(this.name); &#125;&#125;;var person1 = new Person();var person2 = new Person();person1.friends.push(&quot;van&quot;);alert(perosn1.friends); //&quot;Shekby&quot;,&quot;Court&quot;,&quot;van&quot;alert(perosn2.friends); //&quot;Shekby&quot;,&quot;Court&quot;,&quot;van&quot;alert(perosn1.friends === person2.friends); //true","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://example.com/tags/JavaScript/"}]},{"title":"js基本包装类型","slug":"js/js基本包装类型","date":"2018-05-07T11:30:46.000Z","updated":"2021-09-22T11:19:04.629Z","comments":true,"path":"2018/05/07/js/js基本包装类型/","link":"","permalink":"http://example.com/2018/05/07/js/js%E5%9F%BA%E6%9C%AC%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B/","excerpt":"","text":"js基本包装类型 三种特殊的引用类型：Boolean、Number、String 1234567var value = &quot;25&quot;;var number = Number(value); //转型函数alert(typeof number);var obj = new Number(value); //构造函数alert(typeof obj); //&quot;object&quot; Boolean 类型 Boolean理性是与布尔类型对应的引用类型。要创建Boolean对象，可以像下面这样调用Boolean构造函数并传入true或false值。 12var booleanObject = new Boolean(true); Boolean 类型的实例重写了valueOf方法，返回接班类型值true或false；重写了toString()方法，返回字符串&quot;true&quot;和&quot;false&quot;. 12345678910111213var falseObject = new Boolean(false); //false typeOf -&gt; objectvar result = falseObject &amp;&amp; true;alert(result); //truevar falseValue = false;result = falseValue &amp;&amp; true;alert(result); //falsealert(typeof falseObject); //objectalert(typeof falseValue); //booleanalert(falseObject instanceof Boolean); //truealert(falseValue instanceof Boolean); //false [布尔表达式中所有的对象都会被转换为true ] [理解基本类型的布尔值与Boolean对象之间的区别非常重要–当然，我们建议永远不要使用Boolean对象 ] Number 类型 Number是与数字值对应的引用类型。与Boolean类型一样，Number类型也重写了valueOf()、toLocaleString()和toString()方法。 toString() 返回几进制数值的字符串 123456789var num = 10; //toString（）返回几进制数值的字符串alert(num.toString()); //&quot;10&quot;alert(num.toString(2)); //&quot;1010&quot;alert(num.toString(8)); //&quot;12&quot;alert(num.toString(10)); //&quot;10&quot;alert(num.toString(16)); //&quot;a&quot; toFixed 按指定的小数位返回数值的字符串 12var num = 10.005;alert(num.toFixed(2)); //&quot;10.01&quot; toExponential() 格式化数值，以指数表示法（e表示法）表示数值的字符串形式。 12var num = 10 ;alert(num.toExponential(1)); //&quot;1.0e+1&quot; toPrecision() 返回固定大小（fixed）格式，也可能返回指数（exponential）格式； 12345var num = 99;alert(num.toPrecision(1)); //&quot;1e+2&quot;alert(num.toPrecision(20)); //&quot;99&quot;alert(num.toPrecision(3)); //&quot;99.0&quot; String 类型 字符串的对象包装类型 123var stringObject = new String(&quot;hello world&quot;);alert(stringObject.length); //&quot;11&quot; 字符方法 charAt()和charCodeAt() 1234567var stringValue = &quot;hello world&quot;;alert(&quot;stringValue.charAt(1)&quot;); //&quot;e&quot; -&gt;字符alert(stringValue.charCodeAt(1)); //输出 &quot;101&quot; e字符编码alert(stringValue[1]); //&quot;e&quot; 字符串特定字符 -字符串操作方法 concat(),拼接字符串返回新的字符串 123456789var stringValue = &quot;hello &quot;;var result = stringValue.concat(&quot;world&quot;);alert(result); //&quot;hello world&quot;alert(stringValue); //&quot;hello&quot;var result1 = stringValue.concat(&quot;world&quot;+&quot;!&quot;);alert(result1); //&quot;hello world!&quot;alert(stringValue); //&quot;hello&quot; slice()、substr()、subString() slice()方法会将传入的负值与字符串长度相加，substr()方法将负的第一个参数加上字符串的长度，而将负的第二个参数转换为0.substring()方法会把所有的负值参数都转换为0。 12345678var stringValue = &quot;hello world&quot;;alert(stringValue.slice(-3)); //&quot;rld&quot;alert(stringValue.substring(-3)); //&quot;hello world&quot;alert(stringValue.substr(-3)); //&quot;rld&quot;alert(stringValue.slice(3,-4)); //&quot;lo w&quot;alert(stringValue.substring(3,-4)); //&quot;hel&quot;alert(stringValue.substr(3,-4)); //&quot;&quot; (空字符串) 字符串位置方法 indexOf() 从头搜索、lastIndexOf()从末尾搜索 12345678var stringValue = &quot;hello world&quot;;alert(stringValue.indexOf(&quot;o&quot;)); //4alert(stringValue.lastIndexOf(&quot;o&quot;)); //7&lt;!--俩个参数--&gt;alert(stringValue.indexOf(&quot;o&quot;,6)); //7 从第6位开始向后搜索alert(stringValue.lastIndexOf(&quot;o&quot;,6)); //4 从第6位开始向前搜索 查找字符串所有字符（一个） 12345678910var stringValue = &quot;Lorem ipsum dolor sit amet, consectetur adipisicing elit&quot;;var positions = new Array();var pos = stringValue.indexOf(&quot;e&quot;);while(pos &gt; -1)&#123; positions.push(pos); pos = stringValue.indexOf(&quot;e&quot;,pos+1);&#125;alert(positions); //&quot;3,24,32,35,52&quot;","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://example.com/tags/JavaScript/"}]},{"title":"js函数","slug":"js/js函数","date":"2018-05-07T03:30:46.000Z","updated":"2021-09-22T11:19:04.629Z","comments":true,"path":"2018/05/07/js/js函数/","link":"","permalink":"http://example.com/2018/05/07/js/js%E5%87%BD%E6%95%B0/","excerpt":"","text":"js函数 函数的定义 1234567891011&lt;--定义方式1--&gt;function sum(num1,num2)&#123; return num1+num2;&#125;&lt;--定义方式2--&gt;var sum = function(num1,num2)&#123; return num1+num2;&#125;&lt;--定义方式3--&gt;//不推荐var sum = new Function(&quot;num1&quot;,&quot;num2&quot;,&quot;return num1+num2&quot;); 函数名仅仅是指向函数的指针，因此函数名与包含对象指针的其他变量没有什么不同。换句话说，一个函数可能会有多个名字: 123456789101112function sum(num1,num2)&#123; return num1+num2;&#125;alert(sum(10,10));//20var anotherSum = sum;alert(anoterSum(10,10));//20sum = null;alert(antoherSum(10,10));//20 函数声明、函数表达式 12345678&lt;!--可以执行--&gt;alert(sum(10,10)); function sum(num1, num2) &#123; return num1 + num2; &#125; 代码开始执行之前，解析器就已经通过一个名为函数声明提升（function declaration hoisting）的过程，读取并将函数声明添加到执行环境中。对代码求值时，JavaScript引擎在第一遍会声明函数并将它们放到源代码树的顶部。 123456&lt;!--异常--&gt; alert(sum(10,10));var sum = function (num1, num2) &#123; return num1 + num2&#125; 函数位于一个初始化语句中，而不是一个函数声明。在执行到函数所在的语句之前，变量sum中不会保存有对函数的引用；而且，由于第一行代码就会导致&quot;unexpected identifier&quot;(意外标识符)错误，实际上也不会执行到下一行。 作为值得函数 函数名本身就是变量，所以函数也可以作为值来使用。不仅可以像参数传递一样把一个函数传递给另一个函数，而且可以将一个函数作为另一个函数的结果返回。 123456789101112131415161718function callSomeFunction(someFunction, someArgument) &#123; return someFunction(someArgument)&#125;function add10(num) &#123; return num + 10;&#125;var result1 = callSomeFunction(add10, 10);alert(result1); //20function getGreeting(name) &#123; return &quot;Hello,&quot; + name;&#125;var result2 = callSomeFunction(getGreeting,&quot;Nicholas&quot;);alert(result2); //Hello,Nicholas 函数内部属性 arguments.callee 123456789101112131415161718 function factorial(num) &#123; if (num &lt;= 1) &#123; return 1; &#125; else &#123;// return num * factorial(num - 1); return num * arguments.callee(num - 1); //解除耦合 &#125; &#125; var trueFactorial = factorial; factorial = function () &#123; return 0; &#125; alert(trueFactorial(5)) //120 alert(factorial(5)); //0 this(网页全局作用域调用函数是，this对象引用的就是window) 12345678910111213window.color = &quot;red&quot;;var o = &#123;color : &quot;blue&quot;&#125;;function sayColor() &#123; alert(this.color)&#125;sayColor(); //&quot;red&quot;o.sayColor = sayColor; //this.color -&gt; o.coloro.sayColor(); //&quot;blue&quot; 函数的属性和方法 length(表示函数希望接收的命名参数的个数) 1234567891011121314151617function sayName(name) &#123; alert(name);&#125;function sum(num1, num2) &#123; return num1 + num2;&#125;function sayHi() &#123; alert(&quot;Hi!&quot;);&#125;alert(sayName.length); //1alert(sum.length); //2alert(sayHi.length); //0","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://example.com/tags/JavaScript/"}]},{"title":"js时间日期","slug":"js/js时间日期","date":"2018-05-01T13:30:46.000Z","updated":"2021-09-22T11:19:04.630Z","comments":true,"path":"2018/05/01/js/js时间日期/","link":"","permalink":"http://example.com/2018/05/01/js/js%E6%97%B6%E9%97%B4%E6%97%A5%E6%9C%9F/","excerpt":"","text":"js时间日期 创建日期 1var now = new Date(); 在调用 Date 构造函数而不传递参数的情况下，新创建的对象自动获得当前日期和时间。如果想根 据特定的日期和时间创建日期对象，必须传入表示该日期的毫秒数（即从 UTC 时间 1970 年 1 月 1 日午 夜起至该日期止经过的毫秒数）。为了简化这一计算过程， ECMAScript 提供了两个方法： Date.parse() 和 Date.UTC()。 其中， Date.parse()方法接收一个表示日期的字符串参数，然后尝试根据这个字符串返回相应日 期的毫秒数。 ECMA-262 没有定义 Date.parse()应该支持哪种日期格式，因此这个方法的行为因实现 而异，而且通常是因地区而异。将地区设置为美国的浏览器通常都接受下列日期格式：  “月/日/年”，如 6/13/2004；  “英文月名 日,年”，如 January 12,2004；  “英文星期几 英文月名 日 年 时:分:秒 时区”，如 Tue May 25 2004 00:00:00 GMT-0700。  ISO 8601 扩展格式 YYYY-MM-DDTHH:mm:ss.sssZ（例如 2004-05-25T00:00:00）。只有兼容 ECMAScript 5的实现支持这种格式。 例如，要为 2004年 5月 25日创建一个日期对象，可以使用下面的代码： 123var someDate = new Date(Date.parse(&quot;May 25, 2004&quot;));DateTypeExample01.htm 如果传入 Date.parse()方法的字符串不能表示日期，那么它会返回 NaN。实际上，如果直接将表 示日期的字符串传递给 Date 构造函数，也会在后台调用 Date.parse()。换句话说，下面的代码与前 面的例子是等价的： 123var someDate = new Date(&quot;May 25, 2004&quot;); 这行代码将会得到与前面相同的日期对象。 日期对象及其在不同浏览器中的实现有许多奇怪的行为。其中有一种倾向是将超 出范围的值替换成当前的值，以便生成输出。例如，在解析&quot;January 32, 2007&quot; 时，有的浏览器会将其解释为&quot;February 1, 2007&quot;。而 Opera 则倾向于插入当前月 份的当前日期，返回&quot;January 当前日期， 2007&quot;。也就是说，如果在 2007 年 9 月 21 日运行前面的代码，将会得到&quot;January 21, 2007&quot;（都是 21 日）。 Date.UTC()方法同样也返回表示日期的毫秒数，但它与 Date.parse()在构建值时使用不同的信 息。 Date.UTC()的参数分别是年份、基于 0的月份（一月是 0，二月是 1，以此类推）、月中的哪一天 （1 到 31）、小时数（0 到 23）、分钟、秒以及毫秒数。在这些参数中，只有前两个参数（年和月）是必 需的。如果没有提供月中的天数，则假设天数为 1；如果省略其他参数，则统统假设为 0。以下是两个 使用 Date.UTC()方法的例子： 123456789// GMT 时间 2000 年 1 月 1 日午夜零时var y2k = new Date(Date.UTC(2000, 0));// GMT 时间 2005 年 5 月 5 日下午 5:55:55var allFives = new Date(Date.UTC(2005, 4, 5, 17, 55, 55));DateTypeUTCExample01.htm 这个例子创建了两个日期对象。第一个对象表示 GMT时间 2000年 1月 1日午夜零时，传入的值一 个是表示年份的 2000，一个是表示月份的 0（即一月份）。因为其他参数是自动填充的（即月中的天数 为 1，其他所有参数均为 0），所以结果就是该月第一天的午夜零时。第二个对象表示 GMT 时间 2005 年 5月 5日下午 5:55:55，即使日期和时间中只包含 5，也需要传入不一样的参数：月份必须是 4（因为 月份是基于 0的）、小时必须设置为 17（因为小时以 0到 23表示），剩下的参数就很直观了。 如同模仿 Date.parse()一样， Date 构造函数也会模仿 Date.UTC()，但有一点明显不同：日期 和时间都基于本地时区而非 GMT来创建。不过， Date 构造函数接收的参数仍然与 Date.UTC()相同。 因此，如果第一个参数是数值， Date 构造函数就会假设该值是日期中的年份，而第二个参数是月份， 以此类推。据此，可以将前面的例子重写如下。 12345678// 本地时间 2000 年 1 月 1 日午夜零时var y2k = new Date(2000, 0);// 本地时间 2005 年 5 月 5 日下午 5:55:55var allFives = new Date(2005, 4, 5, 17, 55, 55);DateTypeConstructorExample01.htm 以上代码创建了与前面例子中相同的两个日期对象，只不过这次的日期都是基于系统设置的本地时 区创建的。 ECMAScript 5 添加了 Data.now()方法，返回表示调用这个方法时的日期和时间的毫秒数。这个方 法简化了使用 Data 对象分析代码的工作。例如： 123456789101112131415161718//取得开始时间var start = Date.now();//调用函数doSomething();//取得停止时间var stop = Date.now(),result = stop – start;支持 Data.now()方法的浏览器包括 IE9+、 Firefox 3+、 Safari 3+、 Opera 10.5 和 Chrome。在不支持它的浏览器中，使用+操作符把 Data 对象转换成字符串，也可以达到同样的目的。//取得开始时间var start = +new Date();//调用函数doSomething();//取得停止时间var stop = +new Date(),result = stop - start; 日期的格式化方法 Date 类型还有一些专门用于将日期格式化为字符串的方法，这些方法如下。  toDateString()——以特定于实现的格式显示星期几、月、日和年；  toTimeString()——以特定于实现的格式显示时、分、秒和时区；  toLocaleDateString()——以特定于地区的格式显示星期几、月、日和年；  toLocaleTimeString()——以特定于实现的格式显示时、分、秒；  toUTCString()——以特定于实现的格式完整的 UTC 日期。 与 toLocaleString()和 toString()方法一样，以上这些字符串格式方法的输出也是因浏览器 而异的，因此没有哪一个方法能够用来在用户界面中显示一致的日期信息。 1234除了前面介绍的方法之外，还有一个名叫 toGMTString()的方法，这是一个与toUTCString()等价的方法，其存在目的在于确保向后兼容。不过， ECMAScript 推荐现在编写的代码一律使用 toUTCString()方法。 日期/时间组件方法 到目前为止，剩下还未介绍的 Date 类型的方法（如下表所示），都是直接取得和设置日期值中特 定部分的方法了。需要注意的是， UTC 日期指的是在没有时区偏差的情况下（将日期转换为 GMT 时间） 的日期值。 方法 说明 getTime() 返回表示日期的毫秒数；与valueOf()方法返回的值相同 setTime(毫秒) 以毫秒数设置日期，会改变整个日期 getFullYear() 取得4位数的年份（如2007而非仅07） getUTCFullYear() 返回UTC日期的4位数年份 setFullYear(年) 设置日期的年份。传入的年份值必须是4位数字（如2007而非仅07） setUTCFullYear(年) 设置UTC日期的年份。传入的年份值必须是4位数字（如2007而非仅07） getMonth() 返回日期中的月份，其中0表示一月， 11表示十二月 getUTCMonth() 返回UTC日期中的月份，其中0表示一月， 11表示十二月 setMonth(月) 设置日期的月份。传入的月份值必须大于0，超过11则增加年份 setUTCMonth(月) 设置UTC日期的月份。传入的月份值必须大于0，超过11则增加年份 getDate() 返回日期月份中的天数（1到31） getUTCDate() 返回UTC日期月份中的天数（1到31） setDate(日) 设置日期月份中的天数。如果传入的值超过了该月中应有的天数，则增加月份 setUTCDate(日) 设置UTC日期月份中的天数。如果传入的值超过了该月中应有的天数，则增加月份 getDay() 返回日期中星期的星期几（其中0表示星期日， 6表示星期六） getUTCDay() 返回UTC日期中星期的星期几（其中0表示星期日， 6表示星期六） getHours() 返回日期中的小时数（0到23） getUTCHours() 返回UTC日期中的小时数（0到23） setHours(时) 设置日期中的小时数。传入的值超过了23则增加月份中的天数 setUTCHours(时) 设置UTC日期中的小时数。传入的值超过了23则增加月份中的天数 getMinutes() 返回日期中的分钟数（0到59） getUTCMinutes() 返回UTC日期中的分钟数（0到59） setMinutes(分) 设置日期中的分钟数。传入的值超过59则增加小时数 setUTCMinutes(分) 设置UTC日期中的分钟数。传入的值超过59则增加小时数 getSeconds() 返回日期中的秒数（0到59） getUTCSeconds() 返回UTC日期中的秒数（0到59） setSeconds(秒) 设置日期中的秒数。传入的值超过了59会增加分钟数 setUTCSeconds(秒) 设置UTC日期中的秒数。传入的值超过了59会增加分钟数 getMilliseconds() 返回日期中的毫秒数 getUTCMilliseconds() 返回UTC日期中的毫秒数 setMilliseconds(毫秒) 设置日期中的毫秒数 setUTCMilliseconds(毫秒) 设置UTC日期中的毫秒数 getTimezoneOffset() 返回本地时间与UTC时间相差的分钟数。例如，美国东部标准时间返回300。在某地进入夏令时的情况下，这个值会有所变化","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://example.com/tags/JavaScript/"}]},{"title":"js位置方法","slug":"js/js位置方法","date":"2018-04-29T11:10:35.000Z","updated":"2021-09-22T11:19:04.628Z","comments":true,"path":"2018/04/29/js/js位置方法/","link":"","permalink":"http://example.com/2018/04/29/js/js%E4%BD%8D%E7%BD%AE%E6%96%B9%E6%B3%95/","excerpt":"","text":"js位置方法 ECMAScript 5 为数组实例添加了两个位置方法： indexOf()和 lastIndexOf()。这两个方法都接收 两个参数：要查找的项和（可选的）表示查找起点位置的索引。其中， indexOf()方法从数组的开头（位 置 0）开始向后查找， lastIndexOf()方法则从数组的末尾开始向前查找。 这两个方法都返回要查找的项在数组中的位置，或者在没找到的情况下返回-1。在比较第一个参数 与数组中的每一项时，会使用全等操作符；也就是说，要求查找的项必须严格相等（就像使用===一样）。 123456789101112var numbers = [1,2,3,4,5,4,3,2,1]; alert(numbers.indexOf(4)); // 3 alert(numbers.lastIndexOf(4)); // 5 alert(numbers.indexOf(4,4)); // 5 var person = &#123;name : &quot;jack&quot;&#125;; var people = [&#123;name : &quot;jack&quot;&#125;]; var morePeople = [person]; alert(people.indexOf(person)); //-1 alert(morePeople.indexOf(person)); //0","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://example.com/tags/JavaScript/"}]},{"title":"js数组排序","slug":"js/js数组排序","date":"2018-04-28T09:32:26.000Z","updated":"2021-09-22T11:19:04.629Z","comments":true,"path":"2018/04/28/js/js数组排序/","link":"","permalink":"http://example.com/2018/04/28/js/js%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F/","excerpt":"","text":"js数组排序 reverse()和sort()方法的返回值都是经过排序之后的数组 reverse 1234var values = [0,1,5,10,15];values.reverse();alert(values) //15,10,,5,1,0 sort 1234var values = [0,1,5,10,15];values.sort();alert(values) //0,1,10,15,5 添加比较函数-升序 123456789101112131415var values = [0,1,5,10,15];values.sort(compare);alert(values) //0,1,5,10,15function compare(v1, v2) &#123; if (v1 &lt; v2) &#123; return -1; &#125; else if (v1 &gt; v2) &#123; return 1; &#125; else &#123; return 0; &#125; &#125; 降序 1234567891011121314var values = [0,1,5,10,15];values.sort(compare);alert(values) //15,10,,5,1,0function compare(v1, v2) &#123; if (v1 &lt; v2) &#123; return 1; &#125; else if (v1 &gt; v2) &#123; return -1; &#125; else &#123; return 0; &#125; &#125;","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://example.com/tags/JavaScript/"}]},{"title":"定时任务","slug":"java/java_定时任务","date":"2018-04-28T07:02:19.000Z","updated":"2021-09-22T11:19:04.627Z","comments":true,"path":"2018/04/28/java/java_定时任务/","link":"","permalink":"http://example.com/2018/04/28/java/java_%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/","excerpt":"","text":"定时任务 线程等待（不建议使用，任务复杂时存在内存泄露风险 1234567891011121314151617181920212223public class TestThreadWait &#123; public static void main(String[] args) &#123; Thread myThread = new Thread(new Runnable() &#123; @Override public void run() &#123; while (true) &#123; System.out.println(&quot;TestThreadWait is called!&quot;); try &#123; // 使用线程休眠来实现周期执行 Thread.sleep(1000 * 3); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; &#125; &#125;); myThread.start(); &#125;&#125; Timer** 123456789101112131415161718192021222324252627public class TestTimer &#123; public static void main(String[] args) &#123; TimerTask task = new TimerTask() &#123; @Override public void run() &#123; System.out.println(&quot;TimerTask is called!&quot;); &#125; &#125;; Timer timer = new Timer(); /* * schedule 和 scheduleAtFixedRate 区别： * 可将schedule理解为scheduleAtFixedDelay， * 两者主要区别在于delay和rate * 1、schedule，如果第一次执行被延时（delay）， * 随后的任务执行时间将以上一次任务实际执行完成的时间为准 * 2、scheduleAtFixedRate，如果第一次执行被延时（delay）， * 随后的任务执行时间将以上一次任务开始执行的时间为准（需考虑同步） * * 参数：1、任务体 2、延时时间（可以指定执行日期）3、任务执行间隔时间 */ // timer.schedule(task, 0, 1000 * 3); timer.scheduleAtFixedRate(task, 0, 1000 * 3); &#125;&#125; ScheduledExecutorService** 123456789101112131415public class TestScheduledExecutorService &#123; public static void main(String[] args) &#123; Runnable runnable = new Runnable() &#123; public void run() &#123; System.out.println(&quot;ScheduledExecutorService Task is called!&quot;); &#125; &#125;; ScheduledExecutorService service = Executors.newSingleThreadScheduledExecutor(); // 参数：1、任务体 2、首次执行的延时时间 // 3、任务执行间隔 4、间隔时间单位 service.scheduleAtFixedRate(runnable, 0, 3, TimeUnit.SECONDS); &#125;&#125; Quartz** 1234567891011121314151617181920212223242526272829303132333435public class TestQuartz &#123; public static void main(String[] args) &#123; try &#123; Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler(); scheduler.start(); JobDetail job = newJob(Job.class) .withIdentity(&quot;job&quot;, &quot;group&quot;).build(); // 休眠时长可指定时间单位，此处使用秒作为单位（withIntervalInSeconds） Trigger trigger = newTrigger() .withIdentity(&quot;trigger&quot;, &quot;group&quot;).startNow() .withSchedule(simpleSchedule().withIntervalInSeconds(3).repeatForever()) .build(); scheduler.scheduleJob(job, trigger); // scheduler.shutdown(); &#125; catch (SchedulerException se) &#123; se.printStackTrace(); &#125; &#125;&#125;class Job implements org.quartz.Job &#123; @Override public void execute(JobExecutionContext context) throws JobExecutionException &#123; System.out.println(&quot;Quartz task is called!&quot;); &#125;&#125;","categories":[],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"json2Map","slug":"json2Map","date":"2018-04-18T09:02:36.000Z","updated":"2021-09-22T11:19:04.630Z","comments":true,"path":"2018/04/18/json2Map/","link":"","permalink":"http://example.com/2018/04/18/json2Map/","excerpt":"","text":"json2Map 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152 String str = &quot;&#123;\\&quot;0\\&quot;:\\&quot;zhangsan\\&quot;,\\&quot;1\\&quot;:\\&quot;lisi\\&quot;,\\&quot;2\\&quot;:\\&quot;wangwu\\&quot;,\\&quot;3\\&quot;:\\&quot;maliu\\&quot;&#125;&quot;; //第一种方式 Map maps = (Map)JSON.parse(str); System.out.println(&quot;这个是用JSON类来解析JSON字符串!!!&quot;); for (Object map : maps.entrySet())&#123; System.out.println(((Map.Entry)map).getKey()+&quot; &quot; + ((Map.Entry)map).getValue()); &#125; //第二种方式 Map mapTypes = JSON.parseObject(str); System.out.println(&quot;这个是用JSON类的parseObject来解析JSON字符串!!!&quot;); for (Object obj : mapTypes.keySet())&#123; System.out.println(&quot;key为：&quot;+obj+&quot;值为：&quot;+mapTypes.get(obj)); &#125; //第三种方式 Map mapType = JSON.parseObject(str,Map.class); System.out.println(&quot;这个是用JSON类,指定解析类型，来解析JSON字符串!!!&quot;); for (Object obj : mapType.keySet())&#123; System.out.println(&quot;key为：&quot;+obj+&quot;值为：&quot;+mapType.get(obj)); &#125; //第四种方式 /** * JSONObject是Map接口的一个实现类 */ Map json = (Map) JSONObject.parse(str); System.out.println(&quot;这个是用JSONObject类的parse方法来解析JSON字符串!!!&quot;); for (Object map : json.entrySet())&#123; System.out.println(((Map.Entry)map).getKey()+&quot; &quot;+((Map.Entry)map).getValue()); &#125; //第五种方式 /** * JSONObject是Map接口的一个实现类 */ JSONObject jsonObject = JSONObject.parseObject(str); System.out.println(&quot;这个是用JSONObject的parseObject方法来解析JSON字符串!!!&quot;); for (Object map : json.entrySet())&#123; System.out.println(((Map.Entry)map).getKey()+&quot; &quot;+((Map.Entry)map).getValue()); &#125; //第六种方式 /** * JSONObject是Map接口的一个实现类 */ Map mapObj = JSONObject.parseObject(str,Map.class); System.out.println(&quot;这个是用JSONObject的parseObject方法并执行返回类型来解析JSON字符串!!!&quot;); for (Object map: json.entrySet())&#123; System.out.println(((Map.Entry)map).getKey()+&quot; &quot;+((Map.Entry)map).getValue()); &#125; String strArr = &quot;&#123;&#123;\\&quot;0\\&quot;:\\&quot;zhangsan\\&quot;,\\&quot;1\\&quot;:\\&quot;lisi\\&quot;,\\&quot;2\\&quot;:\\&quot;wangwu\\&quot;,\\&quot;3\\&quot;:\\&quot;maliu\\&quot;&#125;,&quot; + &quot;&#123;\\&quot;00\\&quot;:\\&quot;zhangsan\\&quot;,\\&quot;11\\&quot;:\\&quot;lisi\\&quot;,\\&quot;22\\&quot;:\\&quot;wangwu\\&quot;,\\&quot;33\\&quot;:\\&quot;maliu\\&quot;&#125;&#125;&quot;; // JSONArray.parse() System.out.println(json); &#125;","categories":[],"tags":[{"name":"util","slug":"util","permalink":"http://example.com/tags/util/"}]},{"title":"cron表达式","slug":"linux/linux_cron表达式","date":"2018-04-10T07:02:19.000Z","updated":"2021-09-22T11:19:04.633Z","comments":true,"path":"2018/04/10/linux/linux_cron表达式/","link":"","permalink":"http://example.com/2018/04/10/linux/linux_cron%E8%A1%A8%E8%BE%BE%E5%BC%8F/","excerpt":"","text":"Cron表达式： 每隔5秒执行一次：*/5 * * * * ? 每隔1分钟执行一次：0 */1 * * * ? 每天23点执行一次：0 0 23 * * ? 每天凌晨1点执行一次：0 0 1 * * ? 每月1号凌晨1点执行一次：0 0 1 1 * ? 每月最后一天23点执行一次：0 0 23 L * ? 每周星期天凌晨1点实行一次：0 0 1 ? * L 在26分、29分、33分执行一次：0 26,29,33 * * * ? 每天的0点、13点、18点、21点都执行一次：0 0 0,13,18,21 * * ?","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://example.com/tags/linux/"}]},{"title":"get_ipi","slug":"java/java_getip","date":"2018-04-08T07:02:19.000Z","updated":"2021-09-22T11:19:04.625Z","comments":true,"path":"2018/04/08/java/java_getip/","link":"","permalink":"http://example.com/2018/04/08/java/java_getip/","excerpt":"","text":"获取ip地址 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960 于是可得出获得客户端真实IP地址的方法一：public String getRemortIP(HttpServletRequest request) &#123; if (request.getHeader(&quot;x-forwarded-for&quot;) == null) &#123; return request.getRemoteAddr(); &#125; return request.getHeader(&quot;x-forwarded-for&quot;); &#125; 获得客户端真实IP地址的方法二：public String getIpAddr(HttpServletRequest request) &#123; String ip = request.getHeader(&quot;x-forwarded-for&quot;); if(ip == null || ip.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(ip)) &#123; ip = request.getHeader(&quot;Proxy-Client-IP&quot;); &#125; if(ip == null || ip.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(ip)) &#123; ip = request.getHeader(&quot;WL-Proxy-Client-IP&quot;); &#125; if(ip == null || ip.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(ip)) &#123; ip = request.getRemoteAddr(); &#125; return ip; &#125; 可是，如果通过了多级反向代理的话，X-Forwarded-For的值并不止一个，而是一串IP值，究竟哪个才是真正的用户端的真实IP呢？ 答案是取X-Forwarded-For中第一个非unknown的有效IP字符串。如：X-Forwarded-For：192.168.1.110, 192.168.1.120, 192.168.1.130, 192.168.1.100用户真实IP为： 192.168.1.110 /** * 从Request对象中获得客户端IP，处理了HTTP代理服务器和Nginx的反向代理截取了ip * @param request * @return ip */ public static String getLocalIp(HttpServletRequest request) &#123; String remoteAddr = request.getRemoteAddr(); String forwarded = request.getHeader(&quot;X-Forwarded-For&quot;); String realIp = request.getHeader(&quot;X-Real-IP&quot;); String ip = null; if (realIp == null) &#123; if (forwarded == null) &#123; ip = remoteAddr; &#125; else &#123; ip = remoteAddr + &quot;/&quot; + forwarded.split(&quot;,&quot;)[0]; &#125; &#125; else &#123; if (realIp.equals(forwarded)) &#123; ip = realIp; &#125; else &#123; if(forwarded != null)&#123; forwarded = forwarded.split(&quot;,&quot;)[0]; &#125; ip = realIp + &quot;/&quot; + forwarded; &#125; &#125; return ip; &#125;","categories":[],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"云通信短信service（阿里云）","slug":"SendSms","date":"2018-03-22T02:35:26.000Z","updated":"2021-09-22T11:19:04.608Z","comments":true,"path":"2018/03/22/SendSms/","link":"","permalink":"http://example.com/2018/03/22/SendSms/","excerpt":"","text":"SendSms 依赖配置 12345678910&lt;dependency&gt; &lt;groupId&gt;com.aliyun&lt;/groupId&gt; &lt;artifactId&gt;aliyun-java-sdk-core&lt;/artifactId&gt; &lt;version&gt;3.2.8&lt;/version&gt; 注：如提示报错，先升级基础包版，无法解决可联系技术支持&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;com.aliyun&lt;/groupId&gt; &lt;artifactId&gt;aliyun-java-sdk-dysmsapi&lt;/artifactId&gt; &lt;version&gt;1.1.0&lt;/version&gt;&lt;/dependency&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475@Value(&quot;$&#123;oss.accesskeyid&#125;&quot;) String accessKeyId; @Value(&quot;$&#123;oss.accesskeysecret&#125;&quot;) String accessKeySecret; //产品名称:云通信短信API产品,开发者无需替换 static final String product = &quot;Dysmsapi&quot;; //产品域名,开发者无需替换 static final String domain = &quot;dysmsapi.aliyuncs.com&quot;; // 此处需要替换成开发者自己的AK(在阿里云访问控制台寻找)// final String accessKeyId = &quot;yourAccessKeyId&quot;;// final String accessKeySecret = &quot;yourAccessKeySecret&quot;; public SendSmsResponse sendSms(String phone,String templateCode, Map&lt;String,String&gt; map) &#123; //可自助调整超时时间 System.setProperty(&quot;sun.net.client.defaultConnectTimeout&quot;, &quot;10000&quot;); System.setProperty(&quot;sun.net.client.defaultReadTimeout&quot;, &quot;10000&quot;); try &#123; //初始化acsClient,暂不支持region化 IClientProfile profile = DefaultProfile.getProfile(&quot;cn-hangzhou&quot;, accessKeyId, accessKeySecret); DefaultProfile.addEndpoint(&quot;cn-hangzhou&quot;, &quot;cn-hangzhou&quot;, product, domain); IAcsClient acsClient = new DefaultAcsClient(profile); //组装请求对象-具体描述见控制台-文档部分内容 SendSmsRequest request = new SendSmsRequest(); //必填:待发送手机号 request.setPhoneNumbers(phone); //必填:短信签名-可在短信控制台中找到 request.setSignName(&quot;signature&quot;); //必填:短信模板-可在短信控制台中找到// request.setTemplateCode(&quot;SMS_1000000&quot;); //可选:模板中的变量替换JSON串,如模板内容为&quot;亲爱的$&#123;name&#125;,您的验证码为$&#123;code&#125;&quot;时,此处的值为// request.setTemplateParam(&quot;&#123;\\&quot;name\\&quot;:\\&quot;Tom\\&quot;, \\&quot;code\\&quot;:\\&quot;123\\&quot;&#125;&quot;); //根据模板id判断模板类型 request.setTemplateCode(templateCode); //获得map所有键放入set集合中 Set&lt;Map.Entry&lt;String,String&gt;&gt; entrySet = map.entrySet(); Iterator&lt;Map.Entry&lt;String, String&gt;&gt; iterator = entrySet.iterator(); String str = &quot;&quot;; for(int i=0;i&lt;map.size();i++)&#123; //将键值取出放入map.entry接口中 Map.Entry&lt;String, String&gt; mapEntry = iterator.next(); String key = mapEntry.getKey(); Object value = mapEntry.getValue(); //拼接字符串 if(i&lt;map.size()-1)&#123; str +=&#x27;&quot;&#x27;+key+&#x27;&quot;&#x27;+&quot;:&quot;+&#x27;&quot;&#x27;+value+&#x27;&quot;&#x27;+&quot;,&quot;; &#125;else &#123; str +=&#x27;&quot;&#x27;+key+&#x27;&quot;&#x27;+&quot;:&quot;+&#x27;&quot;&#x27;+value+&#x27;&quot;&#x27;; &#125; &#125; //拼接之后完整的字符串放入&#123;&#125; request.setTemplateParam(&quot;&#123;&quot;+str+&quot;&#125;&quot;);// request.setTemplateParam(&quot;&#123;\\&quot;gift\\&quot;:&quot;+ gift +&quot;, \\&quot;express\\&quot;:&quot;+express+&quot;, \\&quot;code\\&quot;:&quot;+code+&quot;, \\&quot;number\\&quot;:&quot;+number+&quot;, \\&quot;tel\\&quot;:&quot;+tel+&quot;&#125;&quot;); //选填-上行短信扩展码(无特殊需求用户请忽略此字段) //request.setSmsUpExtendCode(&quot;90997&quot;); //可选:outId为提供给业务方扩展字段,最终在短信回执消息中将此值带回给调用者// request.setOutId(&quot;yourOutId&quot;); //hint 此处可能会抛出异常，注意catch SendSmsResponse sendSmsResponse = acsClient.getAcsResponse(request); return sendSmsResponse; &#125;catch (Exception e)&#123; e.printStackTrace(); &#125; return null; &#125;","categories":[],"tags":[{"name":"util","slug":"util","permalink":"http://example.com/tags/util/"}]},{"title":"小程序ti","slug":"小程序","date":"2018-03-10T07:02:19.000Z","updated":"2021-09-22T11:19:04.652Z","comments":true,"path":"2018/03/10/小程序/","link":"","permalink":"http://example.com/2018/03/10/%E5%B0%8F%E7%A8%8B%E5%BA%8F/","excerpt":"","text":"小程序【程序1】 题目：古典问题：有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？1.程序分析：兔子的规律为数列1,1,2,3,5,8,13,21....具体分析如下：f(1) = 1(第1个月有一对兔子）f(2) = 1(第2个月还是一对兔子）f(3) = 2(原来有一对兔子，第3个开始，每个月生一对兔子）f(4) = 3(原来有两对兔子，有一对可以生育）f(5) = 5(原来有3对兔子，第3个月出生的那对兔子也可以生育了，那么现在有两对兔子可以生育）f(6) = 8(原来有5对兔子，第4个月出生的那对兔子也可以生育了，那么现在有3对兔子可以生育）..............由以上可以看出，第n个月兔子的对数为f(n) = f(n - 1) + f(n - 2);f(n-1)是上个月的兔子数量，是原来有的。f(n-2)是可以生育的兔子数，即多出来的数量。第n-2个月开始后的第3个月是第n个月，此时第n-2个月时的兔子都可以生育了。public class Demo01 &#123; public static void main(String args[]) &#123; for (int i = 1; i &lt;= 20; i++) System.out.println(f(i)); &#125; public static int f(int x) &#123; if (x == 1||x == 2) return 1; else return f(x - 1) + f(x - 2); &#125;&#125;或public class Demo01 &#123; public static void main(String args[]) &#123; math mymath = new math(); for (int i = 1; i &lt;= 20; i++) System.out.println(mymath.f(i)); &#125;&#125;class math &#123; public int f(int x) &#123; if (x == 1||x == 2) return 1; else return f(x - 1) + f(x - 2); &#125;&#125;【程序2】 题目：判断101-200之间有多少个素数，并输出所有素数。1.程序分析：判断素数的方法：用一个数分别去除2到sqrt(这个数)，如果能被整除，则表明此数不是素数，反之是素数。public class Demo02&#123; public static void main(String[] args)&#123; for(int i=2;i&lt;=200;i++)&#123; boolean flag=true; for(int j=2;j&lt;i;j++)&#123; if(i%j==0)&#123; flag=false; break; &#125; &#125; if(flag==true)&#123; System.out.print(&quot; &quot;+i); &#125; &#125; &#125;&#125;【程序3】 题目：打印出所有的 水仙花数 ，所谓 水仙花数 是指一个三位数，其各位数字立方和等于该数本身。例如：153是一个 水仙花数 ，因为153=1的三次方＋5的三次方＋3的三次方。1.程序分析：利用for循环控制100-999个数，每个数分解出个位，十位，百位。public class Demo03 &#123; public static void main(String args[]) &#123; math mymath = new math(); for (int i = 100; i &lt;= 999; i++) if (mymath.shuixianhua(i) == true) System.out.println(i); &#125;&#125;class math &#123; public boolean shuixianhua(int x) &#123; int i = 0, j = 0, k = 0; i = x/100; j = (x%100)/10; k = x%10; if (x == i*i*i + j*j*j + k*k*k) return true; else return false; &#125;&#125;【程序4】 题目：将一个正整数分解质因数。例如：输入90,打印出90=2*3*3*5。 1.程序分析：对n进行分解质因数，应先找到一个最小的质数i，然后按下述步骤完成： (1)如果这个质数恰等于n，则说明分解质因数的过程已经结束，打印出即可。(2)如果n &gt; i，但n能被i整除，则应打印出i的值，并用n除以i的商,作为新的正整数你,重复执行第一步。(3)如果n不能被i整除，则用i+1作为i的值,重复执行第一步。import java.util.Scanner;public class Demo04 &#123; public Demo04() &#123; super(); &#125; public void fenjie(int n) &#123; for (int i = 2; i &lt;= n; i++) &#123; if (n % i == 0) &#123; System.out.print(i); if(n!=i)&#123; System.out.print(&quot;*&quot;); &#125; fenjie(n/i); &#125; &#125; System.exit(0); //退出程序 &#125; public static void main(String[] args) &#123; Scanner in = new Scanner(System.in); System.out.println(&quot;请输入N的值：&quot;); int N = in.nextInt(); System.out.print( &quot;分解质因数：&quot; + N +&quot;=&quot;); new Demo04().fenjie(N); &#125;&#125;【程序5】 题目：利用条件运算符的嵌套来完成此题：学习成绩=90分的同学用A表示，60-89分之间的用B表示，60分以下的用C表示。1.程序分析：(a&gt;b)?a:b这是条件运算符的基本例子。import java.util.Scanner;public class Demo05 &#123; public static void main(String[] args) &#123; System.out.println(&quot;请输入N的值：&quot;); Scanner in = new Scanner(System.in); int N = in.nextInt(); System.out.println(N &gt;= 90 ?&quot;A&quot;: (N &gt;= 60 ? &quot;B&quot;:&quot;C&quot;)); &#125;&#125;【程序6】 题目：输入两个正整数m和n，求其最大公约数和最小公倍数。1.程序分析：利用辗除法。import java.util.Scanner;public class Demo06 &#123; public static void main(String[] args)&#123; int a,b,m,n; Scanner in=new Scanner(System.in); System.out.println(&quot;请输入一个正整数：&quot;); a=in.nextInt(); System.out.println(&quot;再输入一个正整数：&quot;); b=in.nextInt(); commonDivisor use=new commonDivisor(); m=use.commonDivisor(a,b); n=a*b/m; System.out.println(&quot;最大公约数：&quot;+m); System.out.println(&quot;最小公倍数：&quot;+n); &#125;&#125;class commonDivisor&#123; public int commonDivisor(int x,int y)&#123; if(x&lt;y)&#123; int t=x; x=y; y=t; &#125; while(y!=0)&#123; if(x==y)return x; else&#123; int k=x%y; x=y; y=k; &#125; &#125; return x; &#125;&#125;【程序7】 题目：输入一行字符，分别统计出其中英文字母、空格、数字和其它字符的个数。1.程序分析：利用for循环语句,if条件语句。import java.util.Scanner;public class Demo07 &#123; public static void main(String[] args)&#123; System.out.println(&quot;请输入一个字符串;&quot;); Scanner in=new Scanner(System.in); String str=in.nextLine(); char[] ch=str.toCharArray(); count use=new count(); use.count(ch); &#125;&#125;class count&#123; int digital,character,blank,other; public void count(char[] arr)&#123; for(int i=0;i&lt;arr.length;i++)&#123; if(arr[i]&gt;=&#x27;0&#x27;&amp;&amp;arr[i]&lt;=&#x27;9&#x27;)&#123; digital++; &#125;else if((arr[i]&gt;=&#x27;a&#x27;&amp;&amp;arr[i]&lt;=&#x27;z&#x27;)||(arr[i]&gt;=&#x27;A&#x27;&amp;&amp;arr[i]&lt;=&#x27;Z&#x27;))&#123; character++; &#125;else if(arr[i]==&#x27; &#x27;)&#123; blank++; &#125;else&#123; other++; &#125; &#125; System.out.println(&quot;数字个数：&quot;+digital); System.out.println(&quot;英文字母个数：&quot;+character); System.out.println(&quot;空格个数：&quot;+blank); System.out.println(&quot;其他字符个数：&quot;+other); &#125;&#125;【程序8】 题目：求s = a + aa + aaa + aaaa + aa...a的值，其中a是一个数字。例如2 + 22 + 222 + 2222 + 22222(此时共有5个数相加)，几个数相加有键盘控制。1.程序分析：关键是计算出每一项的值。import java.util.Scanner;public class Demo08 &#123; public static void main(String[] args) &#123; Scanner in = new Scanner(System.in); System.out.println(请输入a的值); int a = in.nextInt(); System.out.println(请输入n个数); int n = in.nextInt(); int s = 0,t=0; for (int i = 1; i &lt;= n; i++) &#123; t += a; a = a*10; s += t; &#125; System.out.println(s); &#125;&#125;【程序9】 题目：一个数如果恰好等于它的因子之和，这个数就称为&quot;完数&quot;。例如6=1＋2＋3。编程找出1000以内的所有完数。public class Demo09 &#123; public static void main(String[] args) &#123; int s; for (int i = 1; i &lt;= 1000; i++) &#123; s = 0; for (int j = 1; j &lt; i; j++) if (i % j == 0) s = s + j; if (s == i) System.out.print(i + &quot; &quot; ); &#125; System.out.println(); &#125;&#125;或public class Demo09&#123; public static void main(String[] args) &#123; int i,j,sum; for(i=1;i&lt;1000;i++) &#123; sum = 0; for(j=1;j&lt;=i/2;j++) &#123; if(i%j==0) &#123; sum+=j; &#125; &#125; if(sum==i) &#123; System.out.print(i+&quot; its factors are: &quot;); for(j=1;j&lt;=i/2;j++) &#123; if(i%j==0) System.out.print(j+&quot;, &quot;); &#125; System.out.println(); &#125; &#125; &#125;&#125;【程序10】 题目：一球从100米高度自由落下，每次落地后反跳回原高度的一半；再落下，求它在第10次落地时，共经过多少米？第10次反弹多高？public class Demo10 &#123; public static void main(String[] args) &#123; double s = 0; double h = 100; for (int i = 1; i &lt;= 10; i++) &#123; s += h; h = h/2; s += h; &#125; System.out.println(&quot;经过路程：&quot;+s); System.out.println(&quot;反弹高度：&quot;+h); &#125;&#125;【程序11】 题目：有1、2、3、4个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？1.程序分析：可填在百位、十位、个位的数字都是1、2、3、4。组成所有的排列后再去掉不满足条件的排列。 public class Demo11 &#123; public static void main(String[] args) &#123; int count = 0; for (int i = 1; i &lt;= 4; i++) for (int j = 1; j &lt;= 4; j++) for (int k = 1; k &lt;= 4; k++) if (i != j &amp;&amp; j != k &amp;&amp; i != k) &#123; count += 1; System.out.println(i*100 + j*10 + k); &#125; System.out.println(&quot;共&quot; + count + &quot;个三位数&quot;); &#125;&#125;【程序12】 题目：企业发放的奖金根据利润提成。利润(I)低于或等于10万元时，奖金可提10%；利润高于10万元，低于20万元时，低于10万元的部分按10%提成，高于10万元的部分，可提成7.5%；20万到40万之间时，高于20万元的部分，可提成5%；40万到60万之间时高于40万元的部分，可提成3%；60万到100万之间时，高于60万元的部分，可提成1.5%，高于100万元时，超过100万元的部分按1%提成，从键盘输入当月利润lirun，求应发放奖金总数sum？1.程序分析：请利用数轴来分界，定位。注意定义时需把奖金定义成长整型。import java.util.Scanner;public class Demo12 &#123; public static void main(String[] args) &#123; double sum; System.out.println(&quot;输入当月利润：(万元)&quot;); Scanner in = new Scanner(System.in); double lirun = in.nextDouble(); if (lirun &lt;= 10) &#123; sum = lirun * 0.1; &#125; else if (lirun &lt;= 20) &#123; sum = 10*0.1 + (lirun - 10) * 0.075; &#125; else if (lirun &lt;= 40) &#123; sum = 10*0.1 + 10*0.075 + (lirun - 20) * 0.05; &#125; else if (lirun &lt;= 60) &#123; sum = 10*0.1 + 10*0.075 + 10*0.05 + (lirun - 40) * 0.03; &#125; else if (lirun &lt;= 100) &#123; sum = 10*0.1 + 10*0.075 + 10*0.05 + 10*0.03 + (lirun - 60) * 0.015; &#125; else &#123; sum = 10*0.1 + 10*0.075 + 10*0.05 + 10*0.03 + 10*0.015 + (lirun - 100) * 0.01; &#125; System.out.println(&quot;应发的奖金是：&quot;+sum+&quot;(万元)&quot;); &#125;&#125;【程序13】 题目：一个整数，它加上100后是一个完全平方数，加上168又是一个完全平方数，请问该数是多少？1.程序分析：在10万以内判断，先将该数加上100后再开方，再将该数加上168后再开方，如果开方后的结果满足如下条件，即是结果。请看具体分析：public class Demo13 &#123; public static void main(String[] args) &#123; for(int x=1;x&lt;100000;x++)&#123; if(Math.sqrt(x+100)%1==0) if(Math.sqrt(x+100+168)%1==0) System.out.println(x+&quot;加上100后是一个完全平方数，加上168又是一个完全平方数&quot;); &#125; &#125;&#125;【程序14】 题目：输入某年某月某日，判断这一天是这一年的第几天？1.程序分析：以3月5日为例，应该先把前两个月的加起来，然后再加上5天即本月的第几天，特殊情况，闰年且输入月份大于3时需考虑多加一天。import java.util.Calendar;import java.util.Scanner;public class Demo14 &#123; public static void main(String[] args) &#123; System.out.println(&quot;请输入年,月,日：&quot;); Scanner in = new Scanner(System.in); int year = in.nextInt(); int month = in.nextInt(); int day = in.nextInt(); Calendar cal = Calendar.getInstance(); cal.set(year, month - 1, day); int sum = cal.get(Calendar.DAY_OF_YEAR); System.out.println(&quot;这一天是这一年的第&quot; + sum +&quot;天&quot;); &#125;&#125;或import java.util.*;public class Demo14 &#123; public static void main(String[] args)&#123; int year,month,day,sum=0; Scanner in=new Scanner(System.in); System.out.println(&quot;输入年：&quot;); year=in.nextInt(); System.out.println(&quot;输入月：&quot;); month=in.nextInt(); System.out.println(&quot;输入日：&quot;); day=in.nextInt(); switch(month)&#123; case 1: sum=0; break; case 2: sum=31; break; case 3: sum=59; break; case 4: sum=90; break; case 5: sum=120; break; case 6: sum=151; break; case 7: sum=181; break; case 8: sum=212; break; case 9: sum=243; break; case 10: sum=273; break; case 11: sum=304; break; case 12: sum=334; break; default: System.out.println(&quot;wrong input!&quot;); return; &#125; sum=sum+day; boolean leap; if(year%400==0||(year%4==0&amp;&amp;year%100!=0))&#123; leap=true; &#125;else &#123; leap=false; &#125; if(leap&amp;&amp;month&gt;2)&#123; sum++; &#125; System.out.println(&quot;It is the &quot;+sum+&quot;th day.&quot;); &#125;&#125;或import java.util.Scanner;public class Demo14 &#123; public static void main(String[] args)&#123; System.out.println(&quot;请输入年 月 日：&quot;); Scanner in=new Scanner(System.in); int year=in.nextInt(); int month=in.nextInt(); int day=in.nextInt(); System.out.println(&quot;是该年的第&quot;+count(year,month,day)+&quot;天&quot;); &#125; public static int count(int year,int month,int day)&#123; int sum=0; int days=0; for(int i=1;i&lt;month;i++)&#123; switch(i)&#123; case 1: case 3: case 5: case 7: case 8: case 10: case 12: days=31; break; case 4: case 6: case 9: case 11: days=30; break; case 2: if(year%400==0||year%4==0&amp;&amp;year%100!=0)&#123; days=29; &#125;else&#123; days=28; &#125; break; &#125; sum+=days; &#125; sum+=day; return sum; &#125;&#125;【程序15】 题目：输入三个整数x,y,z，请把这三个数由小到大输出。1.程序分析：我们想办法把最小的数放到x上，先将x与y进行比较，如果x&gt;y则将x与y的值进行交换，然后再用x与z进行比较，如果x&gt;z则将x与z的值进行交换，这样能使x最小。import java.util.Arrays;import java.util.Scanner;public class Demo15 &#123; public static void main(String[] args) &#123; System.out.print(&quot;请输入三个数:&quot;); Scanner in = new Scanner(System.in); int[] arr = new int[3]; for (int i = 0; i &lt; 3; i++) &#123; arr[i] = in.nextInt(); &#125; Arrays.sort(arr); for (int i=0;i&lt;arr.length;i++) &#123; System.out.print(arr[i] + &quot; &quot;); &#125; &#125;&#125;或if(x &gt; y) &#123; int t = x; x = y; y = t; &#125; if(x &gt; z) &#123; int t = x; x = z; z = t; &#125; if(y &gt; z) &#123; int t = y; y = z; z = t; &#125;【程序16】 题目：输出9*9口诀乘法表。1.程序分析：分行与列考虑，共9行9列，i控制行，j控制列。出现重复的乘积（全矩形）public class Demo16 &#123; public static void main(String[] args) &#123; for (int i = 1; i &lt;= 9; i++) &#123; for (int j = 1; j &lt;= 9; j++) System.out.print(i + &quot;*&quot; + j + &quot;=&quot; + (i*j) + &quot;\\t&quot;); System.out.println(); &#125; &#125;&#125;不现重复的乘积(下三角)public class Demo16 &#123; public static void main(String[] args) &#123; for (int i = 1; i &lt;= 9; i++) &#123; for (int j = 1; j &lt;= i; j++) System.out.print(i + &quot;*&quot; + j + &quot;=&quot; + (i*j) + &quot;\\t&quot;); System.out.println(); &#125; &#125;&#125;【程序17】 题目：猴子吃桃问题：猴子第一天摘下若干个桃子，当即吃了一半，还不瘾，又多吃了一个第二天早上又将剩下的桃子吃掉一半，又多吃了一个。以后每天早上都吃了前一天剩下的一半零一个。到第10天早上想再吃时，见只剩下一个桃子了。求第一天共摘了多少。1.程序分析：采取逆向思维的方法，从后往前推断。public class Demo17 &#123; public static void main(String[] args) &#123; int sum = 1; for (int i = 0; i &lt; 9; i++) &#123; sum = (sum + 1) * 2; &#125; System.out.println(&quot;第一天共摘&quot;+sum); &#125;&#125;【程序18】 题目：两个乒乓球队进行比赛，各出三人。甲队为a,b,c三人，乙队为x,y,z三人。已抽签决定比赛名单。有人向队员打听比赛的名单。a说他不和x比，c说他不和x,z比，请编程序找出三队赛手的名单。public class Demo18 &#123; static char[] m = &#123; &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27; &#125;; static char[] n = &#123; &#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27; &#125;; public static void main(String[] args) &#123; for (int i = 0; i &lt; m.length; i++) &#123; for (int j = 0; j &lt; n.length; j++) &#123; if (m[i] == &#x27;a&#x27; &amp;&amp; n[j] == &#x27;x&#x27;) &#123; continue; &#125; else if (m[i] == &#x27;a&#x27; &amp;&amp; n[j] == &#x27;y&#x27;) &#123; continue; &#125; else if ((m[i] == &#x27;c&#x27; &amp;&amp; n[j] == &#x27;x&#x27;) || (m[i] == &#x27;c&#x27; &amp;&amp; n[j] == &#x27;z&#x27;)) &#123; continue; &#125; else if ((m[i] == &#x27;b&#x27; &amp;&amp; n[j] == &#x27;z&#x27;) || (m[i] == &#x27;b&#x27; &amp;&amp; n[j] == &#x27;y&#x27;)) &#123; continue; &#125; else System.out.println(m[i] + &quot; vs &quot; + n[j]); &#125; &#125; &#125;&#125;或public class Demo18 &#123; public String a, b, c; public Demo18(String a, String b, String c) &#123; this.a = a; this.b = b; this.c = c; &#125; public static void main(String[] args) &#123; Demo18 arr_a = new Demo18(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;); String[] b = &#123; &quot;x&quot;, &quot;y&quot;, &quot;z&quot; &#125;; for (int i = 0; i &lt; 3; i++) &#123; for (int j = 0; j &lt; 3; j++) &#123; for (int k = 0; k &lt; 3; k++) &#123; Demo18 arr_b = new Demo18(b[i], b[j], b[k]); if (!arr_b.a.equals(arr_b.b) &amp; !arr_b.b.equals(arr_b.c) &amp; !arr_b.c.equals(arr_b.a) &amp; !arr_b.a.equals(&quot;x&quot;) &amp; !arr_b.c.equals(&quot;x&quot;) &amp; !arr_b.c.equals(&quot;z&quot;)) &#123; System.out.println(arr_a.a + &quot;--&quot; + arr_b.a); System.out.println(arr_a.b + &quot;--&quot; + arr_b.b); System.out.println(arr_a.c + &quot;--&quot; + arr_b.c); &#125; &#125; &#125; &#125; &#125;&#125;【程序19】 题目：打印出如下图案（菱形）1.程序分析：先把图形分成两部分来看待，前四行一个规律，后三行一个规律，利用双重for循环，第一层控制行，第二层控制列。三角形：****************************public class Demo19 &#123; public static void main(String[] args) &#123; int i=0; int j=0; for ( i = 1; i &lt;= 4; i++) &#123; for ( j = 1; j &lt;= 2 * i - 1; j++) System.out.print(&quot;*&quot;); System.out.println(); &#125; for ( i = 3; i &gt;= 1; i--) &#123; for ( j = 1; j &lt;= 2 * i - 1; j++) System.out.print(&quot;*&quot;); System.out.println(); &#125; &#125;&#125;菱形： * *** ************ ***** *** *public class Demo19 &#123; public static void main(String[] args) &#123; int i = 0; int j = 0; for (i = 1; i &lt;= 4; i++) &#123; for (int k = 1; k &lt;= 4 - i; k++) System.out.print( &quot; &quot; ); for (j = 1; j &lt;= 2 * i - 1; j++) System.out.print(&quot;*&quot;); System.out.println(); &#125; for (i = 3; i &gt;= 1; i--) &#123; for (int k = 1; k &lt;= 4 - i; k++) System.out.print( &quot; &quot; ); for (j = 1; j &lt;= 2 * i - 1; j++) System.out.print(&quot;*&quot;); System.out.println(); &#125; &#125;&#125;【程序20】 题目：有一分数序列：2/1，3/2，5/3，8/5，13/8，21/13...求出这个数列的前20项之和。1.程序分析：请抓住分子与分母的变化规律。 public class Demo20 &#123; public static void main(String[] args) &#123; float fm = 1.0f; float fz = 1.0f; float temp; float sum = 0f; for (int i = 0; i &lt; 20; i++) &#123; temp = fm; fm = fz; fz = fz + temp; System.out.println((int) fz + &quot;/&quot; + (int) fm); sum += fz / fm; &#125; System.out.println(sum); &#125;&#125;【程序21】 题目：求1+2!+3!+...+20!的和。1.程序分析：此程序只是把累加变成了累乘。public class Demo21 &#123; public static void main(String[] args) &#123; long sum = 0; long fac = 1; for (int i = 1; i &lt;= 20; i++) &#123; fac = fac * i; sum += fac; &#125; System.out.println(sum); &#125;&#125;【程序22】 题目：利用递归方法求5!。1.程序分析：递归公式：f(n)=f(n-1)*4!import java.util.Scanner;public class Demo22 &#123; public static long fac(int n) &#123; long value = 0; if (n == 1 || n == 0) &#123; value = 1; &#125; else if (n &gt; 1) &#123; value = n * fac(n - 1); &#125; return value; &#125; public static void main(String[] args) &#123; System.out.println(&quot;请输入一个数：&quot;); Scanner in = new Scanner(System.in); int n = in.nextInt(); System.out.println(n + &quot;的阶乘为：&quot; + fac(n)); &#125;&#125;【程序23】 题目：有5个人坐在一起，问第五个人多少岁？他说比第4个人大2岁。问第4个人岁数，他说比第3个人大2岁。问第三个人，又说比第2人大两岁。问第2个人，说比第一个人大两岁。最后问第一个人，他说是10岁。请问第五个人多大？1.程序分析：利用递归的方法，递归分为回推和递推两个阶段。要想知道第五个人岁数，需知道第四人的岁数，依次类推，推到第一人（10岁），再往回推。直接求解：public class Demo23 &#123; public static void main(String[] args) &#123; int n = 10; for (int i = 0; i &lt; 4; i++) &#123; n = n + 2; &#125; System.out.println(&quot;第五个人&quot; + n + &quot;岁&quot;); &#125;&#125;递归求解：public class Demo23 &#123; public static int getAge(int n) &#123; if (n == 1) &#123; return 10; &#125; return 2 + getAge(n - 1); &#125; public static void main(String[] args) &#123; System.out.println(&quot;第五个的年龄为&quot; + getAge(5)); &#125;&#125;【程序24】 题目：给一个不多于5位的正整数，要求：一、求它是几位数，二、逆序打印出各位数字。 本题原方法：import java.util.Scanner;public class Demo24 &#123; public static void main(String[] args) &#123; Demo24 use = new Demo24(); System.out.println(&quot;请输入：&quot;); Scanner in = new Scanner(System.in); long a = in.nextLong(); if (a &lt; 0 || a &gt;= 100000) &#123; System.out.println(&quot;Error Input, please run this program Again!&quot;); System.exit(0); &#125; if (a &gt;= 0 &amp;&amp; a &lt;= 9) &#123; System.out.println(a + &quot;是一位数&quot;); System.out.println(&quot;按逆序输出是:&quot; + a); &#125; else if (a &gt;= 10 &amp;&amp; a &lt;= 99) &#123; System.out.println(a + &quot;是二位数&quot;); System.out.println(&quot;按逆序输出是:&quot;); use.converse(a); &#125; else if (a &gt;= 100 &amp;&amp; a &lt;= 999) &#123; System.out.println(a + &quot;是三位数&quot;); System.out.println(&quot;按逆序输出是:&quot;); use.converse(a); &#125; else if (a &gt;= 1000 &amp;&amp; a &lt;= 9999) &#123; System.out.println(a + &quot;是四位数&quot;); System.out.println(&quot;按逆序输出是:&quot;); use.converse(a); &#125; else if (a &gt;= 10000 &amp;&amp; a &lt;= 99999) &#123; System.out.println(a + &quot;是五位数&quot;); System.out.println(&quot;按逆序输出是:&quot;); use.converse(a); &#125; &#125; public void converse(long l) &#123; String s = Long.toString(l); char[] ch = s.toCharArray(); for (int i = ch.length - 1; i &gt;= 0; i--) &#123; System.out.print(ch[i]); &#125; &#125;&#125;个人版方法：import java.util.Scanner;public class Demo24 &#123; public static void main(String[] args) &#123; System.out.println(&quot;请输入：&quot;); Scanner in = new Scanner(System.in); String str = in.next(); if (str.matches(&quot;\\\\d+&quot;)) &#123; //正则表达式 System.out.println(&quot;输入的是&quot; + str.length() + &quot;位数&quot;); StringBuffer buf = new StringBuffer(str); System.out.println(buf.reverse());//字符串反转 &#125; &#125;&#125;【程序25】 题目：一个5位数，判断它是不是回文数。即12321是回文数，个位与万位相同，十位与千位相同。原方法：import java.util.Scanner;public class Demo25 &#123; static int[] a = new int[5]; static int[] b = new int[5]; public static void main(String[] args) &#123; boolean is = false; System.out.println(&quot;Please input：&quot;); Scanner in = new Scanner(System.in); long l = in.nextLong(); if (l &gt; 99999 || l &lt; 10000) &#123; System.out.println(&quot;Input error, please input again!&quot;); l = in.nextLong(); &#125; for (int i = 4; i &gt;= 0; i--) &#123; a[i] = (int) (l / (long) Math.pow(10, i)); l = (l % (long) Math.pow(10, i)); &#125; System.out.println(); for (int i = 0, j = 0; i &lt; 5; i++, j++) &#123; b[j] = a[i]; &#125; for (int i = 0, j = 4; i &lt; 5; i++, j--) &#123; if (a[i] != b[j]) &#123; is = false; break; &#125; else &#123; is = true; &#125; &#125; if (is == false) &#123; System.out.println(&quot;is not a Palindrom!&quot;); &#125; else if (is == true) &#123; System.out.println(&quot;is a Palindrom!&quot;); &#125; &#125;&#125;个人版：import java.util.Scanner;public class Demo25 &#123; public static void main(String[] args) &#123; System.out.println(&quot;请输入：&quot;); Scanner in = new Scanner(System.in); String str = in.next(); int l = Integer.parseInt(str);//转换成整数 if (l &lt; 10000 || l &gt; 99999) &#123; System.out.println(&quot;输入错误！&quot;); System.exit(0); &#125; boolean is=false; char[] ch = str.toCharArray(); for(int i=0;i&lt;ch.length/2;i++)&#123; if(ch[i]!=ch[ch.length-i-1])&#123; is=false; &#125;else&#123; is=true; &#125; &#125; if(is)&#123; System.out.println(&quot;这是一个回文!&quot;); &#125;else&#123; System.out.println(&quot;不是一个回文!&quot;); &#125; &#125;&#125;【程序26】 题目：请输入星期几的第一个字母来判断一下是星期几，如果第一个字母一样，则继续判断第二个字母。1.程序分析：用情况语句比较好，如果第一个字母一样，则判断用情况语句或if语句判断第二个字母。import java.util.Scanner;public class Demo26 &#123; public static void main(String[] args) &#123; char weekSecond;//保存第二字母 Scanner in = new Scanner(System.in);//接收用户输入 System.out.println(&quot;请输入星期的第一个字母：&quot;); String letter = in.next(); if (letter.length() == 1) &#123;//判断用户控制台输入字符串长度是否是一个字母 char weekFirst = letter.charAt(0);//取第一个字符 switch (weekFirst) &#123; case &#x27;m&#x27;: case &#x27;M&#x27;: System.out.println(&quot;星期一(Monday)&quot;); break; case &#x27;t&#x27;: case &#x27;T&#x27;: System.out.print(&quot;由于星期二(Tuesday)与星期四(Thursday)均以字母T开头，故需输入第二个字母才能正确判断：&quot;); letter = in.next(); if (letter.length() == 1) &#123; weekSecond = letter.charAt(0); if (weekSecond == &#x27;U&#x27; || weekSecond == &#x27;u&#x27;) &#123; System.out.println(&quot;星期二(Tuesday)&quot;); break; &#125; else if (weekSecond == &#x27;H&#x27; || weekSecond == &#x27;h&#x27;) &#123; System.out.println(&quot;星期四(Thursday)&quot;); break; &#125; else &#123; System.out.println(&quot;Error!&quot;); break; &#125; &#125; else &#123; System.out.println(&quot;输入错误，只能输入一个字母，程序结束！&quot;); break; &#125; case &#x27;w&#x27;: case &#x27;W&#x27;: System.out.println(&quot;星期三(Wednesday)&quot;); break; case &#x27;f&#x27;: case &#x27;F&#x27;: System.out.println(&quot;星期五(Friday)&quot;); break; case &#x27;s&#x27;: case &#x27;S&#x27;: System.out.print(&quot;由于星期六(Saturday)与星期日(Sunday)均以字母S开头，故需输入第二个字母才能正确判断：&quot;); letter = in.next(); if (letter.length() == 1) &#123; weekSecond = letter.charAt(0); if (weekSecond == &#x27;A&#x27; || weekSecond == &#x27;a&#x27;) &#123; System.out.println(&quot;星期六(Saturday)&quot;); break; &#125; else if (weekSecond == &#x27;U&#x27; || weekSecond == &#x27;u&#x27;) &#123; System.out.println(&quot;星期日(Sunday)&quot;); break; &#125; else &#123; System.out.println(&quot;Error!&quot;); break; &#125; &#125; else &#123; System.out.println(&quot;输入错误，只能输入一个字母，程序结束！&quot;); break; &#125; default: System.out.println(&quot;输入错误，不能识别的星期值第一个字母，程序结束！&quot;); break; &#125; &#125; else &#123; System.out.println(&quot;输入错误，只能输入一个字母，程序结束！&quot;); &#125; &#125;&#125;【程序27】 题目：求100之内的素数public class Demo27 &#123; public static void main(String args[]) &#123; int sum, i; for (sum = 2; sum &lt;= 100; sum++) &#123; for (i = 2; i &lt;= sum / 2; i++) &#123; if (sum % i == 0) break; &#125; if (i &gt; sum / 2) System.out.println(sum + &quot;是素数&quot;); &#125; &#125;&#125;或public class Demo27&#123; public static void main(String args[])&#123; int w=1; for(int i=2;i&lt;=100;i++)&#123; for(int j=2;j&lt;i;j++)&#123; w=i%j; if(w==0)break; &#125; if(w!=0) System.out.println(i+&quot;是素数&quot;); &#125; &#125;&#125;【程序28】 题目：对10个数进行排序。1.程序分析：可以利用选择法，即从后9个比较过程中，选择一个最小的与第一个元素交换，下次类推，即用第二个元素与后8个进行比较，并进行交换。本例代码为生成随机10个数排序，并输入1个数，插入重排序输出：import java.util.Arrays;import java.util.Random;import java.util.Scanner;public class Demo28 &#123; public static void main(String[] args) &#123; int arr[] = new int[11]; Random r = new Random(); for (int i = 0; i &lt; 10; i++) &#123; arr[i] = r.nextInt(100) + 1; //得到10个100以内的整数 &#125; Arrays.sort(arr); for (int i = 0; i &lt; arr.length; i++) &#123; System.out.print(arr[i] +&quot;\\t&quot;); &#125; System.out.print(&quot;\\nPlease Input a int number:&quot; ); Scanner in = new Scanner(System.in); arr[10] = in.nextInt(); Arrays.sort(arr); for (int i = 0; i &lt; arr.length; i++) &#123; System.out.print(arr[i] +&quot;\\t&quot;); &#125; &#125;&#125;个人代码：import java.util.Arrays;import java.util.Scanner;public class Demo28 &#123; public static void main(String[] args) &#123; System.out.println(&quot;请输入10个数：&quot;); Scanner in = new Scanner(System.in); int[] arr = new int[10]; for (int i = 0; i &lt; 10; i++) &#123; arr[i] = in.nextInt(); &#125; System.out.println(&quot;原数组为：&quot;); for (int x : arr) &#123;//foreach遍历 System.out.print( x + &quot;\\t&quot;); &#125; Arrays.sort(arr); System.out.println(); System.out.println(&quot;排序后为：&quot;); for (int i = 0; i &lt; arr.length; i++) &#123; System.out.print(arr[i] + &quot;\\t&quot;); &#125; &#125;&#125;【程序29】 题目：求一个3*3矩阵主对角线元素之和。1.程序分析：利用双重for循环控制输入二维数组，再将a[i][i]累加后输出。public class Demo29 &#123; public static void main(String[] args) &#123; double sum = 0; int array[][] = &#123; &#123; 1, 2, 3 &#125;, &#123; 4, 5, 6 &#125;, &#123; 7, 7, 8 &#125; &#125;; for (int i = 0; i &lt; 3; i++) for (int j = 0; j &lt; 3; j++) &#123; if (i == j) sum = sum + array[i][j]; &#125; System.out.println(sum); &#125;&#125;主负对角线： for(i=0;i&lt;n;i++) for(j=0;j&lt;n;j++) &#123; if(i==j) sum1+=a[i][j]; if(i+j==n-1) sum2+=a[i][j]; &#125;【程序30】 题目：有一个已经排好序的数组。现输入一个数，要求按原来的规律将它插入数组中。1.程序分析：首先判断此数是否大于最后一个数，然后再考虑插入中间的数的情况，插入后此元素之后的数，依次后移一个位置。import java.util.Random;public class Demo30 &#123; public static void main(String[] args) &#123; int temp = 0; int arr[] = new int[12]; Random r = new Random(); for (int i = 0; i &lt;= 10; i++) arr[i] = r.nextInt(1000); for (int i = 0; i &lt;= 10; i++) System.out.print(arr[i] + &quot;\\t&quot;); for (int i = 0; i &lt;= 9; i++) for (int k = i + 1; k &lt;= 10; k++) if (arr[i] &gt; arr[k]) &#123; temp = arr[i]; arr[i] = arr[k]; arr[k] = temp; &#125; System.out.println(); for (int k = 0; k &lt;= 10; k++) System.out.print(arr[k] + &quot;\\t&quot;); arr[11] = r.nextInt(1000); for (int k = 0; k &lt;= 10; k++) if (arr[k] &gt; arr[11]) &#123; temp = arr[11]; for (int j = 11; j &gt;= k + 1; j--) arr[j] = arr[j - 1]; arr[k] = temp; &#125; System.out.println(); for (int k = 0; k &lt;= 11; k++) System.out.print(arr[k] + &quot;\\t&quot;); &#125;&#125;【程序31】 题目：将一个数组逆序输出。程序分析：用第一个与最后一个交换。用逆序循环控制变量输出：public class Demo31 &#123; public static void main(String[] args) &#123; int[] a = &#123; 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 &#125;; for (int i = a.length - 1; i &gt;= 0; i--) &#123; System.out.print(a[i] + &quot; &quot;); &#125; &#125;&#125;【程序32】 题目：取一个整数a从右端开始的第4～7位数字。import java.util.*;public class Demo32 &#123; public static void main(String[] args) &#123; Scanner in = new Scanner(System.in); System.out.print(&quot;请输入一个7位以上的正整数：&quot;); long l = in.nextLong(); String str = Long.toString(l); char[] ch = str.toCharArray(); int j=ch.length; if (j&lt;7)&#123;System.out.println(&quot;输入错误！&quot;); &#125; else &#123; System.out.println(&quot;截取从右端开始的4～7位是：&quot;+ch[j-7]+ch[j-6]+ch[j-5]+ch[j-4]); &#125; &#125;&#125;或import java.util.Scanner;public class Demo32&#123; public static void main(String[] args) &#123; int a = 0; Scanner s = new Scanner(System.in); long b = s.nextLong(); a = (int) (b % 10000000 / 1000); System.out.println(a); &#125;&#125;【程序33】 题目：打印出杨辉三角形（要求打印出10行如下图）1.程序分析：11 11 2 11 3 3 11 4 6 4 11 5 10 10 5 1public class Demo33 &#123; public static void main(String args[]) &#123; int i, j; int a[][]; int n = 10; a = new int[n][n]; for (i = 0; i &lt; n; i++) &#123; a[i][i] = 1; a[i][0] = 1; &#125; for (i = 2; i &lt; n; i++) &#123; for (j = 1; j &lt;= i - 1; j++) &#123; a[i][j] = a[i - 1][j - 1] + a[i - 1][j]; &#125; &#125; for (i = 0; i &lt; n; i++) &#123; for (j = 0; j &lt;= i; j++) &#123; System.out.printf(a[i][j] + &quot;\\t&quot;); &#125; System.out.println(); &#125; &#125;&#125;【程序34】 题目：输入3个数a,b,c，按大小顺序输出。（也可互相比较交换排序）import java.util.Arrays;public class Demo34 &#123; public static void main(String[] args) &#123; int[] arrays = &#123; 800, 56, 500 &#125;; Arrays.sort(arrays); for (int n = 0; n &lt; arrays.length; n++) System.out.println(arrays[n]); &#125;&#125;或if(x &gt; y) &#123; int t = x; x = y; y = t; &#125; if(x &gt; z) &#123; int t = x; x = z; z = t; &#125; if(y &gt; z) &#123; int t = y; y = z; z = t; &#125;【程序35】 题目：输入数组，最大的与第一个元素交换，最小的与最后一个元素交换，输出数组。import java.util.*;public class Demo35 &#123; public static void main(String[] args) &#123; int i, min=0, max=0, n, temp1, temp2; int a[]; System.out.println(&quot;定义数组的长度:&quot;); Scanner in = new Scanner(System.in); n = in.nextInt(); a = new int[n]; for (i = 0; i &lt; n; i++) &#123; System.out.print(&quot;输入第&quot; + (i + 1) + &quot;个数据:&quot;); a[i] = in.nextInt(); &#125; for (i = 1; i &lt; n; i++) &#123; if (a[i] &gt; a[max]) max = i; if (a[i] &lt; a[min]) min = i; &#125; temp1 = a[0]; a[0] = a[max]; a[max] = temp1; temp2 = a[min]; if (min != 0) &#123; // 如果最小值不是a[0]，执行下面 a[min] = a[n - 1]; a[n - 1] = temp2; &#125; else &#123; //如果最小值是a[0],执行下面 a[max] = a[n - 1]; a[n - 1] = temp1; &#125; for (i = 0; i &lt; n; i++) &#123; System.out.print(a[i] + &quot; &quot; ); &#125; &#125;&#125;【程序36】 题目：有n个整数，使其前面各数顺序向后移m个位置，最后m个数变成最前面的m个数import java.util.LinkedList;import java.util.List;import java.util.Scanner;public class Demo36 &#123; public static void main(String[] args) &#123; Scanner in = new Scanner(System.in); System.out.println(&quot;输入数字个数n：&quot;); int n = in.nextInt(); System.out.println(&quot;输入后移位数m：&quot;); int m = in.nextInt(); LinkedList&lt;Integer&gt; list = new LinkedList&lt;Integer&gt;(); for (int i = 0; i &lt; n; i++) &#123; System.out.println(&quot;请输入第&quot;+(i+1)+&quot;个数:&quot;); list.add(in.nextInt()); &#125; System.out.println(&quot;原数据排序为：&quot;); for (int t : list) &#123; System.out.print(t + &quot; &quot; ); &#125; System.out.println(); List&lt;Integer&gt; temp1 = list.subList(list.size() - m, list.size()); List&lt;Integer&gt; temp2 = list.subList(0, list.size() - m); temp2.addAll(0, temp1); System.out.println(&quot;移动后排序为;&quot;); for (int t : temp2) &#123; System.out.print(t + &quot; &quot; ); &#125; &#125;&#125;或import java.util.*;public class Demo36&#123; public static void main(String[] args)&#123; Scanner in=new Scanner(System.in); System.out.println(&quot;请定义数组的长度：&quot;); int n=in.nextInt(); System.out.println(&quot;请输入移动的位数：&quot;); int m=in.nextInt(); int [] arr=new int [n]; int [] brr=new int [n]; for(int i=0;i&lt;n;i++)&#123; System.out.println(&quot;请输入第&quot;+(i+1)+&quot;个数：&quot;); arr[i]=in.nextInt(); &#125; System.out.println(&quot;排序前：&quot;); for(int i=0;i&lt;n;i++)&#123; System.out.print(arr[i]+&quot; &quot;); &#125; System.out.println(); for(int i=0;i&lt;m;i++)&#123; brr[i]=arr[n-m+i]; &#125; for(int i=0;i&lt;n-m;i++)&#123; arr[m+i]=arr[i]; &#125; for(int i=0;i&lt;m;i++)&#123; arr[i]=brr[i]; &#125; System.out.println(&quot;排序后：&quot;); for(int i=0;i&lt;n;i++)&#123; System.out.print(arr[i]+&quot; &quot;); &#125; &#125;&#125;【程序37】 题目：有n个人围成一圈，顺序排号。从第一个人开始报数（从1到3报数），凡报到3的人退出圈子，问最后留下的是原来第几号的那位。（约瑟夫环问题，百度百科有时间复杂度最简单的数学方法）原例代码：import java.util.Scanner;public class Demo37 &#123; public static void main(String[] args) &#123; System.out.println(&quot;请输人数n：&quot;); Scanner in = new Scanner(System.in); int n = in.nextInt(); boolean[] arr = new boolean[n]; for (int i = 0; i &lt; arr.length; i++) &#123; arr[i] = true; //下标为TRUE时说明还在圈里 &#125; int leftCount = n; int countNum = 0; int index = 0; while (leftCount &gt; 1) &#123; if (arr[index] == true) &#123; //当在圈里时 countNum++; //报数递加 if (countNum == 3) &#123; //报数为3时 countNum = 0; //从零开始继续报数 arr[index] = false; //此人退出圈子 leftCount--; //剩余人数减一 &#125; &#125; index++; //每报一次数，下标加一 if (index == n) &#123; //是循环数数，当下标大于n时，说明已经数了一圈， index = 0; //将下标设为零重新开始。 &#125; &#125; for (int i = 0; i &lt; n; i++) &#123; if (arr[i] == true) &#123; System.out.println(i); &#125; &#125; &#125;&#125;个人代码1：import java.util.Scanner;public class Demo37 &#123; public static void main(String[] args) &#123; System.out.println(&quot;请输入人数：&quot;); Scanner in = new Scanner(System.in); int[] a = new int[in.nextInt()]; for (int i = 0; i &lt; a.length; i++) &#123; a[i] = 1; &#125; int left = a.length; int j = 0; int num = 0; while (left &gt; 1) &#123; if (a[j] == 1) &#123; num++; &#125; if (num == 3) &#123; a[j] = 0; num = 0; left--; &#125; j++; if (j == a.length) &#123; j = 0; &#125; &#125; for (int i = 0; i &lt; a.length; i++) &#123; if (a[i] == 1) &#123; System.out.println(&quot;最后留下的人是&quot;+ (i + 1) + &quot;号&quot;); break; &#125; &#125; &#125;&#125;个人代码2：import java.util.LinkedList;import java.util.Scanner;public class Demo37 &#123; public static void main(String[] args) &#123; LinkedList&lt;Integer&gt; l = new LinkedList&lt;Integer&gt;(); System.out.println(&quot;请输入人数：&quot;); Scanner in = new Scanner(System.in); int len = in.nextInt(); for (int i = 0; i &lt; len; i++) &#123; l.add(i + 1); &#125; int sum = 0; int temp = 0; for (int i = 0; sum != len - 1;) &#123; if (l.get(i) != 0) &#123; temp++; &#125; if (temp == 3) &#123; l.remove(i); l.add(i, 0); temp = 0; sum++; &#125; i++; if (i == l.size()) &#123; i = 0; &#125; &#125; for (int t : l) &#123; if (t != 0) &#123; System.out.println(&quot;最后留下的人是&quot; + t + &quot;号&quot;); &#125; &#125; &#125;&#125;【程序38】 题目:写一个函数，求一个字符串的长度，在main函数中输入字符串，并输出其长度。import java.util.Scanner;public class Demo38 &#123; public static void main(String[] args) &#123; Scanner in = new Scanner(System.in); System.out.println(&quot;请输入一个字符串：&quot;); String mys = in.next(); System.out.println(str_len(mys)); &#125; public static int str_len(String x) &#123; return x.length(); &#125;&#125;或import java.util.Scanner;public class Demo38 &#123; public static void main(String[] args) &#123; Scanner in = new Scanner(System.in); System.out.println(&quot;请输入一个字符串：&quot;); String mys = in.next(); System.out.println(mys.length()); &#125;&#125;【程序39】 题目：编写一个函数，输入n为偶数时，调用函数求1/2+1/4+...+1/n,当输入n为奇数时，调用函数1/1+1/3+...+1/nimport java.util.Scanner;public class Demo39 &#123; public static double ouShu(int n) &#123; double result = 0; for (int i = 2; i &lt;= n; i = i + 2) &#123; result += 1 / (double) i; &#125; return result; &#125; public static double jiShu(int n) &#123; double result = 0; for (int i = 1; i &lt;= n; i = i + 2) &#123; result += 1 / (double) i; &#125; return result; &#125; public static void main(String[] args) &#123; Scanner in = new Scanner(System.in); System.out.println(&quot;输入n的值：&quot;); int n = in.nextInt(); if (n % 2 == 0) &#123; //偶数，1/2+1/4+...+1/n System.out.println(ouShu(n)); &#125; else &#123; //奇数，1/1+1/3+...+1/n System.out.println(jiShu(n)); &#125; &#125;&#125;【程序40】 题目：字符串排序。（利用容器类中的sort方法）import java.util.*;public class Demo40 &#123; public static void main(String[] args) &#123; ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;(); list.add(&quot;010102&quot;); list.add(&quot;010003&quot;); list.add(&quot;010201&quot;); Collections.sort(list); for (int i = 0; i &lt; list.size(); i++) &#123; System.out.println(list.get(i)); &#125; &#125;&#125;或import java.util.*;public class Demo40 &#123; public static void main(String[] args)&#123; Scanner in=new Scanner(System.in); System.out.println(&quot;请定义字符串的个数：&quot;); int n=in.nextInt(); String[] str=new String[n]; for(int i=0;i&lt;str.length;i++)&#123; System.out.println(&quot;请输入第&quot;+(i+1)+&quot;字符串：&quot;); str[i]=in.next(); &#125; strSort(n,str); System.out.println(&quot;字符串排序后：&quot;); for(int i=0;i&lt;str.length;i++)&#123; System.out.print(str[i]+&quot; &quot;); &#125; &#125; public static void strSort(int n,String[] arr)&#123; for(int i=0; i&lt;n; i++) &#123; for(int j=i+1; j&lt;n; j++) &#123; if(compare(arr[i], arr[j]) == false) &#123; String temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; &#125; &#125; &#125; &#125; static boolean compare(String s1, String s2) &#123; boolean result = true; for(int i=0; i&lt;s1.length() &amp;&amp; i&lt;s2.length(); i++) &#123; if(s1.charAt(i) &gt; s2.charAt(i)) &#123; result = false; break; &#125; else if(s1.charAt(i) &lt;s2.charAt(i)) &#123; result = true; break; &#125; else &#123; if(s1.length() &lt; s2.length()) &#123; result = true; &#125; else &#123; result = false; &#125; &#125; &#125; return result; &#125; &#125;【程序41】 题目：海滩上有一堆桃子，五只猴子来分。第一只猴子把这堆桃子平均分为五份，多了一个，这只猴子把多的一个扔入海中，拿走了一份。第二只猴子把剩下的桃子又平均分成五份，又多了一个，它同样把多的一个扔入海中，拿走了一份，第三、第四、第五只猴子都是这样做的，问海滩上原来最少有多少个桃子？本题源码：public class Demo41 &#123; static int ts = 0;// 桃子总数 int fs = 1;// 记录分的次数 static int hs = 5;// 猴子数 int tsscope = 5000;// 桃子数的取值范围，太大容易溢出。 public int fT(int t) &#123; if (t == tsscope) &#123; // 当桃子数到了最大的取值范围时取消递归 System.out.println(&quot;结束&quot;); return 0; &#125; else &#123; if ((t - 1) % hs == 0 &amp;&amp; fs &lt;= hs) &#123; if (fs == hs) &#123; System.out.println(&quot;桃子数=&quot; + ts + &quot;时满足分桃条件&quot;); &#125; fs += 1; return fT((t - 1) / 5 * 4);// 返回猴子拿走一份后的剩下的总数 &#125; else &#123; // 没满足条件 fs = 1;// 分的次数重置为1 return fT(ts += 1);// 桃子数加+1 &#125; &#125; &#125; public static void main(String[] args) &#123; new Demo41().fT(0); &#125;&#125;个人修改：public class Demo41 &#123; public static void main(String[] args) &#123; int sum = 0; for (int i = 6;; i++) &#123;// 最少6个分最后一次 sum = i;// 桃子数 for (int j = 0; j &lt; 5; j++) &#123;// 分的次数循环 if ((sum - 1) % 5 == 0 &amp;&amp; j &lt; 5) &#123;// 如果扔一个后能均分5份，继续分 sum = (sum - 1) / 5 * 4;// 每分一次剩余桃子数 if (j == 4) &#123;// 如果已分5次，且仍能除尽，输出，退出程序 System.out.println(i); System.exit(0); &#125; &#125; &#125; &#125; &#125;&#125;【程序42】 题目：809*??=800*??+9*??+1。其中??代表的两位数,8*??的结果为两位数，9*??的结果为3位数。求??代表的两位数，及809*??后的结果。（本题为无解，去掉1有解）public class Demo42 &#123; public static void main(String[] args) &#123; for (int i = 10; i &lt; 100; i++) &#123; if (809 * i == (800 * i + 9 * i + 1) &amp;&amp; 8 * i &gt;= 10 &amp;&amp; 8 * i &lt; 100 &amp;&amp; 9 * i &gt;= 100 &amp;&amp; 9 * i &lt; 1000) &#123; System.out.println(&quot;?? =&quot; + i); System.out.println(&quot;809*??=&quot;+ 809 * i); System.exit(0); &#125; &#125; &#125;&#125;【程序43】 题目：求0—7所能组成的奇数个数。暴力算法：public class Demo43 &#123; public static boolean isJiShu(int n) &#123; if (n % 2 != 0) &#123; return true; &#125; else &#123; return false; &#125; &#125; public static boolean fun(char c) &#123; if (c &gt;= &#x27;0&#x27; &amp;&amp; c &lt;= &#x27;7&#x27;) &#123; return true; &#125; else &#123; return false; &#125; &#125; public static void main(String[] args) &#123; int count = 0; String s; for (int i = 0; i &lt; 100000000; i++) &#123; s = &quot;&quot; + i; boolean flag = true; char[] c = s.toCharArray(); for (int j = 0; j &lt; c.length; j++) &#123; if (!fun(c[j])) &#123; flag = false; break; &#125; &#125; if (flag &amp;&amp; isJiShu(i)) &#123; count++; &#125; s = &quot;&quot;; &#125; System.out.println(&quot;共&quot; + count + &quot;个。&quot;); &#125;&#125;数学算法：public class Demo43 &#123; public static void main(String[] args) &#123; // 因为是奇数，所以个位只能是1，3，5，7共4种，前面可随便排列 int count = 4;// 个位的4种 // 2位时，十位有8种，个位4种，8×4 // 3位时，8×8×4…… for (int i = 1; i &lt; 8; i++) &#123; count = 8 * count; System.out.println(&quot;count:&quot; + count); &#125; &#125;&#125;个人算法：//组成1位数是4个。//组成2位数是7*4个。//组成3位数是7*8*4个。//组成4位数是7*8*8*4个。//......public class Demo43 &#123; public static void main (String[] args) &#123; int sum=4; int j; System.out.println(&quot;组成1位数是 &quot;+sum+&quot; 个&quot;); sum=sum*7; System.out.println(&quot;组成2位数是 &quot;+sum+&quot; 个&quot;); for(j=3;j&lt;=9;j++)&#123; sum=sum*8; System.out.println(&quot;组成&quot;+j+&quot;位数是 &quot;+sum+&quot; 个&quot;); &#125; &#125;&#125;【程序44】 题目：一个偶数总能表示为两个素数之和。（注：哥德巴赫猜想是想证明对任何大于6的自然数n之内的所有偶数可以表示为两个素数之和）public class Demo44 &#123; public static boolean isSuShu(int x) &#123; if (x == 0 || x == 1) &#123; return false; &#125; for (int i = 2; i &lt;= Math.sqrt(x); i++) &#123; if (x % i == 0) &#123; return false; &#125; &#125; return true; &#125; public static void main(String[] args) &#123; // 求了下100以内的情况 for (int i = 0; i &lt; 100; i = i + 2) &#123; for (int j = 0; j &lt;= (i + 1) / 2; j++) &#123; if (isSuShu(j) &amp;&amp; isSuShu(i - j)) &#123; System.out.println(i + &quot;=&quot; + j + &quot;+&quot; + (i - j)); &#125; &#125; &#125; &#125;&#125;或public class Demo44&#123; public static void main(String[] args)&#123; for (int i=6;i&lt;=100 ;i+=2 )&#123; for (int j=2;j&lt;100 ;j++ )&#123; if(!isPrime(j)||!isPrime(i-j)||j&gt;=i) continue; System.out.println(i+&quot;=&quot;+j+&quot;+&quot;+(i-j)); break; &#125; &#125; &#125; public static boolean isPrime(int n)&#123; for (int i=2;i&lt;n ;i++ )&#123; if(n%i==0)return false; &#125; return true; &#125;&#125;【程序45】 题目：（1）判断几个9能被一个素数整除。（2）判断一个整数能被几个9整除。（原题：一个素数能被几个9整除）（一）public class Demo45 &#123; public static boolean isSuShu(int x) &#123; if (x == 0 || x == 1) &#123; return false; &#125; for (int i = 2; i &lt;= Math.sqrt(x); i++) &#123; if (x % i == 0) &#123; return false; &#125; &#125; return true; &#125; public static void main(String[] args) &#123; int[] a = new int[100]; int n = 0; int num = 0; // 长度100的素数数组 while (n &lt; 100) &#123; if (isSuShu(num)) &#123; a[n] = num; n++; num++; &#125; else &#123; num++; &#125; &#125; /* for (int t : a) &#123; System.out.println(t); &#125;*/ String s = &quot;9&quot;; int index = 0; while (s.length() &lt; 9) &#123; if (new Integer(s).intValue() % a[index] == 0) &#123; System.out.println(s + &quot;%&quot; + a[index] + &quot;=0&quot;); if (index &lt; 100 - 1) &#123; index++; &#125; else &#123; index = 0; s = s + &quot;9&quot;; &#125; // System.exit(0); &#125; else &#123; if (index &lt; 100 - 1) &#123; index++; &#125; else &#123; index = 0; s = s + &quot;9&quot;; &#125; &#125; &#125; &#125;&#125;（二）import java.util.*; public class Demo45 &#123; public static void main (String[] args) &#123; Scanner in = new Scanner(System.in); System.out.print(&quot;请输入一个整数：&quot;); int num = in.nextInt(); int tmp = num; int count = 0; for(int i = 0 ; tmp%9 == 0 ;)&#123; tmp = tmp/9; count ++; &#125; System.out.println(num+&quot; 能够被 &quot;+count+&quot; 个9 整除。&quot;); &#125;&#125;【程序46】 题目：两个字符串连接程序。import java.util.Scanner;public class Demo46 &#123; public static void main(String[] args) &#123; Scanner in = new Scanner(System.in); System.out.println(&quot;输入第一个字符串：&quot;); String s1 = in.next(); System.out.println(&quot;输入第一个字符串：&quot;); String s2 = in.next(); System.out.println(&quot;连接后：\\n&quot; + s1 + s2); &#125;&#125;或import java.util.*;public class Demo46 &#123; public static void main(String[] args) &#123; Scanner in = new Scanner(System.in); System.out.print(&quot;请输入一个字符串：&quot;); String str1 = in.nextLine(); System.out.print(&quot;请再输入一个字符串：&quot;); String str2 = in.nextLine(); String str = str1+str2; System.out.println(&quot;连接后的字符串是：&quot;+str); &#125;&#125;【程序47】 题目：读取7个数（1—50）的整数值，每读取一个值，程序打印出该值个数的。import java.util.*;public class Demo47 &#123; public static void main(String[] args) &#123; Scanner s = new Scanner(System.in); int n=1,num; while(n&lt;=7)&#123; do&#123; System.out.print(&quot;请输入一个1--50 之间的整数：&quot;); num= s.nextInt(); &#125;while(num&lt;1||num&gt;50); for(int i=1;i&lt;=num;i++) &#123;System.out.print(&quot;*&quot;); &#125; System.out.println(); n ++; &#125; &#125; &#125;或import java.util.Scanner;public class Demo47 &#123; public static void print(int n) &#123; for (int i = 0; i &lt; n; i++) &#123; System.out.print(&quot;*&quot;); &#125; System.out.println(); &#125; public static void main(String[] args) &#123; Scanner in = new Scanner(System.in); for (int i = 0; i &lt; 7; i++) &#123; int temp = in.nextInt(); print(temp); &#125; &#125;&#125;【程序48】 题目：某个公司采用公用电话传递数据，数据是四位的整数，在传递过程中是加密的，加密规则如下：每位数字都加上5，然后用和除以10的余数代替该数字，再将第一位和第四位交换，第二位和第三位交换。import java.util.Scanner;public class Demo48&#123; public static void main(String[] args) &#123; Scanner in = new Scanner(System.in); System.out.println(&quot;请输入一个4位数字：&quot;); String str = in.next(); if (!((str).matches(&quot;\\\\d&#123;4&#125;&quot;))) &#123; System.out.println(&quot;输入的不是4位数字！&quot;); System.exit(0); &#125; char[] c = str.toCharArray(); int[] a = new int[4]; for (int i = 0; i &lt; a.length; i++) &#123; a[i] = ((int) (c[i] - &#x27;0&#x27;) + 5) % 10; &#125; int t; t = a[0]; a[0] = a[3]; a[3] = t; t = a[1]; a[1] = a[2]; a[2] = t; System.out.println(&quot;结果是：&quot; + a[0] + a[1] + a[2] + a[3]); &#125;&#125;或import java.util.*; public class Demo48 &#123; public static void main(String args[]) &#123; Scanner s = new Scanner(System.in); int num=0,temp; do&#123; System.out.print(&quot;请输入一个4位正整数：&quot;); num = s.nextInt(); &#125;while (num&lt;1000||num&gt;9999); int a[]=new int[4]; a[0] = num/1000; //取千位的数字 a[1] = (num/100)%10; //取百位的数字 a[2] = (num/10)%10; //取十位的数字 a[3] = num%10; //取个位的数字 for(int j=0;j&lt;4;j++) &#123; a[j]+=5; a[j]%=10; &#125; for(int j=0;j&lt;=1;j++) &#123; temp = a[j]; a[j] = a[3-j]; a[3-j] =temp; &#125; System.out.print(&quot;加密后的数字为：&quot;); for(int j=0;j&lt;4;j++) System.out.print(a[j]); &#125; &#125;【程序49】 题目：计算字符串中子串出现的次数。import java.util.Scanner;public class Demo49 &#123; public static void main(String[] args) &#123; Scanner in=new Scanner(System.in); System.out.println(&quot;请输入主串：&quot;); String str1 = in.nextLine(); System.out.println(&quot;请输入子串：&quot;); String str2 = in.nextLine(); // 生成子串长度的N个字符串数组 String[] sa = new String[str1.length() - str2.length() + 1]; for (int i = 0; i &lt; sa.length; i++) &#123; sa[i] = str1.substring(i, i + str2.length()); &#125; int sum = 0; // 子串与N个拆开的子串比对 for (int i = 0; i &lt; sa.length; i++) &#123; if (sa[i].equals(str2)) &#123; // 成功配对，计数器+1； sum++; // 因为不计算重叠的子串，所以跳过配对之后的部分拆分子串 i = i + str2.length(); &#125; &#125; System.out.println(&quot;主串中共包含&quot; + sum + &quot;个字串&quot;); &#125;&#125;【程序50】 题目：有五个学生，每个学生有3门课的成绩，从键盘输入以上数据（包括学生号，姓名，三门课成绩），计算出平均成绩，把原有的数据和计算出的平均分数存放在磁盘文import java.io.File;import java.io.FileWriter;import java.util.Scanner;class Student &#123; private int number = 0; private String name = &quot;&quot;; private double[] a = new double[3]; public double getAve() &#123; return (a[0] + a[1] + a[2]) / 3; &#125; public Student(int number, String name, double[] a) &#123; super(); this.number = number; this.name = name; this.a = a; &#125; @Override public String toString() &#123; return &quot;学号：&quot; + this.number + &quot;\\t姓名：&quot; + this.name + &quot;\\r\\n各科成绩：\\r\\n&quot; + a[0] + &quot;\\t&quot; + a[1] + &quot;\\t&quot; + a[2] + &quot;\\r\\n平均成绩：\\r\\n&quot; + this.getAve(); &#125;&#125;public class Demo50 &#123; public static Student input() &#123; Scanner s = new Scanner(System.in); System.out.println(&quot;请输入学号：&quot;); int num = s.nextInt(); System.out.println(&quot;请输入姓名：&quot;); String name = s.next(); System.out.println(&quot;请分别输入3门成绩：&quot;); double[] a = new double[3]; for (int i = 0; i &lt; 3; i++) &#123; a[i] = s.nextDouble(); &#125; return new Student(num, name, a); &#125; public static void main(String[] args) throws Exception &#123; Student[] st = new Student[2]; for (int i = 0; i &lt; st.length; i++) &#123; st[i] = input(); &#125; File f = new File(&quot;d:&quot; + File.separator + &quot;123.txt&quot;); FileWriter output = new FileWriter(f); for (int i = 0; i &lt; st.length; i++) &#123; output.write(st[i].toString() + &quot;\\r\\n&quot;); output.write(&quot;\\r\\n&quot;); &#125; output.close(); &#125;&#125;","categories":[],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"java_readFile","slug":"java/java_readFile","date":"2018-03-08T01:02:19.000Z","updated":"2021-09-22T11:19:04.626Z","comments":true,"path":"2018/03/08/java/java_readFile/","link":"","permalink":"http://example.com/2018/03/08/java/java_readFile/","excerpt":"","text":"readFile 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179public static void readFileByBytes(String fileName) &#123; File file = new File(fileName); InputStream in = null; try &#123; System.out.println(&quot;以字节为单位读取文件内容，一次读一个字节：&quot;); // 一次读一个字节 in = new FileInputStream(file); int tempbyte; while ((tempbyte = in.read()) != -1) &#123; System.out.write(tempbyte); &#125; in.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); return; &#125; try &#123; System.out.println(&quot;以字节为单位读取文件内容，一次读多个字节：&quot;); // 一次读多个字节 byte[] tempbytes = new byte[100]; int byteread = 0; in = new FileInputStream(fileName); ReadFromFile.showAvailableBytes(in); // 读入多个字节到字节数组中，byteread为一次读入的字节数 while ((byteread = in.read(tempbytes)) != -1) &#123; System.out.write(tempbytes, 0, byteread); &#125; &#125; catch (Exception e1) &#123; e1.printStackTrace(); &#125; finally &#123; if (in != null) &#123; try &#123; in.close(); &#125; catch (IOException e1) &#123; &#125; &#125; &#125; &#125; /** * 以字符为单位读取文件，常用于读文本，数字等类型的文件 */ public static void readFileByChars(String fileName) &#123; File file = new File(fileName); Reader reader = null; try &#123; System.out.println(&quot;以字符为单位读取文件内容，一次读一个字节：&quot;); // 一次读一个字符 reader = new InputStreamReader(new FileInputStream(file)); int tempchar; while ((tempchar = reader.read()) != -1) &#123; // 对于windows下，\\r\\n这两个字符在一起时，表示一个换行。 // 但如果这两个字符分开显示时，会换两次行。 // 因此，屏蔽掉\\r，或者屏蔽\\n。否则，将会多出很多空行。 if (((char) tempchar) != &#x27;\\r&#x27;) &#123; System.out.print((char) tempchar); &#125; &#125; reader.close(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; try &#123; System.out.println(&quot;以字符为单位读取文件内容，一次读多个字节：&quot;); // 一次读多个字符 char[] tempchars = new char[30]; int charread = 0; reader = new InputStreamReader(new FileInputStream(fileName)); // 读入多个字符到字符数组中，charread为一次读取字符数 while ((charread = reader.read(tempchars)) != -1) &#123; // 同样屏蔽掉\\r不显示 if ((charread == tempchars.length) &amp;&amp; (tempchars[tempchars.length - 1] != &#x27;\\r&#x27;)) &#123; System.out.print(tempchars); &#125; else &#123; for (int i = 0; i &lt; charread; i++) &#123; if (tempchars[i] == &#x27;\\r&#x27;) &#123; continue; &#125; else &#123; System.out.print(tempchars[i]); &#125; &#125; &#125; &#125; &#125; catch (Exception e1) &#123; e1.printStackTrace(); &#125; finally &#123; if (reader != null) &#123; try &#123; reader.close(); &#125; catch (IOException e1) &#123; &#125; &#125; &#125; &#125; /** * 以行为单位读取文件，常用于读面向行的格式化文件 */ public static void readFileByLines(String fileName) &#123; File file = new File(fileName); BufferedReader reader = null; try &#123; System.out.println(&quot;以行为单位读取文件内容，一次读一整行：&quot;); reader = new BufferedReader(new FileReader(file)); String tempString = null; int line = 1; // 一次读入一行，直到读入null为文件结束 while ((tempString = reader.readLine()) != null) &#123; // 显示行号 System.out.println(&quot;line &quot; + line + &quot;: &quot; + tempString); line++; &#125; reader.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; finally &#123; if (reader != null) &#123; try &#123; reader.close(); &#125; catch (IOException e1) &#123; &#125; &#125; &#125; &#125; /** * 随机读取文件内容 */ public static void readFileByRandomAccess(String fileName) &#123; RandomAccessFile randomFile = null; try &#123; System.out.println(&quot;随机读取一段文件内容：&quot;); // 打开一个随机访问文件流，按只读方式 randomFile = new RandomAccessFile(fileName, &quot;r&quot;); // 文件长度，字节数 long fileLength = randomFile.length(); // 读文件的起始位置 int beginIndex = (fileLength &gt; 4) ? 4 : 0; // 将读文件的开始位置移到beginIndex位置。 randomFile.seek(beginIndex); byte[] bytes = new byte[10]; int byteread = 0; // 一次读10个字节，如果文件内容不足10个字节，则读剩下的字节。 // 将一次读取的字节数赋给byteread while ((byteread = randomFile.read(bytes)) != -1) &#123; System.out.write(bytes, 0, byteread); &#125; &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; finally &#123; if (randomFile != null) &#123; try &#123; randomFile.close(); &#125; catch (IOException e1) &#123; &#125; &#125; &#125; &#125; /** * 显示输入流中还剩的字节数 */ private static void showAvailableBytes(InputStream in) &#123; try &#123; System.out.println(&quot;当前字节输入流中的字节数为:&quot; + in.available()); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; public static void main(String[] args) &#123; String fileName = &quot;C:/temp/newTemp.txt&quot;; ReadFromFile.readFileByBytes(fileName); ReadFromFile.readFileByChars(fileName); ReadFromFile.readFileByLines(fileName); ReadFromFile.readFileByRandomAccess(fileName); &#125;","categories":[],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"struts2","slug":"struts2","date":"2018-02-05T08:42:41.000Z","updated":"2021-09-22T11:19:04.648Z","comments":true,"path":"2018/02/05/struts2/","link":"","permalink":"http://example.com/2018/02/05/struts2/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"maven基本使用","slug":"maven基本使用","date":"2018-01-25T00:57:33.000Z","updated":"2021-09-22T11:19:04.635Z","comments":true,"path":"2018/01/25/maven基本使用/","link":"","permalink":"http://example.com/2018/01/25/maven%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/","excerpt":"","text":"maven 坐标 groupId:项目开发者的域名 artifactId:指定项目名 packaging:指定新项目打包类型 version：指定项目的版本 1234567pom.xml&lt;groupId&gt;org.fkjava&lt;/groupId&gt;&lt;artifactId&gt;mavenQs&lt;/artifactId&gt;&lt;packaging&gt;jar&lt;/packaging&gt;&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; maven 资源库 Maven资源库用于保存maven插件、各种第三方框架.Maven用到的插件、项目依赖的各种jar包，都保存在资源库中.","categories":[],"tags":[{"name":"util","slug":"util","permalink":"http://example.com/tags/util/"}]},{"title":"maven项目目录约定","slug":"maven项目目录约定","date":"2018-01-25T00:57:33.000Z","updated":"2021-09-22T11:19:04.635Z","comments":true,"path":"2018/01/25/maven项目目录约定/","link":"","permalink":"http://example.com/2018/01/25/maven%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95%E7%BA%A6%E5%AE%9A/","excerpt":"","text":"12345678910111213141516171819202122232425&lt;!-- maven项目目录约定： src/main/java:只能编译java代码 src/main/resources:编译配置文件 为了满足Mybatis接口开发规范：接口和映射文件必须在同一个目录 放行xml文件，让xml文件在src/main/java也能被编译 --&gt; &lt;build&gt; &lt;resources&gt; &lt;resource&gt; &lt;directory&gt;src/main/java&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;**/*.properties&lt;/include&gt; &lt;include&gt;**/*.xml&lt;/include&gt; &lt;/includes&gt; &lt;filtering&gt;false&lt;/filtering&gt; &lt;/resource&gt; &lt;resource&gt; &lt;directory&gt;src/main/resources&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;**/*.properties&lt;/include&gt; &lt;include&gt;**/*.xml&lt;/include&gt; &lt;/includes&gt; &lt;filtering&gt;false&lt;/filtering&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;/build&gt;","categories":[],"tags":[{"name":"util","slug":"util","permalink":"http://example.com/tags/util/"}]},{"title":"/与/*","slug":"与-区别","date":"2018-01-02T11:18:56.000Z","updated":"2021-09-22T11:19:04.650Z","comments":true,"path":"2018/01/02/与-区别/","link":"","permalink":"http://example.com/2018/01/02/%E4%B8%8E-%E5%8C%BA%E5%88%AB/","excerpt":"","text":"url-pattern / 与 /* &quot;/*&quot;可以匹配所有url，包括带扩展名的，一般只用在过滤器上 官方文档可知，它是tomcat的默认servlet，当其他的url-pattern匹配不上时都会走这个servlet。它除了能够处理静态资源还能够处理HTTP缓存请求，媒体（音频/视频）数据流和文件下载简历。所以如果我们的项目中配置了&quot;/&quot;，会覆盖掉tomcat中的default servlet 当springMVC的前端控制器配置为“/”时，需要在主配置文件中配置放行静态资源。 1234567第一种：&lt;!-- 放行静态资源 --&gt;&lt;mvc:resources location=&quot;/js/&quot; mapping=&quot;/js/**&quot;/&gt; &lt;mvc:resources location=&quot;/css/&quot; mapping=&quot;/js/**&quot;/&gt; &lt;mvc:resources location=&quot;/images/&quot; mapping=&quot;/js/**&quot;/&gt;第二种：&lt;mvc:default-servlet-handler /&gt;","categories":[],"tags":[]},{"title":"java_excel导出","slug":"java/java_excel导出","date":"2017-12-30T10:43:59.000Z","updated":"2021-09-22T11:19:04.625Z","comments":true,"path":"2017/12/30/java/java_excel导出/","link":"","permalink":"http://example.com/2017/12/30/java/java_excel%E5%AF%BC%E5%87%BA/","excerpt":"","text":"excel导出 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950request.setCharacterEncoding(&quot;utf-8&quot;); response.setContentType(&quot;application/vnd.ms-excel&quot;); response.addHeader(&quot;Content-Disposition&quot;, &quot;attachment;filename=logininfo.xls&quot;); String name = request.getParameter(&quot;name&quot;); String pwd =request.getParameter(&quot;pwd&quot;); String sex = request.getParameter(&quot;sex&quot;); String age = request.getParameter(&quot;age&quot;); String email = request.getParameter(&quot;email&quot;); ServletOutputStream out = response.getOutputStream(); //创建Excel表格 HSSFWorkbook book = new HSSFWorkbook(); //创建工作簿 HSSFSheet sheet = book.createSheet(&quot;用户信息&quot;); //设置列宽 sheet.setColumnWidth(4, 5000); //创建标题行 HSSFRow titleRow0 = sheet.createRow(0); titleRow0.createCell(0).setCellValue(&quot;用户信息表&quot;); sheet.addMergedRegion(new CellRangeAddress(0,0,0,4)); HSSFRow titleRow = sheet.createRow(1); //创建第一个单元格 HSSFCell titleCell1 = titleRow.createCell(0); titleCell1.setCellValue(&quot;姓名&quot;); HSSFCell titleCell2 = titleRow.createCell(1); titleCell2.setCellValue(&quot;密码&quot;); HSSFCell titleCell3 = titleRow.createCell(2); titleCell3.setCellValue(&quot;年龄&quot;); HSSFCell titleCell4 = titleRow.createCell(3); titleCell4.setCellValue(&quot;性别&quot;); HSSFCell titleCell5 = titleRow.createCell(4); titleCell5.setCellValue(&quot;Email&quot;); //创建第二行 HSSFRow valueRow = sheet.createRow(2); //第二行创建单元格 HSSFCell nameCell = valueRow.createCell(0); nameCell.setCellValue(name); HSSFCell nameCel2 = valueRow.createCell(1); nameCel2.setCellValue(pwd); HSSFCell nameCel3 = valueRow.createCell(2); nameCel3.setCellValue(age); HSSFCell nameCel4 = valueRow.createCell(3); nameCel4.setCellValue(sex); HSSFCell nameCel5 = valueRow.createCell(4); nameCel5.setCellValue(email);// HSSFCellStyle cellStyle = book.createCellStyle(); //响应流输入到Excel表格中 book.write(out); out.flush(); out.close(); 页面 1234567891011121314151617181920212223242526272829&lt;form action=&quot;ExportServlet&quot; method=&quot;post&quot;&gt; &lt;table align=&quot;center&quot;&gt; &lt;tr&gt; &lt;td&gt;用户名：&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;name&quot;/&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;密码：&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;password&quot; name=&quot;pwd&quot;/&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;性别：&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;sex&quot;/&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;年龄：&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;age&quot;/&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Email：&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;email&quot;/&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan=&quot;2&quot; align=&quot;center&quot;&gt; &lt;input type=&quot;submit&quot; value=&quot;导出到Excel&quot;/&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/form&gt;","categories":[],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"cookie存储信息","slug":"java/java_cookie存信息","date":"2017-12-23T03:06:06.000Z","updated":"2021-09-22T11:19:04.625Z","comments":true,"path":"2017/12/23/java/java_cookie存信息/","link":"","permalink":"http://example.com/2017/12/23/java/java_cookie%E5%AD%98%E4%BF%A1%E6%81%AF/","excerpt":"","text":"cookie 存信息 12345678910request.setCharacterEncoding(&quot;utf-8&quot;); String name = request.getParameter(&quot;name&quot;); name = java.net.URLEncoder.encode(&quot;utf-8&quot;); Cookie cookie = new Cookie(&quot;username&quot;, name); //设置过期时间，单位秒 cookie.setMaxAge(60); //保存到客户端cookie response.addCookie(cookie); request.getRequestDispatcher(&quot;succes.jsp&quot;).forward(request, response); 获取cookie 1234Cookie cookiearr[] = request.getcookies();for (Cookie cookie : cookiearr) &#123; &#125;","categories":[],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"java数组to字符串","slug":"java/java_数组2字符串","date":"2017-12-22T13:29:39.000Z","updated":"2021-09-22T11:19:04.628Z","comments":true,"path":"2017/12/22/java/java_数组2字符串/","link":"","permalink":"http://example.com/2017/12/22/java/java_%E6%95%B0%E7%BB%842%E5%AD%97%E7%AC%A6%E4%B8%B2/","excerpt":"","text":"array2string 123456789101112public static void main(String[] args) &#123; int[] arr = &#123;1,2,3,4,5&#125;; String str = &quot;&quot;; for (int i = 0; i &lt; arr.length; i++) &#123; str+=String.valueOf(arr[i]); if(i&lt;arr.length-1) &#123; str+=&quot;,&quot;; &#125; &#125; System.out.println(str); &#125; 整型转化为字符串 String.valueOf() integer.toString() integer.valueOf().toString() 字符串转化整型 integer.valueOf() integer.parseInt()","categories":[],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"interface","slug":"java/java_interface","date":"2017-12-16T12:15:07.000Z","updated":"2021-09-22T11:19:04.626Z","comments":true,"path":"2017/12/16/java/java_interface/","link":"","permalink":"http://example.com/2017/12/16/java/java_interface/","excerpt":"","text":"interface 接口（interface）抽象方法和常量值定义的集合. 本质：特殊的抽象类——只包含常量和方法的定义,没有变量和方法的实现. 接口的属性（成员变量） 声明成“public static final 类型 属性名”，默认也是声明成“public static final”即里面的成员变量都是公共的、静态的，不能改变的. 接口方法 在接口里面的声明的方法都是抽象方法，因此在接口里面的抽象方法都会把abstract关键字省略掉，因为默认声明的方法都是抽象的，所以就没有必要再写“abstract”字了，这一点与在抽象类里面声明抽象方法时有所区别，在抽象类里面声明抽象方法是一定要使用“abstract”关键字的，而在接口里面声明抽象方法可以省略掉“abstract”. 在接口里面声明的抽象方法默认是“public(公共的)”的 接口特点： 可以实现多继承. 默认属性为public static final，也只能是public static final. 只能定义抽象方法,默认为public的. 接口可以继承其它接口,添加新的属性和抽象方法. 12345interface Singer &#123; public void sing(); public void sleep(); &#125; 接口和接口之间可以相互继承，类和类之间可以相互继承，类和接口之间，只能是类来实现接口.","categories":[],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"TreeMap","slug":"java/java_TreeMap","date":"2017-12-10T02:40:03.000Z","updated":"2021-09-22T11:19:04.625Z","comments":true,"path":"2017/12/10/java/java_TreeMap/","link":"","permalink":"http://example.com/2017/12/10/java/java_TreeMap/","excerpt":"","text":"TreeMap 1234567891011121314151617181920212223 TreeMap&lt;String, Object&gt; treeMap = new TreeMap&lt;&gt;(); treeMap.put(&quot;1&quot;, &quot;a&quot;); treeMap.put(&quot;3&quot;, &quot;b&quot;); treeMap.put(&quot;2&quot;, &quot;c&quot;); treeMap.put(&quot;5&quot;, &quot;d&quot;); treeMap.put(&quot;4&quot;, &quot;e&quot;); Set keySet = treeMap.keySet(); Iterator it = keySet.iterator(); while(it.hasNext()) &#123; Object key = it.next(); Object value = treeMap.get(key); System.out.println(key+&quot;:&quot;+value); &#125; 輸出：1:a2:c3:b4:e5:d EntrySet迭代 123456789101112131415161718192021222324TreeMap&lt;String, Object&gt; treeMap = new TreeMap&lt;&gt;(); treeMap.put(&quot;1&quot;, &quot;a&quot;); treeMap.put(&quot;3&quot;, &quot;b&quot;); treeMap.put(&quot;2&quot;, &quot;c&quot;); treeMap.put(&quot;5&quot;, &quot;d&quot;); treeMap.put(&quot;4&quot;, &quot;e&quot;); Set&lt;Entry&lt;String,Object&gt;&gt; entrySet = treeMap.entrySet(); Iterator&lt;Entry&lt;String, Object&gt;&gt; iterator = entrySet.iterator(); while(iterator.hasNext()) &#123; Map.Entry&lt;String, Object&gt; entry = iterator.next(); String key = entry.getKey(); Object value = entry.getValue(); System.out.println(key+&quot; : &quot;+value); &#125; 输出：1 : a2 : c3 : b4 : e5 : d","categories":[],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"map遍历","slug":"java/java_map遍历","date":"2017-12-09T12:32:24.000Z","updated":"2021-09-22T11:19:04.626Z","comments":true,"path":"2017/12/09/java/java_map遍历/","link":"","permalink":"http://example.com/2017/12/09/java/java_map%E9%81%8D%E5%8E%86/","excerpt":"","text":"map遍历 HashMap 存储键值映射关系,不能出现重复的键,可以允许键值为null, 通过put、get存取元素,如果有键形同则覆盖其值, 通过keySet迭代 1234567891011121314151617181920Map&lt;String, Object&gt; map = new HashMap&lt;&gt;(); map.put(&quot;1&quot;, &quot;a&quot;); map.put(&quot;2&quot;, &quot;b&quot;); map.put(&quot;3&quot;, &quot;c&quot;); map.put(&quot;3&quot;, &quot;d&quot;); Set keySet = map.keySet(); Iterator it = keySet.iterator(); while(it.hasNext()) &#123; Object obj = it.next(); Object value = map.get(obj); System.out.println(obj+&quot; : &quot;+value); &#125; 输出：1 : a2 : b3 : d 通过entrySet迭代 12345678910111213141516171819202122232425Map&lt;String, Object&gt; map = new HashMap&lt;&gt;(); map.put(&quot;1&quot;, &quot;a&quot;); map.put(&quot;2&quot;, &quot;b&quot;); map.put(&quot;3&quot;, &quot;c&quot;); map.put(&quot;3&quot;, &quot;d&quot;); //获得所有键放入set集合中 Set&lt;Entry&lt;String,Object&gt;&gt; entrySet = map.entrySet(); //通过迭代器取出map中的键值关系，迭代器接收的泛型参数和Set接收的一致 Iterator&lt;Entry&lt;String, Object&gt;&gt; iterator = entrySet.iterator(); while(iterator.hasNext()) &#123; //将键值取出放入map.entry接口中 Map.Entry&lt;String, Object&gt; mapEntry = iterator.next(); String key = mapEntry.getKey(); Object value = mapEntry.getValue(); System.out.println(key+&quot;:&quot;+value); &#125; 输出：1:a2:b3:d TreeMap 存储原理类似TreeSet, 按照某种顺序排列","categories":[],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"thread","slug":"java/java_thread","date":"2017-12-07T14:15:07.000Z","updated":"2021-09-22T11:19:04.626Z","comments":true,"path":"2017/12/07/java/java_thread/","link":"","permalink":"http://example.com/2017/12/07/java/java_thread/","excerpt":"","text":"thread 1234567891011121314151617181920class threads extends Thread&#123; private int count = 99; public void run() &#123; while(true)&#123; if(count&gt;0) &#123; Thread th = Thread.currentThread(); //取得当前线程 String th_name = th.getName(); // 获得线程的名称 System.out.println(th_name+&quot; &quot;+count--); &#125; &#125; &#125;&#125;public static void main(String[] args) &#123; threads th = new threads(); new Thread(th,&quot;第一人&quot;).start(); //开启线程 命名为 new Thread(th,&quot;第二人&quot;).start(); //开启线程 命名为 new Thread(th,&quot;第三人&quot;).start(); //开启线程 命名为 &#125; 线程状态 新建、就绪、阻塞、运行、死亡 阻塞状态：调用join()方法或者sleep()方法,join()中断sleep()完成就会回到就绪状态、 调用wait()方法、线程处于等待状态,notify()或者notifyAll()方法唤醒,进入就绪状态、 yield()方法：线程让步、不会使线程进入阻塞状态、转换到就绪状态,让调度器重新调度一次、 Thread 相关方法 1234567//当前线程可转让cpu控制权，让别的就绪状态线程运行（切换）public static Thread.yield() //暂停一段时间public static Thread.sleep() //在一个线程中调用other.join(),将等待other执行完后才继续本线程。 public join()","categories":[],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"日期计算（一年中第几天）","slug":"algorithm_日期(一年第几天)","date":"2017-12-06T14:43:43.000Z","updated":"2021-09-22T11:19:04.611Z","comments":true,"path":"2017/12/06/algorithm_日期(一年第几天)/","link":"","permalink":"http://example.com/2017/12/06/algorithm_%E6%97%A5%E6%9C%9F(%E4%B8%80%E5%B9%B4%E7%AC%AC%E5%87%A0%E5%A4%A9)/","excerpt":"","text":"日期计算为一年中第几天 12345678910111213141516171819202122232425262728293031323334353637383940414243class dayCount &#123; public static void main(String[] args) &#123; String str = &quot;20171231&quot;; int year = Integer.parseInt(str.substring(0, 4)); int month = Integer.parseInt(str.substring(4, 6)); int day = Integer.parseInt(str.substring(6, 8)); total(year,month,day); &#125; public static void total(int year,int month,int day) &#123; // 判断是否为闰年 int count = 0; if (year % 4 == 0 &amp;&amp; year % 100 != 0 || year % 400 == 0) &#123; for (int i = 0; i &lt; month; i++) &#123; if (i == 1 || i == 3 || i == 5 || i == 7 || i == 8 || i == 10 || i == 12) &#123; count += 31; &#125; if (i == 2) &#123; count += 29; &#125; if (i == 4 || i == 6 || i == 9 || i == 11) &#123; count += 30; &#125; &#125; count += day; &#125; else &#123; for (int i = 0; i &lt; month; i++) &#123; if (i == 1 || i == 3 || i == 5 || i == 7 || i == 8 || i == 10 || i == 12) &#123; count += 31; &#125; if (i == 2) &#123; count += 28; &#125; if (i == 4 || i == 6 || i == 9 || i == 11) &#123; count += 30; &#125; &#125; count += day; &#125; System.out.println(count); &#125;&#125;","categories":[],"tags":[{"name":"algorithm","slug":"algorithm","permalink":"http://example.com/tags/algorithm/"}]},{"title":"字符串各字符的个数","slug":"algorithm_字符串个字符个数","date":"2017-12-06T13:35:00.000Z","updated":"2021-09-22T11:19:04.611Z","comments":true,"path":"2017/12/06/algorithm_字符串个字符个数/","link":"","permalink":"http://example.com/2017/12/06/algorithm_%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%AA%E6%95%B0/","excerpt":"","text":"统计字符串各字符的个数 123456789101112 String str = &quot; sdfadsfadfasf&quot;;char[] arr = str.toCharArray();Map&lt;Character, Integer&gt; map = new HashMap&lt;Character, Integer&gt;();for (int i = 0; i &lt; arr.length; i++) &#123; if(!map.containsKey(arr[i])) &#123; map.put(arr[i], 1); &#125;else &#123; int count = map.get(arr[i])+1; map.put(arr[i], count); &#125;&#125;System.out.println(map); js 函数json 1234567891011121314&lt;script type=&quot;text/javascript&quot;&gt; var arr = [&quot;a&quot;,&quot;a&quot;,&quot;a&quot;,&quot;a&quot;,&quot;b&quot;,&quot;b&quot;]; var json = &#123;&#125;; for(var i = 0 ;i&lt;arr.length;i++)&#123; if(json[arr[i]])&#123; json[arr[i]] +=1; &#125;else&#123; json[arr[i]] =1; &#125; &#125; console.log(json);&lt;/script&gt;","categories":[],"tags":[{"name":"algorithm","slug":"algorithm","permalink":"http://example.com/tags/algorithm/"}]},{"title":"单例","slug":"java/java_单例","date":"2017-12-06T12:46:39.000Z","updated":"2021-09-22T11:19:04.627Z","comments":true,"path":"2017/12/06/java/java_单例/","link":"","permalink":"http://example.com/2017/12/06/java/java_%E5%8D%95%E4%BE%8B/","excerpt":"","text":"：单例 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455// 懒汉式public class Singleton &#123; private static Singleton instance; private Singleton ()&#123;&#125; public static Singleton getInstance() &#123; if (instance == null) &#123; instance = new Singleton(); &#125; return instance; &#125; &#125;public class Singleton &#123; private static Singleton instance; private Singleton ()&#123;&#125; public static synchronized Singleton getInstance() &#123; if (instance == null) &#123; instance = new Singleton(); &#125; return instance; &#125; &#125;// 饿汉式public class Singleton &#123; private static Singleton instance = new Singleton(); private Singleton ()&#123;&#125; public static Singleton getInstance() &#123; return instance; &#125; &#125;// 双检锁/双重校验锁（DCL，double-checked locking）public class Singleton &#123; private volatile static Singleton singleton; private Singleton ()&#123;&#125; public static Singleton getSingleton() &#123; if (singleton == null) &#123; synchronized (Singleton.class) &#123; if (singleton == null) &#123; singleton = new Singleton(); &#125; &#125; &#125; return singleton; &#125; &#125;","categories":[],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"诗","slug":"诗","date":"2017-12-04T07:19:39.000Z","updated":"2021-09-22T11:19:04.656Z","comments":true,"path":"2017/12/04/诗/","link":"","permalink":"http://example.com/2017/12/04/%E8%AF%97/","excerpt":"","text":"朝辞白帝彩云间 千里江陵一日还 两岸猿声啼不住 轻舟已过万重山","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2017-12-02T13:01:24.000Z","updated":"2021-09-23T03:24:47.480Z","comments":true,"path":"2017/12/02/hello-world/","link":"","permalink":"http://example.com/2017/12/02/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post 1$ hexo new &quot;My New Post&quot; More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment","categories":[{"name":"云服务器","slug":"云服务器","permalink":"http://example.com/categories/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"}],"tags":[{"name":"centOS","slug":"centOS","permalink":"http://example.com/tags/centOS/"},{"name":"tomcat","slug":"tomcat","permalink":"http://example.com/tags/tomcat/"}]}],"categories":[{"name":"云服务器","slug":"云服务器","permalink":"http://example.com/categories/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://example.com/tags/linux/"},{"name":"go","slug":"go","permalink":"http://example.com/tags/go/"},{"name":"python","slug":"python","permalink":"http://example.com/tags/python/"},{"name":"Git","slug":"Git","permalink":"http://example.com/tags/Git/"},{"name":"pytest","slug":"pytest","permalink":"http://example.com/tags/pytest/"},{"name":"algorithm","slug":"algorithm","permalink":"http://example.com/tags/algorithm/"},{"name":"mysql","slug":"mysql","permalink":"http://example.com/tags/mysql/"},{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"},{"name":"消息队列","slug":"消息队列","permalink":"http://example.com/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"http://example.com/tags/elasticsearch/"},{"name":"我的世界","slug":"我的世界","permalink":"http://example.com/tags/%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8C/"},{"name":"Http","slug":"Http","permalink":"http://example.com/tags/Http/"},{"name":"springboot","slug":"springboot","permalink":"http://example.com/tags/springboot/"},{"name":"vue","slug":"vue","permalink":"http://example.com/tags/vue/"},{"name":"docker","slug":"docker","permalink":"http://example.com/tags/docker/"},{"name":"jvm","slug":"jvm","permalink":"http://example.com/tags/jvm/"},{"name":"wechat","slug":"wechat","permalink":"http://example.com/tags/wechat/"},{"name":"util","slug":"util","permalink":"http://example.com/tags/util/"},{"name":"ali/weixin pay","slug":"ali-weixin-pay","permalink":"http://example.com/tags/ali-weixin-pay/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"线程","slug":"线程","permalink":"http://example.com/tags/%E7%BA%BF%E7%A8%8B/"},{"name":"Design Patterns","slug":"Design-Patterns","permalink":"http://example.com/tags/Design-Patterns/"},{"name":"php","slug":"php","permalink":"http://example.com/tags/php/"},{"name":"idea","slug":"idea","permalink":"http://example.com/tags/idea/"},{"name":"logstash","slug":"logstash","permalink":"http://example.com/tags/logstash/"},{"name":"Sort","slug":"Sort","permalink":"http://example.com/tags/Sort/"},{"name":"Html","slug":"Html","permalink":"http://example.com/tags/Html/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://example.com/tags/JavaScript/"},{"name":"centOS","slug":"centOS","permalink":"http://example.com/tags/centOS/"},{"name":"tomcat","slug":"tomcat","permalink":"http://example.com/tags/tomcat/"}]}